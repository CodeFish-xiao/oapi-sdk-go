// Package dispatcher code generated by oapi sdk gen
package dispatcher

import (
	"context"
	"github.com/feishu/oapi-sdk-go/service/edu/v1"
)

func (dispatcher *EventReqDispatcher) CampusCreatedV1(handler func(ctx context.Context, event *edu.CampusCreatedEvent) error) *EventReqDispatcher {
	dispatcher.eventType2EventHandler["edu.campus.created_v1"] = edu.NewCampusCreatedEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventReqDispatcher) CampusDeletedV1(handler func(ctx context.Context, event *edu.CampusDeletedEvent) error) *EventReqDispatcher {
	dispatcher.eventType2EventHandler["edu.campus.deleted_v1"] = edu.NewCampusDeletedEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventReqDispatcher) CampusUpdatedV1(handler func(ctx context.Context, event *edu.CampusUpdatedEvent) error) *EventReqDispatcher {
	dispatcher.eventType2EventHandler["edu.campus.updated_v1"] = edu.NewCampusUpdatedEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventReqDispatcher) ClassCreatedV1(handler func(ctx context.Context, event *edu.ClassCreatedEvent) error) *EventReqDispatcher {
	dispatcher.eventType2EventHandler["edu.class.created_v1"] = edu.NewClassCreatedEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventReqDispatcher) ClassDeletedV1(handler func(ctx context.Context, event *edu.ClassDeletedEvent) error) *EventReqDispatcher {
	dispatcher.eventType2EventHandler["edu.class.deleted_v1"] = edu.NewClassDeletedEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventReqDispatcher) ClassUpdatedV1(handler func(ctx context.Context, event *edu.ClassUpdatedEvent) error) *EventReqDispatcher {
	dispatcher.eventType2EventHandler["edu.class.updated_v1"] = edu.NewClassUpdatedEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventReqDispatcher) GradeCreatedV1(handler func(ctx context.Context, event *edu.GradeCreatedEvent) error) *EventReqDispatcher {
	dispatcher.eventType2EventHandler["edu.grade.created_v1"] = edu.NewGradeCreatedEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventReqDispatcher) GradeDeletedV1(handler func(ctx context.Context, event *edu.GradeDeletedEvent) error) *EventReqDispatcher {
	dispatcher.eventType2EventHandler["edu.grade.deleted_v1"] = edu.NewGradeDeletedEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventReqDispatcher) GradeUpdatedV1(handler func(ctx context.Context, event *edu.GradeUpdatedEvent) error) *EventReqDispatcher {
	dispatcher.eventType2EventHandler["edu.grade.updated_v1"] = edu.NewGradeUpdatedEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventReqDispatcher) HomeSchoolChatCreatedV1(handler func(ctx context.Context, event *edu.HomeSchoolChatCreatedEvent) error) *EventReqDispatcher {
	dispatcher.eventType2EventHandler["edu.home_school_chat.created_v1"] = edu.NewHomeSchoolChatCreatedEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventReqDispatcher) HomeSchoolChatDeletedV1(handler func(ctx context.Context, event *edu.HomeSchoolChatDeletedEvent) error) *EventReqDispatcher {
	dispatcher.eventType2EventHandler["edu.home_school_chat.deleted_v1"] = edu.NewHomeSchoolChatDeletedEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventReqDispatcher) ParentActivatedV1(handler func(ctx context.Context, event *edu.ParentActivatedEvent) error) *EventReqDispatcher {
	dispatcher.eventType2EventHandler["edu.parent.activated_v1"] = edu.NewParentActivatedEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventReqDispatcher) ParentUpdatedV1(handler func(ctx context.Context, event *edu.ParentUpdatedEvent) error) *EventReqDispatcher {
	dispatcher.eventType2EventHandler["edu.parent.updated_v1"] = edu.NewParentUpdatedEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventReqDispatcher) PeriodCreatedV1(handler func(ctx context.Context, event *edu.PeriodCreatedEvent) error) *EventReqDispatcher {
	dispatcher.eventType2EventHandler["edu.period.created_v1"] = edu.NewPeriodCreatedEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventReqDispatcher) PeriodDeletedV1(handler func(ctx context.Context, event *edu.PeriodDeletedEvent) error) *EventReqDispatcher {
	dispatcher.eventType2EventHandler["edu.period.deleted_v1"] = edu.NewPeriodDeletedEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventReqDispatcher) PeriodUpdatedV1(handler func(ctx context.Context, event *edu.PeriodUpdatedEvent) error) *EventReqDispatcher {
	dispatcher.eventType2EventHandler["edu.period.updated_v1"] = edu.NewPeriodUpdatedEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventReqDispatcher) StudentCreatedV1(handler func(ctx context.Context, event *edu.StudentCreatedEvent) error) *EventReqDispatcher {
	dispatcher.eventType2EventHandler["edu.student.created_v1"] = edu.NewStudentCreatedEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventReqDispatcher) StudentDeletedV1(handler func(ctx context.Context, event *edu.StudentDeletedEvent) error) *EventReqDispatcher {
	dispatcher.eventType2EventHandler["edu.student.deleted_v1"] = edu.NewStudentDeletedEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventReqDispatcher) StudentParentChangedV1(handler func(ctx context.Context, event *edu.StudentParentChangedEvent) error) *EventReqDispatcher {
	dispatcher.eventType2EventHandler["edu.student.parent_changed_v1"] = edu.NewStudentParentChangedEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventReqDispatcher) StudentTransferedV1(handler func(ctx context.Context, event *edu.StudentTransferedEvent) error) *EventReqDispatcher {
	dispatcher.eventType2EventHandler["edu.student.transfered_v1"] = edu.NewStudentTransferedEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventReqDispatcher) StudentUpdatedV1(handler func(ctx context.Context, event *edu.StudentUpdatedEvent) error) *EventReqDispatcher {
	dispatcher.eventType2EventHandler["edu.student.updated_v1"] = edu.NewStudentUpdatedEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventReqDispatcher) SubjectCreatedV1(handler func(ctx context.Context, event *edu.SubjectCreatedEvent) error) *EventReqDispatcher {
	dispatcher.eventType2EventHandler["edu.subject.created_v1"] = edu.NewSubjectCreatedEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventReqDispatcher) SubjectDeletedV1(handler func(ctx context.Context, event *edu.SubjectDeletedEvent) error) *EventReqDispatcher {
	dispatcher.eventType2EventHandler["edu.subject.deleted_v1"] = edu.NewSubjectDeletedEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventReqDispatcher) TeacherRoleChangedV1(handler func(ctx context.Context, event *edu.TeacherRoleChangedEvent) error) *EventReqDispatcher {
	dispatcher.eventType2EventHandler["edu.teacher.role_changed_v1"] = edu.NewTeacherRoleChangedEventHandler(handler)
	return dispatcher
}
