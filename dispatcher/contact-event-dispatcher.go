// Package dispatcher code generated by oapi sdk gen
package dispatcher

import (
	"context"
	"github.com/feishu/oapi-sdk-go/service/contact/v3"
)
func ( dispatcher * EventReqDispatcher ) CustomAttrEventUpdatedV3(handler func(ctx context.Context, event *contact.CustomAttrEventUpdatedEvent) error) * EventReqDispatcher{
	dispatcher.eventType2EventHandler["contact.custom_attr_event.updated_v3"] = contact.NewCustomAttrEventUpdatedEventHandler(handler)
	return dispatcher
}
func ( dispatcher * EventReqDispatcher ) DepartmentCreatedV3(handler func(ctx context.Context, event *contact.DepartmentCreatedEvent) error) * EventReqDispatcher{
	dispatcher.eventType2EventHandler["contact.department.created_v3"] = contact.NewDepartmentCreatedEventHandler(handler)
	return dispatcher
}
func ( dispatcher * EventReqDispatcher ) DepartmentDeletedV3(handler func(ctx context.Context, event *contact.DepartmentDeletedEvent) error) * EventReqDispatcher{
	dispatcher.eventType2EventHandler["contact.department.deleted_v3"] = contact.NewDepartmentDeletedEventHandler(handler)
	return dispatcher
}
func ( dispatcher * EventReqDispatcher ) DepartmentUpdatedV3(handler func(ctx context.Context, event *contact.DepartmentUpdatedEvent) error) * EventReqDispatcher{
	dispatcher.eventType2EventHandler["contact.department.updated_v3"] = contact.NewDepartmentUpdatedEventHandler(handler)
	return dispatcher
}
func ( dispatcher * EventReqDispatcher ) EmployeeTypeEnumActivedV3(handler func(ctx context.Context, event *contact.EmployeeTypeEnumActivedEvent) error) * EventReqDispatcher{
	dispatcher.eventType2EventHandler["contact.employee_type_enum.actived_v3"] = contact.NewEmployeeTypeEnumActivedEventHandler(handler)
	return dispatcher
}
func ( dispatcher * EventReqDispatcher ) EmployeeTypeEnumCreatedV3(handler func(ctx context.Context, event *contact.EmployeeTypeEnumCreatedEvent) error) * EventReqDispatcher{
	dispatcher.eventType2EventHandler["contact.employee_type_enum.created_v3"] = contact.NewEmployeeTypeEnumCreatedEventHandler(handler)
	return dispatcher
}
func ( dispatcher * EventReqDispatcher ) EmployeeTypeEnumDeactivatedV3(handler func(ctx context.Context, event *contact.EmployeeTypeEnumDeactivatedEvent) error) * EventReqDispatcher{
	dispatcher.eventType2EventHandler["contact.employee_type_enum.deactivated_v3"] = contact.NewEmployeeTypeEnumDeactivatedEventHandler(handler)
	return dispatcher
}
func ( dispatcher * EventReqDispatcher ) EmployeeTypeEnumDeletedV3(handler func(ctx context.Context, event *contact.EmployeeTypeEnumDeletedEvent) error) * EventReqDispatcher{
	dispatcher.eventType2EventHandler["contact.employee_type_enum.deleted_v3"] = contact.NewEmployeeTypeEnumDeletedEventHandler(handler)
	return dispatcher
}
func ( dispatcher * EventReqDispatcher ) EmployeeTypeEnumUpdatedV3(handler func(ctx context.Context, event *contact.EmployeeTypeEnumUpdatedEvent) error) * EventReqDispatcher{
	dispatcher.eventType2EventHandler["contact.employee_type_enum.updated_v3"] = contact.NewEmployeeTypeEnumUpdatedEventHandler(handler)
	return dispatcher
}
func ( dispatcher * EventReqDispatcher ) ScopeUpdatedV3(handler func(ctx context.Context, event *contact.ScopeUpdatedEvent) error) * EventReqDispatcher{
	dispatcher.eventType2EventHandler["contact.scope.updated_v3"] = contact.NewScopeUpdatedEventHandler(handler)
	return dispatcher
}
func ( dispatcher * EventReqDispatcher ) UserCreatedV3(handler func(ctx context.Context, event *contact.UserCreatedEvent) error) * EventReqDispatcher{
	dispatcher.eventType2EventHandler["contact.user.created_v3"] = contact.NewUserCreatedEventHandler(handler)
	return dispatcher
}
func ( dispatcher * EventReqDispatcher ) UserDeletedV3(handler func(ctx context.Context, event *contact.UserDeletedEvent) error) * EventReqDispatcher{
	dispatcher.eventType2EventHandler["contact.user.deleted_v3"] = contact.NewUserDeletedEventHandler(handler)
	return dispatcher
}
func ( dispatcher * EventReqDispatcher ) UserUpdatedV3(handler func(ctx context.Context, event *contact.UserUpdatedEvent) error) * EventReqDispatcher{
	dispatcher.eventType2EventHandler["contact.user.updated_v3"] = contact.NewUserUpdatedEventHandler(handler)
	return dispatcher
}
func ( dispatcher * EventReqDispatcher ) UserGroupCreatedV3(handler func(ctx context.Context, event *contact.UserGroupCreatedEvent) error) * EventReqDispatcher{
	dispatcher.eventType2EventHandler["contact.user_group.created_v3"] = contact.NewUserGroupCreatedEventHandler(handler)
	return dispatcher
}
func ( dispatcher * EventReqDispatcher ) UserGroupDeletedV3(handler func(ctx context.Context, event *contact.UserGroupDeletedEvent) error) * EventReqDispatcher{
	dispatcher.eventType2EventHandler["contact.user_group.deleted_v3"] = contact.NewUserGroupDeletedEventHandler(handler)
	return dispatcher
}
func ( dispatcher * EventReqDispatcher ) UserGroupMemberChangedV3(handler func(ctx context.Context, event *contact.UserGroupMemberChangedEvent) error) * EventReqDispatcher{
	dispatcher.eventType2EventHandler["contact.user_group.member.changed_v3"] = contact.NewUserGroupMemberChangedEventHandler(handler)
	return dispatcher
}
func ( dispatcher * EventReqDispatcher ) UserGroupUpdatedV3(handler func(ctx context.Context, event *contact.UserGroupUpdatedEvent) error) * EventReqDispatcher{
	dispatcher.eventType2EventHandler["contact.user_group.updated_v3"] = contact.NewUserGroupUpdatedEventHandler(handler)
	return dispatcher
}