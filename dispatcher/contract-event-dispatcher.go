// Package dispatcher code generated by oapi sdk gen
package dispatcher

import (
	"context"
	"github.com/feishu/oapi-sdk-go/service/contract/v1"
)

func (dispatcher *EventReqDispatcher) ContractChangeV1(handler func(ctx context.Context, event *contract.ContractChangeEvent) error) *EventReqDispatcher {
	dispatcher.eventType2EventHandler["contract.contract.change_v1"] = contract.NewContractChangeEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventReqDispatcher) ContractInfoChangeV1(handler func(ctx context.Context, event *contract.ContractInfoChangeEvent) error) *EventReqDispatcher {
	dispatcher.eventType2EventHandler["contract.contract.info_change_v1"] = contract.NewContractInfoChangeEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventReqDispatcher) ContractPaymentCreateV1(handler func(ctx context.Context, event *contract.ContractPaymentCreateEvent) error) *EventReqDispatcher {
	dispatcher.eventType2EventHandler["contract.contract.payment.create_v1"] = contract.NewContractPaymentCreateEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventReqDispatcher) LegalEntityChangeV1(handler func(ctx context.Context, event *contract.LegalEntityChangeEvent) error) *EventReqDispatcher {
	dispatcher.eventType2EventHandler["contract.legal_entity.change_v1"] = contract.NewLegalEntityChangeEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventReqDispatcher) ProcessInstanceNoticeChangeV1(handler func(ctx context.Context, event *contract.ProcessInstanceNoticeChangeEvent) error) *EventReqDispatcher {
	dispatcher.eventType2EventHandler["contract.process_instance.notice_change_v1"] = contract.NewProcessInstanceNoticeChangeEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventReqDispatcher) ProcessInstanceTaskChangeV1(handler func(ctx context.Context, event *contract.ProcessInstanceTaskChangeEvent) error) *EventReqDispatcher {
	dispatcher.eventType2EventHandler["contract.process_instance.task_change_v1"] = contract.NewProcessInstanceTaskChangeEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventReqDispatcher) VendorChangeV1(handler func(ctx context.Context, event *contract.VendorChangeEvent) error) *EventReqDispatcher {
	dispatcher.eventType2EventHandler["contract.vendor.change_v1"] = contract.NewVendorChangeEventHandler(handler)
	return dispatcher
}
