// Package dispatcher code generated by oapi sdk gen
package dispatcher

import (
	"context"
	"github.com/larksuite/oapi-sdk-go/service/contact/v3"
)

func (dispatcher *EventDispatcher) OnCustomAttrEventUpdatedV3(handler func(ctx context.Context, event *larkcontact.CustomAttrEventUpdatedEvent) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["contact.custom_attr_event.updated_v3"]
	if existed {
		panic("event: multiple handler registrations for " + "contact.custom_attr_event.updated_v3")
	}
	dispatcher.eventType2EventHandler["contact.custom_attr_event.updated_v3"] = larkcontact.NewCustomAttrEventUpdatedEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventDispatcher) OnDepartmentCreatedV3(handler func(ctx context.Context, event *larkcontact.DepartmentCreatedEvent) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["contact.department.created_v3"]
	if existed {
		panic("event: multiple handler registrations for " + "contact.department.created_v3")
	}
	dispatcher.eventType2EventHandler["contact.department.created_v3"] = larkcontact.NewDepartmentCreatedEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventDispatcher) OnDepartmentDeletedV3(handler func(ctx context.Context, event *larkcontact.DepartmentDeletedEvent) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["contact.department.deleted_v3"]
	if existed {
		panic("event: multiple handler registrations for " + "contact.department.deleted_v3")
	}
	dispatcher.eventType2EventHandler["contact.department.deleted_v3"] = larkcontact.NewDepartmentDeletedEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventDispatcher) OnDepartmentUpdatedV3(handler func(ctx context.Context, event *larkcontact.DepartmentUpdatedEvent) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["contact.department.updated_v3"]
	if existed {
		panic("event: multiple handler registrations for " + "contact.department.updated_v3")
	}
	dispatcher.eventType2EventHandler["contact.department.updated_v3"] = larkcontact.NewDepartmentUpdatedEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventDispatcher) OnEmployeeTypeEnumActivedV3(handler func(ctx context.Context, event *larkcontact.EmployeeTypeEnumActivedEvent) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["contact.employee_type_enum.actived_v3"]
	if existed {
		panic("event: multiple handler registrations for " + "contact.employee_type_enum.actived_v3")
	}
	dispatcher.eventType2EventHandler["contact.employee_type_enum.actived_v3"] = larkcontact.NewEmployeeTypeEnumActivedEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventDispatcher) OnEmployeeTypeEnumCreatedV3(handler func(ctx context.Context, event *larkcontact.EmployeeTypeEnumCreatedEvent) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["contact.employee_type_enum.created_v3"]
	if existed {
		panic("event: multiple handler registrations for " + "contact.employee_type_enum.created_v3")
	}
	dispatcher.eventType2EventHandler["contact.employee_type_enum.created_v3"] = larkcontact.NewEmployeeTypeEnumCreatedEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventDispatcher) OnEmployeeTypeEnumDeactivatedV3(handler func(ctx context.Context, event *larkcontact.EmployeeTypeEnumDeactivatedEvent) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["contact.employee_type_enum.deactivated_v3"]
	if existed {
		panic("event: multiple handler registrations for " + "contact.employee_type_enum.deactivated_v3")
	}
	dispatcher.eventType2EventHandler["contact.employee_type_enum.deactivated_v3"] = larkcontact.NewEmployeeTypeEnumDeactivatedEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventDispatcher) OnEmployeeTypeEnumDeletedV3(handler func(ctx context.Context, event *larkcontact.EmployeeTypeEnumDeletedEvent) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["contact.employee_type_enum.deleted_v3"]
	if existed {
		panic("event: multiple handler registrations for " + "contact.employee_type_enum.deleted_v3")
	}
	dispatcher.eventType2EventHandler["contact.employee_type_enum.deleted_v3"] = larkcontact.NewEmployeeTypeEnumDeletedEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventDispatcher) OnEmployeeTypeEnumUpdatedV3(handler func(ctx context.Context, event *larkcontact.EmployeeTypeEnumUpdatedEvent) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["contact.employee_type_enum.updated_v3"]
	if existed {
		panic("event: multiple handler registrations for " + "contact.employee_type_enum.updated_v3")
	}
	dispatcher.eventType2EventHandler["contact.employee_type_enum.updated_v3"] = larkcontact.NewEmployeeTypeEnumUpdatedEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventDispatcher) OnScopeUpdatedV3(handler func(ctx context.Context, event *larkcontact.ScopeUpdatedEvent) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["contact.scope.updated_v3"]
	if existed {
		panic("event: multiple handler registrations for " + "contact.scope.updated_v3")
	}
	dispatcher.eventType2EventHandler["contact.scope.updated_v3"] = larkcontact.NewScopeUpdatedEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventDispatcher) OnUserCreatedV3(handler func(ctx context.Context, event *larkcontact.UserCreatedEvent) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["contact.user.created_v3"]
	if existed {
		panic("event: multiple handler registrations for " + "contact.user.created_v3")
	}
	dispatcher.eventType2EventHandler["contact.user.created_v3"] = larkcontact.NewUserCreatedEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventDispatcher) OnUserDeletedV3(handler func(ctx context.Context, event *larkcontact.UserDeletedEvent) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["contact.user.deleted_v3"]
	if existed {
		panic("event: multiple handler registrations for " + "contact.user.deleted_v3")
	}
	dispatcher.eventType2EventHandler["contact.user.deleted_v3"] = larkcontact.NewUserDeletedEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventDispatcher) OnUserUpdatedV3(handler func(ctx context.Context, event *larkcontact.UserUpdatedEvent) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["contact.user.updated_v3"]
	if existed {
		panic("event: multiple handler registrations for " + "contact.user.updated_v3")
	}
	dispatcher.eventType2EventHandler["contact.user.updated_v3"] = larkcontact.NewUserUpdatedEventHandler(handler)
	return dispatcher
}
