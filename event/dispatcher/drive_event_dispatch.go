// Package dispatcher code generated by oapi sdk gen
package dispatcher

import (
	"context"
	"github.com/larksuite/oapi-sdk-go/service/drive/v1"
)

func (dispatcher *EventDispatcher) OnFileDeletedV1(handler func(ctx context.Context, event *larkdrive.FileDeletedEvent) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["drive.file.deleted_v1"]
	if existed {
		panic("event: multiple handler registrations for " + "drive.file.deleted_v1")
	}
	dispatcher.eventType2EventHandler["drive.file.deleted_v1"] = larkdrive.NewFileDeletedEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventDispatcher) OnFileEditV1(handler func(ctx context.Context, event *larkdrive.FileEditEvent) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["drive.file.edit_v1"]
	if existed {
		panic("event: multiple handler registrations for " + "drive.file.edit_v1")
	}
	dispatcher.eventType2EventHandler["drive.file.edit_v1"] = larkdrive.NewFileEditEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventDispatcher) OnFilePermissionMemberAddedV1(handler func(ctx context.Context, event *larkdrive.FilePermissionMemberAddedEvent) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["drive.file.permission_member_added_v1"]
	if existed {
		panic("event: multiple handler registrations for " + "drive.file.permission_member_added_v1")
	}
	dispatcher.eventType2EventHandler["drive.file.permission_member_added_v1"] = larkdrive.NewFilePermissionMemberAddedEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventDispatcher) OnFilePermissionMemberRemovedV1(handler func(ctx context.Context, event *larkdrive.FilePermissionMemberRemovedEvent) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["drive.file.permission_member_removed_v1"]
	if existed {
		panic("event: multiple handler registrations for " + "drive.file.permission_member_removed_v1")
	}
	dispatcher.eventType2EventHandler["drive.file.permission_member_removed_v1"] = larkdrive.NewFilePermissionMemberRemovedEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventDispatcher) OnFileReadV1(handler func(ctx context.Context, event *larkdrive.FileReadEvent) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["drive.file.read_v1"]
	if existed {
		panic("event: multiple handler registrations for " + "drive.file.read_v1")
	}
	dispatcher.eventType2EventHandler["drive.file.read_v1"] = larkdrive.NewFileReadEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventDispatcher) OnFileTitleUpdatedV1(handler func(ctx context.Context, event *larkdrive.FileTitleUpdatedEvent) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["drive.file.title_updated_v1"]
	if existed {
		panic("event: multiple handler registrations for " + "drive.file.title_updated_v1")
	}
	dispatcher.eventType2EventHandler["drive.file.title_updated_v1"] = larkdrive.NewFileTitleUpdatedEventHandler(handler)
	return dispatcher
}
func (dispatcher *EventDispatcher) OnFileTrashedV1(handler func(ctx context.Context, event *larkdrive.FileTrashedEvent) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["drive.file.trashed_v1"]
	if existed {
		panic("event: multiple handler registrations for " + "drive.file.trashed_v1")
	}
	dispatcher.eventType2EventHandler["drive.file.trashed_v1"] = larkdrive.NewFileTrashedEventHandler(handler)
	return dispatcher
}
