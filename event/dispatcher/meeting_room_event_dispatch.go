// Package dispatcher code generated by oapi sdk gen
package dispatcher

import (
	"context"

	"github.com/larksuite/oapi-sdk-go/service/meeting_room/v1"
)

func (dispatcher *EventDispatcher) OnP2MeetingRoomCreatedV1(handler func(ctx context.Context, event *larkmeeting_room.P2MeetingRoomCreatedV1) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["meeting_room.meeting_room.created_v1"]
	if existed {
		panic("event: multiple handler registrations for " + "meeting_room.meeting_room.created_v1")
	}
	dispatcher.eventType2EventHandler["meeting_room.meeting_room.created_v1"] = larkmeeting_room.NewP2MeetingRoomCreatedV1Handler(handler)
	return dispatcher
}
func (dispatcher *EventDispatcher) OnP2MeetingRoomDeletedV1(handler func(ctx context.Context, event *larkmeeting_room.P2MeetingRoomDeletedV1) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["meeting_room.meeting_room.deleted_v1"]
	if existed {
		panic("event: multiple handler registrations for " + "meeting_room.meeting_room.deleted_v1")
	}
	dispatcher.eventType2EventHandler["meeting_room.meeting_room.deleted_v1"] = larkmeeting_room.NewP2MeetingRoomDeletedV1Handler(handler)
	return dispatcher
}
func (dispatcher *EventDispatcher) OnP2MeetingRoomStatusChangedV1(handler func(ctx context.Context, event *larkmeeting_room.P2MeetingRoomStatusChangedV1) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["meeting_room.meeting_room.status_changed_v1"]
	if existed {
		panic("event: multiple handler registrations for " + "meeting_room.meeting_room.status_changed_v1")
	}
	dispatcher.eventType2EventHandler["meeting_room.meeting_room.status_changed_v1"] = larkmeeting_room.NewP2MeetingRoomStatusChangedV1Handler(handler)
	return dispatcher
}
func (dispatcher *EventDispatcher) OnP2MeetingRoomUpdatedV1(handler func(ctx context.Context, event *larkmeeting_room.P2MeetingRoomUpdatedV1) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["meeting_room.meeting_room.updated_v1"]
	if existed {
		panic("event: multiple handler registrations for " + "meeting_room.meeting_room.updated_v1")
	}
	dispatcher.eventType2EventHandler["meeting_room.meeting_room.updated_v1"] = larkmeeting_room.NewP2MeetingRoomUpdatedV1Handler(handler)
	return dispatcher
}
