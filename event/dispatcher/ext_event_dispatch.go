// Package dispatcher code generated by oapi sdk gen
package dispatcher

import (
	"context"

	larkcontact "github.com/larksuite/oapi-sdk-go/service/contact/v3"
	larkim "github.com/larksuite/oapi-sdk-go/service/im/v1"
)

//  v1消息协议：用户阅读机器人发送的消息后触发此事件。
func (dispatcher *EventDispatcher) OnP1MessageReadV1(handler func(ctx context.Context, event *larkim.P1MessageReadV1) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["message_read"]
	if existed {
		panic("event: multiple handler registrations for " + "message_read")
	}
	dispatcher.eventType2EventHandler["message_read"] = larkim.NewP1MessageReadV1Handler(handler)
	return dispatcher
}

// v1消息协议：当用户发送消息给机器人或在群聊中@机器人时触发此事件。
func (dispatcher *EventDispatcher) OnP1MessageReceiveV1(handler func(ctx context.Context, event *larkim.P1MessageReceiveV1) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["message"]
	if existed {
		panic("event: multiple handler registrations for " + "message")
	}
	dispatcher.eventType2EventHandler["message"] = larkim.NewP1MessageReceiveV1Handler(handler)
	return dispatcher
}

// v1消息协议：当员工的激活、暂停账号/恢复账号、操作离职时会触发此事件。此事件不依赖于任何权限。
func (dispatcher *EventDispatcher) OnP1UserStatusChangedV3(handler func(ctx context.Context, event *larkcontact.P1UserStatusChangedV3) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["user_status_change"]
	if existed {
		panic("event: multiple handler registrations for " + "user_status_change")
	}
	dispatcher.eventType2EventHandler["user_status_change"] = larkcontact.NewP1UserStatusChangedV3Handler(handler)
	return dispatcher
}

// v1消息协议：当员工加入企业（user_add）、离职（user_leave）、个人信息发生变化（user_update）时，推送此事件。
func (dispatcher *EventDispatcher) OnP1UserChangedV3(handler func(ctx context.Context, event *larkcontact.P1UserChangedV3) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["user_add"]
	if existed {
		panic("event: multiple handler registrations for " + "user_add")
	}
	dispatcher.eventType2EventHandler["user_add"] = larkcontact.NewP1UserChangedV3Handler(handler)

	_, existed = dispatcher.eventType2EventHandler["user_leave"]
	if existed {
		panic("event: multiple handler registrations for " + "user_add")
	}
	dispatcher.eventType2EventHandler["user_leave"] = larkcontact.NewP1UserChangedV3Handler(handler)

	_, existed = dispatcher.eventType2EventHandler["user_update"]
	if existed {
		panic("event: multiple handler registrations for " + "user_update")
	}
	dispatcher.eventType2EventHandler["user_update"] = larkcontact.NewP1UserChangedV3Handler(handler)
	return dispatcher
}

// v1消息协议：当新建部门（dept_add）、删除部门（dept_delete）、修改部门（dept_update）时，推送此事件。
func (dispatcher *EventDispatcher) OnP1DepartmentChangedV3(handler func(ctx context.Context, event *larkcontact.P1DepartmentChangedV3) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["dept_add"]
	if existed {
		panic("event: multiple handler registrations for " + "dept_add")
	}
	dispatcher.eventType2EventHandler["dept_add"] = larkcontact.NewP1DepartmentChangedV3Handler(handler)

	_, existed = dispatcher.eventType2EventHandler["dept_delete"]
	if existed {
		panic("event: multiple handler registrations for " + "dept_delete")
	}
	dispatcher.eventType2EventHandler["dept_delete"] = larkcontact.NewP1DepartmentChangedV3Handler(handler)

	_, existed = dispatcher.eventType2EventHandler["dept_update"]
	if existed {
		panic("event: multiple handler registrations for " + "dept_update")
	}
	dispatcher.eventType2EventHandler["dept_update"] = larkcontact.NewP1DepartmentChangedV3Handler(handler)
	return dispatcher
}

// v1消息协议：当应用申请了 以应用身份访问通讯录 权限后，管理员可以配置应用的通讯录授权范围,当此范围变化时，就会触发授权范围变化事件。
func (dispatcher *EventDispatcher) OnP1ContactScopeChangedV3(handler func(ctx context.Context, event *larkcontact.P1ContactScopeChangedV3) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["contact_scope_change"]
	if existed {
		panic("event: multiple handler registrations for " + "contact_scope_change")
	}
	dispatcher.eventType2EventHandler["contact_scope_change"] = larkcontact.NewP1ContactScopeChangedV3Handler(handler)
	return dispatcher
}

// v1消息协议：机器人被邀请加入群聊时触发此事件。
func (dispatcher *EventDispatcher) OnP1AddBotV1(handler func(ctx context.Context, event *larkim.P1AddBotV1) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["add_bot"]
	if existed {
		panic("event: multiple handler registrations for " + "add_bot")
	}
	dispatcher.eventType2EventHandler["add_bot"] = larkim.NewP1AddBotV1Handler(handler)
	return dispatcher
}

// v1消息协议：机器人被从群聊中移除时触发此事件。
func (dispatcher *EventDispatcher) OnP1RemoveAddBotV1(handler func(ctx context.Context, event *larkim.P1RemoveBotV1) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["remove_bot"]
	if existed {
		panic("event: multiple handler registrations for " + "remove_bot")
	}
	dispatcher.eventType2EventHandler["remove_bot"] = larkim.NewP1RemoveBotV1Handler(handler)
	return dispatcher
}

// v1消息协议：用户进群、出群后触发此事件
func (dispatcher *EventDispatcher) OnP1UserInOutChatV1(handler func(ctx context.Context, event *larkim.P1UserInOutChatV1) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["add_user_to_chat"]
	if existed {
		panic("event: multiple handler registrations for " + "add_user_to_chat")
	}
	dispatcher.eventType2EventHandler["add_user_to_chat"] = larkim.NewP1UserInOutChatV1Handler(handler)

	_, existed = dispatcher.eventType2EventHandler["remove_user_from_chat"]
	if existed {
		panic("event: multiple handler registrations for " + "remove_user_from_chat")
	}
	dispatcher.eventType2EventHandler["remove_user_from_chat"] = larkim.NewP1UserInOutChatV1Handler(handler)

	_, existed = dispatcher.eventType2EventHandler["revoke_add_user_from_chat"]
	if existed {
		panic("event: multiple handler registrations for " + "revoke_add_user_from_chat")
	}
	dispatcher.eventType2EventHandler["revoke_add_user_from_chat"] = larkim.NewP1UserInOutChatV1Handler(handler)
	return dispatcher
}

// v1消息协议：群聊被解散后触发此事件。
func (dispatcher *EventDispatcher) OnP1ChatDisbandV1(handler func(ctx context.Context, event *larkim.P1ChatDisbandV1) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["chat_disband"]
	if existed {
		panic("event: multiple handler registrations for " + "chat_disband")
	}
	dispatcher.eventType2EventHandler["chat_disband"] = larkim.NewP1DisbandChatV1Handler(handler)
	return dispatcher
}

// v1消息协议：群配置修改后触发此事件。
func (dispatcher *EventDispatcher) OnP1GroupSettingUpdatedV1(handler func(ctx context.Context, event *larkim.P1GroupSettingUpdatedV1) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["group_setting_update"]
	if existed {
		panic("event: multiple handler registrations for " + "group_setting_update")
	}
	dispatcher.eventType2EventHandler["group_setting_update"] = larkim.NewP1GroupSettingUpdatedV1Handler(handler)
	return dispatcher
}
