// Package dispatcher code generated by oapi sdk gen
package dispatcher

import (
	"context"

	"github.com/larksuite/oapi-sdk-go/service/im/v1"
)

func (dispatcher *EventDispatcher) OnP2ChatDisbandedV1(handler func(ctx context.Context, event *larkim.P2ChatDisbandedV1) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["im.chat.disbanded_v1"]
	if existed {
		panic("event: multiple handler registrations for " + "im.chat.disbanded_v1")
	}
	dispatcher.eventType2EventHandler["im.chat.disbanded_v1"] = larkim.NewP2ChatDisbandedV1Handler(handler)
	return dispatcher
}
func (dispatcher *EventDispatcher) OnP2ChatUpdatedV1(handler func(ctx context.Context, event *larkim.P2ChatUpdatedV1) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["im.chat.updated_v1"]
	if existed {
		panic("event: multiple handler registrations for " + "im.chat.updated_v1")
	}
	dispatcher.eventType2EventHandler["im.chat.updated_v1"] = larkim.NewP2ChatUpdatedV1Handler(handler)
	return dispatcher
}
func (dispatcher *EventDispatcher) OnP2ChatMemberBotAddedV1(handler func(ctx context.Context, event *larkim.P2ChatMemberBotAddedV1) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["im.chat.member.bot.added_v1"]
	if existed {
		panic("event: multiple handler registrations for " + "im.chat.member.bot.added_v1")
	}
	dispatcher.eventType2EventHandler["im.chat.member.bot.added_v1"] = larkim.NewP2ChatMemberBotAddedV1Handler(handler)
	return dispatcher
}
func (dispatcher *EventDispatcher) OnP2ChatMemberBotDeletedV1(handler func(ctx context.Context, event *larkim.P2ChatMemberBotDeletedV1) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["im.chat.member.bot.deleted_v1"]
	if existed {
		panic("event: multiple handler registrations for " + "im.chat.member.bot.deleted_v1")
	}
	dispatcher.eventType2EventHandler["im.chat.member.bot.deleted_v1"] = larkim.NewP2ChatMemberBotDeletedV1Handler(handler)
	return dispatcher
}
func (dispatcher *EventDispatcher) OnP2ChatMemberUserAddedV1(handler func(ctx context.Context, event *larkim.P2ChatMemberUserAddedV1) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["im.chat.member.user.added_v1"]
	if existed {
		panic("event: multiple handler registrations for " + "im.chat.member.user.added_v1")
	}
	dispatcher.eventType2EventHandler["im.chat.member.user.added_v1"] = larkim.NewP2ChatMemberUserAddedV1Handler(handler)
	return dispatcher
}
func (dispatcher *EventDispatcher) OnP2ChatMemberUserDeletedV1(handler func(ctx context.Context, event *larkim.P2ChatMemberUserDeletedV1) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["im.chat.member.user.deleted_v1"]
	if existed {
		panic("event: multiple handler registrations for " + "im.chat.member.user.deleted_v1")
	}
	dispatcher.eventType2EventHandler["im.chat.member.user.deleted_v1"] = larkim.NewP2ChatMemberUserDeletedV1Handler(handler)
	return dispatcher
}
func (dispatcher *EventDispatcher) OnP2ChatMemberUserWithdrawnV1(handler func(ctx context.Context, event *larkim.P2ChatMemberUserWithdrawnV1) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["im.chat.member.user.withdrawn_v1"]
	if existed {
		panic("event: multiple handler registrations for " + "im.chat.member.user.withdrawn_v1")
	}
	dispatcher.eventType2EventHandler["im.chat.member.user.withdrawn_v1"] = larkim.NewP2ChatMemberUserWithdrawnV1Handler(handler)
	return dispatcher
}
func (dispatcher *EventDispatcher) OnP2MessageReadV1(handler func(ctx context.Context, event *larkim.P2MessageReadV1) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["im.message.message_read_v1"]
	if existed {
		panic("event: multiple handler registrations for " + "im.message.message_read_v1")
	}
	dispatcher.eventType2EventHandler["im.message.message_read_v1"] = larkim.NewP2MessageReadV1Handler(handler)
	return dispatcher
}
func (dispatcher *EventDispatcher) OnP2MessageReceiveV1(handler func(ctx context.Context, event *larkim.P2MessageReceiveV1) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["im.message.receive_v1"]
	if existed {
		panic("event: multiple handler registrations for " + "im.message.receive_v1")
	}
	dispatcher.eventType2EventHandler["im.message.receive_v1"] = larkim.NewP2MessageReceiveV1Handler(handler)
	return dispatcher
}
func (dispatcher *EventDispatcher) OnP2MessageReactionCreatedV1(handler func(ctx context.Context, event *larkim.P2MessageReactionCreatedV1) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["im.message.reaction.created_v1"]
	if existed {
		panic("event: multiple handler registrations for " + "im.message.reaction.created_v1")
	}
	dispatcher.eventType2EventHandler["im.message.reaction.created_v1"] = larkim.NewP2MessageReactionCreatedV1Handler(handler)
	return dispatcher
}
func (dispatcher *EventDispatcher) OnP2MessageReactionDeletedV1(handler func(ctx context.Context, event *larkim.P2MessageReactionDeletedV1) error) *EventDispatcher {
	_, existed := dispatcher.eventType2EventHandler["im.message.reaction.deleted_v1"]
	if existed {
		panic("event: multiple handler registrations for " + "im.message.reaction.deleted_v1")
	}
	dispatcher.eventType2EventHandler["im.message.reaction.deleted_v1"] = larkim.NewP2MessageReactionDeletedV1Handler(handler)
	return dispatcher
}
