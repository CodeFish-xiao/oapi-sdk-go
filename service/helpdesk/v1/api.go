// Package helpdesk code generated by oapi sdk gen
package helpdesk

import (
	"bytes"
	"context"
	"net/http"

	"github.com/feishu/oapi-sdk-go/core"
)

/**
构建业务域服务实例
**/
func NewService(httpClient *http.Client, config *core.Config) *HelpdeskService {
	h := &HelpdeskService{httpClient: httpClient, config: config}
	h.Agents = &agents{service: h}
	h.AgentSchedules = &agentSchedules{service: h}
	h.AgentSchedules = &agentSchedules{service: h}
	h.AgentSkills = &agentSkills{service: h}
	h.AgentSkillRules = &agentSkillRules{service: h}
	h.BotMessage = &botMessage{service: h}
	h.Categories = &categories{service: h}
	h.Events = &events{service: h}
	h.Faqs = &faqs{service: h}
	h.Notifications = &notifications{service: h}
	h.Tickets = &tickets{service: h}
	h.TicketMessages = &ticketMessages{service: h}
	h.TicketCustomizedFields = &ticketCustomizedFields{service: h}
	h.TicketMessages = &ticketMessages{service: h}
	return h
}

/**
业务域服务定义
**/
type HelpdeskService struct {
	httpClient             *http.Client
	config                 *core.Config
	Agents                 *agents
	AgentSchedules         *agentSchedules
	AgentSchedules         *agentSchedules
	AgentSkills            *agentSkills
	AgentSkillRules        *agentSkillRules
	BotMessage             *botMessage
	Categories             *categories
	Events                 *events
	Faqs                   *faqs
	Notifications          *notifications
	Tickets                *tickets
	TicketMessages         *ticketMessages
	TicketCustomizedFields *ticketCustomizedFields
	TicketMessages         *ticketMessages
}

/**
资源服务定义
**/
type agents struct {
	service *HelpdeskService
}
type agentSchedules struct {
	service *HelpdeskService
}
type agentSchedules struct {
	service *HelpdeskService
}
type agentSkills struct {
	service *HelpdeskService
}
type agentSkillRules struct {
	service *HelpdeskService
}
type botMessage struct {
	service *HelpdeskService
}
type categories struct {
	service *HelpdeskService
}
type events struct {
	service *HelpdeskService
}
type faqs struct {
	service *HelpdeskService
}
type notifications struct {
	service *HelpdeskService
}
type tickets struct {
	service *HelpdeskService
}
type ticketMessages struct {
	service *HelpdeskService
}
type ticketCustomizedFields struct {
	service *HelpdeskService
}
type ticketMessages struct {
	service *HelpdeskService
}

/**
资源服务方法定义
**/
func (a *agents) AgentEmail(ctx context.Context, options ...core.RequestOptionFunc) (*AgentEmailAgentResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, a.service.config, http.MethodGet,
		"/open-apis/helpdesk/v1/agent_emails", []core.AccessTokenType{core.AccessTokenTypeTenant}, nil, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &AgentEmailAgentResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *agents) Patch(ctx context.Context, req *PatchAgentReq, options ...core.RequestOptionFunc) (*PatchAgentResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, a.service.config, http.MethodPatch,
		"/open-apis/helpdesk/v1/agents/:agent_id", []core.AccessTokenType{core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &PatchAgentResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *agentSchedules) Delete(ctx context.Context, req *DeleteAgentSchedulesReq, options ...core.RequestOptionFunc) (*DeleteAgentSchedulesResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, a.service.config, http.MethodDelete,
		"/open-apis/helpdesk/v1/agents/:agent_id/schedules", []core.AccessTokenType{core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &DeleteAgentSchedulesResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *agentSchedules) Get(ctx context.Context, req *GetAgentSchedulesReq, options ...core.RequestOptionFunc) (*GetAgentSchedulesResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, a.service.config, http.MethodGet,
		"/open-apis/helpdesk/v1/agents/:agent_id/schedules", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &GetAgentSchedulesResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *agentSchedules) Patch(ctx context.Context, req *PatchAgentSchedulesReq, options ...core.RequestOptionFunc) (*PatchAgentSchedulesResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, a.service.config, http.MethodPatch,
		"/open-apis/helpdesk/v1/agents/:agent_id/schedules", []core.AccessTokenType{core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &PatchAgentSchedulesResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *agentSchedules) Create(ctx context.Context, req *CreateAgentScheduleReq, options ...core.RequestOptionFunc) (*CreateAgentScheduleResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, a.service.config, http.MethodPost,
		"/open-apis/helpdesk/v1/agent_schedules", []core.AccessTokenType{core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &CreateAgentScheduleResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *agentSchedules) List(ctx context.Context, req *ListAgentScheduleReq, options ...core.RequestOptionFunc) (*ListAgentScheduleResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, a.service.config, http.MethodGet,
		"/open-apis/helpdesk/v1/agent_schedules", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &ListAgentScheduleResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *agentSkills) Create(ctx context.Context, req *CreateAgentSkillReq, options ...core.RequestOptionFunc) (*CreateAgentSkillResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, a.service.config, http.MethodPost,
		"/open-apis/helpdesk/v1/agent_skills", []core.AccessTokenType{core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &CreateAgentSkillResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *agentSkills) Delete(ctx context.Context, req *DeleteAgentSkillReq, options ...core.RequestOptionFunc) (*DeleteAgentSkillResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, a.service.config, http.MethodDelete,
		"/open-apis/helpdesk/v1/agent_skills/:agent_skill_id", []core.AccessTokenType{core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &DeleteAgentSkillResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *agentSkills) Get(ctx context.Context, req *GetAgentSkillReq, options ...core.RequestOptionFunc) (*GetAgentSkillResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, a.service.config, http.MethodGet,
		"/open-apis/helpdesk/v1/agent_skills/:agent_skill_id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &GetAgentSkillResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *agentSkills) List(ctx context.Context, options ...core.RequestOptionFunc) (*ListAgentSkillResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, a.service.config, http.MethodGet,
		"/open-apis/helpdesk/v1/agent_skills", []core.AccessTokenType{core.AccessTokenTypeTenant}, nil, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &ListAgentSkillResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *agentSkills) Patch(ctx context.Context, req *PatchAgentSkillReq, options ...core.RequestOptionFunc) (*PatchAgentSkillResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, a.service.config, http.MethodPatch,
		"/open-apis/helpdesk/v1/agent_skills/:agent_skill_id", []core.AccessTokenType{core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &PatchAgentSkillResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *agentSkillRules) List(ctx context.Context, options ...core.RequestOptionFunc) (*ListAgentSkillRuleResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, a.service.config, http.MethodGet,
		"/open-apis/helpdesk/v1/agent_skill_rules", []core.AccessTokenType{core.AccessTokenTypeTenant}, nil, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &ListAgentSkillRuleResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (b *botMessage) Create(ctx context.Context, req *CreateBotMessageReq, options ...core.RequestOptionFunc) (*CreateBotMessageResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, b.service.config, http.MethodPost,
		"/open-apis/helpdesk/v1/message", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &CreateBotMessageResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (c *categories) Create(ctx context.Context, req *CreateCategoryReq, options ...core.RequestOptionFunc) (*CreateCategoryResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, c.service.config, http.MethodPost,
		"/open-apis/helpdesk/v1/categories", []core.AccessTokenType{core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &CreateCategoryResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (c *categories) Delete(ctx context.Context, req *DeleteCategoryReq, options ...core.RequestOptionFunc) (*DeleteCategoryResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, c.service.config, http.MethodDelete,
		"/open-apis/helpdesk/v1/categories/:id", []core.AccessTokenType{core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &DeleteCategoryResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (c *categories) Get(ctx context.Context, req *GetCategoryReq, options ...core.RequestOptionFunc) (*GetCategoryResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, c.service.config, http.MethodGet,
		"/open-apis/helpdesk/v1/categories/:id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &GetCategoryResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (c *categories) List(ctx context.Context, req *ListCategoryReq, options ...core.RequestOptionFunc) (*ListCategoryResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, c.service.config, http.MethodGet,
		"/open-apis/helpdesk/v1/categories", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &ListCategoryResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (c *categories) Patch(ctx context.Context, req *PatchCategoryReq, options ...core.RequestOptionFunc) (*PatchCategoryResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, c.service.config, http.MethodPatch,
		"/open-apis/helpdesk/v1/categories/:id", []core.AccessTokenType{core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &PatchCategoryResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (e *events) Subscribe(ctx context.Context, req *SubscribeEventReq, options ...core.RequestOptionFunc) (*SubscribeEventResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, e.service.config, http.MethodPost,
		"/open-apis/helpdesk/v1/events/subscribe", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &SubscribeEventResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (e *events) Unsubscribe(ctx context.Context, req *UnsubscribeEventReq, options ...core.RequestOptionFunc) (*UnsubscribeEventResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, e.service.config, http.MethodPost,
		"/open-apis/helpdesk/v1/events/unsubscribe", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &UnsubscribeEventResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (f *faqs) Create(ctx context.Context, req *CreateFaqReq, options ...core.RequestOptionFunc) (*CreateFaqResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, f.service.config, http.MethodPost,
		"/open-apis/helpdesk/v1/faqs", []core.AccessTokenType{core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &CreateFaqResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (f *faqs) Delete(ctx context.Context, req *DeleteFaqReq, options ...core.RequestOptionFunc) (*DeleteFaqResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, f.service.config, http.MethodDelete,
		"/open-apis/helpdesk/v1/faqs/:id", []core.AccessTokenType{core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &DeleteFaqResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (f *faqs) FaqImage(ctx context.Context, req *FaqImageFaqReq, options ...core.RequestOptionFunc) (*FaqImageFaqResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, f.service.config, http.MethodGet,
		"/open-apis/helpdesk/v1/faqs/:id/image/:image_key", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &FaqImageFaqResp{RawResponse: rawResp}
	// 如果是下载，则设置响应结果
	if rawResp.StatusCode == http.StatusOK {
		resp.File = bytes.NewBuffer(rawResp.RawBody)
		resp.FileName = core.FileNameByHeader(rawResp.Header)
		return resp, err
	}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (f *faqs) Get(ctx context.Context, req *GetFaqReq, options ...core.RequestOptionFunc) (*GetFaqResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, f.service.config, http.MethodGet,
		"/open-apis/helpdesk/v1/faqs/:id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &GetFaqResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (f *faqs) List(ctx context.Context, req *ListFaqReq, options ...core.RequestOptionFunc) (*ListFaqResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, f.service.config, http.MethodGet,
		"/open-apis/helpdesk/v1/faqs", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &ListFaqResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}

/**如果是分页查询，则添加迭代器函数**/
func (f *faqs) ListFaq(ctx context.Context, req *ListFaqReq, options ...core.RequestOptionFunc) (*ListFaqIterator, error) {
	return &ListFaqIterator{
		ctx:      ctx,
		req:      req,
		listFunc: f.List,
		options:  options,
		limit:    req.Limit}, nil
}
func (f *faqs) Patch(ctx context.Context, req *PatchFaqReq, options ...core.RequestOptionFunc) (*PatchFaqResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, f.service.config, http.MethodPatch,
		"/open-apis/helpdesk/v1/faqs/:id", []core.AccessTokenType{core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &PatchFaqResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (f *faqs) Search(ctx context.Context, req *SearchFaqReq, options ...core.RequestOptionFunc) (*SearchFaqResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, f.service.config, http.MethodGet,
		"/open-apis/helpdesk/v1/faqs/search", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &SearchFaqResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}

/**如果是分页查询，则添加迭代器函数**/
func (f *faqs) SearchFaq(ctx context.Context, req *SearchFaqReq, options ...core.RequestOptionFunc) (*SearchFaqIterator, error) {
	return &SearchFaqIterator{
		ctx:      ctx,
		req:      req,
		listFunc: f.Search,
		options:  options,
		limit:    req.Limit}, nil
}
func (n *notifications) CancelApprove(ctx context.Context, req *CancelApproveNotificationReq, options ...core.RequestOptionFunc) (*CancelApproveNotificationResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, n.service.config, http.MethodPost,
		"/open-apis/helpdesk/v1/notifications/:notification_id/cancel_approve", []core.AccessTokenType{core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &CancelApproveNotificationResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (n *notifications) CancelSend(ctx context.Context, req *CancelSendNotificationReq, options ...core.RequestOptionFunc) (*CancelSendNotificationResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, n.service.config, http.MethodPost,
		"/open-apis/helpdesk/v1/notifications/:notification_id/cancel_send", []core.AccessTokenType{core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &CancelSendNotificationResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (n *notifications) Create(ctx context.Context, req *CreateNotificationReq, options ...core.RequestOptionFunc) (*CreateNotificationResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, n.service.config, http.MethodPost,
		"/open-apis/helpdesk/v1/notifications", []core.AccessTokenType{core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &CreateNotificationResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (n *notifications) ExecuteSend(ctx context.Context, req *ExecuteSendNotificationReq, options ...core.RequestOptionFunc) (*ExecuteSendNotificationResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, n.service.config, http.MethodPost,
		"/open-apis/helpdesk/v1/notifications/:notification_id/execute_send", []core.AccessTokenType{core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &ExecuteSendNotificationResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (n *notifications) Get(ctx context.Context, req *GetNotificationReq, options ...core.RequestOptionFunc) (*GetNotificationResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, n.service.config, http.MethodGet,
		"/open-apis/helpdesk/v1/notifications/:notification_id", []core.AccessTokenType{core.AccessTokenTypeTenant, core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &GetNotificationResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (n *notifications) Patch(ctx context.Context, req *PatchNotificationReq, options ...core.RequestOptionFunc) (*PatchNotificationResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, n.service.config, http.MethodPatch,
		"/open-apis/helpdesk/v1/notifications/:notification_id", []core.AccessTokenType{core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &PatchNotificationResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (n *notifications) Preview(ctx context.Context, req *PreviewNotificationReq, options ...core.RequestOptionFunc) (*PreviewNotificationResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, n.service.config, http.MethodPost,
		"/open-apis/helpdesk/v1/notifications/:notification_id/preview", []core.AccessTokenType{core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &PreviewNotificationResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (n *notifications) SubmitApprove(ctx context.Context, req *SubmitApproveNotificationReq, options ...core.RequestOptionFunc) (*SubmitApproveNotificationResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, n.service.config, http.MethodPost,
		"/open-apis/helpdesk/v1/notifications/:notification_id/submit_approve", []core.AccessTokenType{core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &SubmitApproveNotificationResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (t *tickets) AnswerUserQuery(ctx context.Context, req *AnswerUserQueryTicketReq, options ...core.RequestOptionFunc) (*AnswerUserQueryTicketResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, t.service.config, http.MethodPost,
		"/open-apis/helpdesk/v1/tickets/:ticket_id/answer_user_query", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &AnswerUserQueryTicketResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (t *tickets) CustomizedFields(ctx context.Context, req *CustomizedFieldsTicketReq, options ...core.RequestOptionFunc) (*CustomizedFieldsTicketResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, t.service.config, http.MethodGet,
		"/open-apis/helpdesk/v1/customized_fields", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &CustomizedFieldsTicketResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (t *tickets) Get(ctx context.Context, req *GetTicketReq, options ...core.RequestOptionFunc) (*GetTicketResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, t.service.config, http.MethodGet,
		"/open-apis/helpdesk/v1/tickets/:ticket_id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &GetTicketResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (t *tickets) List(ctx context.Context, req *ListTicketReq, options ...core.RequestOptionFunc) (*ListTicketResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, t.service.config, http.MethodGet,
		"/open-apis/helpdesk/v1/tickets", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &ListTicketResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (t *tickets) StartService(ctx context.Context, req *StartServiceTicketReq, options ...core.RequestOptionFunc) (*StartServiceTicketResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, t.service.config, http.MethodPost,
		"/open-apis/helpdesk/v1/start_service", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &StartServiceTicketResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (t *tickets) TicketImage(ctx context.Context, req *TicketImageTicketReq, options ...core.RequestOptionFunc) (*TicketImageTicketResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, t.service.config, http.MethodGet,
		"/open-apis/helpdesk/v1/ticket_images", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &TicketImageTicketResp{RawResponse: rawResp}
	// 如果是下载，则设置响应结果
	if rawResp.StatusCode == http.StatusOK {
		resp.File = bytes.NewBuffer(rawResp.RawBody)
		resp.FileName = core.FileNameByHeader(rawResp.Header)
		return resp, err
	}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (t *tickets) Update(ctx context.Context, req *UpdateTicketReq, options ...core.RequestOptionFunc) (*UpdateTicketResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, t.service.config, http.MethodPut,
		"/open-apis/helpdesk/v1/tickets/:ticket_id", []core.AccessTokenType{core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &UpdateTicketResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (t *ticketMessages) Create(ctx context.Context, req *CreateTicketMessageReq, options ...core.RequestOptionFunc) (*CreateTicketMessageResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, t.service.config, http.MethodPost,
		"/open-apis/helpdesk/v1/tickets/:ticket_id/messages", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &CreateTicketMessageResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (t *ticketMessages) List(ctx context.Context, req *ListTicketMessageReq, options ...core.RequestOptionFunc) (*ListTicketMessageResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, t.service.config, http.MethodGet,
		"/open-apis/helpdesk/v1/tickets/:ticket_id/messages", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &ListTicketMessageResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (t *ticketCustomizedFields) Create(ctx context.Context, req *CreateTicketCustomizedFieldReq, options ...core.RequestOptionFunc) (*CreateTicketCustomizedFieldResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, t.service.config, http.MethodPost,
		"/open-apis/helpdesk/v1/ticket_customized_fields", []core.AccessTokenType{core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &CreateTicketCustomizedFieldResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (t *ticketCustomizedFields) Delete(ctx context.Context, req *DeleteTicketCustomizedFieldReq, options ...core.RequestOptionFunc) (*DeleteTicketCustomizedFieldResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, t.service.config, http.MethodDelete,
		"/open-apis/helpdesk/v1/ticket_customized_fields/:ticket_customized_field_id", []core.AccessTokenType{core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &DeleteTicketCustomizedFieldResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (t *ticketCustomizedFields) Get(ctx context.Context, req *GetTicketCustomizedFieldReq, options ...core.RequestOptionFunc) (*GetTicketCustomizedFieldResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, t.service.config, http.MethodGet,
		"/open-apis/helpdesk/v1/ticket_customized_fields/:ticket_customized_field_id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &GetTicketCustomizedFieldResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (t *ticketCustomizedFields) List(ctx context.Context, req *ListTicketCustomizedFieldReq, options ...core.RequestOptionFunc) (*ListTicketCustomizedFieldResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, t.service.config, http.MethodGet,
		"/open-apis/helpdesk/v1/ticket_customized_fields", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &ListTicketCustomizedFieldResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (t *ticketCustomizedFields) Patch(ctx context.Context, req *PatchTicketCustomizedFieldReq, options ...core.RequestOptionFunc) (*PatchTicketCustomizedFieldResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, t.service.config, http.MethodPatch,
		"/open-apis/helpdesk/v1/ticket_customized_fields/:ticket_customized_field_id", []core.AccessTokenType{core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &PatchTicketCustomizedFieldResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
