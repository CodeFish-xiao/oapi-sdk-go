// Package helpdesk code generated by oapi sdk gen
package helpdesk

import (
	"context"
)

/**
消息处理器定义
**/
type NotificationApproveEventHandler struct {
	handler func(context.Context, *NotificationApproveEvent) error
}

func NewNotificationApproveEventHandler(handler func(context.Context, *NotificationApproveEvent) error) *NotificationApproveEventHandler {
	h := &NotificationApproveEventHandler{handler: handler}
	return h
}

/**
返回事件的消息体的实例，用于反序列化用
**/
func (h *NotificationApproveEventHandler) Event() interface{} {
	return &NotificationApproveEvent{}
}

/**
回调开发者注册的handle
r**/
func (h *NotificationApproveEventHandler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*NotificationApproveEvent))
}

/**
消息处理器定义
**/
type TicketCreatedEventHandler struct {
	handler func(context.Context, *TicketCreatedEvent) error
}

func NewTicketCreatedEventHandler(handler func(context.Context, *TicketCreatedEvent) error) *TicketCreatedEventHandler {
	h := &TicketCreatedEventHandler{handler: handler}
	return h
}

/**
返回事件的消息体的实例，用于反序列化用
**/
func (h *TicketCreatedEventHandler) Event() interface{} {
	return &TicketCreatedEvent{}
}

/**
回调开发者注册的handle
r**/
func (h *TicketCreatedEventHandler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*TicketCreatedEvent))
}

/**
消息处理器定义
**/
type TicketUpdatedEventHandler struct {
	handler func(context.Context, *TicketUpdatedEvent) error
}

func NewTicketUpdatedEventHandler(handler func(context.Context, *TicketUpdatedEvent) error) *TicketUpdatedEventHandler {
	h := &TicketUpdatedEventHandler{handler: handler}
	return h
}

/**
返回事件的消息体的实例，用于反序列化用
**/
func (h *TicketUpdatedEventHandler) Event() interface{} {
	return &TicketUpdatedEvent{}
}

/**
回调开发者注册的handle
r**/
func (h *TicketUpdatedEventHandler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*TicketUpdatedEvent))
}

/**
消息处理器定义
**/
type TicketMessageCreatedEventHandler struct {
	handler func(context.Context, *TicketMessageCreatedEvent) error
}

func NewTicketMessageCreatedEventHandler(handler func(context.Context, *TicketMessageCreatedEvent) error) *TicketMessageCreatedEventHandler {
	h := &TicketMessageCreatedEventHandler{handler: handler}
	return h
}

/**
返回事件的消息体的实例，用于反序列化用
**/
func (h *TicketMessageCreatedEventHandler) Event() interface{} {
	return &TicketMessageCreatedEvent{}
}

/**
回调开发者注册的handle
r**/
func (h *TicketMessageCreatedEventHandler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*TicketMessageCreatedEvent))
}
