// Package helpdesk code generated by oapi sdk gen
package helpdesk

import (
	"io"

	"io/ioutil"

	"context"
	"errors"
	"fmt"

	"github.com/feishu/oapi-sdk-go/event"

	"github.com/feishu/oapi-sdk-go/core"
)

/**生成枚举值 **/

const (
	MSG_TYPE_TEXT        string = "text"
	MSG_TYPE_POST        string = "post"
	MSG_TYPE_IMAGE       string = "image"
	MSG_TYPE_INTERACTIVE string = "interactive"
)

const (
	RECEIVE_TYPE_CHAT string = "chat"
	RECEIVE_TYPE_USER string = "user"
)

const (
	USER_ID_TYPE_USER_ID  string = "user_id"
	USER_ID_TYPE_UNION_ID string = "union_id"
	USER_ID_TYPE_OPEN_ID  string = "open_id"
)

/**生成数据类型 **/

type Agent struct {
	Id          *string `json:"id,omitempty"`
	AvatarUrl   *string `json:"avatar_url,omitempty"`
	Name        *string `json:"name,omitempty"`
	Email       *string `json:"email,omitempty"`
	Department  *string `json:"department,omitempty"`
	CompanyName *string `json:"company_name,omitempty"`
}

type AgentSchedules struct {
	Status      *int                  `json:"status,omitempty"`
	Agent       *AgentUser            `json:"agent,omitempty"`
	Schedule    []*WeekdaySchedule    `json:"schedule,omitempty"`
	AgentSkills []*AgentSkillLessInfo `json:"agent_skills,omitempty"`
}

type AgentSchedule struct {
	Status      *int                  `json:"status,omitempty"`
	Agent       *AgentUser            `json:"agent,omitempty"`
	Schedule    []*WeekdaySchedule    `json:"schedule,omitempty"`
	AgentSkills []*AgentSkillLessInfo `json:"agent_skills,omitempty"`
}

type AgentScheduleUpdateInfo struct {
	AgentId       *string            `json:"agent_id,omitempty"`
	Schedule      []*WeekdaySchedule `json:"schedule,omitempty"`
	AgentSkillIds []string           `json:"agent_skill_ids,omitempty"`
}

type AgentSkill struct {
	Id         *string           `json:"id,omitempty"`
	HelpdeskId *string           `json:"helpdesk_id,omitempty"`
	Name       *string           `json:"name,omitempty"`
	Rules      []*AgentSkillRule `json:"rules,omitempty"`
	AgentIds   []string          `json:"agent_ids,omitempty"`
	IsDefault  *bool             `json:"is_default,omitempty"`
	Agents     []*Agent          `json:"agents,omitempty"`
}

type AgentSkillLessInfo struct {
	Id        *string `json:"id,omitempty"`
	Name      *string `json:"name,omitempty"`
	IsDefault *bool   `json:"is_default,omitempty"`
}

type AgentSkillRule struct {
	Id               *string `json:"id,omitempty"`
	SelectedOperator *int    `json:"selected_operator,omitempty"`
	OperatorOptions  []int   `json:"operator_options,omitempty"`
	Operand          *string `json:"operand,omitempty"`
	Category         *int    `json:"category,omitempty"`
	DisplayName      *string `json:"display_name,omitempty"`
}

type AgentUser struct {
	Id          *string `json:"id,omitempty"`
	AvatarUrl   *string `json:"avatar_url,omitempty"`
	Name        *string `json:"name,omitempty"`
	Email       *string `json:"email,omitempty"`
	Department  *string `json:"department,omitempty"`
	CompanyName *string `json:"company_name,omitempty"`
}

type BotMessage struct {
	MsgType     *string `json:"msg_type,omitempty"`
	Content     *string `json:"content,omitempty"`
	ReceiverId  *string `json:"receiver_id,omitempty"`
	ReceiveType *string `json:"receive_type,omitempty"`
}

type Category struct {
	CategoryId *string `json:"category_id,omitempty"`
	Id         *string `json:"id,omitempty"`
	Name       *string `json:"name,omitempty"`
	ParentId   *string `json:"parent_id,omitempty"`
	HelpdeskId *string `json:"helpdesk_id,omitempty"`
	Language   *string `json:"language,omitempty"`
}

type Comments struct {
	Content       *string `json:"content,omitempty"`
	CreatedAt     *int    `json:"created_at,omitempty"`
	Id            *int    `json:"id,omitempty"`
	UserAvatarUrl *string `json:"user_avatar_url,omitempty"`
	UserName      *string `json:"user_name,omitempty"`
	UserId        *int    `json:"user_id,omitempty"`
}

type CustomizedFieldDisplayItem struct {
	Id          *string `json:"id,omitempty"`
	Value       *string `json:"value,omitempty"`
	KeyName     *string `json:"key_name,omitempty"`
	DisplayName *string `json:"display_name,omitempty"`
	Position    *int    `json:"position,omitempty"`
	Required    *bool   `json:"required,omitempty"`
	Editable    *bool   `json:"editable,omitempty"`
}

type Event struct {
	Type    *string `json:"type,omitempty"`
	Subtype *string `json:"subtype,omitempty"`
}

type Faq struct {
	FaqId          *string     `json:"faq_id,omitempty"`
	Id             *string     `json:"id,omitempty"`
	HelpdeskId     *string     `json:"helpdesk_id,omitempty"`
	Question       *string     `json:"question,omitempty"`
	Answer         *string     `json:"answer,omitempty"`
	AnswerRichtext []*Richtext `json:"answer_richtext,omitempty"`
	CreateTime     *int        `json:"create_time,omitempty"`
	UpdateTime     *int        `json:"update_time,omitempty"`
	Categories     []*Category `json:"categories,omitempty"`
	Tags           []string    `json:"tags,omitempty"`
	ExpireTime     *int        `json:"expire_time,omitempty"`
	UpdateUser     *TicketUser `json:"update_user,omitempty"`
	CreateUser     *TicketUser `json:"create_user,omitempty"`
}

type FaqUpdateInfo struct {
	CategoryId     *string  `json:"category_id,omitempty"`
	Question       *string  `json:"question,omitempty"`
	Answer         *string  `json:"answer,omitempty"`
	AnswerRichtext *string  `json:"answer_richtext,omitempty"`
	Tags           []string `json:"tags,omitempty"`
}

type Notification struct {
	Id                          *string                   `json:"id,omitempty"`
	JobName                     *string                   `json:"job_name,omitempty"`
	Status                      *int                      `json:"status,omitempty"`
	CreateUser                  *NotificationUser         `json:"create_user,omitempty"`
	CreatedAt                   *string                   `json:"created_at,omitempty"`
	UpdateUser                  *NotificationUser         `json:"update_user,omitempty"`
	UpdatedAt                   *string                   `json:"updated_at,omitempty"`
	TargetUserCount             *int                      `json:"target_user_count,omitempty"`
	SentUserCount               *int                      `json:"sent_user_count,omitempty"`
	ReadUserCount               *int                      `json:"read_user_count,omitempty"`
	SendAt                      *string                   `json:"send_at,omitempty"`
	PushContent                 *string                   `json:"push_content,omitempty"`
	PushType                    *int                      `json:"push_type,omitempty"`
	PushScopeType               *int                      `json:"push_scope_type,omitempty"`
	NewStaffScopeType           *int                      `json:"new_staff_scope_type,omitempty"`
	NewStaffScopeDepartmentList []*NotificationDepartment `json:"new_staff_scope_department_list,omitempty"`
	UserList                    []*NotificationUser       `json:"user_list,omitempty"`
	DepartmentList              []*NotificationDepartment `json:"department_list,omitempty"`
	ChatList                    []*NotificationChat       `json:"chat_list,omitempty"`
	Ext                         *string                   `json:"ext,omitempty"`
}

type NotificationChat struct {
	ChatId *string `json:"chat_id,omitempty"`
	Name   *string `json:"name,omitempty"`
}

type NotificationDepartment struct {
	DepartmentId *string `json:"department_id,omitempty"`
	Name         *string `json:"name,omitempty"`
}

type NotificationUser struct {
	UserId    *string `json:"user_id,omitempty"`
	AvatarUrl *string `json:"avatar_url,omitempty"`
	Name      *string `json:"name,omitempty"`
}

type Richtext struct {
	Content *string `json:"content,omitempty"`
	Type    *string `json:"type,omitempty"`
}

type Ticket struct {
	TicketId                   *string                       `json:"ticket_id,omitempty"`
	HelpdeskId                 *string                       `json:"helpdesk_id,omitempty"`
	Guest                      *TicketUser                   `json:"guest,omitempty"`
	Comments                   *Comments                     `json:"comments,omitempty"`
	TicketType                 *int                          `json:"ticket_type,omitempty"`
	Status                     *int                          `json:"status,omitempty"`
	Score                      *int                          `json:"score,omitempty"`
	CreatedAt                  *int                          `json:"created_at,omitempty"`
	UpdatedAt                  *int                          `json:"updated_at,omitempty"`
	ClosedAt                   *int                          `json:"closed_at,omitempty"`
	DissatisfactionReason      []string                      `json:"dissatisfaction_reason,omitempty"`
	Agents                     []*TicketUser                 `json:"agents,omitempty"`
	Channel                    *int                          `json:"channel,omitempty"`
	Solve                      *int                          `json:"solve,omitempty"`
	ClosedBy                   *TicketUser                   `json:"closed_by,omitempty"`
	Collaborators              []*TicketUser                 `json:"collaborators,omitempty"`
	CustomizedFields           []*CustomizedFieldDisplayItem `json:"customized_fields,omitempty"`
	AgentServiceDuration       *float64                      `json:"agent_service_duration,omitempty"`
	AgentFirstResponseDuration *int                          `json:"agent_first_response_duration,omitempty"`
	BotServiceDuration         *int                          `json:"bot_service_duration,omitempty"`
	AgentResolutionTime        *int                          `json:"agent_resolution_time,omitempty"`
	ActualProcessingTime       *int                          `json:"actual_processing_time,omitempty"`
	AgentEntryTime             *int                          `json:"agent_entry_time,omitempty"`
	AgentFirstResponseTime     *int                          `json:"agent_first_response_time,omitempty"`
	AgentLastResponseTime      *int                          `json:"agent_last_response_time,omitempty"`
	AgentOwner                 *TicketUser                   `json:"agent_owner,omitempty"`
}

type TicketMessage struct {
	Id          *string `json:"id,omitempty"`
	MessageId   *string `json:"message_id,omitempty"`
	MessageType *string `json:"message_type,omitempty"`
	CreatedAt   *int    `json:"created_at,omitempty"`
	Content     *string `json:"content,omitempty"`
	UserName    *string `json:"user_name,omitempty"`
	AvatarUrl   *string `json:"avatar_url,omitempty"`
	UserId      *string `json:"user_id,omitempty"`
}

type TicketCustomizedField struct {
	TicketCustomizedFieldId *string     `json:"ticket_customized_field_id,omitempty"`
	HelpdeskId              *string     `json:"helpdesk_id,omitempty"`
	KeyName                 *string     `json:"key_name,omitempty"`
	DisplayName             *string     `json:"display_name,omitempty"`
	Position                *string     `json:"position,omitempty"`
	FieldType               *string     `json:"field_type,omitempty"`
	Description             *string     `json:"description,omitempty"`
	Visible                 *bool       `json:"visible,omitempty"`
	Editable                *bool       `json:"editable,omitempty"`
	Required                *bool       `json:"required,omitempty"`
	CreatedAt               *string     `json:"created_at,omitempty"`
	UpdatedAt               *string     `json:"updated_at,omitempty"`
	CreatedBy               *TicketUser `json:"created_by,omitempty"`
	UpdatedBy               *TicketUser `json:"updated_by,omitempty"`
	DropdownAllowMultiple   *bool       `json:"dropdown_allow_multiple,omitempty"`
}

type TicketEvent struct {
	TicketId         *string                       `json:"ticket_id,omitempty"`
	HelpdeskId       *string                       `json:"helpdesk_id,omitempty"`
	Guest            *TicketUserEvent              `json:"guest,omitempty"`
	Stage            *int                          `json:"stage,omitempty"`
	Status           *int                          `json:"status,omitempty"`
	Score            *int                          `json:"score,omitempty"`
	CreatedAt        *int                          `json:"created_at,omitempty"`
	UpdatedAt        *int                          `json:"updated_at,omitempty"`
	ClosedAt         *int                          `json:"closed_at,omitempty"`
	Agents           []*TicketUserEvent            `json:"agents,omitempty"`
	Channel          *int                          `json:"channel,omitempty"`
	Solve            *int                          `json:"solve,omitempty"`
	ClosedBy         *TicketUserEvent              `json:"closed_by,omitempty"`
	Collaborators    []*TicketUserEvent            `json:"collaborators,omitempty"`
	CustomizedFields []*CustomizedFieldDisplayItem `json:"customized_fields,omitempty"`
	ChatId           *string                       `json:"chat_id,omitempty"`
}

type TicketEventUpdateInfo struct {
	Stage     *int `json:"stage,omitempty"`
	Status    *int `json:"status,omitempty"`
	UpdatedAt *int `json:"updated_at,omitempty"`
}

type TicketMessage struct {
	TicketMessageId *string               `json:"ticket_message_id,omitempty"`
	MessageId       *string               `json:"message_id,omitempty"`
	MsgType         *string               `json:"msg_type,omitempty"`
	Position        *string               `json:"position,omitempty"`
	SenderId        *string               `json:"sender_id,omitempty"`
	SenderType      *int                  `json:"sender_type,omitempty"`
	Text            *string               `json:"text,omitempty"`
	Ticket          *Ticket               `json:"ticket,omitempty"`
	EventId         *string               `json:"event_id,omitempty"`
	ChatId          *string               `json:"chat_id,omitempty"`
	Content         *TicketMessageContent `json:"content,omitempty"`
}

type TicketMessageContent struct {
	Content   *string  `json:"content,omitempty"`
	MsgType   *string  `json:"msg_type,omitempty"`
	ImageKeys []string `json:"image_keys,omitempty"`
	ImageKey  *string  `json:"image_key,omitempty"`
}

type TicketMessageEvent struct {
	TicketMessageId *string               `json:"ticket_message_id,omitempty"`
	MessageId       *string               `json:"message_id,omitempty"`
	MsgType         *string               `json:"msg_type,omitempty"`
	Position        *string               `json:"position,omitempty"`
	SenderId        *UserId               `json:"sender_id,omitempty"`
	SenderType      *int                  `json:"sender_type,omitempty"`
	Text            *string               `json:"text,omitempty"`
	Ticket          *Ticket               `json:"ticket,omitempty"`
	EventId         *string               `json:"event_id,omitempty"`
	ChatId          *string               `json:"chat_id,omitempty"`
	Content         *TicketMessageContent `json:"content,omitempty"`
}

type TicketUser struct {
	Id         *string `json:"id,omitempty"`
	AvatarUrl  *string `json:"avatar_url,omitempty"`
	Name       *string `json:"name,omitempty"`
	Email      *string `json:"email,omitempty"`
	Department *string `json:"department,omitempty"`
	City       *string `json:"city,omitempty"`
	Country    *string `json:"country,omitempty"`
}

type TicketUserEvent struct {
	Id        *UserId `json:"id,omitempty"`
	AvatarUrl *string `json:"avatar_url,omitempty"`
	Name      *string `json:"name,omitempty"`
	Email     *string `json:"email,omitempty"`
}

type UserCustomizedField struct {
	UserCustomizedFieldId *string `json:"user_customized_field_id,omitempty"`
	Id                    *string `json:"id,omitempty"`
	HelpdeskId            *string `json:"helpdesk_id,omitempty"`
	KeyName               *string `json:"key_name,omitempty"`
	DisplayName           *string `json:"display_name,omitempty"`
	Position              *string `json:"position,omitempty"`
	FieldType             *string `json:"field_type,omitempty"`
	Description           *string `json:"description,omitempty"`
	Visible               *bool   `json:"visible,omitempty"`
	Editable              *bool   `json:"editable,omitempty"`
	Required              *bool   `json:"required,omitempty"`
	CreatedAt             *string `json:"created_at,omitempty"`
	UpdatedAt             *string `json:"updated_at,omitempty"`
}

type UserId struct {
	UserId  *string `json:"user_id,omitempty"`
	OpenId  *string `json:"open_id,omitempty"`
	UnionId *string `json:"union_id,omitempty"`
}

type UserQueryFaqInfo struct {
	Id    *string  `json:"id,omitempty"`
	Score *float64 `json:"score,omitempty"`
}

type WeekdaySchedule struct {
	StartTime *string `json:"start_time,omitempty"`
	EndTime   *string `json:"end_time,omitempty"`
	Weekday   *int    `json:"weekday,omitempty"`
}

/**生成请求和响应结果类型，以及请求对象的Builder构造器 **/

type AgentEmailAgentRespData struct {
	Agents *string `json:"agents,omitempty"`
}

type AgentEmailAgentResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *AgentEmailAgentRespData `json:"data"`
}

func (resp *AgentEmailAgentResp) Success() bool {
	return resp.Code == 0
}

type PatchAgentReqBodyBuilder struct {
	status     int
	statusFlag bool
}

// 生成body的New构造器
func NewPatchAgentReqBodyBuilder() *PatchAgentReqBodyBuilder {
	builder := &PatchAgentReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *PatchAgentReqBodyBuilder) Status(status int) *PatchAgentReqBodyBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *PatchAgentReqBodyBuilder) Build() *PatchAgentReqBody {
	req := &PatchAgentReqBody{}
	if builder.statusFlag {
		req.Status = &builder.status

	}
	return req
}

/**上传文件path开始**/
type PatchAgentPathReqBodyBuilder struct {
	status     int
	statusFlag bool
}

// 生成body的New构造器
func NewPatchAgentPathReqBodyBuilder() *PatchAgentPathReqBodyBuilder {
	builder := &PatchAgentPathReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *PatchAgentPathReqBodyBuilder) Status(status int) *PatchAgentPathReqBodyBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *PatchAgentPathReqBodyBuilder) Build() (*PatchAgentReqBody, error) {
	req := &PatchAgentReqBody{}
	if builder.statusFlag {
		req.Status = &builder.status

	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type PatchAgentReqBuilder struct {
	agentId     string
	agentIdFlag bool
	body        *PatchAgentReqBody
	bodyFlag    bool
}

// 生成请求的New构造器
func NewPatchAgentReqBuilder() *PatchAgentReqBuilder {
	builder := &PatchAgentReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *PatchAgentReqBuilder) AgentId(agentId string) *PatchAgentReqBuilder {
	builder.agentId = agentId
	builder.agentIdFlag = true
	return builder
}
func (builder *PatchAgentReqBuilder) Body(body *PatchAgentReqBody) *PatchAgentReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *PatchAgentReqBuilder) Build() *PatchAgentReq {
	req := &PatchAgentReq{}
	if builder.agentIdFlag {
		req.AgentId = builder.agentId
	}
	if builder.bodyFlag {
		req.Body = builder.body

	}
	return req
}

type PatchAgentReqBody struct {
	Status *int `json:"status,omitempty"`
}

type PatchAgentReq struct {
	AgentId string             `path:"agent_id"`
	Body    *PatchAgentReqBody `body:""`
}

type PatchAgentResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *PatchAgentResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type DeleteAgentSchedulesReqBuilder struct {
	agentId     string
	agentIdFlag bool
}

// 生成请求的New构造器
func NewDeleteAgentSchedulesReqBuilder() *DeleteAgentSchedulesReqBuilder {
	builder := &DeleteAgentSchedulesReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *DeleteAgentSchedulesReqBuilder) AgentId(agentId string) *DeleteAgentSchedulesReqBuilder {
	builder.agentId = agentId
	builder.agentIdFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *DeleteAgentSchedulesReqBuilder) Build() *DeleteAgentSchedulesReq {
	req := &DeleteAgentSchedulesReq{}
	if builder.agentIdFlag {
		req.AgentId = builder.agentId
	}
	return req
}

type DeleteAgentSchedulesReq struct {
	AgentId string `path:"agent_id"`
}

type DeleteAgentSchedulesResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *DeleteAgentSchedulesResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type GetAgentSchedulesReqBuilder struct {
	agentId     string
	agentIdFlag bool
}

// 生成请求的New构造器
func NewGetAgentSchedulesReqBuilder() *GetAgentSchedulesReqBuilder {
	builder := &GetAgentSchedulesReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *GetAgentSchedulesReqBuilder) AgentId(agentId string) *GetAgentSchedulesReqBuilder {
	builder.agentId = agentId
	builder.agentIdFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *GetAgentSchedulesReqBuilder) Build() *GetAgentSchedulesReq {
	req := &GetAgentSchedulesReq{}
	if builder.agentIdFlag {
		req.AgentId = builder.agentId
	}
	return req
}

type GetAgentSchedulesReq struct {
	AgentId string `path:"agent_id"`
}

type GetAgentSchedulesRespData struct {
	AgentSchedule *AgentSchedule `json:"agent_schedule,omitempty"`
}

type GetAgentSchedulesResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *GetAgentSchedulesRespData `json:"data"`
}

func (resp *GetAgentSchedulesResp) Success() bool {
	return resp.Code == 0
}

type PatchAgentSchedulesReqBodyBuilder struct {
	agentSchedule     *AgentScheduleUpdateInfo
	agentScheduleFlag bool
}

// 生成body的New构造器
func NewPatchAgentSchedulesReqBodyBuilder() *PatchAgentSchedulesReqBodyBuilder {
	builder := &PatchAgentSchedulesReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *PatchAgentSchedulesReqBodyBuilder) AgentSchedule(agentSchedule *AgentScheduleUpdateInfo) *PatchAgentSchedulesReqBodyBuilder {
	builder.agentSchedule = agentSchedule
	builder.agentScheduleFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *PatchAgentSchedulesReqBodyBuilder) Build() *PatchAgentSchedulesReqBody {
	req := &PatchAgentSchedulesReqBody{}
	if builder.agentScheduleFlag {
		req.AgentSchedule = builder.agentSchedule

	}
	return req
}

/**上传文件path开始**/
type PatchAgentSchedulesPathReqBodyBuilder struct {
	agentSchedule     *AgentScheduleUpdateInfo
	agentScheduleFlag bool
}

// 生成body的New构造器
func NewPatchAgentSchedulesPathReqBodyBuilder() *PatchAgentSchedulesPathReqBodyBuilder {
	builder := &PatchAgentSchedulesPathReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *PatchAgentSchedulesPathReqBodyBuilder) AgentSchedule(agentSchedule *AgentScheduleUpdateInfo) *PatchAgentSchedulesPathReqBodyBuilder {
	builder.agentSchedule = agentSchedule
	builder.agentScheduleFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *PatchAgentSchedulesPathReqBodyBuilder) Build() (*PatchAgentSchedulesReqBody, error) {
	req := &PatchAgentSchedulesReqBody{}
	if builder.agentScheduleFlag {
		req.AgentSchedule = builder.agentSchedule
	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type PatchAgentSchedulesReqBuilder struct {
	agentId     string
	agentIdFlag bool
	body        *PatchAgentSchedulesReqBody
	bodyFlag    bool
}

// 生成请求的New构造器
func NewPatchAgentSchedulesReqBuilder() *PatchAgentSchedulesReqBuilder {
	builder := &PatchAgentSchedulesReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *PatchAgentSchedulesReqBuilder) AgentId(agentId string) *PatchAgentSchedulesReqBuilder {
	builder.agentId = agentId
	builder.agentIdFlag = true
	return builder
}
func (builder *PatchAgentSchedulesReqBuilder) Body(body *PatchAgentSchedulesReqBody) *PatchAgentSchedulesReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *PatchAgentSchedulesReqBuilder) Build() *PatchAgentSchedulesReq {
	req := &PatchAgentSchedulesReq{}
	if builder.agentIdFlag {
		req.AgentId = builder.agentId
	}
	if builder.bodyFlag {
		req.Body = builder.body

	}
	return req
}

type PatchAgentSchedulesReqBody struct {
	AgentSchedule *AgentScheduleUpdateInfo `json:"agent_schedule,omitempty"`
}

type PatchAgentSchedulesReq struct {
	AgentId string                      `path:"agent_id"`
	Body    *PatchAgentSchedulesReqBody `body:""`
}

type PatchAgentSchedulesResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *PatchAgentSchedulesResp) Success() bool {
	return resp.Code == 0
}

type CreateAgentScheduleReqBodyBuilder struct {
	agentSchedules     []*AgentScheduleUpdateInfo
	agentSchedulesFlag bool
}

// 生成body的New构造器
func NewCreateAgentScheduleReqBodyBuilder() *CreateAgentScheduleReqBodyBuilder {
	builder := &CreateAgentScheduleReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *CreateAgentScheduleReqBodyBuilder) AgentSchedules(agentSchedules []*AgentScheduleUpdateInfo) *CreateAgentScheduleReqBodyBuilder {
	builder.agentSchedules = agentSchedules
	builder.agentSchedulesFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *CreateAgentScheduleReqBodyBuilder) Build() *CreateAgentScheduleReqBody {
	req := &CreateAgentScheduleReqBody{}
	if builder.agentSchedulesFlag {
		req.AgentSchedules = builder.agentSchedules

	}
	return req
}

/**上传文件path开始**/
type CreateAgentSchedulePathReqBodyBuilder struct {
	agentSchedules     []*AgentScheduleUpdateInfo
	agentSchedulesFlag bool
}

// 生成body的New构造器
func NewCreateAgentSchedulePathReqBodyBuilder() *CreateAgentSchedulePathReqBodyBuilder {
	builder := &CreateAgentSchedulePathReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *CreateAgentSchedulePathReqBodyBuilder) AgentSchedules(agentSchedules []*AgentScheduleUpdateInfo) *CreateAgentSchedulePathReqBodyBuilder {
	builder.agentSchedules = agentSchedules
	builder.agentSchedulesFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *CreateAgentSchedulePathReqBodyBuilder) Build() (*CreateAgentScheduleReqBody, error) {
	req := &CreateAgentScheduleReqBody{}
	if builder.agentSchedulesFlag {
		req.AgentSchedules = builder.agentSchedules
	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type CreateAgentScheduleReqBuilder struct {
	body     *CreateAgentScheduleReqBody
	bodyFlag bool
}

// 生成请求的New构造器
func NewCreateAgentScheduleReqBuilder() *CreateAgentScheduleReqBuilder {
	builder := &CreateAgentScheduleReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *CreateAgentScheduleReqBuilder) Body(body *CreateAgentScheduleReqBody) *CreateAgentScheduleReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *CreateAgentScheduleReqBuilder) Build() *CreateAgentScheduleReq {
	req := &CreateAgentScheduleReq{}
	if builder.bodyFlag {
		req.Body = builder.body

	}
	return req
}

type CreateAgentScheduleReqBody struct {
	AgentSchedules []*AgentScheduleUpdateInfo `json:"agent_schedules,omitempty"`
}

type CreateAgentScheduleReq struct {
	Body *CreateAgentScheduleReqBody `body:""`
}

type CreateAgentScheduleResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *CreateAgentScheduleResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type ListAgentScheduleReqBuilder struct {
	status     []int
	statusFlag bool
}

// 生成请求的New构造器
func NewListAgentScheduleReqBuilder() *ListAgentScheduleReqBuilder {
	builder := &ListAgentScheduleReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *ListAgentScheduleReqBuilder) Status(status []int) *ListAgentScheduleReqBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *ListAgentScheduleReqBuilder) Build() *ListAgentScheduleReq {
	req := &ListAgentScheduleReq{}
	if builder.statusFlag {
		req.Status = builder.status
	}
	return req
}

type ListAgentScheduleReq struct {
	Status []int `query:"status"`
}

type ListAgentScheduleRespData struct {
	AgentSchedules []*AgentSchedule `json:"agent_schedules,omitempty"`
}

type ListAgentScheduleResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *ListAgentScheduleRespData `json:"data"`
}

func (resp *ListAgentScheduleResp) Success() bool {
	return resp.Code == 0
}

type CreateAgentSkillReqBodyBuilder struct {
	name         string
	nameFlag     bool
	rules        []*AgentSkillRule
	rulesFlag    bool
	agentIds     []string
	agentIdsFlag bool
}

// 生成body的New构造器
func NewCreateAgentSkillReqBodyBuilder() *CreateAgentSkillReqBodyBuilder {
	builder := &CreateAgentSkillReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *CreateAgentSkillReqBodyBuilder) Name(name string) *CreateAgentSkillReqBodyBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *CreateAgentSkillReqBodyBuilder) Rules(rules []*AgentSkillRule) *CreateAgentSkillReqBodyBuilder {
	builder.rules = rules
	builder.rulesFlag = true
	return builder
}
func (builder *CreateAgentSkillReqBodyBuilder) AgentIds(agentIds []string) *CreateAgentSkillReqBodyBuilder {
	builder.agentIds = agentIds
	builder.agentIdsFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *CreateAgentSkillReqBodyBuilder) Build() *CreateAgentSkillReqBody {
	req := &CreateAgentSkillReqBody{}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.rulesFlag {
		req.Rules = builder.rules

	}
	if builder.agentIdsFlag {
		req.AgentIds = builder.agentIds

	}
	return req
}

/**上传文件path开始**/
type CreateAgentSkillPathReqBodyBuilder struct {
	name         string
	nameFlag     bool
	rules        []*AgentSkillRule
	rulesFlag    bool
	agentIds     []string
	agentIdsFlag bool
}

// 生成body的New构造器
func NewCreateAgentSkillPathReqBodyBuilder() *CreateAgentSkillPathReqBodyBuilder {
	builder := &CreateAgentSkillPathReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *CreateAgentSkillPathReqBodyBuilder) Name(name string) *CreateAgentSkillPathReqBodyBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *CreateAgentSkillPathReqBodyBuilder) Rules(rules []*AgentSkillRule) *CreateAgentSkillPathReqBodyBuilder {
	builder.rules = rules
	builder.rulesFlag = true
	return builder
}
func (builder *CreateAgentSkillPathReqBodyBuilder) AgentIds(agentIds []string) *CreateAgentSkillPathReqBodyBuilder {
	builder.agentIds = agentIds
	builder.agentIdsFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *CreateAgentSkillPathReqBodyBuilder) Build() (*CreateAgentSkillReqBody, error) {
	req := &CreateAgentSkillReqBody{}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.rulesFlag {
		req.Rules = builder.rules
	}
	if builder.agentIdsFlag {
		req.AgentIds = builder.agentIds
	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type CreateAgentSkillReqBuilder struct {
	body     *CreateAgentSkillReqBody
	bodyFlag bool
}

// 生成请求的New构造器
func NewCreateAgentSkillReqBuilder() *CreateAgentSkillReqBuilder {
	builder := &CreateAgentSkillReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *CreateAgentSkillReqBuilder) Body(body *CreateAgentSkillReqBody) *CreateAgentSkillReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *CreateAgentSkillReqBuilder) Build() *CreateAgentSkillReq {
	req := &CreateAgentSkillReq{}
	if builder.bodyFlag {
		req.Body = builder.body

	}
	return req
}

type CreateAgentSkillReqBody struct {
	Name     *string           `json:"name,omitempty"`
	Rules    []*AgentSkillRule `json:"rules,omitempty"`
	AgentIds []string          `json:"agent_ids,omitempty"`
}

type CreateAgentSkillReq struct {
	Body *CreateAgentSkillReqBody `body:""`
}

type CreateAgentSkillRespData struct {
	AgentSkillId *string `json:"agent_skill_id,omitempty"`
}

type CreateAgentSkillResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *CreateAgentSkillRespData `json:"data"`
}

func (resp *CreateAgentSkillResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type DeleteAgentSkillReqBuilder struct {
	agentSkillId     string
	agentSkillIdFlag bool
}

// 生成请求的New构造器
func NewDeleteAgentSkillReqBuilder() *DeleteAgentSkillReqBuilder {
	builder := &DeleteAgentSkillReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *DeleteAgentSkillReqBuilder) AgentSkillId(agentSkillId string) *DeleteAgentSkillReqBuilder {
	builder.agentSkillId = agentSkillId
	builder.agentSkillIdFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *DeleteAgentSkillReqBuilder) Build() *DeleteAgentSkillReq {
	req := &DeleteAgentSkillReq{}
	if builder.agentSkillIdFlag {
		req.AgentSkillId = builder.agentSkillId
	}
	return req
}

type DeleteAgentSkillReq struct {
	AgentSkillId string `path:"agent_skill_id"`
}

type DeleteAgentSkillResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *DeleteAgentSkillResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type GetAgentSkillReqBuilder struct {
	agentSkillId     string
	agentSkillIdFlag bool
}

// 生成请求的New构造器
func NewGetAgentSkillReqBuilder() *GetAgentSkillReqBuilder {
	builder := &GetAgentSkillReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *GetAgentSkillReqBuilder) AgentSkillId(agentSkillId string) *GetAgentSkillReqBuilder {
	builder.agentSkillId = agentSkillId
	builder.agentSkillIdFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *GetAgentSkillReqBuilder) Build() *GetAgentSkillReq {
	req := &GetAgentSkillReq{}
	if builder.agentSkillIdFlag {
		req.AgentSkillId = builder.agentSkillId
	}
	return req
}

type GetAgentSkillReq struct {
	AgentSkillId string `path:"agent_skill_id"`
}

type GetAgentSkillRespData struct {
	AgentSkill *AgentSkill `json:"agent_skill,omitempty"`
}

type GetAgentSkillResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *GetAgentSkillRespData `json:"data"`
}

func (resp *GetAgentSkillResp) Success() bool {
	return resp.Code == 0
}

type ListAgentSkillRespData struct {
	AgentSkills []*AgentSkill `json:"agent_skills,omitempty"`
}

type ListAgentSkillResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *ListAgentSkillRespData `json:"data"`
}

func (resp *ListAgentSkillResp) Success() bool {
	return resp.Code == 0
}

type PatchAgentSkillReqBodyBuilder struct {
	agentSkill     *AgentSkill
	agentSkillFlag bool
}

// 生成body的New构造器
func NewPatchAgentSkillReqBodyBuilder() *PatchAgentSkillReqBodyBuilder {
	builder := &PatchAgentSkillReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *PatchAgentSkillReqBodyBuilder) AgentSkill(agentSkill *AgentSkill) *PatchAgentSkillReqBodyBuilder {
	builder.agentSkill = agentSkill
	builder.agentSkillFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *PatchAgentSkillReqBodyBuilder) Build() *PatchAgentSkillReqBody {
	req := &PatchAgentSkillReqBody{}
	if builder.agentSkillFlag {
		req.AgentSkill = builder.agentSkill

	}
	return req
}

/**上传文件path开始**/
type PatchAgentSkillPathReqBodyBuilder struct {
	agentSkill     *AgentSkill
	agentSkillFlag bool
}

// 生成body的New构造器
func NewPatchAgentSkillPathReqBodyBuilder() *PatchAgentSkillPathReqBodyBuilder {
	builder := &PatchAgentSkillPathReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *PatchAgentSkillPathReqBodyBuilder) AgentSkill(agentSkill *AgentSkill) *PatchAgentSkillPathReqBodyBuilder {
	builder.agentSkill = agentSkill
	builder.agentSkillFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *PatchAgentSkillPathReqBodyBuilder) Build() (*PatchAgentSkillReqBody, error) {
	req := &PatchAgentSkillReqBody{}
	if builder.agentSkillFlag {
		req.AgentSkill = builder.agentSkill
	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type PatchAgentSkillReqBuilder struct {
	agentSkillId     string
	agentSkillIdFlag bool
	body             *PatchAgentSkillReqBody
	bodyFlag         bool
}

// 生成请求的New构造器
func NewPatchAgentSkillReqBuilder() *PatchAgentSkillReqBuilder {
	builder := &PatchAgentSkillReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *PatchAgentSkillReqBuilder) AgentSkillId(agentSkillId string) *PatchAgentSkillReqBuilder {
	builder.agentSkillId = agentSkillId
	builder.agentSkillIdFlag = true
	return builder
}
func (builder *PatchAgentSkillReqBuilder) Body(body *PatchAgentSkillReqBody) *PatchAgentSkillReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *PatchAgentSkillReqBuilder) Build() *PatchAgentSkillReq {
	req := &PatchAgentSkillReq{}
	if builder.agentSkillIdFlag {
		req.AgentSkillId = builder.agentSkillId
	}
	if builder.bodyFlag {
		req.Body = builder.body

	}
	return req
}

type PatchAgentSkillReqBody struct {
	AgentSkill *AgentSkill `json:"agent_skill,omitempty"`
}

type PatchAgentSkillReq struct {
	AgentSkillId string                  `path:"agent_skill_id"`
	Body         *PatchAgentSkillReqBody `body:""`
}

type PatchAgentSkillResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *PatchAgentSkillResp) Success() bool {
	return resp.Code == 0
}

type ListAgentSkillRuleRespData struct {
	Rules []*AgentSkillRule `json:"rules,omitempty"`
}

type ListAgentSkillRuleResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *ListAgentSkillRuleRespData `json:"data"`
}

func (resp *ListAgentSkillRuleResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type CreateBotMessageReqBuilder struct {
	userIdType     string
	userIdTypeFlag bool
	botMessage     *BotMessage
	botMessageFlag bool
}

// 生成请求的New构造器
func NewCreateBotMessageReqBuilder() *CreateBotMessageReqBuilder {
	builder := &CreateBotMessageReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *CreateBotMessageReqBuilder) UserIdType(userIdType string) *CreateBotMessageReqBuilder {
	builder.userIdType = userIdType
	builder.userIdTypeFlag = true
	return builder
}
func (builder *CreateBotMessageReqBuilder) BotMessage(botMessage *BotMessage) *CreateBotMessageReqBuilder {
	builder.botMessage = botMessage
	builder.botMessageFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *CreateBotMessageReqBuilder) Build() *CreateBotMessageReq {
	req := &CreateBotMessageReq{}
	if builder.userIdTypeFlag {
		req.UserIdType = &builder.userIdType
	}
	return req
}

type CreateBotMessageReq struct {
	UserIdType *string     `query:"user_id_type"`
	BotMessage *BotMessage `body:""`
}

type CreateBotMessageRespData struct {
	MessageId *string `json:"message_id,omitempty"`
}

type CreateBotMessageResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *CreateBotMessageRespData `json:"data"`
}

func (resp *CreateBotMessageResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type CreateCategoryReqBuilder struct {
	category     *Category
	categoryFlag bool
}

// 生成请求的New构造器
func NewCreateCategoryReqBuilder() *CreateCategoryReqBuilder {
	builder := &CreateCategoryReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *CreateCategoryReqBuilder) Category(category *Category) *CreateCategoryReqBuilder {
	builder.category = category
	builder.categoryFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *CreateCategoryReqBuilder) Build() *CreateCategoryReq {
	req := &CreateCategoryReq{}
	return req
}

type CreateCategoryReq struct {
	Category *Category `body:""`
}

type CreateCategoryRespData struct {
	Category *Category `json:"category,omitempty"`
}

type CreateCategoryResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *CreateCategoryRespData `json:"data"`
}

func (resp *CreateCategoryResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type DeleteCategoryReqBuilder struct {
	id     string
	idFlag bool
}

// 生成请求的New构造器
func NewDeleteCategoryReqBuilder() *DeleteCategoryReqBuilder {
	builder := &DeleteCategoryReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *DeleteCategoryReqBuilder) Id(id string) *DeleteCategoryReqBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *DeleteCategoryReqBuilder) Build() *DeleteCategoryReq {
	req := &DeleteCategoryReq{}
	if builder.idFlag {
		req.Id = builder.id
	}
	return req
}

type DeleteCategoryReq struct {
	Id string `path:"id"`
}

type DeleteCategoryResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *DeleteCategoryResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type GetCategoryReqBuilder struct {
	id     string
	idFlag bool
}

// 生成请求的New构造器
func NewGetCategoryReqBuilder() *GetCategoryReqBuilder {
	builder := &GetCategoryReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *GetCategoryReqBuilder) Id(id string) *GetCategoryReqBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *GetCategoryReqBuilder) Build() *GetCategoryReq {
	req := &GetCategoryReq{}
	if builder.idFlag {
		req.Id = builder.id
	}
	return req
}

type GetCategoryReq struct {
	Id string `path:"id"`
}

type GetCategoryRespData struct {
	CategoryId *string `json:"category_id,omitempty"`
	Id         *string `json:"id,omitempty"`
	Name       *string `json:"name,omitempty"`
	HelpdeskId *string `json:"helpdesk_id,omitempty"`
	Language   *string `json:"language,omitempty"`
}

type GetCategoryResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *GetCategoryRespData `json:"data"`
}

func (resp *GetCategoryResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type ListCategoryReqBuilder struct {
	lang        string
	langFlag    bool
	orderBy     int
	orderByFlag bool
	asc         bool
	ascFlag     bool
}

// 生成请求的New构造器
func NewListCategoryReqBuilder() *ListCategoryReqBuilder {
	builder := &ListCategoryReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *ListCategoryReqBuilder) Lang(lang string) *ListCategoryReqBuilder {
	builder.lang = lang
	builder.langFlag = true
	return builder
}
func (builder *ListCategoryReqBuilder) OrderBy(orderBy int) *ListCategoryReqBuilder {
	builder.orderBy = orderBy
	builder.orderByFlag = true
	return builder
}
func (builder *ListCategoryReqBuilder) Asc(asc bool) *ListCategoryReqBuilder {
	builder.asc = asc
	builder.ascFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *ListCategoryReqBuilder) Build() *ListCategoryReq {
	req := &ListCategoryReq{}
	if builder.langFlag {
		req.Lang = &builder.lang
	}
	if builder.orderByFlag {
		req.OrderBy = &builder.orderBy
	}
	if builder.ascFlag {
		req.Asc = &builder.asc
	}
	return req
}

type ListCategoryReq struct {
	Lang    *string `query:"lang"`
	OrderBy *int    `query:"order_by"`
	Asc     *bool   `query:"asc"`
}

type ListCategoryRespData struct {
	Categories []*Category `json:"categories,omitempty"`
}

type ListCategoryResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *ListCategoryRespData `json:"data"`
}

func (resp *ListCategoryResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type PatchCategoryReqBuilder struct {
	id           string
	idFlag       bool
	category     *Category
	categoryFlag bool
}

// 生成请求的New构造器
func NewPatchCategoryReqBuilder() *PatchCategoryReqBuilder {
	builder := &PatchCategoryReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *PatchCategoryReqBuilder) Id(id string) *PatchCategoryReqBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *PatchCategoryReqBuilder) Category(category *Category) *PatchCategoryReqBuilder {
	builder.category = category
	builder.categoryFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *PatchCategoryReqBuilder) Build() *PatchCategoryReq {
	req := &PatchCategoryReq{}
	if builder.idFlag {
		req.Id = builder.id
	}
	return req
}

type PatchCategoryReq struct {
	Id       string    `path:"id"`
	Category *Category `body:""`
}

type PatchCategoryResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *PatchCategoryResp) Success() bool {
	return resp.Code == 0
}

type SubscribeEventReqBodyBuilder struct {
	events     []*Event
	eventsFlag bool
}

// 生成body的New构造器
func NewSubscribeEventReqBodyBuilder() *SubscribeEventReqBodyBuilder {
	builder := &SubscribeEventReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *SubscribeEventReqBodyBuilder) Events(events []*Event) *SubscribeEventReqBodyBuilder {
	builder.events = events
	builder.eventsFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *SubscribeEventReqBodyBuilder) Build() *SubscribeEventReqBody {
	req := &SubscribeEventReqBody{}
	if builder.eventsFlag {
		req.Events = builder.events

	}
	return req
}

/**上传文件path开始**/
type SubscribeEventPathReqBodyBuilder struct {
	events     []*Event
	eventsFlag bool
}

// 生成body的New构造器
func NewSubscribeEventPathReqBodyBuilder() *SubscribeEventPathReqBodyBuilder {
	builder := &SubscribeEventPathReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *SubscribeEventPathReqBodyBuilder) Events(events []*Event) *SubscribeEventPathReqBodyBuilder {
	builder.events = events
	builder.eventsFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *SubscribeEventPathReqBodyBuilder) Build() (*SubscribeEventReqBody, error) {
	req := &SubscribeEventReqBody{}
	if builder.eventsFlag {
		req.Events = builder.events
	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type SubscribeEventReqBuilder struct {
	body     *SubscribeEventReqBody
	bodyFlag bool
}

// 生成请求的New构造器
func NewSubscribeEventReqBuilder() *SubscribeEventReqBuilder {
	builder := &SubscribeEventReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *SubscribeEventReqBuilder) Body(body *SubscribeEventReqBody) *SubscribeEventReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *SubscribeEventReqBuilder) Build() *SubscribeEventReq {
	req := &SubscribeEventReq{}
	if builder.bodyFlag {
		req.Body = builder.body

	}
	return req
}

type SubscribeEventReqBody struct {
	Events []*Event `json:"events,omitempty"`
}

type SubscribeEventReq struct {
	Body *SubscribeEventReqBody `body:""`
}

type SubscribeEventResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *SubscribeEventResp) Success() bool {
	return resp.Code == 0
}

type UnsubscribeEventReqBodyBuilder struct {
	events     []*Event
	eventsFlag bool
}

// 生成body的New构造器
func NewUnsubscribeEventReqBodyBuilder() *UnsubscribeEventReqBodyBuilder {
	builder := &UnsubscribeEventReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *UnsubscribeEventReqBodyBuilder) Events(events []*Event) *UnsubscribeEventReqBodyBuilder {
	builder.events = events
	builder.eventsFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *UnsubscribeEventReqBodyBuilder) Build() *UnsubscribeEventReqBody {
	req := &UnsubscribeEventReqBody{}
	if builder.eventsFlag {
		req.Events = builder.events

	}
	return req
}

/**上传文件path开始**/
type UnsubscribeEventPathReqBodyBuilder struct {
	events     []*Event
	eventsFlag bool
}

// 生成body的New构造器
func NewUnsubscribeEventPathReqBodyBuilder() *UnsubscribeEventPathReqBodyBuilder {
	builder := &UnsubscribeEventPathReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *UnsubscribeEventPathReqBodyBuilder) Events(events []*Event) *UnsubscribeEventPathReqBodyBuilder {
	builder.events = events
	builder.eventsFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *UnsubscribeEventPathReqBodyBuilder) Build() (*UnsubscribeEventReqBody, error) {
	req := &UnsubscribeEventReqBody{}
	if builder.eventsFlag {
		req.Events = builder.events
	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type UnsubscribeEventReqBuilder struct {
	body     *UnsubscribeEventReqBody
	bodyFlag bool
}

// 生成请求的New构造器
func NewUnsubscribeEventReqBuilder() *UnsubscribeEventReqBuilder {
	builder := &UnsubscribeEventReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *UnsubscribeEventReqBuilder) Body(body *UnsubscribeEventReqBody) *UnsubscribeEventReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *UnsubscribeEventReqBuilder) Build() *UnsubscribeEventReq {
	req := &UnsubscribeEventReq{}
	if builder.bodyFlag {
		req.Body = builder.body

	}
	return req
}

type UnsubscribeEventReqBody struct {
	Events []*Event `json:"events,omitempty"`
}

type UnsubscribeEventReq struct {
	Body *UnsubscribeEventReqBody `body:""`
}

type UnsubscribeEventResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *UnsubscribeEventResp) Success() bool {
	return resp.Code == 0
}

type CreateFaqReqBodyBuilder struct {
	faq     *FaqUpdateInfo
	faqFlag bool
}

// 生成body的New构造器
func NewCreateFaqReqBodyBuilder() *CreateFaqReqBodyBuilder {
	builder := &CreateFaqReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *CreateFaqReqBodyBuilder) Faq(faq *FaqUpdateInfo) *CreateFaqReqBodyBuilder {
	builder.faq = faq
	builder.faqFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *CreateFaqReqBodyBuilder) Build() *CreateFaqReqBody {
	req := &CreateFaqReqBody{}
	if builder.faqFlag {
		req.Faq = builder.faq

	}
	return req
}

/**上传文件path开始**/
type CreateFaqPathReqBodyBuilder struct {
	faq     *FaqUpdateInfo
	faqFlag bool
}

// 生成body的New构造器
func NewCreateFaqPathReqBodyBuilder() *CreateFaqPathReqBodyBuilder {
	builder := &CreateFaqPathReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *CreateFaqPathReqBodyBuilder) Faq(faq *FaqUpdateInfo) *CreateFaqPathReqBodyBuilder {
	builder.faq = faq
	builder.faqFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *CreateFaqPathReqBodyBuilder) Build() (*CreateFaqReqBody, error) {
	req := &CreateFaqReqBody{}
	if builder.faqFlag {
		req.Faq = builder.faq
	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type CreateFaqReqBuilder struct {
	body     *CreateFaqReqBody
	bodyFlag bool
}

// 生成请求的New构造器
func NewCreateFaqReqBuilder() *CreateFaqReqBuilder {
	builder := &CreateFaqReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *CreateFaqReqBuilder) Body(body *CreateFaqReqBody) *CreateFaqReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *CreateFaqReqBuilder) Build() *CreateFaqReq {
	req := &CreateFaqReq{}
	if builder.bodyFlag {
		req.Body = builder.body

	}
	return req
}

type CreateFaqReqBody struct {
	Faq *FaqUpdateInfo `json:"faq,omitempty"`
}

type CreateFaqReq struct {
	Body *CreateFaqReqBody `body:""`
}

type CreateFaqRespData struct {
	Faq *Faq `json:"faq,omitempty"`
}

type CreateFaqResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *CreateFaqRespData `json:"data"`
}

func (resp *CreateFaqResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type DeleteFaqReqBuilder struct {
	id     string
	idFlag bool
}

// 生成请求的New构造器
func NewDeleteFaqReqBuilder() *DeleteFaqReqBuilder {
	builder := &DeleteFaqReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *DeleteFaqReqBuilder) Id(id string) *DeleteFaqReqBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *DeleteFaqReqBuilder) Build() *DeleteFaqReq {
	req := &DeleteFaqReq{}
	if builder.idFlag {
		req.Id = builder.id
	}
	return req
}

type DeleteFaqReq struct {
	Id string `path:"id"`
}

type DeleteFaqResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *DeleteFaqResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type FaqImageFaqReqBuilder struct {
	id           string
	idFlag       bool
	imageKey     string
	imageKeyFlag bool
}

// 生成请求的New构造器
func NewFaqImageFaqReqBuilder() *FaqImageFaqReqBuilder {
	builder := &FaqImageFaqReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *FaqImageFaqReqBuilder) Id(id string) *FaqImageFaqReqBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *FaqImageFaqReqBuilder) ImageKey(imageKey string) *FaqImageFaqReqBuilder {
	builder.imageKey = imageKey
	builder.imageKeyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *FaqImageFaqReqBuilder) Build() *FaqImageFaqReq {
	req := &FaqImageFaqReq{}
	if builder.idFlag {
		req.Id = builder.id
	}
	if builder.imageKeyFlag {
		req.ImageKey = builder.imageKey
	}
	return req
}

type FaqImageFaqReq struct {
	Id       string `path:"id"`
	ImageKey string `path:"image_key"`
}

type FaqImageFaqResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	File     io.Reader `json:"-"`
	FileName string    `json:"-"`
}

func (resp *FaqImageFaqResp) Success() bool {
	return resp.Code == 0
}

/**下载api,生成WriteFile方法**/
func (resp *FaqImageFaqResp) WriteFile(fileName string) error {
	bs, err := ioutil.ReadAll(resp.File)
	if err != nil {
		return err
	}

	err = ioutil.WriteFile(fileName, bs, 0666)
	if err != nil {
		return err
	}
	return nil
}

/*1.4 生成请求的builder结构体*/
type GetFaqReqBuilder struct {
	id     string
	idFlag bool
}

// 生成请求的New构造器
func NewGetFaqReqBuilder() *GetFaqReqBuilder {
	builder := &GetFaqReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *GetFaqReqBuilder) Id(id string) *GetFaqReqBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *GetFaqReqBuilder) Build() *GetFaqReq {
	req := &GetFaqReq{}
	if builder.idFlag {
		req.Id = builder.id
	}
	return req
}

type GetFaqReq struct {
	Id string `path:"id"`
}

type GetFaqRespData struct {
	Faq *Faq `json:"faq,omitempty"`
}

type GetFaqResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *GetFaqRespData `json:"data"`
}

func (resp *GetFaqResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type ListFaqReqBuilder struct {
	categoryId     string
	categoryIdFlag bool
	status         string
	statusFlag     bool
	search         string
	searchFlag     bool
	pageToken      string
	pageTokenFlag  bool
	pageSize       int
	pageSizeFlag   bool
	limit          int
}

// 生成请求的New构造器
func NewListFaqReqBuilder() *ListFaqReqBuilder {
	builder := &ListFaqReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *ListFaqReqBuilder) Limit(limit int) *ListFaqReqBuilder {
	builder.limit = limit
	return builder
}
func (builder *ListFaqReqBuilder) CategoryId(categoryId string) *ListFaqReqBuilder {
	builder.categoryId = categoryId
	builder.categoryIdFlag = true
	return builder
}
func (builder *ListFaqReqBuilder) Status(status string) *ListFaqReqBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}
func (builder *ListFaqReqBuilder) Search(search string) *ListFaqReqBuilder {
	builder.search = search
	builder.searchFlag = true
	return builder
}
func (builder *ListFaqReqBuilder) PageToken(pageToken string) *ListFaqReqBuilder {
	builder.pageToken = pageToken
	builder.pageTokenFlag = true
	return builder
}
func (builder *ListFaqReqBuilder) PageSize(pageSize int) *ListFaqReqBuilder {
	builder.pageSize = pageSize
	builder.pageSizeFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *ListFaqReqBuilder) Build() *ListFaqReq {
	req := &ListFaqReq{}
	req.Limit = builder.limit
	if builder.categoryIdFlag {
		req.CategoryId = &builder.categoryId
	}
	if builder.statusFlag {
		req.Status = &builder.status
	}
	if builder.searchFlag {
		req.Search = &builder.search
	}
	if builder.pageTokenFlag {
		req.PageToken = &builder.pageToken
	}
	if builder.pageSizeFlag {
		req.PageSize = &builder.pageSize
	}
	return req
}

type ListFaqReq struct {
	CategoryId *string `query:"category_id"`
	Status     *string `query:"status"`
	Search     *string `query:"search"`
	PageToken  *string `query:"page_token"`
	PageSize   *int    `query:"page_size"`
	Limit      int
}

type ListFaqRespData struct {
	HasMore   *bool   `json:"has_more,omitempty"`
	PageToken *string `json:"page_token,omitempty"`
	PageSize  *int    `json:"page_size,omitempty"`
	Total     *int    `json:"total,omitempty"`
	Items     []*Faq  `json:"items,omitempty"`
}

type ListFaqResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *ListFaqRespData `json:"data"`
}

func (resp *ListFaqResp) Success() bool {
	return resp.Code == 0
}

type PatchFaqReqBodyBuilder struct {
	faq     *FaqUpdateInfo
	faqFlag bool
}

// 生成body的New构造器
func NewPatchFaqReqBodyBuilder() *PatchFaqReqBodyBuilder {
	builder := &PatchFaqReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *PatchFaqReqBodyBuilder) Faq(faq *FaqUpdateInfo) *PatchFaqReqBodyBuilder {
	builder.faq = faq
	builder.faqFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *PatchFaqReqBodyBuilder) Build() *PatchFaqReqBody {
	req := &PatchFaqReqBody{}
	if builder.faqFlag {
		req.Faq = builder.faq

	}
	return req
}

/**上传文件path开始**/
type PatchFaqPathReqBodyBuilder struct {
	faq     *FaqUpdateInfo
	faqFlag bool
}

// 生成body的New构造器
func NewPatchFaqPathReqBodyBuilder() *PatchFaqPathReqBodyBuilder {
	builder := &PatchFaqPathReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *PatchFaqPathReqBodyBuilder) Faq(faq *FaqUpdateInfo) *PatchFaqPathReqBodyBuilder {
	builder.faq = faq
	builder.faqFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *PatchFaqPathReqBodyBuilder) Build() (*PatchFaqReqBody, error) {
	req := &PatchFaqReqBody{}
	if builder.faqFlag {
		req.Faq = builder.faq
	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type PatchFaqReqBuilder struct {
	id       string
	idFlag   bool
	body     *PatchFaqReqBody
	bodyFlag bool
}

// 生成请求的New构造器
func NewPatchFaqReqBuilder() *PatchFaqReqBuilder {
	builder := &PatchFaqReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *PatchFaqReqBuilder) Id(id string) *PatchFaqReqBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *PatchFaqReqBuilder) Body(body *PatchFaqReqBody) *PatchFaqReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *PatchFaqReqBuilder) Build() *PatchFaqReq {
	req := &PatchFaqReq{}
	if builder.idFlag {
		req.Id = builder.id
	}
	if builder.bodyFlag {
		req.Body = builder.body

	}
	return req
}

type PatchFaqReqBody struct {
	Faq *FaqUpdateInfo `json:"faq,omitempty"`
}

type PatchFaqReq struct {
	Id   string           `path:"id"`
	Body *PatchFaqReqBody `body:""`
}

type PatchFaqResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *PatchFaqResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type SearchFaqReqBuilder struct {
	query         string
	queryFlag     bool
	base64        string
	base64Flag    bool
	pageToken     string
	pageTokenFlag bool
	pageSize      int
	pageSizeFlag  bool
	limit         int
}

// 生成请求的New构造器
func NewSearchFaqReqBuilder() *SearchFaqReqBuilder {
	builder := &SearchFaqReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *SearchFaqReqBuilder) Limit(limit int) *SearchFaqReqBuilder {
	builder.limit = limit
	return builder
}
func (builder *SearchFaqReqBuilder) Query(query string) *SearchFaqReqBuilder {
	builder.query = query
	builder.queryFlag = true
	return builder
}
func (builder *SearchFaqReqBuilder) Base64(base64 string) *SearchFaqReqBuilder {
	builder.base64 = base64
	builder.base64Flag = true
	return builder
}
func (builder *SearchFaqReqBuilder) PageToken(pageToken string) *SearchFaqReqBuilder {
	builder.pageToken = pageToken
	builder.pageTokenFlag = true
	return builder
}
func (builder *SearchFaqReqBuilder) PageSize(pageSize int) *SearchFaqReqBuilder {
	builder.pageSize = pageSize
	builder.pageSizeFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *SearchFaqReqBuilder) Build() *SearchFaqReq {
	req := &SearchFaqReq{}
	req.Limit = builder.limit
	if builder.queryFlag {
		req.Query = &builder.query
	}
	if builder.base64Flag {
		req.Base64 = &builder.base64
	}
	if builder.pageTokenFlag {
		req.PageToken = &builder.pageToken
	}
	if builder.pageSizeFlag {
		req.PageSize = &builder.pageSize
	}
	return req
}

type SearchFaqReq struct {
	Query     *string `query:"query"`
	Base64    *string `query:"base64"`
	PageToken *string `query:"page_token"`
	PageSize  *int    `query:"page_size"`
	Limit     int
}

type SearchFaqRespData struct {
	HasMore   *bool   `json:"has_more,omitempty"`
	PageToken *string `json:"page_token,omitempty"`
	Items     []*Faq  `json:"items,omitempty"`
}

type SearchFaqResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *SearchFaqRespData `json:"data"`
}

func (resp *SearchFaqResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type CancelApproveNotificationReqBuilder struct {
	notificationId     string
	notificationIdFlag bool
}

// 生成请求的New构造器
func NewCancelApproveNotificationReqBuilder() *CancelApproveNotificationReqBuilder {
	builder := &CancelApproveNotificationReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *CancelApproveNotificationReqBuilder) NotificationId(notificationId string) *CancelApproveNotificationReqBuilder {
	builder.notificationId = notificationId
	builder.notificationIdFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *CancelApproveNotificationReqBuilder) Build() *CancelApproveNotificationReq {
	req := &CancelApproveNotificationReq{}
	if builder.notificationIdFlag {
		req.NotificationId = builder.notificationId
	}
	return req
}

type CancelApproveNotificationReq struct {
	NotificationId string `path:"notification_id"`
}

type CancelApproveNotificationResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *CancelApproveNotificationResp) Success() bool {
	return resp.Code == 0
}

type CancelSendNotificationReqBodyBuilder struct {
	isRecall     bool
	isRecallFlag bool
}

// 生成body的New构造器
func NewCancelSendNotificationReqBodyBuilder() *CancelSendNotificationReqBodyBuilder {
	builder := &CancelSendNotificationReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *CancelSendNotificationReqBodyBuilder) IsRecall(isRecall bool) *CancelSendNotificationReqBodyBuilder {
	builder.isRecall = isRecall
	builder.isRecallFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *CancelSendNotificationReqBodyBuilder) Build() *CancelSendNotificationReqBody {
	req := &CancelSendNotificationReqBody{}
	if builder.isRecallFlag {
		req.IsRecall = &builder.isRecall

	}
	return req
}

/**上传文件path开始**/
type CancelSendNotificationPathReqBodyBuilder struct {
	isRecall     bool
	isRecallFlag bool
}

// 生成body的New构造器
func NewCancelSendNotificationPathReqBodyBuilder() *CancelSendNotificationPathReqBodyBuilder {
	builder := &CancelSendNotificationPathReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *CancelSendNotificationPathReqBodyBuilder) IsRecall(isRecall bool) *CancelSendNotificationPathReqBodyBuilder {
	builder.isRecall = isRecall
	builder.isRecallFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *CancelSendNotificationPathReqBodyBuilder) Build() (*CancelSendNotificationReqBody, error) {
	req := &CancelSendNotificationReqBody{}
	if builder.isRecallFlag {
		req.IsRecall = &builder.isRecall

	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type CancelSendNotificationReqBuilder struct {
	notificationId     string
	notificationIdFlag bool
	body               *CancelSendNotificationReqBody
	bodyFlag           bool
}

// 生成请求的New构造器
func NewCancelSendNotificationReqBuilder() *CancelSendNotificationReqBuilder {
	builder := &CancelSendNotificationReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *CancelSendNotificationReqBuilder) NotificationId(notificationId string) *CancelSendNotificationReqBuilder {
	builder.notificationId = notificationId
	builder.notificationIdFlag = true
	return builder
}
func (builder *CancelSendNotificationReqBuilder) Body(body *CancelSendNotificationReqBody) *CancelSendNotificationReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *CancelSendNotificationReqBuilder) Build() *CancelSendNotificationReq {
	req := &CancelSendNotificationReq{}
	if builder.notificationIdFlag {
		req.NotificationId = builder.notificationId
	}
	if builder.bodyFlag {
		req.Body = builder.body

	}
	return req
}

type CancelSendNotificationReqBody struct {
	IsRecall *bool `json:"is_recall,omitempty"`
}

type CancelSendNotificationReq struct {
	NotificationId string                         `path:"notification_id"`
	Body           *CancelSendNotificationReqBody `body:""`
}

type CancelSendNotificationResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *CancelSendNotificationResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type CreateNotificationReqBuilder struct {
	userIdType       string
	userIdTypeFlag   bool
	notification     *Notification
	notificationFlag bool
}

// 生成请求的New构造器
func NewCreateNotificationReqBuilder() *CreateNotificationReqBuilder {
	builder := &CreateNotificationReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *CreateNotificationReqBuilder) UserIdType(userIdType string) *CreateNotificationReqBuilder {
	builder.userIdType = userIdType
	builder.userIdTypeFlag = true
	return builder
}
func (builder *CreateNotificationReqBuilder) Notification(notification *Notification) *CreateNotificationReqBuilder {
	builder.notification = notification
	builder.notificationFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *CreateNotificationReqBuilder) Build() *CreateNotificationReq {
	req := &CreateNotificationReq{}
	if builder.userIdTypeFlag {
		req.UserIdType = &builder.userIdType
	}
	return req
}

type CreateNotificationReq struct {
	UserIdType   *string       `query:"user_id_type"`
	Notification *Notification `body:""`
}

type CreateNotificationRespData struct {
	NotificationId *string `json:"notification_id,omitempty"`
	Status         *int    `json:"status,omitempty"`
}

type CreateNotificationResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *CreateNotificationRespData `json:"data"`
}

func (resp *CreateNotificationResp) Success() bool {
	return resp.Code == 0
}

type ExecuteSendNotificationReqBodyBuilder struct {
	sendAt     string
	sendAtFlag bool
}

// 生成body的New构造器
func NewExecuteSendNotificationReqBodyBuilder() *ExecuteSendNotificationReqBodyBuilder {
	builder := &ExecuteSendNotificationReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *ExecuteSendNotificationReqBodyBuilder) SendAt(sendAt string) *ExecuteSendNotificationReqBodyBuilder {
	builder.sendAt = sendAt
	builder.sendAtFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *ExecuteSendNotificationReqBodyBuilder) Build() *ExecuteSendNotificationReqBody {
	req := &ExecuteSendNotificationReqBody{}
	if builder.sendAtFlag {
		req.SendAt = &builder.sendAt

	}
	return req
}

/**上传文件path开始**/
type ExecuteSendNotificationPathReqBodyBuilder struct {
	sendAt     string
	sendAtFlag bool
}

// 生成body的New构造器
func NewExecuteSendNotificationPathReqBodyBuilder() *ExecuteSendNotificationPathReqBodyBuilder {
	builder := &ExecuteSendNotificationPathReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *ExecuteSendNotificationPathReqBodyBuilder) SendAt(sendAt string) *ExecuteSendNotificationPathReqBodyBuilder {
	builder.sendAt = sendAt
	builder.sendAtFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *ExecuteSendNotificationPathReqBodyBuilder) Build() (*ExecuteSendNotificationReqBody, error) {
	req := &ExecuteSendNotificationReqBody{}
	if builder.sendAtFlag {
		req.SendAt = &builder.sendAt

	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type ExecuteSendNotificationReqBuilder struct {
	notificationId     string
	notificationIdFlag bool
	body               *ExecuteSendNotificationReqBody
	bodyFlag           bool
}

// 生成请求的New构造器
func NewExecuteSendNotificationReqBuilder() *ExecuteSendNotificationReqBuilder {
	builder := &ExecuteSendNotificationReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *ExecuteSendNotificationReqBuilder) NotificationId(notificationId string) *ExecuteSendNotificationReqBuilder {
	builder.notificationId = notificationId
	builder.notificationIdFlag = true
	return builder
}
func (builder *ExecuteSendNotificationReqBuilder) Body(body *ExecuteSendNotificationReqBody) *ExecuteSendNotificationReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *ExecuteSendNotificationReqBuilder) Build() *ExecuteSendNotificationReq {
	req := &ExecuteSendNotificationReq{}
	if builder.notificationIdFlag {
		req.NotificationId = builder.notificationId
	}
	if builder.bodyFlag {
		req.Body = builder.body

	}
	return req
}

type ExecuteSendNotificationReqBody struct {
	SendAt *string `json:"send_at,omitempty"`
}

type ExecuteSendNotificationReq struct {
	NotificationId string                          `path:"notification_id"`
	Body           *ExecuteSendNotificationReqBody `body:""`
}

type ExecuteSendNotificationResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *ExecuteSendNotificationResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type GetNotificationReqBuilder struct {
	notificationId     string
	notificationIdFlag bool
	userIdType         string
	userIdTypeFlag     bool
}

// 生成请求的New构造器
func NewGetNotificationReqBuilder() *GetNotificationReqBuilder {
	builder := &GetNotificationReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *GetNotificationReqBuilder) NotificationId(notificationId string) *GetNotificationReqBuilder {
	builder.notificationId = notificationId
	builder.notificationIdFlag = true
	return builder
}
func (builder *GetNotificationReqBuilder) UserIdType(userIdType string) *GetNotificationReqBuilder {
	builder.userIdType = userIdType
	builder.userIdTypeFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *GetNotificationReqBuilder) Build() *GetNotificationReq {
	req := &GetNotificationReq{}
	if builder.notificationIdFlag {
		req.NotificationId = builder.notificationId
	}
	if builder.userIdTypeFlag {
		req.UserIdType = &builder.userIdType
	}
	return req
}

type GetNotificationReq struct {
	NotificationId string  `path:"notification_id"`
	UserIdType     *string `query:"user_id_type"`
}

type GetNotificationRespData struct {
	Notification    *Notification `json:"notification,omitempty"`
	ApprovalAppLink *string       `json:"approval_app_link,omitempty"`
}

type GetNotificationResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *GetNotificationRespData `json:"data"`
}

func (resp *GetNotificationResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type PatchNotificationReqBuilder struct {
	notificationId     string
	notificationIdFlag bool
	userIdType         string
	userIdTypeFlag     bool
	notification       *Notification
	notificationFlag   bool
}

// 生成请求的New构造器
func NewPatchNotificationReqBuilder() *PatchNotificationReqBuilder {
	builder := &PatchNotificationReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *PatchNotificationReqBuilder) NotificationId(notificationId string) *PatchNotificationReqBuilder {
	builder.notificationId = notificationId
	builder.notificationIdFlag = true
	return builder
}
func (builder *PatchNotificationReqBuilder) UserIdType(userIdType string) *PatchNotificationReqBuilder {
	builder.userIdType = userIdType
	builder.userIdTypeFlag = true
	return builder
}
func (builder *PatchNotificationReqBuilder) Notification(notification *Notification) *PatchNotificationReqBuilder {
	builder.notification = notification
	builder.notificationFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *PatchNotificationReqBuilder) Build() *PatchNotificationReq {
	req := &PatchNotificationReq{}
	if builder.notificationIdFlag {
		req.NotificationId = builder.notificationId
	}
	if builder.userIdTypeFlag {
		req.UserIdType = &builder.userIdType
	}
	return req
}

type PatchNotificationReq struct {
	NotificationId string        `path:"notification_id"`
	UserIdType     *string       `query:"user_id_type"`
	Notification   *Notification `body:""`
}

type PatchNotificationResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *PatchNotificationResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type PreviewNotificationReqBuilder struct {
	notificationId     string
	notificationIdFlag bool
}

// 生成请求的New构造器
func NewPreviewNotificationReqBuilder() *PreviewNotificationReqBuilder {
	builder := &PreviewNotificationReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *PreviewNotificationReqBuilder) NotificationId(notificationId string) *PreviewNotificationReqBuilder {
	builder.notificationId = notificationId
	builder.notificationIdFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *PreviewNotificationReqBuilder) Build() *PreviewNotificationReq {
	req := &PreviewNotificationReq{}
	if builder.notificationIdFlag {
		req.NotificationId = builder.notificationId
	}
	return req
}

type PreviewNotificationReq struct {
	NotificationId string `path:"notification_id"`
}

type PreviewNotificationResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *PreviewNotificationResp) Success() bool {
	return resp.Code == 0
}

type SubmitApproveNotificationReqBodyBuilder struct {
	reason     string
	reasonFlag bool
}

// 生成body的New构造器
func NewSubmitApproveNotificationReqBodyBuilder() *SubmitApproveNotificationReqBodyBuilder {
	builder := &SubmitApproveNotificationReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *SubmitApproveNotificationReqBodyBuilder) Reason(reason string) *SubmitApproveNotificationReqBodyBuilder {
	builder.reason = reason
	builder.reasonFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *SubmitApproveNotificationReqBodyBuilder) Build() *SubmitApproveNotificationReqBody {
	req := &SubmitApproveNotificationReqBody{}
	if builder.reasonFlag {
		req.Reason = &builder.reason

	}
	return req
}

/**上传文件path开始**/
type SubmitApproveNotificationPathReqBodyBuilder struct {
	reason     string
	reasonFlag bool
}

// 生成body的New构造器
func NewSubmitApproveNotificationPathReqBodyBuilder() *SubmitApproveNotificationPathReqBodyBuilder {
	builder := &SubmitApproveNotificationPathReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *SubmitApproveNotificationPathReqBodyBuilder) Reason(reason string) *SubmitApproveNotificationPathReqBodyBuilder {
	builder.reason = reason
	builder.reasonFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *SubmitApproveNotificationPathReqBodyBuilder) Build() (*SubmitApproveNotificationReqBody, error) {
	req := &SubmitApproveNotificationReqBody{}
	if builder.reasonFlag {
		req.Reason = &builder.reason

	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type SubmitApproveNotificationReqBuilder struct {
	notificationId     string
	notificationIdFlag bool
	body               *SubmitApproveNotificationReqBody
	bodyFlag           bool
}

// 生成请求的New构造器
func NewSubmitApproveNotificationReqBuilder() *SubmitApproveNotificationReqBuilder {
	builder := &SubmitApproveNotificationReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *SubmitApproveNotificationReqBuilder) NotificationId(notificationId string) *SubmitApproveNotificationReqBuilder {
	builder.notificationId = notificationId
	builder.notificationIdFlag = true
	return builder
}
func (builder *SubmitApproveNotificationReqBuilder) Body(body *SubmitApproveNotificationReqBody) *SubmitApproveNotificationReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *SubmitApproveNotificationReqBuilder) Build() *SubmitApproveNotificationReq {
	req := &SubmitApproveNotificationReq{}
	if builder.notificationIdFlag {
		req.NotificationId = builder.notificationId
	}
	if builder.bodyFlag {
		req.Body = builder.body

	}
	return req
}

type SubmitApproveNotificationReqBody struct {
	Reason *string `json:"reason,omitempty"`
}

type SubmitApproveNotificationReq struct {
	NotificationId string                            `path:"notification_id"`
	Body           *SubmitApproveNotificationReqBody `body:""`
}

type SubmitApproveNotificationRespData struct {
	HasAccess *bool `json:"has_access,omitempty"`
}

type SubmitApproveNotificationResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *SubmitApproveNotificationRespData `json:"data"`
}

func (resp *SubmitApproveNotificationResp) Success() bool {
	return resp.Code == 0
}

type AnswerUserQueryTicketReqBodyBuilder struct {
	eventId     string
	eventIdFlag bool
	faqs        []*UserQueryFaqInfo
	faqsFlag    bool
}

// 生成body的New构造器
func NewAnswerUserQueryTicketReqBodyBuilder() *AnswerUserQueryTicketReqBodyBuilder {
	builder := &AnswerUserQueryTicketReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *AnswerUserQueryTicketReqBodyBuilder) EventId(eventId string) *AnswerUserQueryTicketReqBodyBuilder {
	builder.eventId = eventId
	builder.eventIdFlag = true
	return builder
}
func (builder *AnswerUserQueryTicketReqBodyBuilder) Faqs(faqs []*UserQueryFaqInfo) *AnswerUserQueryTicketReqBodyBuilder {
	builder.faqs = faqs
	builder.faqsFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *AnswerUserQueryTicketReqBodyBuilder) Build() *AnswerUserQueryTicketReqBody {
	req := &AnswerUserQueryTicketReqBody{}
	if builder.eventIdFlag {
		req.EventId = &builder.eventId

	}
	if builder.faqsFlag {
		req.Faqs = builder.faqs

	}
	return req
}

/**上传文件path开始**/
type AnswerUserQueryTicketPathReqBodyBuilder struct {
	eventId     string
	eventIdFlag bool
	faqs        []*UserQueryFaqInfo
	faqsFlag    bool
}

// 生成body的New构造器
func NewAnswerUserQueryTicketPathReqBodyBuilder() *AnswerUserQueryTicketPathReqBodyBuilder {
	builder := &AnswerUserQueryTicketPathReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *AnswerUserQueryTicketPathReqBodyBuilder) EventId(eventId string) *AnswerUserQueryTicketPathReqBodyBuilder {
	builder.eventId = eventId
	builder.eventIdFlag = true
	return builder
}
func (builder *AnswerUserQueryTicketPathReqBodyBuilder) Faqs(faqs []*UserQueryFaqInfo) *AnswerUserQueryTicketPathReqBodyBuilder {
	builder.faqs = faqs
	builder.faqsFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *AnswerUserQueryTicketPathReqBodyBuilder) Build() (*AnswerUserQueryTicketReqBody, error) {
	req := &AnswerUserQueryTicketReqBody{}
	if builder.eventIdFlag {
		req.EventId = &builder.eventId

	}
	if builder.faqsFlag {
		req.Faqs = builder.faqs
	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type AnswerUserQueryTicketReqBuilder struct {
	ticketId     string
	ticketIdFlag bool
	body         *AnswerUserQueryTicketReqBody
	bodyFlag     bool
}

// 生成请求的New构造器
func NewAnswerUserQueryTicketReqBuilder() *AnswerUserQueryTicketReqBuilder {
	builder := &AnswerUserQueryTicketReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *AnswerUserQueryTicketReqBuilder) TicketId(ticketId string) *AnswerUserQueryTicketReqBuilder {
	builder.ticketId = ticketId
	builder.ticketIdFlag = true
	return builder
}
func (builder *AnswerUserQueryTicketReqBuilder) Body(body *AnswerUserQueryTicketReqBody) *AnswerUserQueryTicketReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *AnswerUserQueryTicketReqBuilder) Build() *AnswerUserQueryTicketReq {
	req := &AnswerUserQueryTicketReq{}
	if builder.ticketIdFlag {
		req.TicketId = builder.ticketId
	}
	if builder.bodyFlag {
		req.Body = builder.body

	}
	return req
}

type AnswerUserQueryTicketReqBody struct {
	EventId *string             `json:"event_id,omitempty"`
	Faqs    []*UserQueryFaqInfo `json:"faqs,omitempty"`
}

type AnswerUserQueryTicketReq struct {
	TicketId string                        `path:"ticket_id"`
	Body     *AnswerUserQueryTicketReqBody `body:""`
}

type AnswerUserQueryTicketResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *AnswerUserQueryTicketResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type CustomizedFieldsTicketReqBuilder struct {
	visibleOnly     bool
	visibleOnlyFlag bool
}

// 生成请求的New构造器
func NewCustomizedFieldsTicketReqBuilder() *CustomizedFieldsTicketReqBuilder {
	builder := &CustomizedFieldsTicketReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *CustomizedFieldsTicketReqBuilder) VisibleOnly(visibleOnly bool) *CustomizedFieldsTicketReqBuilder {
	builder.visibleOnly = visibleOnly
	builder.visibleOnlyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *CustomizedFieldsTicketReqBuilder) Build() *CustomizedFieldsTicketReq {
	req := &CustomizedFieldsTicketReq{}
	if builder.visibleOnlyFlag {
		req.VisibleOnly = &builder.visibleOnly
	}
	return req
}

type CustomizedFieldsTicketReq struct {
	VisibleOnly *bool `query:"visible_only"`
}

type CustomizedFieldsTicketRespData struct {
	UserCustomizedFields   []*UserCustomizedField   `json:"user_customized_fields,omitempty"`
	TicketCustomizedFields []*TicketCustomizedField `json:"ticket_customized_fields,omitempty"`
}

type CustomizedFieldsTicketResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *CustomizedFieldsTicketRespData `json:"data"`
}

func (resp *CustomizedFieldsTicketResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type GetTicketReqBuilder struct {
	ticketId     string
	ticketIdFlag bool
}

// 生成请求的New构造器
func NewGetTicketReqBuilder() *GetTicketReqBuilder {
	builder := &GetTicketReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *GetTicketReqBuilder) TicketId(ticketId string) *GetTicketReqBuilder {
	builder.ticketId = ticketId
	builder.ticketIdFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *GetTicketReqBuilder) Build() *GetTicketReq {
	req := &GetTicketReq{}
	if builder.ticketIdFlag {
		req.TicketId = builder.ticketId
	}
	return req
}

type GetTicketReq struct {
	TicketId string `path:"ticket_id"`
}

type GetTicketRespData struct {
	Ticket *Ticket `json:"ticket,omitempty"`
}

type GetTicketResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *GetTicketRespData `json:"data"`
}

func (resp *GetTicketResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type ListTicketReqBuilder struct {
	ticketId            string
	ticketIdFlag        bool
	agentId             string
	agentIdFlag         bool
	closedById          string
	closedByIdFlag      bool
	type_               int
	typeFlag            bool
	channel             int
	channelFlag         bool
	solved              int
	solvedFlag          bool
	score               int
	scoreFlag           bool
	statusList          []int
	statusListFlag      bool
	guestName           string
	guestNameFlag       bool
	guestId             string
	guestIdFlag         bool
	tags                []string
	tagsFlag            bool
	page                int
	pageFlag            bool
	pageSize            int
	pageSizeFlag        bool
	createTimeStart     int
	createTimeStartFlag bool
	createTimeEnd       int
	createTimeEndFlag   bool
	updateTimeStart     int
	updateTimeStartFlag bool
	updateTimeEnd       int
	updateTimeEndFlag   bool
}

// 生成请求的New构造器
func NewListTicketReqBuilder() *ListTicketReqBuilder {
	builder := &ListTicketReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *ListTicketReqBuilder) TicketId(ticketId string) *ListTicketReqBuilder {
	builder.ticketId = ticketId
	builder.ticketIdFlag = true
	return builder
}
func (builder *ListTicketReqBuilder) AgentId(agentId string) *ListTicketReqBuilder {
	builder.agentId = agentId
	builder.agentIdFlag = true
	return builder
}
func (builder *ListTicketReqBuilder) ClosedById(closedById string) *ListTicketReqBuilder {
	builder.closedById = closedById
	builder.closedByIdFlag = true
	return builder
}
func (builder *ListTicketReqBuilder) Type(type_ int) *ListTicketReqBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}
func (builder *ListTicketReqBuilder) Channel(channel int) *ListTicketReqBuilder {
	builder.channel = channel
	builder.channelFlag = true
	return builder
}
func (builder *ListTicketReqBuilder) Solved(solved int) *ListTicketReqBuilder {
	builder.solved = solved
	builder.solvedFlag = true
	return builder
}
func (builder *ListTicketReqBuilder) Score(score int) *ListTicketReqBuilder {
	builder.score = score
	builder.scoreFlag = true
	return builder
}
func (builder *ListTicketReqBuilder) StatusList(statusList []int) *ListTicketReqBuilder {
	builder.statusList = statusList
	builder.statusListFlag = true
	return builder
}
func (builder *ListTicketReqBuilder) GuestName(guestName string) *ListTicketReqBuilder {
	builder.guestName = guestName
	builder.guestNameFlag = true
	return builder
}
func (builder *ListTicketReqBuilder) GuestId(guestId string) *ListTicketReqBuilder {
	builder.guestId = guestId
	builder.guestIdFlag = true
	return builder
}
func (builder *ListTicketReqBuilder) Tags(tags []string) *ListTicketReqBuilder {
	builder.tags = tags
	builder.tagsFlag = true
	return builder
}
func (builder *ListTicketReqBuilder) Page(page int) *ListTicketReqBuilder {
	builder.page = page
	builder.pageFlag = true
	return builder
}
func (builder *ListTicketReqBuilder) PageSize(pageSize int) *ListTicketReqBuilder {
	builder.pageSize = pageSize
	builder.pageSizeFlag = true
	return builder
}
func (builder *ListTicketReqBuilder) CreateTimeStart(createTimeStart int) *ListTicketReqBuilder {
	builder.createTimeStart = createTimeStart
	builder.createTimeStartFlag = true
	return builder
}
func (builder *ListTicketReqBuilder) CreateTimeEnd(createTimeEnd int) *ListTicketReqBuilder {
	builder.createTimeEnd = createTimeEnd
	builder.createTimeEndFlag = true
	return builder
}
func (builder *ListTicketReqBuilder) UpdateTimeStart(updateTimeStart int) *ListTicketReqBuilder {
	builder.updateTimeStart = updateTimeStart
	builder.updateTimeStartFlag = true
	return builder
}
func (builder *ListTicketReqBuilder) UpdateTimeEnd(updateTimeEnd int) *ListTicketReqBuilder {
	builder.updateTimeEnd = updateTimeEnd
	builder.updateTimeEndFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *ListTicketReqBuilder) Build() *ListTicketReq {
	req := &ListTicketReq{}
	if builder.ticketIdFlag {
		req.TicketId = &builder.ticketId
	}
	if builder.agentIdFlag {
		req.AgentId = &builder.agentId
	}
	if builder.closedByIdFlag {
		req.ClosedById = &builder.closedById
	}
	if builder.typeFlag {
		req.Type = &builder.type_
	}
	if builder.channelFlag {
		req.Channel = &builder.channel
	}
	if builder.solvedFlag {
		req.Solved = &builder.solved
	}
	if builder.scoreFlag {
		req.Score = &builder.score
	}
	if builder.statusListFlag {
		req.StatusList = builder.statusList
	}
	if builder.guestNameFlag {
		req.GuestName = &builder.guestName
	}
	if builder.guestIdFlag {
		req.GuestId = &builder.guestId
	}
	if builder.tagsFlag {
		req.Tags = builder.tags
	}
	if builder.pageFlag {
		req.Page = &builder.page
	}
	if builder.pageSizeFlag {
		req.PageSize = &builder.pageSize
	}
	if builder.createTimeStartFlag {
		req.CreateTimeStart = &builder.createTimeStart
	}
	if builder.createTimeEndFlag {
		req.CreateTimeEnd = &builder.createTimeEnd
	}
	if builder.updateTimeStartFlag {
		req.UpdateTimeStart = &builder.updateTimeStart
	}
	if builder.updateTimeEndFlag {
		req.UpdateTimeEnd = &builder.updateTimeEnd
	}
	return req
}

type ListTicketReq struct {
	TicketId        *string  `query:"ticket_id"`
	AgentId         *string  `query:"agent_id"`
	ClosedById      *string  `query:"closed_by_id"`
	Type            *int     `query:"type"`
	Channel         *int     `query:"channel"`
	Solved          *int     `query:"solved"`
	Score           *int     `query:"score"`
	StatusList      []int    `query:"status_list"`
	GuestName       *string  `query:"guest_name"`
	GuestId         *string  `query:"guest_id"`
	Tags            []string `query:"tags"`
	Page            *int     `query:"page"`
	PageSize        *int     `query:"page_size"`
	CreateTimeStart *int     `query:"create_time_start"`
	CreateTimeEnd   *int     `query:"create_time_end"`
	UpdateTimeStart *int     `query:"update_time_start"`
	UpdateTimeEnd   *int     `query:"update_time_end"`
}

type ListTicketRespData struct {
	Total   *int      `json:"total,omitempty"`
	Tickets []*Ticket `json:"tickets,omitempty"`
}

type ListTicketResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *ListTicketRespData `json:"data"`
}

func (resp *ListTicketResp) Success() bool {
	return resp.Code == 0
}

type StartServiceTicketReqBodyBuilder struct {
	humanService        bool
	humanServiceFlag    bool
	appointedAgents     []string
	appointedAgentsFlag bool
	openId              string
	openIdFlag          bool
	customizedInfo      string
	customizedInfoFlag  bool
}

// 生成body的New构造器
func NewStartServiceTicketReqBodyBuilder() *StartServiceTicketReqBodyBuilder {
	builder := &StartServiceTicketReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *StartServiceTicketReqBodyBuilder) HumanService(humanService bool) *StartServiceTicketReqBodyBuilder {
	builder.humanService = humanService
	builder.humanServiceFlag = true
	return builder
}
func (builder *StartServiceTicketReqBodyBuilder) AppointedAgents(appointedAgents []string) *StartServiceTicketReqBodyBuilder {
	builder.appointedAgents = appointedAgents
	builder.appointedAgentsFlag = true
	return builder
}
func (builder *StartServiceTicketReqBodyBuilder) OpenId(openId string) *StartServiceTicketReqBodyBuilder {
	builder.openId = openId
	builder.openIdFlag = true
	return builder
}
func (builder *StartServiceTicketReqBodyBuilder) CustomizedInfo(customizedInfo string) *StartServiceTicketReqBodyBuilder {
	builder.customizedInfo = customizedInfo
	builder.customizedInfoFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *StartServiceTicketReqBodyBuilder) Build() *StartServiceTicketReqBody {
	req := &StartServiceTicketReqBody{}
	if builder.humanServiceFlag {
		req.HumanService = &builder.humanService

	}
	if builder.appointedAgentsFlag {
		req.AppointedAgents = builder.appointedAgents

	}
	if builder.openIdFlag {
		req.OpenId = &builder.openId

	}
	if builder.customizedInfoFlag {
		req.CustomizedInfo = &builder.customizedInfo

	}
	return req
}

/**上传文件path开始**/
type StartServiceTicketPathReqBodyBuilder struct {
	humanService        bool
	humanServiceFlag    bool
	appointedAgents     []string
	appointedAgentsFlag bool
	openId              string
	openIdFlag          bool
	customizedInfo      string
	customizedInfoFlag  bool
}

// 生成body的New构造器
func NewStartServiceTicketPathReqBodyBuilder() *StartServiceTicketPathReqBodyBuilder {
	builder := &StartServiceTicketPathReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *StartServiceTicketPathReqBodyBuilder) HumanService(humanService bool) *StartServiceTicketPathReqBodyBuilder {
	builder.humanService = humanService
	builder.humanServiceFlag = true
	return builder
}
func (builder *StartServiceTicketPathReqBodyBuilder) AppointedAgents(appointedAgents []string) *StartServiceTicketPathReqBodyBuilder {
	builder.appointedAgents = appointedAgents
	builder.appointedAgentsFlag = true
	return builder
}
func (builder *StartServiceTicketPathReqBodyBuilder) OpenId(openId string) *StartServiceTicketPathReqBodyBuilder {
	builder.openId = openId
	builder.openIdFlag = true
	return builder
}
func (builder *StartServiceTicketPathReqBodyBuilder) CustomizedInfo(customizedInfo string) *StartServiceTicketPathReqBodyBuilder {
	builder.customizedInfo = customizedInfo
	builder.customizedInfoFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *StartServiceTicketPathReqBodyBuilder) Build() (*StartServiceTicketReqBody, error) {
	req := &StartServiceTicketReqBody{}
	if builder.humanServiceFlag {
		req.HumanService = &builder.humanService

	}
	if builder.appointedAgentsFlag {
		req.AppointedAgents = builder.appointedAgents
	}
	if builder.openIdFlag {
		req.OpenId = &builder.openId

	}
	if builder.customizedInfoFlag {
		req.CustomizedInfo = &builder.customizedInfo

	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type StartServiceTicketReqBuilder struct {
	body     *StartServiceTicketReqBody
	bodyFlag bool
}

// 生成请求的New构造器
func NewStartServiceTicketReqBuilder() *StartServiceTicketReqBuilder {
	builder := &StartServiceTicketReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *StartServiceTicketReqBuilder) Body(body *StartServiceTicketReqBody) *StartServiceTicketReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *StartServiceTicketReqBuilder) Build() *StartServiceTicketReq {
	req := &StartServiceTicketReq{}
	if builder.bodyFlag {
		req.Body = builder.body

	}
	return req
}

type StartServiceTicketReqBody struct {
	HumanService    *bool    `json:"human_service,omitempty"`
	AppointedAgents []string `json:"appointed_agents,omitempty"`
	OpenId          *string  `json:"open_id,omitempty"`
	CustomizedInfo  *string  `json:"customized_info,omitempty"`
}

type StartServiceTicketReq struct {
	Body *StartServiceTicketReqBody `body:""`
}

type StartServiceTicketRespData struct {
	ChatId *string `json:"chat_id,omitempty"`
}

type StartServiceTicketResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *StartServiceTicketRespData `json:"data"`
}

func (resp *StartServiceTicketResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type TicketImageTicketReqBuilder struct {
	ticketId     string
	ticketIdFlag bool
	msgId        string
	msgIdFlag    bool
	index        int
	indexFlag    bool
}

// 生成请求的New构造器
func NewTicketImageTicketReqBuilder() *TicketImageTicketReqBuilder {
	builder := &TicketImageTicketReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *TicketImageTicketReqBuilder) TicketId(ticketId string) *TicketImageTicketReqBuilder {
	builder.ticketId = ticketId
	builder.ticketIdFlag = true
	return builder
}
func (builder *TicketImageTicketReqBuilder) MsgId(msgId string) *TicketImageTicketReqBuilder {
	builder.msgId = msgId
	builder.msgIdFlag = true
	return builder
}
func (builder *TicketImageTicketReqBuilder) Index(index int) *TicketImageTicketReqBuilder {
	builder.index = index
	builder.indexFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *TicketImageTicketReqBuilder) Build() *TicketImageTicketReq {
	req := &TicketImageTicketReq{}
	if builder.ticketIdFlag {
		req.TicketId = &builder.ticketId
	}
	if builder.msgIdFlag {
		req.MsgId = &builder.msgId
	}
	if builder.indexFlag {
		req.Index = &builder.index
	}
	return req
}

type TicketImageTicketReq struct {
	TicketId *string `query:"ticket_id"`
	MsgId    *string `query:"msg_id"`
	Index    *int    `query:"index"`
}

type TicketImageTicketResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	File     io.Reader `json:"-"`
	FileName string    `json:"-"`
}

func (resp *TicketImageTicketResp) Success() bool {
	return resp.Code == 0
}

/**下载api,生成WriteFile方法**/
func (resp *TicketImageTicketResp) WriteFile(fileName string) error {
	bs, err := ioutil.ReadAll(resp.File)
	if err != nil {
		return err
	}

	err = ioutil.WriteFile(fileName, bs, 0666)
	if err != nil {
		return err
	}
	return nil
}

type UpdateTicketReqBodyBuilder struct {
	status               int
	statusFlag           bool
	tagNames             []string
	tagNamesFlag         bool
	comment              string
	commentFlag          bool
	customizedFields     []*CustomizedFieldDisplayItem
	customizedFieldsFlag bool
	ticketType           int
	ticketTypeFlag       bool
	solved               int
	solvedFlag           bool
	channel              int
	channelFlag          bool
}

// 生成body的New构造器
func NewUpdateTicketReqBodyBuilder() *UpdateTicketReqBodyBuilder {
	builder := &UpdateTicketReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *UpdateTicketReqBodyBuilder) Status(status int) *UpdateTicketReqBodyBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}
func (builder *UpdateTicketReqBodyBuilder) TagNames(tagNames []string) *UpdateTicketReqBodyBuilder {
	builder.tagNames = tagNames
	builder.tagNamesFlag = true
	return builder
}
func (builder *UpdateTicketReqBodyBuilder) Comment(comment string) *UpdateTicketReqBodyBuilder {
	builder.comment = comment
	builder.commentFlag = true
	return builder
}
func (builder *UpdateTicketReqBodyBuilder) CustomizedFields(customizedFields []*CustomizedFieldDisplayItem) *UpdateTicketReqBodyBuilder {
	builder.customizedFields = customizedFields
	builder.customizedFieldsFlag = true
	return builder
}
func (builder *UpdateTicketReqBodyBuilder) TicketType(ticketType int) *UpdateTicketReqBodyBuilder {
	builder.ticketType = ticketType
	builder.ticketTypeFlag = true
	return builder
}
func (builder *UpdateTicketReqBodyBuilder) Solved(solved int) *UpdateTicketReqBodyBuilder {
	builder.solved = solved
	builder.solvedFlag = true
	return builder
}
func (builder *UpdateTicketReqBodyBuilder) Channel(channel int) *UpdateTicketReqBodyBuilder {
	builder.channel = channel
	builder.channelFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *UpdateTicketReqBodyBuilder) Build() *UpdateTicketReqBody {
	req := &UpdateTicketReqBody{}
	if builder.statusFlag {
		req.Status = &builder.status

	}
	if builder.tagNamesFlag {
		req.TagNames = builder.tagNames

	}
	if builder.commentFlag {
		req.Comment = &builder.comment

	}
	if builder.customizedFieldsFlag {
		req.CustomizedFields = builder.customizedFields

	}
	if builder.ticketTypeFlag {
		req.TicketType = &builder.ticketType

	}
	if builder.solvedFlag {
		req.Solved = &builder.solved

	}
	if builder.channelFlag {
		req.Channel = &builder.channel

	}
	return req
}

/**上传文件path开始**/
type UpdateTicketPathReqBodyBuilder struct {
	status               int
	statusFlag           bool
	tagNames             []string
	tagNamesFlag         bool
	comment              string
	commentFlag          bool
	customizedFields     []*CustomizedFieldDisplayItem
	customizedFieldsFlag bool
	ticketType           int
	ticketTypeFlag       bool
	solved               int
	solvedFlag           bool
	channel              int
	channelFlag          bool
}

// 生成body的New构造器
func NewUpdateTicketPathReqBodyBuilder() *UpdateTicketPathReqBodyBuilder {
	builder := &UpdateTicketPathReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *UpdateTicketPathReqBodyBuilder) Status(status int) *UpdateTicketPathReqBodyBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}
func (builder *UpdateTicketPathReqBodyBuilder) TagNames(tagNames []string) *UpdateTicketPathReqBodyBuilder {
	builder.tagNames = tagNames
	builder.tagNamesFlag = true
	return builder
}
func (builder *UpdateTicketPathReqBodyBuilder) Comment(comment string) *UpdateTicketPathReqBodyBuilder {
	builder.comment = comment
	builder.commentFlag = true
	return builder
}
func (builder *UpdateTicketPathReqBodyBuilder) CustomizedFields(customizedFields []*CustomizedFieldDisplayItem) *UpdateTicketPathReqBodyBuilder {
	builder.customizedFields = customizedFields
	builder.customizedFieldsFlag = true
	return builder
}
func (builder *UpdateTicketPathReqBodyBuilder) TicketType(ticketType int) *UpdateTicketPathReqBodyBuilder {
	builder.ticketType = ticketType
	builder.ticketTypeFlag = true
	return builder
}
func (builder *UpdateTicketPathReqBodyBuilder) Solved(solved int) *UpdateTicketPathReqBodyBuilder {
	builder.solved = solved
	builder.solvedFlag = true
	return builder
}
func (builder *UpdateTicketPathReqBodyBuilder) Channel(channel int) *UpdateTicketPathReqBodyBuilder {
	builder.channel = channel
	builder.channelFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *UpdateTicketPathReqBodyBuilder) Build() (*UpdateTicketReqBody, error) {
	req := &UpdateTicketReqBody{}
	if builder.statusFlag {
		req.Status = &builder.status

	}
	if builder.tagNamesFlag {
		req.TagNames = builder.tagNames
	}
	if builder.commentFlag {
		req.Comment = &builder.comment

	}
	if builder.customizedFieldsFlag {
		req.CustomizedFields = builder.customizedFields
	}
	if builder.ticketTypeFlag {
		req.TicketType = &builder.ticketType

	}
	if builder.solvedFlag {
		req.Solved = &builder.solved

	}
	if builder.channelFlag {
		req.Channel = &builder.channel

	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type UpdateTicketReqBuilder struct {
	ticketId     string
	ticketIdFlag bool
	body         *UpdateTicketReqBody
	bodyFlag     bool
}

// 生成请求的New构造器
func NewUpdateTicketReqBuilder() *UpdateTicketReqBuilder {
	builder := &UpdateTicketReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *UpdateTicketReqBuilder) TicketId(ticketId string) *UpdateTicketReqBuilder {
	builder.ticketId = ticketId
	builder.ticketIdFlag = true
	return builder
}
func (builder *UpdateTicketReqBuilder) Body(body *UpdateTicketReqBody) *UpdateTicketReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *UpdateTicketReqBuilder) Build() *UpdateTicketReq {
	req := &UpdateTicketReq{}
	if builder.ticketIdFlag {
		req.TicketId = builder.ticketId
	}
	if builder.bodyFlag {
		req.Body = builder.body

	}
	return req
}

type UpdateTicketReqBody struct {
	Status           *int                          `json:"status,omitempty"`
	TagNames         []string                      `json:"tag_names,omitempty"`
	Comment          *string                       `json:"comment,omitempty"`
	CustomizedFields []*CustomizedFieldDisplayItem `json:"customized_fields,omitempty"`
	TicketType       *int                          `json:"ticket_type,omitempty"`
	Solved           *int                          `json:"solved,omitempty"`
	Channel          *int                          `json:"channel,omitempty"`
}

type UpdateTicketReq struct {
	TicketId string               `path:"ticket_id"`
	Body     *UpdateTicketReqBody `body:""`
}

type UpdateTicketResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *UpdateTicketResp) Success() bool {
	return resp.Code == 0
}

type CreateTicketMessageReqBodyBuilder struct {
	msgType     string
	msgTypeFlag bool
	content     string
	contentFlag bool
}

// 生成body的New构造器
func NewCreateTicketMessageReqBodyBuilder() *CreateTicketMessageReqBodyBuilder {
	builder := &CreateTicketMessageReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *CreateTicketMessageReqBodyBuilder) MsgType(msgType string) *CreateTicketMessageReqBodyBuilder {
	builder.msgType = msgType
	builder.msgTypeFlag = true
	return builder
}
func (builder *CreateTicketMessageReqBodyBuilder) Content(content string) *CreateTicketMessageReqBodyBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *CreateTicketMessageReqBodyBuilder) Build() *CreateTicketMessageReqBody {
	req := &CreateTicketMessageReqBody{}
	if builder.msgTypeFlag {
		req.MsgType = &builder.msgType

	}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	return req
}

/**上传文件path开始**/
type CreateTicketMessagePathReqBodyBuilder struct {
	msgType     string
	msgTypeFlag bool
	content     string
	contentFlag bool
}

// 生成body的New构造器
func NewCreateTicketMessagePathReqBodyBuilder() *CreateTicketMessagePathReqBodyBuilder {
	builder := &CreateTicketMessagePathReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *CreateTicketMessagePathReqBodyBuilder) MsgType(msgType string) *CreateTicketMessagePathReqBodyBuilder {
	builder.msgType = msgType
	builder.msgTypeFlag = true
	return builder
}
func (builder *CreateTicketMessagePathReqBodyBuilder) Content(content string) *CreateTicketMessagePathReqBodyBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *CreateTicketMessagePathReqBodyBuilder) Build() (*CreateTicketMessageReqBody, error) {
	req := &CreateTicketMessageReqBody{}
	if builder.msgTypeFlag {
		req.MsgType = &builder.msgType

	}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type CreateTicketMessageReqBuilder struct {
	ticketId     string
	ticketIdFlag bool
	body         *CreateTicketMessageReqBody
	bodyFlag     bool
}

// 生成请求的New构造器
func NewCreateTicketMessageReqBuilder() *CreateTicketMessageReqBuilder {
	builder := &CreateTicketMessageReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *CreateTicketMessageReqBuilder) TicketId(ticketId string) *CreateTicketMessageReqBuilder {
	builder.ticketId = ticketId
	builder.ticketIdFlag = true
	return builder
}
func (builder *CreateTicketMessageReqBuilder) Body(body *CreateTicketMessageReqBody) *CreateTicketMessageReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *CreateTicketMessageReqBuilder) Build() *CreateTicketMessageReq {
	req := &CreateTicketMessageReq{}
	if builder.ticketIdFlag {
		req.TicketId = builder.ticketId
	}
	if builder.bodyFlag {
		req.Body = builder.body

	}
	return req
}

type CreateTicketMessageReqBody struct {
	MsgType *string `json:"msg_type,omitempty"`
	Content *string `json:"content,omitempty"`
}

type CreateTicketMessageReq struct {
	TicketId string                      `path:"ticket_id"`
	Body     *CreateTicketMessageReqBody `body:""`
}

type CreateTicketMessageRespData struct {
	MessageId *string `json:"message_id,omitempty"`
}

type CreateTicketMessageResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *CreateTicketMessageRespData `json:"data"`
}

func (resp *CreateTicketMessageResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type ListTicketMessageReqBuilder struct {
	ticketId      string
	ticketIdFlag  bool
	timeStart     int
	timeStartFlag bool
	timeEnd       int
	timeEndFlag   bool
	page          int
	pageFlag      bool
	pageSize      int
	pageSizeFlag  bool
}

// 生成请求的New构造器
func NewListTicketMessageReqBuilder() *ListTicketMessageReqBuilder {
	builder := &ListTicketMessageReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *ListTicketMessageReqBuilder) TicketId(ticketId string) *ListTicketMessageReqBuilder {
	builder.ticketId = ticketId
	builder.ticketIdFlag = true
	return builder
}
func (builder *ListTicketMessageReqBuilder) TimeStart(timeStart int) *ListTicketMessageReqBuilder {
	builder.timeStart = timeStart
	builder.timeStartFlag = true
	return builder
}
func (builder *ListTicketMessageReqBuilder) TimeEnd(timeEnd int) *ListTicketMessageReqBuilder {
	builder.timeEnd = timeEnd
	builder.timeEndFlag = true
	return builder
}
func (builder *ListTicketMessageReqBuilder) Page(page int) *ListTicketMessageReqBuilder {
	builder.page = page
	builder.pageFlag = true
	return builder
}
func (builder *ListTicketMessageReqBuilder) PageSize(pageSize int) *ListTicketMessageReqBuilder {
	builder.pageSize = pageSize
	builder.pageSizeFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *ListTicketMessageReqBuilder) Build() *ListTicketMessageReq {
	req := &ListTicketMessageReq{}
	if builder.ticketIdFlag {
		req.TicketId = builder.ticketId
	}
	if builder.timeStartFlag {
		req.TimeStart = &builder.timeStart
	}
	if builder.timeEndFlag {
		req.TimeEnd = &builder.timeEnd
	}
	if builder.pageFlag {
		req.Page = &builder.page
	}
	if builder.pageSizeFlag {
		req.PageSize = &builder.pageSize
	}
	return req
}

type ListTicketMessageReq struct {
	TicketId  string `path:"ticket_id"`
	TimeStart *int   `query:"time_start"`
	TimeEnd   *int   `query:"time_end"`
	Page      *int   `query:"page"`
	PageSize  *int   `query:"page_size"`
}

type ListTicketMessageRespData struct {
	Messages []*TicketMessage `json:"messages,omitempty"`
	Total    *int             `json:"total,omitempty"`
}

type ListTicketMessageResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *ListTicketMessageRespData `json:"data"`
}

func (resp *ListTicketMessageResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type CreateTicketCustomizedFieldReqBuilder struct {
	ticketCustomizedField     *TicketCustomizedField
	ticketCustomizedFieldFlag bool
}

// 生成请求的New构造器
func NewCreateTicketCustomizedFieldReqBuilder() *CreateTicketCustomizedFieldReqBuilder {
	builder := &CreateTicketCustomizedFieldReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *CreateTicketCustomizedFieldReqBuilder) TicketCustomizedField(ticketCustomizedField *TicketCustomizedField) *CreateTicketCustomizedFieldReqBuilder {
	builder.ticketCustomizedField = ticketCustomizedField
	builder.ticketCustomizedFieldFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *CreateTicketCustomizedFieldReqBuilder) Build() *CreateTicketCustomizedFieldReq {
	req := &CreateTicketCustomizedFieldReq{}
	return req
}

type CreateTicketCustomizedFieldReq struct {
	TicketCustomizedField *TicketCustomizedField `body:""`
}

type CreateTicketCustomizedFieldResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *CreateTicketCustomizedFieldResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type DeleteTicketCustomizedFieldReqBuilder struct {
	ticketCustomizedFieldId     string
	ticketCustomizedFieldIdFlag bool
}

// 生成请求的New构造器
func NewDeleteTicketCustomizedFieldReqBuilder() *DeleteTicketCustomizedFieldReqBuilder {
	builder := &DeleteTicketCustomizedFieldReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *DeleteTicketCustomizedFieldReqBuilder) TicketCustomizedFieldId(ticketCustomizedFieldId string) *DeleteTicketCustomizedFieldReqBuilder {
	builder.ticketCustomizedFieldId = ticketCustomizedFieldId
	builder.ticketCustomizedFieldIdFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *DeleteTicketCustomizedFieldReqBuilder) Build() *DeleteTicketCustomizedFieldReq {
	req := &DeleteTicketCustomizedFieldReq{}
	if builder.ticketCustomizedFieldIdFlag {
		req.TicketCustomizedFieldId = builder.ticketCustomizedFieldId
	}
	return req
}

type DeleteTicketCustomizedFieldReq struct {
	TicketCustomizedFieldId string `path:"ticket_customized_field_id"`
}

type DeleteTicketCustomizedFieldResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *DeleteTicketCustomizedFieldResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type GetTicketCustomizedFieldReqBuilder struct {
	ticketCustomizedFieldId     string
	ticketCustomizedFieldIdFlag bool
}

// 生成请求的New构造器
func NewGetTicketCustomizedFieldReqBuilder() *GetTicketCustomizedFieldReqBuilder {
	builder := &GetTicketCustomizedFieldReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *GetTicketCustomizedFieldReqBuilder) TicketCustomizedFieldId(ticketCustomizedFieldId string) *GetTicketCustomizedFieldReqBuilder {
	builder.ticketCustomizedFieldId = ticketCustomizedFieldId
	builder.ticketCustomizedFieldIdFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *GetTicketCustomizedFieldReqBuilder) Build() *GetTicketCustomizedFieldReq {
	req := &GetTicketCustomizedFieldReq{}
	if builder.ticketCustomizedFieldIdFlag {
		req.TicketCustomizedFieldId = builder.ticketCustomizedFieldId
	}
	return req
}

type GetTicketCustomizedFieldReq struct {
	TicketCustomizedFieldId string `path:"ticket_customized_field_id"`
}

type GetTicketCustomizedFieldRespData struct {
	TicketCustomizedFieldId *string     `json:"ticket_customized_field_id,omitempty"`
	HelpdeskId              *string     `json:"helpdesk_id,omitempty"`
	KeyName                 *string     `json:"key_name,omitempty"`
	DisplayName             *string     `json:"display_name,omitempty"`
	Position                *string     `json:"position,omitempty"`
	FieldType               *string     `json:"field_type,omitempty"`
	Description             *string     `json:"description,omitempty"`
	Visible                 *bool       `json:"visible,omitempty"`
	Editable                *bool       `json:"editable,omitempty"`
	Required                *bool       `json:"required,omitempty"`
	CreatedAt               *string     `json:"created_at,omitempty"`
	UpdatedAt               *string     `json:"updated_at,omitempty"`
	CreatedBy               *TicketUser `json:"created_by,omitempty"`
	UpdatedBy               *TicketUser `json:"updated_by,omitempty"`
	DropdownAllowMultiple   *bool       `json:"dropdown_allow_multiple,omitempty"`
}

type GetTicketCustomizedFieldResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *GetTicketCustomizedFieldRespData `json:"data"`
}

func (resp *GetTicketCustomizedFieldResp) Success() bool {
	return resp.Code == 0
}

type ListTicketCustomizedFieldReqBodyBuilder struct {
	visible     bool
	visibleFlag bool
}

// 生成body的New构造器
func NewListTicketCustomizedFieldReqBodyBuilder() *ListTicketCustomizedFieldReqBodyBuilder {
	builder := &ListTicketCustomizedFieldReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *ListTicketCustomizedFieldReqBodyBuilder) Visible(visible bool) *ListTicketCustomizedFieldReqBodyBuilder {
	builder.visible = visible
	builder.visibleFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *ListTicketCustomizedFieldReqBodyBuilder) Build() *ListTicketCustomizedFieldReqBody {
	req := &ListTicketCustomizedFieldReqBody{}
	if builder.visibleFlag {
		req.Visible = &builder.visible

	}
	return req
}

/**上传文件path开始**/
type ListTicketCustomizedFieldPathReqBodyBuilder struct {
	visible     bool
	visibleFlag bool
}

// 生成body的New构造器
func NewListTicketCustomizedFieldPathReqBodyBuilder() *ListTicketCustomizedFieldPathReqBodyBuilder {
	builder := &ListTicketCustomizedFieldPathReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *ListTicketCustomizedFieldPathReqBodyBuilder) Visible(visible bool) *ListTicketCustomizedFieldPathReqBodyBuilder {
	builder.visible = visible
	builder.visibleFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *ListTicketCustomizedFieldPathReqBodyBuilder) Build() (*ListTicketCustomizedFieldReqBody, error) {
	req := &ListTicketCustomizedFieldReqBody{}
	if builder.visibleFlag {
		req.Visible = &builder.visible

	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type ListTicketCustomizedFieldReqBuilder struct {
	pageToken     string
	pageTokenFlag bool
	pageSize      int
	pageSizeFlag  bool
	body          *ListTicketCustomizedFieldReqBody
	bodyFlag      bool
}

// 生成请求的New构造器
func NewListTicketCustomizedFieldReqBuilder() *ListTicketCustomizedFieldReqBuilder {
	builder := &ListTicketCustomizedFieldReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *ListTicketCustomizedFieldReqBuilder) PageToken(pageToken string) *ListTicketCustomizedFieldReqBuilder {
	builder.pageToken = pageToken
	builder.pageTokenFlag = true
	return builder
}
func (builder *ListTicketCustomizedFieldReqBuilder) PageSize(pageSize int) *ListTicketCustomizedFieldReqBuilder {
	builder.pageSize = pageSize
	builder.pageSizeFlag = true
	return builder
}
func (builder *ListTicketCustomizedFieldReqBuilder) Body(body *ListTicketCustomizedFieldReqBody) *ListTicketCustomizedFieldReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *ListTicketCustomizedFieldReqBuilder) Build() *ListTicketCustomizedFieldReq {
	req := &ListTicketCustomizedFieldReq{}
	if builder.pageTokenFlag {
		req.PageToken = &builder.pageToken
	}
	if builder.pageSizeFlag {
		req.PageSize = &builder.pageSize
	}
	if builder.bodyFlag {
		req.Body = builder.body

	}
	return req
}

type ListTicketCustomizedFieldReqBody struct {
	Visible *bool `json:"visible,omitempty"`
}

type ListTicketCustomizedFieldReq struct {
	PageToken *string                           `query:"page_token"`
	PageSize  *int                              `query:"page_size"`
	Body      *ListTicketCustomizedFieldReqBody `body:""`
}

type ListTicketCustomizedFieldRespData struct {
	HasMore       *bool                    `json:"has_more,omitempty"`
	NextPageToken *string                  `json:"next_page_token,omitempty"`
	Items         []*TicketCustomizedField `json:"items,omitempty"`
}

type ListTicketCustomizedFieldResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *ListTicketCustomizedFieldRespData `json:"data"`
}

func (resp *ListTicketCustomizedFieldResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type PatchTicketCustomizedFieldReqBuilder struct {
	ticketCustomizedFieldId     string
	ticketCustomizedFieldIdFlag bool
	ticketCustomizedField       *TicketCustomizedField
	ticketCustomizedFieldFlag   bool
}

// 生成请求的New构造器
func NewPatchTicketCustomizedFieldReqBuilder() *PatchTicketCustomizedFieldReqBuilder {
	builder := &PatchTicketCustomizedFieldReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *PatchTicketCustomizedFieldReqBuilder) TicketCustomizedFieldId(ticketCustomizedFieldId string) *PatchTicketCustomizedFieldReqBuilder {
	builder.ticketCustomizedFieldId = ticketCustomizedFieldId
	builder.ticketCustomizedFieldIdFlag = true
	return builder
}
func (builder *PatchTicketCustomizedFieldReqBuilder) TicketCustomizedField(ticketCustomizedField *TicketCustomizedField) *PatchTicketCustomizedFieldReqBuilder {
	builder.ticketCustomizedField = ticketCustomizedField
	builder.ticketCustomizedFieldFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *PatchTicketCustomizedFieldReqBuilder) Build() *PatchTicketCustomizedFieldReq {
	req := &PatchTicketCustomizedFieldReq{}
	if builder.ticketCustomizedFieldIdFlag {
		req.TicketCustomizedFieldId = builder.ticketCustomizedFieldId
	}
	return req
}

type PatchTicketCustomizedFieldReq struct {
	TicketCustomizedFieldId string                 `path:"ticket_customized_field_id"`
	TicketCustomizedField   *TicketCustomizedField `body:""`
}

type PatchTicketCustomizedFieldResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *PatchTicketCustomizedFieldResp) Success() bool {
	return resp.Code == 0
}

/**生成消息事件结构体 **/

type NotificationApproveEventData struct {
	NotificationId *string `json:"notification_id,omitempty"`
	HelpdeskId     *string `json:"helpdesk_id,omitempty"`
	ApproveStatus  *string `json:"approve_status,omitempty"`
}

type NotificationApproveEvent struct {
	*event.EventV2Base
	Event *NotificationApproveEventData `json:"event"`
}

type TicketCreatedEventData struct {
	TicketId         *string                       `json:"ticket_id,omitempty"`
	HelpdeskId       *string                       `json:"helpdesk_id,omitempty"`
	Guest            *TicketUserEvent              `json:"guest,omitempty"`
	Stage            *int                          `json:"stage,omitempty"`
	Status           *int                          `json:"status,omitempty"`
	Score            *int                          `json:"score,omitempty"`
	CreatedAt        *int                          `json:"created_at,omitempty"`
	UpdatedAt        *int                          `json:"updated_at,omitempty"`
	ClosedAt         *int                          `json:"closed_at,omitempty"`
	Channel          *int                          `json:"channel,omitempty"`
	Solve            *int                          `json:"solve,omitempty"`
	CustomizedFields []*CustomizedFieldDisplayItem `json:"customized_fields,omitempty"`
	ChatId           *string                       `json:"chat_id,omitempty"`
}

type TicketCreatedEvent struct {
	*event.EventV2Base
	Event *TicketCreatedEventData `json:"event"`
}

type TicketUpdatedEventData struct {
	Object    *TicketEvent           `json:"object,omitempty"`
	OldObject *TicketEventUpdateInfo `json:"old_object,omitempty"`
}

type TicketUpdatedEvent struct {
	*event.EventV2Base
	Event *TicketUpdatedEventData `json:"event"`
}

type TicketMessageCreatedEventData struct {
	TicketMessageId *string               `json:"ticket_message_id,omitempty"`
	MessageId       *string               `json:"message_id,omitempty"`
	MsgType         *string               `json:"msg_type,omitempty"`
	Position        *string               `json:"position,omitempty"`
	SenderId        *UserId               `json:"sender_id,omitempty"`
	SenderType      *int                  `json:"sender_type,omitempty"`
	Text            *string               `json:"text,omitempty"`
	Ticket          *Ticket               `json:"ticket,omitempty"`
	EventId         *string               `json:"event_id,omitempty"`
	ChatId          *string               `json:"chat_id,omitempty"`
	Content         *TicketMessageContent `json:"content,omitempty"`
}

type TicketMessageCreatedEvent struct {
	*event.EventV2Base
	Event *TicketMessageCreatedEventData `json:"event"`
}

/* 生成请求的builder构造器*/
/*1.1 生成body的builder结构体*/
/**如果是分页查询，则添加迭代器定义**/
type ListFaqIterator struct {
	nextPageToken *string
	items         []*Faq
	index         int
	limit         int
	ctx           context.Context
	req           *ListFaqReq
	listFunc      func(ctx context.Context, req *ListFaqReq, options ...core.RequestOptionFunc) (*ListFaqResp, error)
	options       []core.RequestOptionFunc
	curlNum       int
}

func (iterator *ListFaqIterator) Next() (bool, *Faq, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum > iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.PageToken = iterator.nextPageToken
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListFaqIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

/**如果是分页查询，则添加迭代器定义**/
type SearchFaqIterator struct {
	nextPageToken *string
	items         []*Faq
	index         int
	limit         int
	ctx           context.Context
	req           *SearchFaqReq
	listFunc      func(ctx context.Context, req *SearchFaqReq, options ...core.RequestOptionFunc) (*SearchFaqResp, error)
	options       []core.RequestOptionFunc
	curlNum       int
}

func (iterator *SearchFaqIterator) Next() (bool, *Faq, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum > iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.PageToken = iterator.nextPageToken
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *SearchFaqIterator) NextPageToken() *string {
	return iterator.nextPageToken
}
