/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

// Package helpdesk code generated by oapi sdk gen
package larkhelpdesk

import (
	"io"

	"io/ioutil"

	"fmt"

	"context"
	"errors"

	"github.com/larksuite/oapi-sdk-go/v3/event"

	"github.com/larksuite/oapi-sdk-go/v3/core"
)

// 生成枚举值

const (
	MsgTypeText        = "text"
	MsgTypePost        = "post"
	MsgTypeImage       = "image"
	MsgTypeInteractive = "interactive"
)

const (
	ReceiveTypeChat = "chat"
	ReceiveTypeUser = "user"
)

const (
	UserIdTypeUserId  = "user_id"
	UserIdTypeUnionId = "union_id"
	UserIdTypeOpenId  = "open_id"
)

// 生成数据类型

type Agent struct {
	Id          *string `json:"id,omitempty"`
	AvatarUrl   *string `json:"avatar_url,omitempty"`
	Name        *string `json:"name,omitempty"`
	Email       *string `json:"email,omitempty"`
	Department  *string `json:"department,omitempty"`
	CompanyName *string `json:"company_name,omitempty"`
}

// builder开始
type AgentBuilder struct {
	id              string
	idFlag          bool
	avatarUrl       string
	avatarUrlFlag   bool
	name            string
	nameFlag        bool
	email           string
	emailFlag       bool
	department      string
	departmentFlag  bool
	companyName     string
	companyNameFlag bool
}

func NewAgentBuilder() *AgentBuilder {
	builder := &AgentBuilder{}
	return builder
}

func (builder *AgentBuilder) Id(id string) *AgentBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *AgentBuilder) AvatarUrl(avatarUrl string) *AgentBuilder {
	builder.avatarUrl = avatarUrl
	builder.avatarUrlFlag = true
	return builder
}
func (builder *AgentBuilder) Name(name string) *AgentBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *AgentBuilder) Email(email string) *AgentBuilder {
	builder.email = email
	builder.emailFlag = true
	return builder
}
func (builder *AgentBuilder) Department(department string) *AgentBuilder {
	builder.department = department
	builder.departmentFlag = true
	return builder
}
func (builder *AgentBuilder) CompanyName(companyName string) *AgentBuilder {
	builder.companyName = companyName
	builder.companyNameFlag = true
	return builder
}

func (builder *AgentBuilder) Build() *Agent {
	req := &Agent{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.avatarUrlFlag {
		req.AvatarUrl = &builder.avatarUrl

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.emailFlag {
		req.Email = &builder.email

	}
	if builder.departmentFlag {
		req.Department = &builder.department

	}
	if builder.companyNameFlag {
		req.CompanyName = &builder.companyName

	}
	return req
}

// builder结束

type AgentSchedules struct {
	Status      *int                  `json:"status,omitempty"`
	Agent       *AgentUser            `json:"agent,omitempty"`
	Schedule    []*WeekdaySchedule    `json:"schedule,omitempty"`
	AgentSkills []*AgentSkillLessInfo `json:"agent_skills,omitempty"`
}

// builder开始
type AgentSchedulesBuilder struct {
	status          int
	statusFlag      bool
	agent           *AgentUser
	agentFlag       bool
	schedule        []*WeekdaySchedule
	scheduleFlag    bool
	agentSkills     []*AgentSkillLessInfo
	agentSkillsFlag bool
}

func NewAgentSchedulesBuilder() *AgentSchedulesBuilder {
	builder := &AgentSchedulesBuilder{}
	return builder
}

func (builder *AgentSchedulesBuilder) Status(status int) *AgentSchedulesBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}
func (builder *AgentSchedulesBuilder) Agent(agent *AgentUser) *AgentSchedulesBuilder {
	builder.agent = agent
	builder.agentFlag = true
	return builder
}
func (builder *AgentSchedulesBuilder) Schedule(schedule []*WeekdaySchedule) *AgentSchedulesBuilder {
	builder.schedule = schedule
	builder.scheduleFlag = true
	return builder
}
func (builder *AgentSchedulesBuilder) AgentSkills(agentSkills []*AgentSkillLessInfo) *AgentSchedulesBuilder {
	builder.agentSkills = agentSkills
	builder.agentSkillsFlag = true
	return builder
}

func (builder *AgentSchedulesBuilder) Build() *AgentSchedules {
	req := &AgentSchedules{}
	if builder.statusFlag {
		req.Status = &builder.status

	}
	if builder.agentFlag {
		req.Agent = builder.agent
	}
	if builder.scheduleFlag {
		req.Schedule = builder.schedule
	}
	if builder.agentSkillsFlag {
		req.AgentSkills = builder.agentSkills
	}
	return req
}

// builder结束

type AgentSchedule struct {
	Status      *int                  `json:"status,omitempty"`
	Agent       *AgentUser            `json:"agent,omitempty"`
	Schedule    []*WeekdaySchedule    `json:"schedule,omitempty"`
	AgentSkills []*AgentSkillLessInfo `json:"agent_skills,omitempty"`
}

// builder开始
type AgentScheduleBuilder struct {
	status          int
	statusFlag      bool
	agent           *AgentUser
	agentFlag       bool
	schedule        []*WeekdaySchedule
	scheduleFlag    bool
	agentSkills     []*AgentSkillLessInfo
	agentSkillsFlag bool
}

func NewAgentScheduleBuilder() *AgentScheduleBuilder {
	builder := &AgentScheduleBuilder{}
	return builder
}

func (builder *AgentScheduleBuilder) Status(status int) *AgentScheduleBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}
func (builder *AgentScheduleBuilder) Agent(agent *AgentUser) *AgentScheduleBuilder {
	builder.agent = agent
	builder.agentFlag = true
	return builder
}
func (builder *AgentScheduleBuilder) Schedule(schedule []*WeekdaySchedule) *AgentScheduleBuilder {
	builder.schedule = schedule
	builder.scheduleFlag = true
	return builder
}
func (builder *AgentScheduleBuilder) AgentSkills(agentSkills []*AgentSkillLessInfo) *AgentScheduleBuilder {
	builder.agentSkills = agentSkills
	builder.agentSkillsFlag = true
	return builder
}

func (builder *AgentScheduleBuilder) Build() *AgentSchedule {
	req := &AgentSchedule{}
	if builder.statusFlag {
		req.Status = &builder.status

	}
	if builder.agentFlag {
		req.Agent = builder.agent
	}
	if builder.scheduleFlag {
		req.Schedule = builder.schedule
	}
	if builder.agentSkillsFlag {
		req.AgentSkills = builder.agentSkills
	}
	return req
}

// builder结束

type AgentScheduleUpdateInfo struct {
	AgentId       *string            `json:"agent_id,omitempty"`
	Schedule      []*WeekdaySchedule `json:"schedule,omitempty"`
	AgentSkillIds []string           `json:"agent_skill_ids,omitempty"`
}

// builder开始
type AgentScheduleUpdateInfoBuilder struct {
	agentId           string
	agentIdFlag       bool
	schedule          []*WeekdaySchedule
	scheduleFlag      bool
	agentSkillIds     []string
	agentSkillIdsFlag bool
}

func NewAgentScheduleUpdateInfoBuilder() *AgentScheduleUpdateInfoBuilder {
	builder := &AgentScheduleUpdateInfoBuilder{}
	return builder
}

func (builder *AgentScheduleUpdateInfoBuilder) AgentId(agentId string) *AgentScheduleUpdateInfoBuilder {
	builder.agentId = agentId
	builder.agentIdFlag = true
	return builder
}
func (builder *AgentScheduleUpdateInfoBuilder) Schedule(schedule []*WeekdaySchedule) *AgentScheduleUpdateInfoBuilder {
	builder.schedule = schedule
	builder.scheduleFlag = true
	return builder
}
func (builder *AgentScheduleUpdateInfoBuilder) AgentSkillIds(agentSkillIds []string) *AgentScheduleUpdateInfoBuilder {
	builder.agentSkillIds = agentSkillIds
	builder.agentSkillIdsFlag = true
	return builder
}

func (builder *AgentScheduleUpdateInfoBuilder) Build() *AgentScheduleUpdateInfo {
	req := &AgentScheduleUpdateInfo{}
	if builder.agentIdFlag {
		req.AgentId = &builder.agentId

	}
	if builder.scheduleFlag {
		req.Schedule = builder.schedule
	}
	if builder.agentSkillIdsFlag {
		req.AgentSkillIds = builder.agentSkillIds
	}
	return req
}

// builder结束

type AgentSkill struct {
	Id         *string           `json:"id,omitempty"`
	HelpdeskId *string           `json:"helpdesk_id,omitempty"`
	Name       *string           `json:"name,omitempty"`
	Rules      []*AgentSkillRule `json:"rules,omitempty"`
	AgentIds   []string          `json:"agent_ids,omitempty"`
	IsDefault  *bool             `json:"is_default,omitempty"`
	Agents     []*Agent          `json:"agents,omitempty"`
}

// builder开始
type AgentSkillBuilder struct {
	id             string
	idFlag         bool
	helpdeskId     string
	helpdeskIdFlag bool
	name           string
	nameFlag       bool
	rules          []*AgentSkillRule
	rulesFlag      bool
	agentIds       []string
	agentIdsFlag   bool
	isDefault      bool
	isDefaultFlag  bool
	agents         []*Agent
	agentsFlag     bool
}

func NewAgentSkillBuilder() *AgentSkillBuilder {
	builder := &AgentSkillBuilder{}
	return builder
}

func (builder *AgentSkillBuilder) Id(id string) *AgentSkillBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *AgentSkillBuilder) HelpdeskId(helpdeskId string) *AgentSkillBuilder {
	builder.helpdeskId = helpdeskId
	builder.helpdeskIdFlag = true
	return builder
}
func (builder *AgentSkillBuilder) Name(name string) *AgentSkillBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *AgentSkillBuilder) Rules(rules []*AgentSkillRule) *AgentSkillBuilder {
	builder.rules = rules
	builder.rulesFlag = true
	return builder
}
func (builder *AgentSkillBuilder) AgentIds(agentIds []string) *AgentSkillBuilder {
	builder.agentIds = agentIds
	builder.agentIdsFlag = true
	return builder
}
func (builder *AgentSkillBuilder) IsDefault(isDefault bool) *AgentSkillBuilder {
	builder.isDefault = isDefault
	builder.isDefaultFlag = true
	return builder
}
func (builder *AgentSkillBuilder) Agents(agents []*Agent) *AgentSkillBuilder {
	builder.agents = agents
	builder.agentsFlag = true
	return builder
}

func (builder *AgentSkillBuilder) Build() *AgentSkill {
	req := &AgentSkill{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.helpdeskIdFlag {
		req.HelpdeskId = &builder.helpdeskId

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.rulesFlag {
		req.Rules = builder.rules
	}
	if builder.agentIdsFlag {
		req.AgentIds = builder.agentIds
	}
	if builder.isDefaultFlag {
		req.IsDefault = &builder.isDefault

	}
	if builder.agentsFlag {
		req.Agents = builder.agents
	}
	return req
}

// builder结束

type AgentSkillLessInfo struct {
	Id        *string `json:"id,omitempty"`
	Name      *string `json:"name,omitempty"`
	IsDefault *bool   `json:"is_default,omitempty"`
}

// builder开始
type AgentSkillLessInfoBuilder struct {
	id            string
	idFlag        bool
	name          string
	nameFlag      bool
	isDefault     bool
	isDefaultFlag bool
}

func NewAgentSkillLessInfoBuilder() *AgentSkillLessInfoBuilder {
	builder := &AgentSkillLessInfoBuilder{}
	return builder
}

func (builder *AgentSkillLessInfoBuilder) Id(id string) *AgentSkillLessInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *AgentSkillLessInfoBuilder) Name(name string) *AgentSkillLessInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *AgentSkillLessInfoBuilder) IsDefault(isDefault bool) *AgentSkillLessInfoBuilder {
	builder.isDefault = isDefault
	builder.isDefaultFlag = true
	return builder
}

func (builder *AgentSkillLessInfoBuilder) Build() *AgentSkillLessInfo {
	req := &AgentSkillLessInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.isDefaultFlag {
		req.IsDefault = &builder.isDefault

	}
	return req
}

// builder结束

type AgentSkillRule struct {
	Id               *string `json:"id,omitempty"`
	SelectedOperator *int    `json:"selected_operator,omitempty"`
	OperatorOptions  []int   `json:"operator_options,omitempty"`
	Operand          *string `json:"operand,omitempty"`
	Category         *int    `json:"category,omitempty"`
	DisplayName      *string `json:"display_name,omitempty"`
}

// builder开始
type AgentSkillRuleBuilder struct {
	id                   string
	idFlag               bool
	selectedOperator     int
	selectedOperatorFlag bool
	operatorOptions      []int
	operatorOptionsFlag  bool
	operand              string
	operandFlag          bool
	category             int
	categoryFlag         bool
	displayName          string
	displayNameFlag      bool
}

func NewAgentSkillRuleBuilder() *AgentSkillRuleBuilder {
	builder := &AgentSkillRuleBuilder{}
	return builder
}

func (builder *AgentSkillRuleBuilder) Id(id string) *AgentSkillRuleBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *AgentSkillRuleBuilder) SelectedOperator(selectedOperator int) *AgentSkillRuleBuilder {
	builder.selectedOperator = selectedOperator
	builder.selectedOperatorFlag = true
	return builder
}
func (builder *AgentSkillRuleBuilder) OperatorOptions(operatorOptions []int) *AgentSkillRuleBuilder {
	builder.operatorOptions = operatorOptions
	builder.operatorOptionsFlag = true
	return builder
}
func (builder *AgentSkillRuleBuilder) Operand(operand string) *AgentSkillRuleBuilder {
	builder.operand = operand
	builder.operandFlag = true
	return builder
}
func (builder *AgentSkillRuleBuilder) Category(category int) *AgentSkillRuleBuilder {
	builder.category = category
	builder.categoryFlag = true
	return builder
}
func (builder *AgentSkillRuleBuilder) DisplayName(displayName string) *AgentSkillRuleBuilder {
	builder.displayName = displayName
	builder.displayNameFlag = true
	return builder
}

func (builder *AgentSkillRuleBuilder) Build() *AgentSkillRule {
	req := &AgentSkillRule{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.selectedOperatorFlag {
		req.SelectedOperator = &builder.selectedOperator

	}
	if builder.operatorOptionsFlag {
		req.OperatorOptions = builder.operatorOptions
	}
	if builder.operandFlag {
		req.Operand = &builder.operand

	}
	if builder.categoryFlag {
		req.Category = &builder.category

	}
	if builder.displayNameFlag {
		req.DisplayName = &builder.displayName

	}
	return req
}

// builder结束

type AgentUser struct {
	Id          *string `json:"id,omitempty"`
	AvatarUrl   *string `json:"avatar_url,omitempty"`
	Name        *string `json:"name,omitempty"`
	Email       *string `json:"email,omitempty"`
	Department  *string `json:"department,omitempty"`
	CompanyName *string `json:"company_name,omitempty"`
}

// builder开始
type AgentUserBuilder struct {
	id              string
	idFlag          bool
	avatarUrl       string
	avatarUrlFlag   bool
	name            string
	nameFlag        bool
	email           string
	emailFlag       bool
	department      string
	departmentFlag  bool
	companyName     string
	companyNameFlag bool
}

func NewAgentUserBuilder() *AgentUserBuilder {
	builder := &AgentUserBuilder{}
	return builder
}

func (builder *AgentUserBuilder) Id(id string) *AgentUserBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *AgentUserBuilder) AvatarUrl(avatarUrl string) *AgentUserBuilder {
	builder.avatarUrl = avatarUrl
	builder.avatarUrlFlag = true
	return builder
}
func (builder *AgentUserBuilder) Name(name string) *AgentUserBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *AgentUserBuilder) Email(email string) *AgentUserBuilder {
	builder.email = email
	builder.emailFlag = true
	return builder
}
func (builder *AgentUserBuilder) Department(department string) *AgentUserBuilder {
	builder.department = department
	builder.departmentFlag = true
	return builder
}
func (builder *AgentUserBuilder) CompanyName(companyName string) *AgentUserBuilder {
	builder.companyName = companyName
	builder.companyNameFlag = true
	return builder
}

func (builder *AgentUserBuilder) Build() *AgentUser {
	req := &AgentUser{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.avatarUrlFlag {
		req.AvatarUrl = &builder.avatarUrl

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.emailFlag {
		req.Email = &builder.email

	}
	if builder.departmentFlag {
		req.Department = &builder.department

	}
	if builder.companyNameFlag {
		req.CompanyName = &builder.companyName

	}
	return req
}

// builder结束

type BotMessage struct {
	MsgType     *string `json:"msg_type,omitempty"`
	Content     *string `json:"content,omitempty"`
	ReceiverId  *string `json:"receiver_id,omitempty"`
	ReceiveType *string `json:"receive_type,omitempty"`
}

// builder开始
type BotMessageBuilder struct {
	msgType         string
	msgTypeFlag     bool
	content         string
	contentFlag     bool
	receiverId      string
	receiverIdFlag  bool
	receiveType     string
	receiveTypeFlag bool
}

func NewBotMessageBuilder() *BotMessageBuilder {
	builder := &BotMessageBuilder{}
	return builder
}

func (builder *BotMessageBuilder) MsgType(msgType string) *BotMessageBuilder {
	builder.msgType = msgType
	builder.msgTypeFlag = true
	return builder
}
func (builder *BotMessageBuilder) Content(content string) *BotMessageBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}
func (builder *BotMessageBuilder) ReceiverId(receiverId string) *BotMessageBuilder {
	builder.receiverId = receiverId
	builder.receiverIdFlag = true
	return builder
}
func (builder *BotMessageBuilder) ReceiveType(receiveType string) *BotMessageBuilder {
	builder.receiveType = receiveType
	builder.receiveTypeFlag = true
	return builder
}

func (builder *BotMessageBuilder) Build() *BotMessage {
	req := &BotMessage{}
	if builder.msgTypeFlag {
		req.MsgType = &builder.msgType

	}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.receiverIdFlag {
		req.ReceiverId = &builder.receiverId

	}
	if builder.receiveTypeFlag {
		req.ReceiveType = &builder.receiveType

	}
	return req
}

// builder结束

type Category struct {
	CategoryId *string `json:"category_id,omitempty"`
	Id         *string `json:"id,omitempty"`
	Name       *string `json:"name,omitempty"`
	ParentId   *string `json:"parent_id,omitempty"`
	HelpdeskId *string `json:"helpdesk_id,omitempty"`
	Language   *string `json:"language,omitempty"`
}

// builder开始
type CategoryBuilder struct {
	categoryId     string
	categoryIdFlag bool
	id             string
	idFlag         bool
	name           string
	nameFlag       bool
	parentId       string
	parentIdFlag   bool
	helpdeskId     string
	helpdeskIdFlag bool
	language       string
	languageFlag   bool
}

func NewCategoryBuilder() *CategoryBuilder {
	builder := &CategoryBuilder{}
	return builder
}

func (builder *CategoryBuilder) CategoryId(categoryId string) *CategoryBuilder {
	builder.categoryId = categoryId
	builder.categoryIdFlag = true
	return builder
}
func (builder *CategoryBuilder) Id(id string) *CategoryBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *CategoryBuilder) Name(name string) *CategoryBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *CategoryBuilder) ParentId(parentId string) *CategoryBuilder {
	builder.parentId = parentId
	builder.parentIdFlag = true
	return builder
}
func (builder *CategoryBuilder) HelpdeskId(helpdeskId string) *CategoryBuilder {
	builder.helpdeskId = helpdeskId
	builder.helpdeskIdFlag = true
	return builder
}
func (builder *CategoryBuilder) Language(language string) *CategoryBuilder {
	builder.language = language
	builder.languageFlag = true
	return builder
}

func (builder *CategoryBuilder) Build() *Category {
	req := &Category{}
	if builder.categoryIdFlag {
		req.CategoryId = &builder.categoryId

	}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.parentIdFlag {
		req.ParentId = &builder.parentId

	}
	if builder.helpdeskIdFlag {
		req.HelpdeskId = &builder.helpdeskId

	}
	if builder.languageFlag {
		req.Language = &builder.language

	}
	return req
}

// builder结束

type Comments struct {
	Content       *string `json:"content,omitempty"`
	CreatedAt     *int    `json:"created_at,omitempty"`
	Id            *int    `json:"id,omitempty"`
	UserAvatarUrl *string `json:"user_avatar_url,omitempty"`
	UserName      *string `json:"user_name,omitempty"`
	UserId        *int    `json:"user_id,omitempty"`
}

// builder开始
type CommentsBuilder struct {
	content           string
	contentFlag       bool
	createdAt         int
	createdAtFlag     bool
	id                int
	idFlag            bool
	userAvatarUrl     string
	userAvatarUrlFlag bool
	userName          string
	userNameFlag      bool
	userId            int
	userIdFlag        bool
}

func NewCommentsBuilder() *CommentsBuilder {
	builder := &CommentsBuilder{}
	return builder
}

func (builder *CommentsBuilder) Content(content string) *CommentsBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}
func (builder *CommentsBuilder) CreatedAt(createdAt int) *CommentsBuilder {
	builder.createdAt = createdAt
	builder.createdAtFlag = true
	return builder
}
func (builder *CommentsBuilder) Id(id int) *CommentsBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *CommentsBuilder) UserAvatarUrl(userAvatarUrl string) *CommentsBuilder {
	builder.userAvatarUrl = userAvatarUrl
	builder.userAvatarUrlFlag = true
	return builder
}
func (builder *CommentsBuilder) UserName(userName string) *CommentsBuilder {
	builder.userName = userName
	builder.userNameFlag = true
	return builder
}
func (builder *CommentsBuilder) UserId(userId int) *CommentsBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}

func (builder *CommentsBuilder) Build() *Comments {
	req := &Comments{}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.createdAtFlag {
		req.CreatedAt = &builder.createdAt

	}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.userAvatarUrlFlag {
		req.UserAvatarUrl = &builder.userAvatarUrl

	}
	if builder.userNameFlag {
		req.UserName = &builder.userName

	}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	return req
}

// builder结束

type CustomizedFieldDisplayItem struct {
	Id          *string `json:"id,omitempty"`
	Value       *string `json:"value,omitempty"`
	KeyName     *string `json:"key_name,omitempty"`
	DisplayName *string `json:"display_name,omitempty"`
	Position    *int    `json:"position,omitempty"`
	Required    *bool   `json:"required,omitempty"`
	Editable    *bool   `json:"editable,omitempty"`
}

// builder开始
type CustomizedFieldDisplayItemBuilder struct {
	id              string
	idFlag          bool
	value           string
	valueFlag       bool
	keyName         string
	keyNameFlag     bool
	displayName     string
	displayNameFlag bool
	position        int
	positionFlag    bool
	required        bool
	requiredFlag    bool
	editable        bool
	editableFlag    bool
}

func NewCustomizedFieldDisplayItemBuilder() *CustomizedFieldDisplayItemBuilder {
	builder := &CustomizedFieldDisplayItemBuilder{}
	return builder
}

func (builder *CustomizedFieldDisplayItemBuilder) Id(id string) *CustomizedFieldDisplayItemBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *CustomizedFieldDisplayItemBuilder) Value(value string) *CustomizedFieldDisplayItemBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}
func (builder *CustomizedFieldDisplayItemBuilder) KeyName(keyName string) *CustomizedFieldDisplayItemBuilder {
	builder.keyName = keyName
	builder.keyNameFlag = true
	return builder
}
func (builder *CustomizedFieldDisplayItemBuilder) DisplayName(displayName string) *CustomizedFieldDisplayItemBuilder {
	builder.displayName = displayName
	builder.displayNameFlag = true
	return builder
}
func (builder *CustomizedFieldDisplayItemBuilder) Position(position int) *CustomizedFieldDisplayItemBuilder {
	builder.position = position
	builder.positionFlag = true
	return builder
}
func (builder *CustomizedFieldDisplayItemBuilder) Required(required bool) *CustomizedFieldDisplayItemBuilder {
	builder.required = required
	builder.requiredFlag = true
	return builder
}
func (builder *CustomizedFieldDisplayItemBuilder) Editable(editable bool) *CustomizedFieldDisplayItemBuilder {
	builder.editable = editable
	builder.editableFlag = true
	return builder
}

func (builder *CustomizedFieldDisplayItemBuilder) Build() *CustomizedFieldDisplayItem {
	req := &CustomizedFieldDisplayItem{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.valueFlag {
		req.Value = &builder.value

	}
	if builder.keyNameFlag {
		req.KeyName = &builder.keyName

	}
	if builder.displayNameFlag {
		req.DisplayName = &builder.displayName

	}
	if builder.positionFlag {
		req.Position = &builder.position

	}
	if builder.requiredFlag {
		req.Required = &builder.required

	}
	if builder.editableFlag {
		req.Editable = &builder.editable

	}
	return req
}

// builder结束

type Event struct {
	Type    *string `json:"type,omitempty"`
	Subtype *string `json:"subtype,omitempty"`
}

// builder开始
type EventBuilder struct {
	type_       string
	typeFlag    bool
	subtype     string
	subtypeFlag bool
}

func NewEventBuilder() *EventBuilder {
	builder := &EventBuilder{}
	return builder
}

func (builder *EventBuilder) Type(type_ string) *EventBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}
func (builder *EventBuilder) Subtype(subtype string) *EventBuilder {
	builder.subtype = subtype
	builder.subtypeFlag = true
	return builder
}

func (builder *EventBuilder) Build() *Event {
	req := &Event{}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	if builder.subtypeFlag {
		req.Subtype = &builder.subtype

	}
	return req
}

// builder结束

type Faq struct {
	FaqId          *string     `json:"faq_id,omitempty"`
	Id             *string     `json:"id,omitempty"`
	HelpdeskId     *string     `json:"helpdesk_id,omitempty"`
	Question       *string     `json:"question,omitempty"`
	Answer         *string     `json:"answer,omitempty"`
	AnswerRichtext []*Richtext `json:"answer_richtext,omitempty"`
	CreateTime     *int        `json:"create_time,omitempty"`
	UpdateTime     *int        `json:"update_time,omitempty"`
	Categories     []*Category `json:"categories,omitempty"`
	Tags           []string    `json:"tags,omitempty"`
	ExpireTime     *int        `json:"expire_time,omitempty"`
	UpdateUser     *TicketUser `json:"update_user,omitempty"`
	CreateUser     *TicketUser `json:"create_user,omitempty"`
}

// builder开始
type FaqBuilder struct {
	faqId              string
	faqIdFlag          bool
	id                 string
	idFlag             bool
	helpdeskId         string
	helpdeskIdFlag     bool
	question           string
	questionFlag       bool
	answer             string
	answerFlag         bool
	answerRichtext     []*Richtext
	answerRichtextFlag bool
	createTime         int
	createTimeFlag     bool
	updateTime         int
	updateTimeFlag     bool
	categories         []*Category
	categoriesFlag     bool
	tags               []string
	tagsFlag           bool
	expireTime         int
	expireTimeFlag     bool
	updateUser         *TicketUser
	updateUserFlag     bool
	createUser         *TicketUser
	createUserFlag     bool
}

func NewFaqBuilder() *FaqBuilder {
	builder := &FaqBuilder{}
	return builder
}

func (builder *FaqBuilder) FaqId(faqId string) *FaqBuilder {
	builder.faqId = faqId
	builder.faqIdFlag = true
	return builder
}
func (builder *FaqBuilder) Id(id string) *FaqBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *FaqBuilder) HelpdeskId(helpdeskId string) *FaqBuilder {
	builder.helpdeskId = helpdeskId
	builder.helpdeskIdFlag = true
	return builder
}
func (builder *FaqBuilder) Question(question string) *FaqBuilder {
	builder.question = question
	builder.questionFlag = true
	return builder
}
func (builder *FaqBuilder) Answer(answer string) *FaqBuilder {
	builder.answer = answer
	builder.answerFlag = true
	return builder
}
func (builder *FaqBuilder) AnswerRichtext(answerRichtext []*Richtext) *FaqBuilder {
	builder.answerRichtext = answerRichtext
	builder.answerRichtextFlag = true
	return builder
}
func (builder *FaqBuilder) CreateTime(createTime int) *FaqBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}
func (builder *FaqBuilder) UpdateTime(updateTime int) *FaqBuilder {
	builder.updateTime = updateTime
	builder.updateTimeFlag = true
	return builder
}
func (builder *FaqBuilder) Categories(categories []*Category) *FaqBuilder {
	builder.categories = categories
	builder.categoriesFlag = true
	return builder
}
func (builder *FaqBuilder) Tags(tags []string) *FaqBuilder {
	builder.tags = tags
	builder.tagsFlag = true
	return builder
}
func (builder *FaqBuilder) ExpireTime(expireTime int) *FaqBuilder {
	builder.expireTime = expireTime
	builder.expireTimeFlag = true
	return builder
}
func (builder *FaqBuilder) UpdateUser(updateUser *TicketUser) *FaqBuilder {
	builder.updateUser = updateUser
	builder.updateUserFlag = true
	return builder
}
func (builder *FaqBuilder) CreateUser(createUser *TicketUser) *FaqBuilder {
	builder.createUser = createUser
	builder.createUserFlag = true
	return builder
}

func (builder *FaqBuilder) Build() *Faq {
	req := &Faq{}
	if builder.faqIdFlag {
		req.FaqId = &builder.faqId

	}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.helpdeskIdFlag {
		req.HelpdeskId = &builder.helpdeskId

	}
	if builder.questionFlag {
		req.Question = &builder.question

	}
	if builder.answerFlag {
		req.Answer = &builder.answer

	}
	if builder.answerRichtextFlag {
		req.AnswerRichtext = builder.answerRichtext
	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.updateTimeFlag {
		req.UpdateTime = &builder.updateTime

	}
	if builder.categoriesFlag {
		req.Categories = builder.categories
	}
	if builder.tagsFlag {
		req.Tags = builder.tags
	}
	if builder.expireTimeFlag {
		req.ExpireTime = &builder.expireTime

	}
	if builder.updateUserFlag {
		req.UpdateUser = builder.updateUser
	}
	if builder.createUserFlag {
		req.CreateUser = builder.createUser
	}
	return req
}

// builder结束

type FaqUpdateInfo struct {
	CategoryId     *string  `json:"category_id,omitempty"`
	Question       *string  `json:"question,omitempty"`
	Answer         *string  `json:"answer,omitempty"`
	AnswerRichtext *string  `json:"answer_richtext,omitempty"`
	Tags           []string `json:"tags,omitempty"`
}

// builder开始
type FaqUpdateInfoBuilder struct {
	categoryId         string
	categoryIdFlag     bool
	question           string
	questionFlag       bool
	answer             string
	answerFlag         bool
	answerRichtext     string
	answerRichtextFlag bool
	tags               []string
	tagsFlag           bool
}

func NewFaqUpdateInfoBuilder() *FaqUpdateInfoBuilder {
	builder := &FaqUpdateInfoBuilder{}
	return builder
}

func (builder *FaqUpdateInfoBuilder) CategoryId(categoryId string) *FaqUpdateInfoBuilder {
	builder.categoryId = categoryId
	builder.categoryIdFlag = true
	return builder
}
func (builder *FaqUpdateInfoBuilder) Question(question string) *FaqUpdateInfoBuilder {
	builder.question = question
	builder.questionFlag = true
	return builder
}
func (builder *FaqUpdateInfoBuilder) Answer(answer string) *FaqUpdateInfoBuilder {
	builder.answer = answer
	builder.answerFlag = true
	return builder
}
func (builder *FaqUpdateInfoBuilder) AnswerRichtext(answerRichtext string) *FaqUpdateInfoBuilder {
	builder.answerRichtext = answerRichtext
	builder.answerRichtextFlag = true
	return builder
}
func (builder *FaqUpdateInfoBuilder) Tags(tags []string) *FaqUpdateInfoBuilder {
	builder.tags = tags
	builder.tagsFlag = true
	return builder
}

func (builder *FaqUpdateInfoBuilder) Build() *FaqUpdateInfo {
	req := &FaqUpdateInfo{}
	if builder.categoryIdFlag {
		req.CategoryId = &builder.categoryId

	}
	if builder.questionFlag {
		req.Question = &builder.question

	}
	if builder.answerFlag {
		req.Answer = &builder.answer

	}
	if builder.answerRichtextFlag {
		req.AnswerRichtext = &builder.answerRichtext

	}
	if builder.tagsFlag {
		req.Tags = builder.tags
	}
	return req
}

// builder结束

type Notification struct {
	Id                          *string                   `json:"id,omitempty"`
	JobName                     *string                   `json:"job_name,omitempty"`
	Status                      *int                      `json:"status,omitempty"`
	CreateUser                  *NotificationUser         `json:"create_user,omitempty"`
	CreatedAt                   *string                   `json:"created_at,omitempty"`
	UpdateUser                  *NotificationUser         `json:"update_user,omitempty"`
	UpdatedAt                   *string                   `json:"updated_at,omitempty"`
	TargetUserCount             *int                      `json:"target_user_count,omitempty"`
	SentUserCount               *int                      `json:"sent_user_count,omitempty"`
	ReadUserCount               *int                      `json:"read_user_count,omitempty"`
	SendAt                      *string                   `json:"send_at,omitempty"`
	PushContent                 *string                   `json:"push_content,omitempty"`
	PushType                    *int                      `json:"push_type,omitempty"`
	PushScopeType               *int                      `json:"push_scope_type,omitempty"`
	NewStaffScopeType           *int                      `json:"new_staff_scope_type,omitempty"`
	NewStaffScopeDepartmentList []*NotificationDepartment `json:"new_staff_scope_department_list,omitempty"`
	UserList                    []*NotificationUser       `json:"user_list,omitempty"`
	DepartmentList              []*NotificationDepartment `json:"department_list,omitempty"`
	ChatList                    []*NotificationChat       `json:"chat_list,omitempty"`
	Ext                         *string                   `json:"ext,omitempty"`
}

// builder开始
type NotificationBuilder struct {
	id                              string
	idFlag                          bool
	jobName                         string
	jobNameFlag                     bool
	status                          int
	statusFlag                      bool
	createUser                      *NotificationUser
	createUserFlag                  bool
	createdAt                       string
	createdAtFlag                   bool
	updateUser                      *NotificationUser
	updateUserFlag                  bool
	updatedAt                       string
	updatedAtFlag                   bool
	targetUserCount                 int
	targetUserCountFlag             bool
	sentUserCount                   int
	sentUserCountFlag               bool
	readUserCount                   int
	readUserCountFlag               bool
	sendAt                          string
	sendAtFlag                      bool
	pushContent                     string
	pushContentFlag                 bool
	pushType                        int
	pushTypeFlag                    bool
	pushScopeType                   int
	pushScopeTypeFlag               bool
	newStaffScopeType               int
	newStaffScopeTypeFlag           bool
	newStaffScopeDepartmentList     []*NotificationDepartment
	newStaffScopeDepartmentListFlag bool
	userList                        []*NotificationUser
	userListFlag                    bool
	departmentList                  []*NotificationDepartment
	departmentListFlag              bool
	chatList                        []*NotificationChat
	chatListFlag                    bool
	ext                             string
	extFlag                         bool
}

func NewNotificationBuilder() *NotificationBuilder {
	builder := &NotificationBuilder{}
	return builder
}

func (builder *NotificationBuilder) Id(id string) *NotificationBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *NotificationBuilder) JobName(jobName string) *NotificationBuilder {
	builder.jobName = jobName
	builder.jobNameFlag = true
	return builder
}
func (builder *NotificationBuilder) Status(status int) *NotificationBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}
func (builder *NotificationBuilder) CreateUser(createUser *NotificationUser) *NotificationBuilder {
	builder.createUser = createUser
	builder.createUserFlag = true
	return builder
}
func (builder *NotificationBuilder) CreatedAt(createdAt string) *NotificationBuilder {
	builder.createdAt = createdAt
	builder.createdAtFlag = true
	return builder
}
func (builder *NotificationBuilder) UpdateUser(updateUser *NotificationUser) *NotificationBuilder {
	builder.updateUser = updateUser
	builder.updateUserFlag = true
	return builder
}
func (builder *NotificationBuilder) UpdatedAt(updatedAt string) *NotificationBuilder {
	builder.updatedAt = updatedAt
	builder.updatedAtFlag = true
	return builder
}
func (builder *NotificationBuilder) TargetUserCount(targetUserCount int) *NotificationBuilder {
	builder.targetUserCount = targetUserCount
	builder.targetUserCountFlag = true
	return builder
}
func (builder *NotificationBuilder) SentUserCount(sentUserCount int) *NotificationBuilder {
	builder.sentUserCount = sentUserCount
	builder.sentUserCountFlag = true
	return builder
}
func (builder *NotificationBuilder) ReadUserCount(readUserCount int) *NotificationBuilder {
	builder.readUserCount = readUserCount
	builder.readUserCountFlag = true
	return builder
}
func (builder *NotificationBuilder) SendAt(sendAt string) *NotificationBuilder {
	builder.sendAt = sendAt
	builder.sendAtFlag = true
	return builder
}
func (builder *NotificationBuilder) PushContent(pushContent string) *NotificationBuilder {
	builder.pushContent = pushContent
	builder.pushContentFlag = true
	return builder
}
func (builder *NotificationBuilder) PushType(pushType int) *NotificationBuilder {
	builder.pushType = pushType
	builder.pushTypeFlag = true
	return builder
}
func (builder *NotificationBuilder) PushScopeType(pushScopeType int) *NotificationBuilder {
	builder.pushScopeType = pushScopeType
	builder.pushScopeTypeFlag = true
	return builder
}
func (builder *NotificationBuilder) NewStaffScopeType(newStaffScopeType int) *NotificationBuilder {
	builder.newStaffScopeType = newStaffScopeType
	builder.newStaffScopeTypeFlag = true
	return builder
}
func (builder *NotificationBuilder) NewStaffScopeDepartmentList(newStaffScopeDepartmentList []*NotificationDepartment) *NotificationBuilder {
	builder.newStaffScopeDepartmentList = newStaffScopeDepartmentList
	builder.newStaffScopeDepartmentListFlag = true
	return builder
}
func (builder *NotificationBuilder) UserList(userList []*NotificationUser) *NotificationBuilder {
	builder.userList = userList
	builder.userListFlag = true
	return builder
}
func (builder *NotificationBuilder) DepartmentList(departmentList []*NotificationDepartment) *NotificationBuilder {
	builder.departmentList = departmentList
	builder.departmentListFlag = true
	return builder
}
func (builder *NotificationBuilder) ChatList(chatList []*NotificationChat) *NotificationBuilder {
	builder.chatList = chatList
	builder.chatListFlag = true
	return builder
}
func (builder *NotificationBuilder) Ext(ext string) *NotificationBuilder {
	builder.ext = ext
	builder.extFlag = true
	return builder
}

func (builder *NotificationBuilder) Build() *Notification {
	req := &Notification{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.jobNameFlag {
		req.JobName = &builder.jobName

	}
	if builder.statusFlag {
		req.Status = &builder.status

	}
	if builder.createUserFlag {
		req.CreateUser = builder.createUser
	}
	if builder.createdAtFlag {
		req.CreatedAt = &builder.createdAt

	}
	if builder.updateUserFlag {
		req.UpdateUser = builder.updateUser
	}
	if builder.updatedAtFlag {
		req.UpdatedAt = &builder.updatedAt

	}
	if builder.targetUserCountFlag {
		req.TargetUserCount = &builder.targetUserCount

	}
	if builder.sentUserCountFlag {
		req.SentUserCount = &builder.sentUserCount

	}
	if builder.readUserCountFlag {
		req.ReadUserCount = &builder.readUserCount

	}
	if builder.sendAtFlag {
		req.SendAt = &builder.sendAt

	}
	if builder.pushContentFlag {
		req.PushContent = &builder.pushContent

	}
	if builder.pushTypeFlag {
		req.PushType = &builder.pushType

	}
	if builder.pushScopeTypeFlag {
		req.PushScopeType = &builder.pushScopeType

	}
	if builder.newStaffScopeTypeFlag {
		req.NewStaffScopeType = &builder.newStaffScopeType

	}
	if builder.newStaffScopeDepartmentListFlag {
		req.NewStaffScopeDepartmentList = builder.newStaffScopeDepartmentList
	}
	if builder.userListFlag {
		req.UserList = builder.userList
	}
	if builder.departmentListFlag {
		req.DepartmentList = builder.departmentList
	}
	if builder.chatListFlag {
		req.ChatList = builder.chatList
	}
	if builder.extFlag {
		req.Ext = &builder.ext

	}
	return req
}

// builder结束

type NotificationChat struct {
	ChatId *string `json:"chat_id,omitempty"`
	Name   *string `json:"name,omitempty"`
}

// builder开始
type NotificationChatBuilder struct {
	chatId     string
	chatIdFlag bool
	name       string
	nameFlag   bool
}

func NewNotificationChatBuilder() *NotificationChatBuilder {
	builder := &NotificationChatBuilder{}
	return builder
}

func (builder *NotificationChatBuilder) ChatId(chatId string) *NotificationChatBuilder {
	builder.chatId = chatId
	builder.chatIdFlag = true
	return builder
}
func (builder *NotificationChatBuilder) Name(name string) *NotificationChatBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *NotificationChatBuilder) Build() *NotificationChat {
	req := &NotificationChat{}
	if builder.chatIdFlag {
		req.ChatId = &builder.chatId

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	return req
}

// builder结束

type NotificationDepartment struct {
	DepartmentId *string `json:"department_id,omitempty"`
	Name         *string `json:"name,omitempty"`
}

// builder开始
type NotificationDepartmentBuilder struct {
	departmentId     string
	departmentIdFlag bool
	name             string
	nameFlag         bool
}

func NewNotificationDepartmentBuilder() *NotificationDepartmentBuilder {
	builder := &NotificationDepartmentBuilder{}
	return builder
}

func (builder *NotificationDepartmentBuilder) DepartmentId(departmentId string) *NotificationDepartmentBuilder {
	builder.departmentId = departmentId
	builder.departmentIdFlag = true
	return builder
}
func (builder *NotificationDepartmentBuilder) Name(name string) *NotificationDepartmentBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *NotificationDepartmentBuilder) Build() *NotificationDepartment {
	req := &NotificationDepartment{}
	if builder.departmentIdFlag {
		req.DepartmentId = &builder.departmentId

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	return req
}

// builder结束

type NotificationUser struct {
	UserId    *string `json:"user_id,omitempty"`
	AvatarUrl *string `json:"avatar_url,omitempty"`
	Name      *string `json:"name,omitempty"`
}

// builder开始
type NotificationUserBuilder struct {
	userId        string
	userIdFlag    bool
	avatarUrl     string
	avatarUrlFlag bool
	name          string
	nameFlag      bool
}

func NewNotificationUserBuilder() *NotificationUserBuilder {
	builder := &NotificationUserBuilder{}
	return builder
}

func (builder *NotificationUserBuilder) UserId(userId string) *NotificationUserBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}
func (builder *NotificationUserBuilder) AvatarUrl(avatarUrl string) *NotificationUserBuilder {
	builder.avatarUrl = avatarUrl
	builder.avatarUrlFlag = true
	return builder
}
func (builder *NotificationUserBuilder) Name(name string) *NotificationUserBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *NotificationUserBuilder) Build() *NotificationUser {
	req := &NotificationUser{}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.avatarUrlFlag {
		req.AvatarUrl = &builder.avatarUrl

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	return req
}

// builder结束

type Richtext struct {
	Content *string `json:"content,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// builder开始
type RichtextBuilder struct {
	content     string
	contentFlag bool
	type_       string
	typeFlag    bool
}

func NewRichtextBuilder() *RichtextBuilder {
	builder := &RichtextBuilder{}
	return builder
}

func (builder *RichtextBuilder) Content(content string) *RichtextBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}
func (builder *RichtextBuilder) Type(type_ string) *RichtextBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}

func (builder *RichtextBuilder) Build() *Richtext {
	req := &Richtext{}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	return req
}

// builder结束

type Ticket struct {
	TicketId                   *string                       `json:"ticket_id,omitempty"`
	HelpdeskId                 *string                       `json:"helpdesk_id,omitempty"`
	Guest                      *TicketUser                   `json:"guest,omitempty"`
	Comments                   *Comments                     `json:"comments,omitempty"`
	TicketType                 *int                          `json:"ticket_type,omitempty"`
	Status                     *int                          `json:"status,omitempty"`
	Score                      *int                          `json:"score,omitempty"`
	CreatedAt                  *int                          `json:"created_at,omitempty"`
	UpdatedAt                  *int                          `json:"updated_at,omitempty"`
	ClosedAt                   *int                          `json:"closed_at,omitempty"`
	DissatisfactionReason      []string                      `json:"dissatisfaction_reason,omitempty"`
	Agents                     []*TicketUser                 `json:"agents,omitempty"`
	Channel                    *int                          `json:"channel,omitempty"`
	Solve                      *int                          `json:"solve,omitempty"`
	ClosedBy                   *TicketUser                   `json:"closed_by,omitempty"`
	Collaborators              []*TicketUser                 `json:"collaborators,omitempty"`
	CustomizedFields           []*CustomizedFieldDisplayItem `json:"customized_fields,omitempty"`
	AgentServiceDuration       *float64                      `json:"agent_service_duration,omitempty"`
	AgentFirstResponseDuration *int                          `json:"agent_first_response_duration,omitempty"`
	BotServiceDuration         *int                          `json:"bot_service_duration,omitempty"`
	AgentResolutionTime        *int                          `json:"agent_resolution_time,omitempty"`
	ActualProcessingTime       *int                          `json:"actual_processing_time,omitempty"`
	AgentEntryTime             *int                          `json:"agent_entry_time,omitempty"`
	AgentFirstResponseTime     *int                          `json:"agent_first_response_time,omitempty"`
	AgentLastResponseTime      *int                          `json:"agent_last_response_time,omitempty"`
	AgentOwner                 *TicketUser                   `json:"agent_owner,omitempty"`
}

// builder开始
type TicketBuilder struct {
	ticketId                       string
	ticketIdFlag                   bool
	helpdeskId                     string
	helpdeskIdFlag                 bool
	guest                          *TicketUser
	guestFlag                      bool
	comments                       *Comments
	commentsFlag                   bool
	ticketType                     int
	ticketTypeFlag                 bool
	status                         int
	statusFlag                     bool
	score                          int
	scoreFlag                      bool
	createdAt                      int
	createdAtFlag                  bool
	updatedAt                      int
	updatedAtFlag                  bool
	closedAt                       int
	closedAtFlag                   bool
	dissatisfactionReason          []string
	dissatisfactionReasonFlag      bool
	agents                         []*TicketUser
	agentsFlag                     bool
	channel                        int
	channelFlag                    bool
	solve                          int
	solveFlag                      bool
	closedBy                       *TicketUser
	closedByFlag                   bool
	collaborators                  []*TicketUser
	collaboratorsFlag              bool
	customizedFields               []*CustomizedFieldDisplayItem
	customizedFieldsFlag           bool
	agentServiceDuration           float64
	agentServiceDurationFlag       bool
	agentFirstResponseDuration     int
	agentFirstResponseDurationFlag bool
	botServiceDuration             int
	botServiceDurationFlag         bool
	agentResolutionTime            int
	agentResolutionTimeFlag        bool
	actualProcessingTime           int
	actualProcessingTimeFlag       bool
	agentEntryTime                 int
	agentEntryTimeFlag             bool
	agentFirstResponseTime         int
	agentFirstResponseTimeFlag     bool
	agentLastResponseTime          int
	agentLastResponseTimeFlag      bool
	agentOwner                     *TicketUser
	agentOwnerFlag                 bool
}

func NewTicketBuilder() *TicketBuilder {
	builder := &TicketBuilder{}
	return builder
}

func (builder *TicketBuilder) TicketId(ticketId string) *TicketBuilder {
	builder.ticketId = ticketId
	builder.ticketIdFlag = true
	return builder
}
func (builder *TicketBuilder) HelpdeskId(helpdeskId string) *TicketBuilder {
	builder.helpdeskId = helpdeskId
	builder.helpdeskIdFlag = true
	return builder
}
func (builder *TicketBuilder) Guest(guest *TicketUser) *TicketBuilder {
	builder.guest = guest
	builder.guestFlag = true
	return builder
}
func (builder *TicketBuilder) Comments(comments *Comments) *TicketBuilder {
	builder.comments = comments
	builder.commentsFlag = true
	return builder
}
func (builder *TicketBuilder) TicketType(ticketType int) *TicketBuilder {
	builder.ticketType = ticketType
	builder.ticketTypeFlag = true
	return builder
}
func (builder *TicketBuilder) Status(status int) *TicketBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}
func (builder *TicketBuilder) Score(score int) *TicketBuilder {
	builder.score = score
	builder.scoreFlag = true
	return builder
}
func (builder *TicketBuilder) CreatedAt(createdAt int) *TicketBuilder {
	builder.createdAt = createdAt
	builder.createdAtFlag = true
	return builder
}
func (builder *TicketBuilder) UpdatedAt(updatedAt int) *TicketBuilder {
	builder.updatedAt = updatedAt
	builder.updatedAtFlag = true
	return builder
}
func (builder *TicketBuilder) ClosedAt(closedAt int) *TicketBuilder {
	builder.closedAt = closedAt
	builder.closedAtFlag = true
	return builder
}
func (builder *TicketBuilder) DissatisfactionReason(dissatisfactionReason []string) *TicketBuilder {
	builder.dissatisfactionReason = dissatisfactionReason
	builder.dissatisfactionReasonFlag = true
	return builder
}
func (builder *TicketBuilder) Agents(agents []*TicketUser) *TicketBuilder {
	builder.agents = agents
	builder.agentsFlag = true
	return builder
}
func (builder *TicketBuilder) Channel(channel int) *TicketBuilder {
	builder.channel = channel
	builder.channelFlag = true
	return builder
}
func (builder *TicketBuilder) Solve(solve int) *TicketBuilder {
	builder.solve = solve
	builder.solveFlag = true
	return builder
}
func (builder *TicketBuilder) ClosedBy(closedBy *TicketUser) *TicketBuilder {
	builder.closedBy = closedBy
	builder.closedByFlag = true
	return builder
}
func (builder *TicketBuilder) Collaborators(collaborators []*TicketUser) *TicketBuilder {
	builder.collaborators = collaborators
	builder.collaboratorsFlag = true
	return builder
}
func (builder *TicketBuilder) CustomizedFields(customizedFields []*CustomizedFieldDisplayItem) *TicketBuilder {
	builder.customizedFields = customizedFields
	builder.customizedFieldsFlag = true
	return builder
}
func (builder *TicketBuilder) AgentServiceDuration(agentServiceDuration float64) *TicketBuilder {
	builder.agentServiceDuration = agentServiceDuration
	builder.agentServiceDurationFlag = true
	return builder
}
func (builder *TicketBuilder) AgentFirstResponseDuration(agentFirstResponseDuration int) *TicketBuilder {
	builder.agentFirstResponseDuration = agentFirstResponseDuration
	builder.agentFirstResponseDurationFlag = true
	return builder
}
func (builder *TicketBuilder) BotServiceDuration(botServiceDuration int) *TicketBuilder {
	builder.botServiceDuration = botServiceDuration
	builder.botServiceDurationFlag = true
	return builder
}
func (builder *TicketBuilder) AgentResolutionTime(agentResolutionTime int) *TicketBuilder {
	builder.agentResolutionTime = agentResolutionTime
	builder.agentResolutionTimeFlag = true
	return builder
}
func (builder *TicketBuilder) ActualProcessingTime(actualProcessingTime int) *TicketBuilder {
	builder.actualProcessingTime = actualProcessingTime
	builder.actualProcessingTimeFlag = true
	return builder
}
func (builder *TicketBuilder) AgentEntryTime(agentEntryTime int) *TicketBuilder {
	builder.agentEntryTime = agentEntryTime
	builder.agentEntryTimeFlag = true
	return builder
}
func (builder *TicketBuilder) AgentFirstResponseTime(agentFirstResponseTime int) *TicketBuilder {
	builder.agentFirstResponseTime = agentFirstResponseTime
	builder.agentFirstResponseTimeFlag = true
	return builder
}
func (builder *TicketBuilder) AgentLastResponseTime(agentLastResponseTime int) *TicketBuilder {
	builder.agentLastResponseTime = agentLastResponseTime
	builder.agentLastResponseTimeFlag = true
	return builder
}
func (builder *TicketBuilder) AgentOwner(agentOwner *TicketUser) *TicketBuilder {
	builder.agentOwner = agentOwner
	builder.agentOwnerFlag = true
	return builder
}

func (builder *TicketBuilder) Build() *Ticket {
	req := &Ticket{}
	if builder.ticketIdFlag {
		req.TicketId = &builder.ticketId

	}
	if builder.helpdeskIdFlag {
		req.HelpdeskId = &builder.helpdeskId

	}
	if builder.guestFlag {
		req.Guest = builder.guest
	}
	if builder.commentsFlag {
		req.Comments = builder.comments
	}
	if builder.ticketTypeFlag {
		req.TicketType = &builder.ticketType

	}
	if builder.statusFlag {
		req.Status = &builder.status

	}
	if builder.scoreFlag {
		req.Score = &builder.score

	}
	if builder.createdAtFlag {
		req.CreatedAt = &builder.createdAt

	}
	if builder.updatedAtFlag {
		req.UpdatedAt = &builder.updatedAt

	}
	if builder.closedAtFlag {
		req.ClosedAt = &builder.closedAt

	}
	if builder.dissatisfactionReasonFlag {
		req.DissatisfactionReason = builder.dissatisfactionReason
	}
	if builder.agentsFlag {
		req.Agents = builder.agents
	}
	if builder.channelFlag {
		req.Channel = &builder.channel

	}
	if builder.solveFlag {
		req.Solve = &builder.solve

	}
	if builder.closedByFlag {
		req.ClosedBy = builder.closedBy
	}
	if builder.collaboratorsFlag {
		req.Collaborators = builder.collaborators
	}
	if builder.customizedFieldsFlag {
		req.CustomizedFields = builder.customizedFields
	}
	if builder.agentServiceDurationFlag {
		req.AgentServiceDuration = &builder.agentServiceDuration

	}
	if builder.agentFirstResponseDurationFlag {
		req.AgentFirstResponseDuration = &builder.agentFirstResponseDuration

	}
	if builder.botServiceDurationFlag {
		req.BotServiceDuration = &builder.botServiceDuration

	}
	if builder.agentResolutionTimeFlag {
		req.AgentResolutionTime = &builder.agentResolutionTime

	}
	if builder.actualProcessingTimeFlag {
		req.ActualProcessingTime = &builder.actualProcessingTime

	}
	if builder.agentEntryTimeFlag {
		req.AgentEntryTime = &builder.agentEntryTime

	}
	if builder.agentFirstResponseTimeFlag {
		req.AgentFirstResponseTime = &builder.agentFirstResponseTime

	}
	if builder.agentLastResponseTimeFlag {
		req.AgentLastResponseTime = &builder.agentLastResponseTime

	}
	if builder.agentOwnerFlag {
		req.AgentOwner = builder.agentOwner
	}
	return req
}

// builder结束

type TicketMessage struct {
	Id          *string `json:"id,omitempty"`
	MessageId   *string `json:"message_id,omitempty"`
	MessageType *string `json:"message_type,omitempty"`
	CreatedAt   *int    `json:"created_at,omitempty"`
	Content     *string `json:"content,omitempty"`
	UserName    *string `json:"user_name,omitempty"`
	AvatarUrl   *string `json:"avatar_url,omitempty"`
	UserId      *string `json:"user_id,omitempty"`
}

// builder开始
type TicketMessageBuilder struct {
	id              string
	idFlag          bool
	messageId       string
	messageIdFlag   bool
	messageType     string
	messageTypeFlag bool
	createdAt       int
	createdAtFlag   bool
	content         string
	contentFlag     bool
	userName        string
	userNameFlag    bool
	avatarUrl       string
	avatarUrlFlag   bool
	userId          string
	userIdFlag      bool
}

func NewTicketMessageBuilder() *TicketMessageBuilder {
	builder := &TicketMessageBuilder{}
	return builder
}

func (builder *TicketMessageBuilder) Id(id string) *TicketMessageBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *TicketMessageBuilder) MessageId(messageId string) *TicketMessageBuilder {
	builder.messageId = messageId
	builder.messageIdFlag = true
	return builder
}
func (builder *TicketMessageBuilder) MessageType(messageType string) *TicketMessageBuilder {
	builder.messageType = messageType
	builder.messageTypeFlag = true
	return builder
}
func (builder *TicketMessageBuilder) CreatedAt(createdAt int) *TicketMessageBuilder {
	builder.createdAt = createdAt
	builder.createdAtFlag = true
	return builder
}
func (builder *TicketMessageBuilder) Content(content string) *TicketMessageBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}
func (builder *TicketMessageBuilder) UserName(userName string) *TicketMessageBuilder {
	builder.userName = userName
	builder.userNameFlag = true
	return builder
}
func (builder *TicketMessageBuilder) AvatarUrl(avatarUrl string) *TicketMessageBuilder {
	builder.avatarUrl = avatarUrl
	builder.avatarUrlFlag = true
	return builder
}
func (builder *TicketMessageBuilder) UserId(userId string) *TicketMessageBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}

func (builder *TicketMessageBuilder) Build() *TicketMessage {
	req := &TicketMessage{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.messageIdFlag {
		req.MessageId = &builder.messageId

	}
	if builder.messageTypeFlag {
		req.MessageType = &builder.messageType

	}
	if builder.createdAtFlag {
		req.CreatedAt = &builder.createdAt

	}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.userNameFlag {
		req.UserName = &builder.userName

	}
	if builder.avatarUrlFlag {
		req.AvatarUrl = &builder.avatarUrl

	}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	return req
}

// builder结束

type TicketCustomizedField struct {
	TicketCustomizedFieldId *string     `json:"ticket_customized_field_id,omitempty"`
	HelpdeskId              *string     `json:"helpdesk_id,omitempty"`
	KeyName                 *string     `json:"key_name,omitempty"`
	DisplayName             *string     `json:"display_name,omitempty"`
	Position                *string     `json:"position,omitempty"`
	FieldType               *string     `json:"field_type,omitempty"`
	Description             *string     `json:"description,omitempty"`
	Visible                 *bool       `json:"visible,omitempty"`
	Editable                *bool       `json:"editable,omitempty"`
	Required                *bool       `json:"required,omitempty"`
	CreatedAt               *string     `json:"created_at,omitempty"`
	UpdatedAt               *string     `json:"updated_at,omitempty"`
	CreatedBy               *TicketUser `json:"created_by,omitempty"`
	UpdatedBy               *TicketUser `json:"updated_by,omitempty"`
	DropdownAllowMultiple   *bool       `json:"dropdown_allow_multiple,omitempty"`
}

// builder开始
type TicketCustomizedFieldBuilder struct {
	ticketCustomizedFieldId     string
	ticketCustomizedFieldIdFlag bool
	helpdeskId                  string
	helpdeskIdFlag              bool
	keyName                     string
	keyNameFlag                 bool
	displayName                 string
	displayNameFlag             bool
	position                    string
	positionFlag                bool
	fieldType                   string
	fieldTypeFlag               bool
	description                 string
	descriptionFlag             bool
	visible                     bool
	visibleFlag                 bool
	editable                    bool
	editableFlag                bool
	required                    bool
	requiredFlag                bool
	createdAt                   string
	createdAtFlag               bool
	updatedAt                   string
	updatedAtFlag               bool
	createdBy                   *TicketUser
	createdByFlag               bool
	updatedBy                   *TicketUser
	updatedByFlag               bool
	dropdownAllowMultiple       bool
	dropdownAllowMultipleFlag   bool
}

func NewTicketCustomizedFieldBuilder() *TicketCustomizedFieldBuilder {
	builder := &TicketCustomizedFieldBuilder{}
	return builder
}

func (builder *TicketCustomizedFieldBuilder) TicketCustomizedFieldId(ticketCustomizedFieldId string) *TicketCustomizedFieldBuilder {
	builder.ticketCustomizedFieldId = ticketCustomizedFieldId
	builder.ticketCustomizedFieldIdFlag = true
	return builder
}
func (builder *TicketCustomizedFieldBuilder) HelpdeskId(helpdeskId string) *TicketCustomizedFieldBuilder {
	builder.helpdeskId = helpdeskId
	builder.helpdeskIdFlag = true
	return builder
}
func (builder *TicketCustomizedFieldBuilder) KeyName(keyName string) *TicketCustomizedFieldBuilder {
	builder.keyName = keyName
	builder.keyNameFlag = true
	return builder
}
func (builder *TicketCustomizedFieldBuilder) DisplayName(displayName string) *TicketCustomizedFieldBuilder {
	builder.displayName = displayName
	builder.displayNameFlag = true
	return builder
}
func (builder *TicketCustomizedFieldBuilder) Position(position string) *TicketCustomizedFieldBuilder {
	builder.position = position
	builder.positionFlag = true
	return builder
}
func (builder *TicketCustomizedFieldBuilder) FieldType(fieldType string) *TicketCustomizedFieldBuilder {
	builder.fieldType = fieldType
	builder.fieldTypeFlag = true
	return builder
}
func (builder *TicketCustomizedFieldBuilder) Description(description string) *TicketCustomizedFieldBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}
func (builder *TicketCustomizedFieldBuilder) Visible(visible bool) *TicketCustomizedFieldBuilder {
	builder.visible = visible
	builder.visibleFlag = true
	return builder
}
func (builder *TicketCustomizedFieldBuilder) Editable(editable bool) *TicketCustomizedFieldBuilder {
	builder.editable = editable
	builder.editableFlag = true
	return builder
}
func (builder *TicketCustomizedFieldBuilder) Required(required bool) *TicketCustomizedFieldBuilder {
	builder.required = required
	builder.requiredFlag = true
	return builder
}
func (builder *TicketCustomizedFieldBuilder) CreatedAt(createdAt string) *TicketCustomizedFieldBuilder {
	builder.createdAt = createdAt
	builder.createdAtFlag = true
	return builder
}
func (builder *TicketCustomizedFieldBuilder) UpdatedAt(updatedAt string) *TicketCustomizedFieldBuilder {
	builder.updatedAt = updatedAt
	builder.updatedAtFlag = true
	return builder
}
func (builder *TicketCustomizedFieldBuilder) CreatedBy(createdBy *TicketUser) *TicketCustomizedFieldBuilder {
	builder.createdBy = createdBy
	builder.createdByFlag = true
	return builder
}
func (builder *TicketCustomizedFieldBuilder) UpdatedBy(updatedBy *TicketUser) *TicketCustomizedFieldBuilder {
	builder.updatedBy = updatedBy
	builder.updatedByFlag = true
	return builder
}
func (builder *TicketCustomizedFieldBuilder) DropdownAllowMultiple(dropdownAllowMultiple bool) *TicketCustomizedFieldBuilder {
	builder.dropdownAllowMultiple = dropdownAllowMultiple
	builder.dropdownAllowMultipleFlag = true
	return builder
}

func (builder *TicketCustomizedFieldBuilder) Build() *TicketCustomizedField {
	req := &TicketCustomizedField{}
	if builder.ticketCustomizedFieldIdFlag {
		req.TicketCustomizedFieldId = &builder.ticketCustomizedFieldId

	}
	if builder.helpdeskIdFlag {
		req.HelpdeskId = &builder.helpdeskId

	}
	if builder.keyNameFlag {
		req.KeyName = &builder.keyName

	}
	if builder.displayNameFlag {
		req.DisplayName = &builder.displayName

	}
	if builder.positionFlag {
		req.Position = &builder.position

	}
	if builder.fieldTypeFlag {
		req.FieldType = &builder.fieldType

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	if builder.visibleFlag {
		req.Visible = &builder.visible

	}
	if builder.editableFlag {
		req.Editable = &builder.editable

	}
	if builder.requiredFlag {
		req.Required = &builder.required

	}
	if builder.createdAtFlag {
		req.CreatedAt = &builder.createdAt

	}
	if builder.updatedAtFlag {
		req.UpdatedAt = &builder.updatedAt

	}
	if builder.createdByFlag {
		req.CreatedBy = builder.createdBy
	}
	if builder.updatedByFlag {
		req.UpdatedBy = builder.updatedBy
	}
	if builder.dropdownAllowMultipleFlag {
		req.DropdownAllowMultiple = &builder.dropdownAllowMultiple

	}
	return req
}

// builder结束

type TicketEvent struct {
	TicketId         *string                       `json:"ticket_id,omitempty"`
	HelpdeskId       *string                       `json:"helpdesk_id,omitempty"`
	Guest            *TicketUserEvent              `json:"guest,omitempty"`
	Stage            *int                          `json:"stage,omitempty"`
	Status           *int                          `json:"status,omitempty"`
	Score            *int                          `json:"score,omitempty"`
	CreatedAt        *int                          `json:"created_at,omitempty"`
	UpdatedAt        *int                          `json:"updated_at,omitempty"`
	ClosedAt         *int                          `json:"closed_at,omitempty"`
	Agents           []*TicketUserEvent            `json:"agents,omitempty"`
	Channel          *int                          `json:"channel,omitempty"`
	Solve            *int                          `json:"solve,omitempty"`
	ClosedBy         *TicketUserEvent              `json:"closed_by,omitempty"`
	Collaborators    []*TicketUserEvent            `json:"collaborators,omitempty"`
	CustomizedFields []*CustomizedFieldDisplayItem `json:"customized_fields,omitempty"`
	ChatId           *string                       `json:"chat_id,omitempty"`
}

// builder开始
type TicketEventBuilder struct {
	ticketId             string
	ticketIdFlag         bool
	helpdeskId           string
	helpdeskIdFlag       bool
	guest                *TicketUserEvent
	guestFlag            bool
	stage                int
	stageFlag            bool
	status               int
	statusFlag           bool
	score                int
	scoreFlag            bool
	createdAt            int
	createdAtFlag        bool
	updatedAt            int
	updatedAtFlag        bool
	closedAt             int
	closedAtFlag         bool
	agents               []*TicketUserEvent
	agentsFlag           bool
	channel              int
	channelFlag          bool
	solve                int
	solveFlag            bool
	closedBy             *TicketUserEvent
	closedByFlag         bool
	collaborators        []*TicketUserEvent
	collaboratorsFlag    bool
	customizedFields     []*CustomizedFieldDisplayItem
	customizedFieldsFlag bool
	chatId               string
	chatIdFlag           bool
}

func NewTicketEventBuilder() *TicketEventBuilder {
	builder := &TicketEventBuilder{}
	return builder
}

func (builder *TicketEventBuilder) TicketId(ticketId string) *TicketEventBuilder {
	builder.ticketId = ticketId
	builder.ticketIdFlag = true
	return builder
}
func (builder *TicketEventBuilder) HelpdeskId(helpdeskId string) *TicketEventBuilder {
	builder.helpdeskId = helpdeskId
	builder.helpdeskIdFlag = true
	return builder
}
func (builder *TicketEventBuilder) Guest(guest *TicketUserEvent) *TicketEventBuilder {
	builder.guest = guest
	builder.guestFlag = true
	return builder
}
func (builder *TicketEventBuilder) Stage(stage int) *TicketEventBuilder {
	builder.stage = stage
	builder.stageFlag = true
	return builder
}
func (builder *TicketEventBuilder) Status(status int) *TicketEventBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}
func (builder *TicketEventBuilder) Score(score int) *TicketEventBuilder {
	builder.score = score
	builder.scoreFlag = true
	return builder
}
func (builder *TicketEventBuilder) CreatedAt(createdAt int) *TicketEventBuilder {
	builder.createdAt = createdAt
	builder.createdAtFlag = true
	return builder
}
func (builder *TicketEventBuilder) UpdatedAt(updatedAt int) *TicketEventBuilder {
	builder.updatedAt = updatedAt
	builder.updatedAtFlag = true
	return builder
}
func (builder *TicketEventBuilder) ClosedAt(closedAt int) *TicketEventBuilder {
	builder.closedAt = closedAt
	builder.closedAtFlag = true
	return builder
}
func (builder *TicketEventBuilder) Agents(agents []*TicketUserEvent) *TicketEventBuilder {
	builder.agents = agents
	builder.agentsFlag = true
	return builder
}
func (builder *TicketEventBuilder) Channel(channel int) *TicketEventBuilder {
	builder.channel = channel
	builder.channelFlag = true
	return builder
}
func (builder *TicketEventBuilder) Solve(solve int) *TicketEventBuilder {
	builder.solve = solve
	builder.solveFlag = true
	return builder
}
func (builder *TicketEventBuilder) ClosedBy(closedBy *TicketUserEvent) *TicketEventBuilder {
	builder.closedBy = closedBy
	builder.closedByFlag = true
	return builder
}
func (builder *TicketEventBuilder) Collaborators(collaborators []*TicketUserEvent) *TicketEventBuilder {
	builder.collaborators = collaborators
	builder.collaboratorsFlag = true
	return builder
}
func (builder *TicketEventBuilder) CustomizedFields(customizedFields []*CustomizedFieldDisplayItem) *TicketEventBuilder {
	builder.customizedFields = customizedFields
	builder.customizedFieldsFlag = true
	return builder
}
func (builder *TicketEventBuilder) ChatId(chatId string) *TicketEventBuilder {
	builder.chatId = chatId
	builder.chatIdFlag = true
	return builder
}

func (builder *TicketEventBuilder) Build() *TicketEvent {
	req := &TicketEvent{}
	if builder.ticketIdFlag {
		req.TicketId = &builder.ticketId

	}
	if builder.helpdeskIdFlag {
		req.HelpdeskId = &builder.helpdeskId

	}
	if builder.guestFlag {
		req.Guest = builder.guest
	}
	if builder.stageFlag {
		req.Stage = &builder.stage

	}
	if builder.statusFlag {
		req.Status = &builder.status

	}
	if builder.scoreFlag {
		req.Score = &builder.score

	}
	if builder.createdAtFlag {
		req.CreatedAt = &builder.createdAt

	}
	if builder.updatedAtFlag {
		req.UpdatedAt = &builder.updatedAt

	}
	if builder.closedAtFlag {
		req.ClosedAt = &builder.closedAt

	}
	if builder.agentsFlag {
		req.Agents = builder.agents
	}
	if builder.channelFlag {
		req.Channel = &builder.channel

	}
	if builder.solveFlag {
		req.Solve = &builder.solve

	}
	if builder.closedByFlag {
		req.ClosedBy = builder.closedBy
	}
	if builder.collaboratorsFlag {
		req.Collaborators = builder.collaborators
	}
	if builder.customizedFieldsFlag {
		req.CustomizedFields = builder.customizedFields
	}
	if builder.chatIdFlag {
		req.ChatId = &builder.chatId

	}
	return req
}

// builder结束

type TicketEventUpdateInfo struct {
	Stage     *int `json:"stage,omitempty"`
	Status    *int `json:"status,omitempty"`
	UpdatedAt *int `json:"updated_at,omitempty"`
}

// builder开始
type TicketEventUpdateInfoBuilder struct {
	stage         int
	stageFlag     bool
	status        int
	statusFlag    bool
	updatedAt     int
	updatedAtFlag bool
}

func NewTicketEventUpdateInfoBuilder() *TicketEventUpdateInfoBuilder {
	builder := &TicketEventUpdateInfoBuilder{}
	return builder
}

func (builder *TicketEventUpdateInfoBuilder) Stage(stage int) *TicketEventUpdateInfoBuilder {
	builder.stage = stage
	builder.stageFlag = true
	return builder
}
func (builder *TicketEventUpdateInfoBuilder) Status(status int) *TicketEventUpdateInfoBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}
func (builder *TicketEventUpdateInfoBuilder) UpdatedAt(updatedAt int) *TicketEventUpdateInfoBuilder {
	builder.updatedAt = updatedAt
	builder.updatedAtFlag = true
	return builder
}

func (builder *TicketEventUpdateInfoBuilder) Build() *TicketEventUpdateInfo {
	req := &TicketEventUpdateInfo{}
	if builder.stageFlag {
		req.Stage = &builder.stage

	}
	if builder.statusFlag {
		req.Status = &builder.status

	}
	if builder.updatedAtFlag {
		req.UpdatedAt = &builder.updatedAt

	}
	return req
}

// builder结束

type TicketMessageContent struct {
	Content   *string  `json:"content,omitempty"`
	MsgType   *string  `json:"msg_type,omitempty"`
	ImageKeys []string `json:"image_keys,omitempty"`
	ImageKey  *string  `json:"image_key,omitempty"`
}

// builder开始
type TicketMessageContentBuilder struct {
	content       string
	contentFlag   bool
	msgType       string
	msgTypeFlag   bool
	imageKeys     []string
	imageKeysFlag bool
	imageKey      string
	imageKeyFlag  bool
}

func NewTicketMessageContentBuilder() *TicketMessageContentBuilder {
	builder := &TicketMessageContentBuilder{}
	return builder
}

func (builder *TicketMessageContentBuilder) Content(content string) *TicketMessageContentBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}
func (builder *TicketMessageContentBuilder) MsgType(msgType string) *TicketMessageContentBuilder {
	builder.msgType = msgType
	builder.msgTypeFlag = true
	return builder
}
func (builder *TicketMessageContentBuilder) ImageKeys(imageKeys []string) *TicketMessageContentBuilder {
	builder.imageKeys = imageKeys
	builder.imageKeysFlag = true
	return builder
}
func (builder *TicketMessageContentBuilder) ImageKey(imageKey string) *TicketMessageContentBuilder {
	builder.imageKey = imageKey
	builder.imageKeyFlag = true
	return builder
}

func (builder *TicketMessageContentBuilder) Build() *TicketMessageContent {
	req := &TicketMessageContent{}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.msgTypeFlag {
		req.MsgType = &builder.msgType

	}
	if builder.imageKeysFlag {
		req.ImageKeys = builder.imageKeys
	}
	if builder.imageKeyFlag {
		req.ImageKey = &builder.imageKey

	}
	return req
}

// builder结束

type TicketMessageEvent struct {
	TicketMessageId *string               `json:"ticket_message_id,omitempty"`
	MessageId       *string               `json:"message_id,omitempty"`
	MsgType         *string               `json:"msg_type,omitempty"`
	Position        *string               `json:"position,omitempty"`
	SenderId        *UserId               `json:"sender_id,omitempty"`
	SenderType      *int                  `json:"sender_type,omitempty"`
	Text            *string               `json:"text,omitempty"`
	Ticket          *Ticket               `json:"ticket,omitempty"`
	EventId         *string               `json:"event_id,omitempty"`
	ChatId          *string               `json:"chat_id,omitempty"`
	Content         *TicketMessageContent `json:"content,omitempty"`
}

// builder开始
type TicketMessageEventBuilder struct {
	ticketMessageId     string
	ticketMessageIdFlag bool
	messageId           string
	messageIdFlag       bool
	msgType             string
	msgTypeFlag         bool
	position            string
	positionFlag        bool
	senderId            *UserId
	senderIdFlag        bool
	senderType          int
	senderTypeFlag      bool
	text                string
	textFlag            bool
	ticket              *Ticket
	ticketFlag          bool
	eventId             string
	eventIdFlag         bool
	chatId              string
	chatIdFlag          bool
	content             *TicketMessageContent
	contentFlag         bool
}

func NewTicketMessageEventBuilder() *TicketMessageEventBuilder {
	builder := &TicketMessageEventBuilder{}
	return builder
}

func (builder *TicketMessageEventBuilder) TicketMessageId(ticketMessageId string) *TicketMessageEventBuilder {
	builder.ticketMessageId = ticketMessageId
	builder.ticketMessageIdFlag = true
	return builder
}
func (builder *TicketMessageEventBuilder) MessageId(messageId string) *TicketMessageEventBuilder {
	builder.messageId = messageId
	builder.messageIdFlag = true
	return builder
}
func (builder *TicketMessageEventBuilder) MsgType(msgType string) *TicketMessageEventBuilder {
	builder.msgType = msgType
	builder.msgTypeFlag = true
	return builder
}
func (builder *TicketMessageEventBuilder) Position(position string) *TicketMessageEventBuilder {
	builder.position = position
	builder.positionFlag = true
	return builder
}
func (builder *TicketMessageEventBuilder) SenderId(senderId *UserId) *TicketMessageEventBuilder {
	builder.senderId = senderId
	builder.senderIdFlag = true
	return builder
}
func (builder *TicketMessageEventBuilder) SenderType(senderType int) *TicketMessageEventBuilder {
	builder.senderType = senderType
	builder.senderTypeFlag = true
	return builder
}
func (builder *TicketMessageEventBuilder) Text(text string) *TicketMessageEventBuilder {
	builder.text = text
	builder.textFlag = true
	return builder
}
func (builder *TicketMessageEventBuilder) Ticket(ticket *Ticket) *TicketMessageEventBuilder {
	builder.ticket = ticket
	builder.ticketFlag = true
	return builder
}
func (builder *TicketMessageEventBuilder) EventId(eventId string) *TicketMessageEventBuilder {
	builder.eventId = eventId
	builder.eventIdFlag = true
	return builder
}
func (builder *TicketMessageEventBuilder) ChatId(chatId string) *TicketMessageEventBuilder {
	builder.chatId = chatId
	builder.chatIdFlag = true
	return builder
}
func (builder *TicketMessageEventBuilder) Content(content *TicketMessageContent) *TicketMessageEventBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}

func (builder *TicketMessageEventBuilder) Build() *TicketMessageEvent {
	req := &TicketMessageEvent{}
	if builder.ticketMessageIdFlag {
		req.TicketMessageId = &builder.ticketMessageId

	}
	if builder.messageIdFlag {
		req.MessageId = &builder.messageId

	}
	if builder.msgTypeFlag {
		req.MsgType = &builder.msgType

	}
	if builder.positionFlag {
		req.Position = &builder.position

	}
	if builder.senderIdFlag {
		req.SenderId = builder.senderId
	}
	if builder.senderTypeFlag {
		req.SenderType = &builder.senderType

	}
	if builder.textFlag {
		req.Text = &builder.text

	}
	if builder.ticketFlag {
		req.Ticket = builder.ticket
	}
	if builder.eventIdFlag {
		req.EventId = &builder.eventId

	}
	if builder.chatIdFlag {
		req.ChatId = &builder.chatId

	}
	if builder.contentFlag {
		req.Content = builder.content
	}
	return req
}

// builder结束

type TicketUser struct {
	Id         *string `json:"id,omitempty"`
	AvatarUrl  *string `json:"avatar_url,omitempty"`
	Name       *string `json:"name,omitempty"`
	Email      *string `json:"email,omitempty"`
	Department *string `json:"department,omitempty"`
	City       *string `json:"city,omitempty"`
	Country    *string `json:"country,omitempty"`
}

// builder开始
type TicketUserBuilder struct {
	id             string
	idFlag         bool
	avatarUrl      string
	avatarUrlFlag  bool
	name           string
	nameFlag       bool
	email          string
	emailFlag      bool
	department     string
	departmentFlag bool
	city           string
	cityFlag       bool
	country        string
	countryFlag    bool
}

func NewTicketUserBuilder() *TicketUserBuilder {
	builder := &TicketUserBuilder{}
	return builder
}

func (builder *TicketUserBuilder) Id(id string) *TicketUserBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *TicketUserBuilder) AvatarUrl(avatarUrl string) *TicketUserBuilder {
	builder.avatarUrl = avatarUrl
	builder.avatarUrlFlag = true
	return builder
}
func (builder *TicketUserBuilder) Name(name string) *TicketUserBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *TicketUserBuilder) Email(email string) *TicketUserBuilder {
	builder.email = email
	builder.emailFlag = true
	return builder
}
func (builder *TicketUserBuilder) Department(department string) *TicketUserBuilder {
	builder.department = department
	builder.departmentFlag = true
	return builder
}
func (builder *TicketUserBuilder) City(city string) *TicketUserBuilder {
	builder.city = city
	builder.cityFlag = true
	return builder
}
func (builder *TicketUserBuilder) Country(country string) *TicketUserBuilder {
	builder.country = country
	builder.countryFlag = true
	return builder
}

func (builder *TicketUserBuilder) Build() *TicketUser {
	req := &TicketUser{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.avatarUrlFlag {
		req.AvatarUrl = &builder.avatarUrl

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.emailFlag {
		req.Email = &builder.email

	}
	if builder.departmentFlag {
		req.Department = &builder.department

	}
	if builder.cityFlag {
		req.City = &builder.city

	}
	if builder.countryFlag {
		req.Country = &builder.country

	}
	return req
}

// builder结束

type TicketUserEvent struct {
	Id        *UserId `json:"id,omitempty"`
	AvatarUrl *string `json:"avatar_url,omitempty"`
	Name      *string `json:"name,omitempty"`
	Email     *string `json:"email,omitempty"`
}

// builder开始
type TicketUserEventBuilder struct {
	id            *UserId
	idFlag        bool
	avatarUrl     string
	avatarUrlFlag bool
	name          string
	nameFlag      bool
	email         string
	emailFlag     bool
}

func NewTicketUserEventBuilder() *TicketUserEventBuilder {
	builder := &TicketUserEventBuilder{}
	return builder
}

func (builder *TicketUserEventBuilder) Id(id *UserId) *TicketUserEventBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *TicketUserEventBuilder) AvatarUrl(avatarUrl string) *TicketUserEventBuilder {
	builder.avatarUrl = avatarUrl
	builder.avatarUrlFlag = true
	return builder
}
func (builder *TicketUserEventBuilder) Name(name string) *TicketUserEventBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *TicketUserEventBuilder) Email(email string) *TicketUserEventBuilder {
	builder.email = email
	builder.emailFlag = true
	return builder
}

func (builder *TicketUserEventBuilder) Build() *TicketUserEvent {
	req := &TicketUserEvent{}
	if builder.idFlag {
		req.Id = builder.id
	}
	if builder.avatarUrlFlag {
		req.AvatarUrl = &builder.avatarUrl

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.emailFlag {
		req.Email = &builder.email

	}
	return req
}

// builder结束

type UserCustomizedField struct {
	UserCustomizedFieldId *string `json:"user_customized_field_id,omitempty"`
	Id                    *string `json:"id,omitempty"`
	HelpdeskId            *string `json:"helpdesk_id,omitempty"`
	KeyName               *string `json:"key_name,omitempty"`
	DisplayName           *string `json:"display_name,omitempty"`
	Position              *string `json:"position,omitempty"`
	FieldType             *string `json:"field_type,omitempty"`
	Description           *string `json:"description,omitempty"`
	Visible               *bool   `json:"visible,omitempty"`
	Editable              *bool   `json:"editable,omitempty"`
	Required              *bool   `json:"required,omitempty"`
	CreatedAt             *string `json:"created_at,omitempty"`
	UpdatedAt             *string `json:"updated_at,omitempty"`
}

// builder开始
type UserCustomizedFieldBuilder struct {
	userCustomizedFieldId     string
	userCustomizedFieldIdFlag bool
	id                        string
	idFlag                    bool
	helpdeskId                string
	helpdeskIdFlag            bool
	keyName                   string
	keyNameFlag               bool
	displayName               string
	displayNameFlag           bool
	position                  string
	positionFlag              bool
	fieldType                 string
	fieldTypeFlag             bool
	description               string
	descriptionFlag           bool
	visible                   bool
	visibleFlag               bool
	editable                  bool
	editableFlag              bool
	required                  bool
	requiredFlag              bool
	createdAt                 string
	createdAtFlag             bool
	updatedAt                 string
	updatedAtFlag             bool
}

func NewUserCustomizedFieldBuilder() *UserCustomizedFieldBuilder {
	builder := &UserCustomizedFieldBuilder{}
	return builder
}

func (builder *UserCustomizedFieldBuilder) UserCustomizedFieldId(userCustomizedFieldId string) *UserCustomizedFieldBuilder {
	builder.userCustomizedFieldId = userCustomizedFieldId
	builder.userCustomizedFieldIdFlag = true
	return builder
}
func (builder *UserCustomizedFieldBuilder) Id(id string) *UserCustomizedFieldBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *UserCustomizedFieldBuilder) HelpdeskId(helpdeskId string) *UserCustomizedFieldBuilder {
	builder.helpdeskId = helpdeskId
	builder.helpdeskIdFlag = true
	return builder
}
func (builder *UserCustomizedFieldBuilder) KeyName(keyName string) *UserCustomizedFieldBuilder {
	builder.keyName = keyName
	builder.keyNameFlag = true
	return builder
}
func (builder *UserCustomizedFieldBuilder) DisplayName(displayName string) *UserCustomizedFieldBuilder {
	builder.displayName = displayName
	builder.displayNameFlag = true
	return builder
}
func (builder *UserCustomizedFieldBuilder) Position(position string) *UserCustomizedFieldBuilder {
	builder.position = position
	builder.positionFlag = true
	return builder
}
func (builder *UserCustomizedFieldBuilder) FieldType(fieldType string) *UserCustomizedFieldBuilder {
	builder.fieldType = fieldType
	builder.fieldTypeFlag = true
	return builder
}
func (builder *UserCustomizedFieldBuilder) Description(description string) *UserCustomizedFieldBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}
func (builder *UserCustomizedFieldBuilder) Visible(visible bool) *UserCustomizedFieldBuilder {
	builder.visible = visible
	builder.visibleFlag = true
	return builder
}
func (builder *UserCustomizedFieldBuilder) Editable(editable bool) *UserCustomizedFieldBuilder {
	builder.editable = editable
	builder.editableFlag = true
	return builder
}
func (builder *UserCustomizedFieldBuilder) Required(required bool) *UserCustomizedFieldBuilder {
	builder.required = required
	builder.requiredFlag = true
	return builder
}
func (builder *UserCustomizedFieldBuilder) CreatedAt(createdAt string) *UserCustomizedFieldBuilder {
	builder.createdAt = createdAt
	builder.createdAtFlag = true
	return builder
}
func (builder *UserCustomizedFieldBuilder) UpdatedAt(updatedAt string) *UserCustomizedFieldBuilder {
	builder.updatedAt = updatedAt
	builder.updatedAtFlag = true
	return builder
}

func (builder *UserCustomizedFieldBuilder) Build() *UserCustomizedField {
	req := &UserCustomizedField{}
	if builder.userCustomizedFieldIdFlag {
		req.UserCustomizedFieldId = &builder.userCustomizedFieldId

	}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.helpdeskIdFlag {
		req.HelpdeskId = &builder.helpdeskId

	}
	if builder.keyNameFlag {
		req.KeyName = &builder.keyName

	}
	if builder.displayNameFlag {
		req.DisplayName = &builder.displayName

	}
	if builder.positionFlag {
		req.Position = &builder.position

	}
	if builder.fieldTypeFlag {
		req.FieldType = &builder.fieldType

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	if builder.visibleFlag {
		req.Visible = &builder.visible

	}
	if builder.editableFlag {
		req.Editable = &builder.editable

	}
	if builder.requiredFlag {
		req.Required = &builder.required

	}
	if builder.createdAtFlag {
		req.CreatedAt = &builder.createdAt

	}
	if builder.updatedAtFlag {
		req.UpdatedAt = &builder.updatedAt

	}
	return req
}

// builder结束

type UserId struct {
	UserId  *string `json:"user_id,omitempty"`
	OpenId  *string `json:"open_id,omitempty"`
	UnionId *string `json:"union_id,omitempty"`
}

// builder开始
type UserIdBuilder struct {
	userId      string
	userIdFlag  bool
	openId      string
	openIdFlag  bool
	unionId     string
	unionIdFlag bool
}

func NewUserIdBuilder() *UserIdBuilder {
	builder := &UserIdBuilder{}
	return builder
}

func (builder *UserIdBuilder) UserId(userId string) *UserIdBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}
func (builder *UserIdBuilder) OpenId(openId string) *UserIdBuilder {
	builder.openId = openId
	builder.openIdFlag = true
	return builder
}
func (builder *UserIdBuilder) UnionId(unionId string) *UserIdBuilder {
	builder.unionId = unionId
	builder.unionIdFlag = true
	return builder
}

func (builder *UserIdBuilder) Build() *UserId {
	req := &UserId{}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.openIdFlag {
		req.OpenId = &builder.openId

	}
	if builder.unionIdFlag {
		req.UnionId = &builder.unionId

	}
	return req
}

// builder结束

type UserQueryFaqInfo struct {
	Id    *string  `json:"id,omitempty"`
	Score *float64 `json:"score,omitempty"`
}

// builder开始
type UserQueryFaqInfoBuilder struct {
	id        string
	idFlag    bool
	score     float64
	scoreFlag bool
}

func NewUserQueryFaqInfoBuilder() *UserQueryFaqInfoBuilder {
	builder := &UserQueryFaqInfoBuilder{}
	return builder
}

func (builder *UserQueryFaqInfoBuilder) Id(id string) *UserQueryFaqInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *UserQueryFaqInfoBuilder) Score(score float64) *UserQueryFaqInfoBuilder {
	builder.score = score
	builder.scoreFlag = true
	return builder
}

func (builder *UserQueryFaqInfoBuilder) Build() *UserQueryFaqInfo {
	req := &UserQueryFaqInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.scoreFlag {
		req.Score = &builder.score

	}
	return req
}

// builder结束

type WeekdaySchedule struct {
	StartTime *string `json:"start_time,omitempty"`
	EndTime   *string `json:"end_time,omitempty"`
	Weekday   *int    `json:"weekday,omitempty"`
}

// builder开始
type WeekdayScheduleBuilder struct {
	startTime     string
	startTimeFlag bool
	endTime       string
	endTimeFlag   bool
	weekday       int
	weekdayFlag   bool
}

func NewWeekdayScheduleBuilder() *WeekdayScheduleBuilder {
	builder := &WeekdayScheduleBuilder{}
	return builder
}

func (builder *WeekdayScheduleBuilder) StartTime(startTime string) *WeekdayScheduleBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}
func (builder *WeekdayScheduleBuilder) EndTime(endTime string) *WeekdayScheduleBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}
func (builder *WeekdayScheduleBuilder) Weekday(weekday int) *WeekdayScheduleBuilder {
	builder.weekday = weekday
	builder.weekdayFlag = true
	return builder
}

func (builder *WeekdayScheduleBuilder) Build() *WeekdaySchedule {
	req := &WeekdaySchedule{}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.weekdayFlag {
		req.Weekday = &builder.weekday

	}
	return req
}

// builder结束

// 生成请求和响应结果类型，以及请求对象的Builder构造器

type AgentEmailAgentRespData struct {
	Agents *string `json:"agents,omitempty"`
}

type AgentEmailAgentResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *AgentEmailAgentRespData `json:"data"`
}

func (resp *AgentEmailAgentResp) Success() bool {
	return resp.Code == 0
}

type PatchAgentReqBodyBuilder struct {
	status     int
	statusFlag bool
}

// 生成body的New构造器
func NewPatchAgentReqBodyBuilder() *PatchAgentReqBodyBuilder {
	builder := &PatchAgentReqBodyBuilder{}
	return builder
}

// 1.2 生成body的builder属性方法
func (builder *PatchAgentReqBodyBuilder) Status(status int) *PatchAgentReqBodyBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}

// 1.3 生成body的build方法
func (builder *PatchAgentReqBodyBuilder) Build() *PatchAgentReqBody {
	req := &PatchAgentReqBody{}
	if builder.statusFlag {
		req.Status = &builder.status
	}
	return req
}

// 上传文件path开始
type PatchAgentPathReqBodyBuilder struct {
	status     int
	statusFlag bool
}

func NewPatchAgentPathReqBodyBuilder() *PatchAgentPathReqBodyBuilder {
	builder := &PatchAgentPathReqBodyBuilder{}
	return builder
}
func (builder *PatchAgentPathReqBodyBuilder) Status(status int) *PatchAgentPathReqBodyBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}

func (builder *PatchAgentPathReqBodyBuilder) Build() (*PatchAgentReqBody, error) {
	req := &PatchAgentReqBody{}
	if builder.statusFlag {
		req.Status = &builder.status
	}
	return req, nil
}

// 上传文件path结束

// 1.4 生成请求的builder结构体
type PatchAgentReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *PatchAgentReqBody
}

// 生成请求的New构造器
func NewPatchAgentReqBuilder() *PatchAgentReqBuilder {
	builder := &PatchAgentReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *PatchAgentReqBuilder) AgentId(agentId string) *PatchAgentReqBuilder {
	builder.apiReq.PathParams.Set("agent_id", fmt.Sprint(agentId))
	return builder
}
func (builder *PatchAgentReqBuilder) Body(body *PatchAgentReqBody) *PatchAgentReqBuilder {
	builder.body = body
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *PatchAgentReqBuilder) Build() *PatchAgentReq {
	req := &PatchAgentReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.body
	return req
}

type PatchAgentReqBody struct {
	Status *int `json:"status,omitempty"`
}

type PatchAgentReq struct {
	apiReq *larkcore.ApiReq
	Body   *PatchAgentReqBody `body:""`
}

type PatchAgentResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *PatchAgentResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type DeleteAgentSchedulesReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewDeleteAgentSchedulesReqBuilder() *DeleteAgentSchedulesReqBuilder {
	builder := &DeleteAgentSchedulesReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *DeleteAgentSchedulesReqBuilder) AgentId(agentId string) *DeleteAgentSchedulesReqBuilder {
	builder.apiReq.PathParams.Set("agent_id", fmt.Sprint(agentId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *DeleteAgentSchedulesReqBuilder) Build() *DeleteAgentSchedulesReq {
	req := &DeleteAgentSchedulesReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type DeleteAgentSchedulesReq struct {
	apiReq *larkcore.ApiReq
}

type DeleteAgentSchedulesResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *DeleteAgentSchedulesResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type GetAgentSchedulesReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewGetAgentSchedulesReqBuilder() *GetAgentSchedulesReqBuilder {
	builder := &GetAgentSchedulesReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *GetAgentSchedulesReqBuilder) AgentId(agentId string) *GetAgentSchedulesReqBuilder {
	builder.apiReq.PathParams.Set("agent_id", fmt.Sprint(agentId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *GetAgentSchedulesReqBuilder) Build() *GetAgentSchedulesReq {
	req := &GetAgentSchedulesReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type GetAgentSchedulesReq struct {
	apiReq *larkcore.ApiReq
}

type GetAgentSchedulesRespData struct {
	AgentSchedule *AgentSchedule `json:"agent_schedule,omitempty"`
}

type GetAgentSchedulesResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetAgentSchedulesRespData `json:"data"`
}

func (resp *GetAgentSchedulesResp) Success() bool {
	return resp.Code == 0
}

type PatchAgentSchedulesReqBodyBuilder struct {
	agentSchedule     *AgentScheduleUpdateInfo
	agentScheduleFlag bool
}

// 生成body的New构造器
func NewPatchAgentSchedulesReqBodyBuilder() *PatchAgentSchedulesReqBodyBuilder {
	builder := &PatchAgentSchedulesReqBodyBuilder{}
	return builder
}

// 1.2 生成body的builder属性方法
func (builder *PatchAgentSchedulesReqBodyBuilder) AgentSchedule(agentSchedule *AgentScheduleUpdateInfo) *PatchAgentSchedulesReqBodyBuilder {
	builder.agentSchedule = agentSchedule
	builder.agentScheduleFlag = true
	return builder
}

// 1.3 生成body的build方法
func (builder *PatchAgentSchedulesReqBodyBuilder) Build() *PatchAgentSchedulesReqBody {
	req := &PatchAgentSchedulesReqBody{}
	if builder.agentScheduleFlag {
		req.AgentSchedule = builder.agentSchedule
	}
	return req
}

// 上传文件path开始
type PatchAgentSchedulesPathReqBodyBuilder struct {
	agentSchedule     *AgentScheduleUpdateInfo
	agentScheduleFlag bool
}

func NewPatchAgentSchedulesPathReqBodyBuilder() *PatchAgentSchedulesPathReqBodyBuilder {
	builder := &PatchAgentSchedulesPathReqBodyBuilder{}
	return builder
}
func (builder *PatchAgentSchedulesPathReqBodyBuilder) AgentSchedule(agentSchedule *AgentScheduleUpdateInfo) *PatchAgentSchedulesPathReqBodyBuilder {
	builder.agentSchedule = agentSchedule
	builder.agentScheduleFlag = true
	return builder
}

func (builder *PatchAgentSchedulesPathReqBodyBuilder) Build() (*PatchAgentSchedulesReqBody, error) {
	req := &PatchAgentSchedulesReqBody{}
	if builder.agentScheduleFlag {
		req.AgentSchedule = builder.agentSchedule
	}
	return req, nil
}

// 上传文件path结束

// 1.4 生成请求的builder结构体
type PatchAgentSchedulesReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *PatchAgentSchedulesReqBody
}

// 生成请求的New构造器
func NewPatchAgentSchedulesReqBuilder() *PatchAgentSchedulesReqBuilder {
	builder := &PatchAgentSchedulesReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *PatchAgentSchedulesReqBuilder) AgentId(agentId string) *PatchAgentSchedulesReqBuilder {
	builder.apiReq.PathParams.Set("agent_id", fmt.Sprint(agentId))
	return builder
}
func (builder *PatchAgentSchedulesReqBuilder) Body(body *PatchAgentSchedulesReqBody) *PatchAgentSchedulesReqBuilder {
	builder.body = body
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *PatchAgentSchedulesReqBuilder) Build() *PatchAgentSchedulesReq {
	req := &PatchAgentSchedulesReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.body
	return req
}

type PatchAgentSchedulesReqBody struct {
	AgentSchedule *AgentScheduleUpdateInfo `json:"agent_schedule,omitempty"`
}

type PatchAgentSchedulesReq struct {
	apiReq *larkcore.ApiReq
	Body   *PatchAgentSchedulesReqBody `body:""`
}

type PatchAgentSchedulesResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *PatchAgentSchedulesResp) Success() bool {
	return resp.Code == 0
}

type CreateAgentScheduleReqBodyBuilder struct {
	agentSchedules     []*AgentScheduleUpdateInfo
	agentSchedulesFlag bool
}

// 生成body的New构造器
func NewCreateAgentScheduleReqBodyBuilder() *CreateAgentScheduleReqBodyBuilder {
	builder := &CreateAgentScheduleReqBodyBuilder{}
	return builder
}

// 1.2 生成body的builder属性方法
func (builder *CreateAgentScheduleReqBodyBuilder) AgentSchedules(agentSchedules []*AgentScheduleUpdateInfo) *CreateAgentScheduleReqBodyBuilder {
	builder.agentSchedules = agentSchedules
	builder.agentSchedulesFlag = true
	return builder
}

// 1.3 生成body的build方法
func (builder *CreateAgentScheduleReqBodyBuilder) Build() *CreateAgentScheduleReqBody {
	req := &CreateAgentScheduleReqBody{}
	if builder.agentSchedulesFlag {
		req.AgentSchedules = builder.agentSchedules
	}
	return req
}

// 上传文件path开始
type CreateAgentSchedulePathReqBodyBuilder struct {
	agentSchedules     []*AgentScheduleUpdateInfo
	agentSchedulesFlag bool
}

func NewCreateAgentSchedulePathReqBodyBuilder() *CreateAgentSchedulePathReqBodyBuilder {
	builder := &CreateAgentSchedulePathReqBodyBuilder{}
	return builder
}
func (builder *CreateAgentSchedulePathReqBodyBuilder) AgentSchedules(agentSchedules []*AgentScheduleUpdateInfo) *CreateAgentSchedulePathReqBodyBuilder {
	builder.agentSchedules = agentSchedules
	builder.agentSchedulesFlag = true
	return builder
}

func (builder *CreateAgentSchedulePathReqBodyBuilder) Build() (*CreateAgentScheduleReqBody, error) {
	req := &CreateAgentScheduleReqBody{}
	if builder.agentSchedulesFlag {
		req.AgentSchedules = builder.agentSchedules
	}
	return req, nil
}

// 上传文件path结束

// 1.4 生成请求的builder结构体
type CreateAgentScheduleReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *CreateAgentScheduleReqBody
}

// 生成请求的New构造器
func NewCreateAgentScheduleReqBuilder() *CreateAgentScheduleReqBuilder {
	builder := &CreateAgentScheduleReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *CreateAgentScheduleReqBuilder) Body(body *CreateAgentScheduleReqBody) *CreateAgentScheduleReqBuilder {
	builder.body = body
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *CreateAgentScheduleReqBuilder) Build() *CreateAgentScheduleReq {
	req := &CreateAgentScheduleReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.Body = builder.body
	return req
}

type CreateAgentScheduleReqBody struct {
	AgentSchedules []*AgentScheduleUpdateInfo `json:"agent_schedules,omitempty"`
}

type CreateAgentScheduleReq struct {
	apiReq *larkcore.ApiReq
	Body   *CreateAgentScheduleReqBody `body:""`
}

type CreateAgentScheduleResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *CreateAgentScheduleResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type ListAgentScheduleReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewListAgentScheduleReqBuilder() *ListAgentScheduleReqBuilder {
	builder := &ListAgentScheduleReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *ListAgentScheduleReqBuilder) Status(status []int) *ListAgentScheduleReqBuilder {
	builder.apiReq.QueryParams.Set("status", fmt.Sprint(status))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *ListAgentScheduleReqBuilder) Build() *ListAgentScheduleReq {
	req := &ListAgentScheduleReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListAgentScheduleReq struct {
	apiReq *larkcore.ApiReq
}

type ListAgentScheduleRespData struct {
	AgentSchedules []*AgentSchedule `json:"agent_schedules,omitempty"`
}

type ListAgentScheduleResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListAgentScheduleRespData `json:"data"`
}

func (resp *ListAgentScheduleResp) Success() bool {
	return resp.Code == 0
}

type CreateAgentSkillReqBodyBuilder struct {
	name         string
	nameFlag     bool
	rules        []*AgentSkillRule
	rulesFlag    bool
	agentIds     []string
	agentIdsFlag bool
}

// 生成body的New构造器
func NewCreateAgentSkillReqBodyBuilder() *CreateAgentSkillReqBodyBuilder {
	builder := &CreateAgentSkillReqBodyBuilder{}
	return builder
}

// 1.2 生成body的builder属性方法
func (builder *CreateAgentSkillReqBodyBuilder) Name(name string) *CreateAgentSkillReqBodyBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *CreateAgentSkillReqBodyBuilder) Rules(rules []*AgentSkillRule) *CreateAgentSkillReqBodyBuilder {
	builder.rules = rules
	builder.rulesFlag = true
	return builder
}
func (builder *CreateAgentSkillReqBodyBuilder) AgentIds(agentIds []string) *CreateAgentSkillReqBodyBuilder {
	builder.agentIds = agentIds
	builder.agentIdsFlag = true
	return builder
}

// 1.3 生成body的build方法
func (builder *CreateAgentSkillReqBodyBuilder) Build() *CreateAgentSkillReqBody {
	req := &CreateAgentSkillReqBody{}
	if builder.nameFlag {
		req.Name = &builder.name
	}
	if builder.rulesFlag {
		req.Rules = builder.rules
	}
	if builder.agentIdsFlag {
		req.AgentIds = builder.agentIds
	}
	return req
}

// 上传文件path开始
type CreateAgentSkillPathReqBodyBuilder struct {
	name         string
	nameFlag     bool
	rules        []*AgentSkillRule
	rulesFlag    bool
	agentIds     []string
	agentIdsFlag bool
}

func NewCreateAgentSkillPathReqBodyBuilder() *CreateAgentSkillPathReqBodyBuilder {
	builder := &CreateAgentSkillPathReqBodyBuilder{}
	return builder
}
func (builder *CreateAgentSkillPathReqBodyBuilder) Name(name string) *CreateAgentSkillPathReqBodyBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *CreateAgentSkillPathReqBodyBuilder) Rules(rules []*AgentSkillRule) *CreateAgentSkillPathReqBodyBuilder {
	builder.rules = rules
	builder.rulesFlag = true
	return builder
}
func (builder *CreateAgentSkillPathReqBodyBuilder) AgentIds(agentIds []string) *CreateAgentSkillPathReqBodyBuilder {
	builder.agentIds = agentIds
	builder.agentIdsFlag = true
	return builder
}

func (builder *CreateAgentSkillPathReqBodyBuilder) Build() (*CreateAgentSkillReqBody, error) {
	req := &CreateAgentSkillReqBody{}
	if builder.nameFlag {
		req.Name = &builder.name
	}
	if builder.rulesFlag {
		req.Rules = builder.rules
	}
	if builder.agentIdsFlag {
		req.AgentIds = builder.agentIds
	}
	return req, nil
}

// 上传文件path结束

// 1.4 生成请求的builder结构体
type CreateAgentSkillReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *CreateAgentSkillReqBody
}

// 生成请求的New构造器
func NewCreateAgentSkillReqBuilder() *CreateAgentSkillReqBuilder {
	builder := &CreateAgentSkillReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *CreateAgentSkillReqBuilder) Body(body *CreateAgentSkillReqBody) *CreateAgentSkillReqBuilder {
	builder.body = body
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *CreateAgentSkillReqBuilder) Build() *CreateAgentSkillReq {
	req := &CreateAgentSkillReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.Body = builder.body
	return req
}

type CreateAgentSkillReqBody struct {
	Name     *string           `json:"name,omitempty"`
	Rules    []*AgentSkillRule `json:"rules,omitempty"`
	AgentIds []string          `json:"agent_ids,omitempty"`
}

type CreateAgentSkillReq struct {
	apiReq *larkcore.ApiReq
	Body   *CreateAgentSkillReqBody `body:""`
}

type CreateAgentSkillRespData struct {
	AgentSkillId *string `json:"agent_skill_id,omitempty"`
}

type CreateAgentSkillResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateAgentSkillRespData `json:"data"`
}

func (resp *CreateAgentSkillResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type DeleteAgentSkillReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewDeleteAgentSkillReqBuilder() *DeleteAgentSkillReqBuilder {
	builder := &DeleteAgentSkillReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *DeleteAgentSkillReqBuilder) AgentSkillId(agentSkillId string) *DeleteAgentSkillReqBuilder {
	builder.apiReq.PathParams.Set("agent_skill_id", fmt.Sprint(agentSkillId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *DeleteAgentSkillReqBuilder) Build() *DeleteAgentSkillReq {
	req := &DeleteAgentSkillReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type DeleteAgentSkillReq struct {
	apiReq *larkcore.ApiReq
}

type DeleteAgentSkillResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *DeleteAgentSkillResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type GetAgentSkillReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewGetAgentSkillReqBuilder() *GetAgentSkillReqBuilder {
	builder := &GetAgentSkillReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *GetAgentSkillReqBuilder) AgentSkillId(agentSkillId string) *GetAgentSkillReqBuilder {
	builder.apiReq.PathParams.Set("agent_skill_id", fmt.Sprint(agentSkillId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *GetAgentSkillReqBuilder) Build() *GetAgentSkillReq {
	req := &GetAgentSkillReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type GetAgentSkillReq struct {
	apiReq *larkcore.ApiReq
}

type GetAgentSkillRespData struct {
	AgentSkill *AgentSkill `json:"agent_skill,omitempty"`
}

type GetAgentSkillResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetAgentSkillRespData `json:"data"`
}

func (resp *GetAgentSkillResp) Success() bool {
	return resp.Code == 0
}

type ListAgentSkillRespData struct {
	AgentSkills []*AgentSkill `json:"agent_skills,omitempty"`
}

type ListAgentSkillResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListAgentSkillRespData `json:"data"`
}

func (resp *ListAgentSkillResp) Success() bool {
	return resp.Code == 0
}

type PatchAgentSkillReqBodyBuilder struct {
	agentSkill     *AgentSkill
	agentSkillFlag bool
}

// 生成body的New构造器
func NewPatchAgentSkillReqBodyBuilder() *PatchAgentSkillReqBodyBuilder {
	builder := &PatchAgentSkillReqBodyBuilder{}
	return builder
}

// 1.2 生成body的builder属性方法
func (builder *PatchAgentSkillReqBodyBuilder) AgentSkill(agentSkill *AgentSkill) *PatchAgentSkillReqBodyBuilder {
	builder.agentSkill = agentSkill
	builder.agentSkillFlag = true
	return builder
}

// 1.3 生成body的build方法
func (builder *PatchAgentSkillReqBodyBuilder) Build() *PatchAgentSkillReqBody {
	req := &PatchAgentSkillReqBody{}
	if builder.agentSkillFlag {
		req.AgentSkill = builder.agentSkill
	}
	return req
}

// 上传文件path开始
type PatchAgentSkillPathReqBodyBuilder struct {
	agentSkill     *AgentSkill
	agentSkillFlag bool
}

func NewPatchAgentSkillPathReqBodyBuilder() *PatchAgentSkillPathReqBodyBuilder {
	builder := &PatchAgentSkillPathReqBodyBuilder{}
	return builder
}
func (builder *PatchAgentSkillPathReqBodyBuilder) AgentSkill(agentSkill *AgentSkill) *PatchAgentSkillPathReqBodyBuilder {
	builder.agentSkill = agentSkill
	builder.agentSkillFlag = true
	return builder
}

func (builder *PatchAgentSkillPathReqBodyBuilder) Build() (*PatchAgentSkillReqBody, error) {
	req := &PatchAgentSkillReqBody{}
	if builder.agentSkillFlag {
		req.AgentSkill = builder.agentSkill
	}
	return req, nil
}

// 上传文件path结束

// 1.4 生成请求的builder结构体
type PatchAgentSkillReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *PatchAgentSkillReqBody
}

// 生成请求的New构造器
func NewPatchAgentSkillReqBuilder() *PatchAgentSkillReqBuilder {
	builder := &PatchAgentSkillReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *PatchAgentSkillReqBuilder) AgentSkillId(agentSkillId string) *PatchAgentSkillReqBuilder {
	builder.apiReq.PathParams.Set("agent_skill_id", fmt.Sprint(agentSkillId))
	return builder
}
func (builder *PatchAgentSkillReqBuilder) Body(body *PatchAgentSkillReqBody) *PatchAgentSkillReqBuilder {
	builder.body = body
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *PatchAgentSkillReqBuilder) Build() *PatchAgentSkillReq {
	req := &PatchAgentSkillReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.body
	return req
}

type PatchAgentSkillReqBody struct {
	AgentSkill *AgentSkill `json:"agent_skill,omitempty"`
}

type PatchAgentSkillReq struct {
	apiReq *larkcore.ApiReq
	Body   *PatchAgentSkillReqBody `body:""`
}

type PatchAgentSkillResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *PatchAgentSkillResp) Success() bool {
	return resp.Code == 0
}

type ListAgentSkillRuleRespData struct {
	Rules []*AgentSkillRule `json:"rules,omitempty"`
}

type ListAgentSkillRuleResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListAgentSkillRuleRespData `json:"data"`
}

func (resp *ListAgentSkillRuleResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type CreateBotMessageReqBuilder struct {
	apiReq     *larkcore.ApiReq
	botMessage *BotMessage
}

// 生成请求的New构造器
func NewCreateBotMessageReqBuilder() *CreateBotMessageReqBuilder {
	builder := &CreateBotMessageReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *CreateBotMessageReqBuilder) UserIdType(userIdType string) *CreateBotMessageReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}
func (builder *CreateBotMessageReqBuilder) BotMessage(botMessage *BotMessage) *CreateBotMessageReqBuilder {
	builder.botMessage = botMessage
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *CreateBotMessageReqBuilder) Build() *CreateBotMessageReq {
	req := &CreateBotMessageReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.botMessage
	return req
}

type CreateBotMessageReq struct {
	apiReq     *larkcore.ApiReq
	BotMessage *BotMessage `body:""`
}

type CreateBotMessageRespData struct {
	MessageId *string `json:"message_id,omitempty"`
}

type CreateBotMessageResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateBotMessageRespData `json:"data"`
}

func (resp *CreateBotMessageResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type CreateCategoryReqBuilder struct {
	apiReq   *larkcore.ApiReq
	category *Category
}

// 生成请求的New构造器
func NewCreateCategoryReqBuilder() *CreateCategoryReqBuilder {
	builder := &CreateCategoryReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *CreateCategoryReqBuilder) Category(category *Category) *CreateCategoryReqBuilder {
	builder.category = category
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *CreateCategoryReqBuilder) Build() *CreateCategoryReq {
	req := &CreateCategoryReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.Body = builder.category
	return req
}

type CreateCategoryReq struct {
	apiReq   *larkcore.ApiReq
	Category *Category `body:""`
}

type CreateCategoryRespData struct {
	Category *Category `json:"category,omitempty"`
}

type CreateCategoryResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateCategoryRespData `json:"data"`
}

func (resp *CreateCategoryResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type DeleteCategoryReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewDeleteCategoryReqBuilder() *DeleteCategoryReqBuilder {
	builder := &DeleteCategoryReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *DeleteCategoryReqBuilder) Id(id string) *DeleteCategoryReqBuilder {
	builder.apiReq.PathParams.Set("id", fmt.Sprint(id))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *DeleteCategoryReqBuilder) Build() *DeleteCategoryReq {
	req := &DeleteCategoryReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type DeleteCategoryReq struct {
	apiReq *larkcore.ApiReq
}

type DeleteCategoryResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *DeleteCategoryResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type GetCategoryReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewGetCategoryReqBuilder() *GetCategoryReqBuilder {
	builder := &GetCategoryReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *GetCategoryReqBuilder) Id(id string) *GetCategoryReqBuilder {
	builder.apiReq.PathParams.Set("id", fmt.Sprint(id))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *GetCategoryReqBuilder) Build() *GetCategoryReq {
	req := &GetCategoryReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type GetCategoryReq struct {
	apiReq *larkcore.ApiReq
}

type GetCategoryRespData struct {
	CategoryId *string `json:"category_id,omitempty"`
	Id         *string `json:"id,omitempty"`
	Name       *string `json:"name,omitempty"`
	HelpdeskId *string `json:"helpdesk_id,omitempty"`
	Language   *string `json:"language,omitempty"`
}

type GetCategoryResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetCategoryRespData `json:"data"`
}

func (resp *GetCategoryResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type ListCategoryReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewListCategoryReqBuilder() *ListCategoryReqBuilder {
	builder := &ListCategoryReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *ListCategoryReqBuilder) Lang(lang string) *ListCategoryReqBuilder {
	builder.apiReq.QueryParams.Set("lang", fmt.Sprint(lang))
	return builder
}
func (builder *ListCategoryReqBuilder) OrderBy(orderBy int) *ListCategoryReqBuilder {
	builder.apiReq.QueryParams.Set("order_by", fmt.Sprint(orderBy))
	return builder
}
func (builder *ListCategoryReqBuilder) Asc(asc bool) *ListCategoryReqBuilder {
	builder.apiReq.QueryParams.Set("asc", fmt.Sprint(asc))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *ListCategoryReqBuilder) Build() *ListCategoryReq {
	req := &ListCategoryReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListCategoryReq struct {
	apiReq *larkcore.ApiReq
}

type ListCategoryRespData struct {
	Categories []*Category `json:"categories,omitempty"`
}

type ListCategoryResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListCategoryRespData `json:"data"`
}

func (resp *ListCategoryResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type PatchCategoryReqBuilder struct {
	apiReq   *larkcore.ApiReq
	category *Category
}

// 生成请求的New构造器
func NewPatchCategoryReqBuilder() *PatchCategoryReqBuilder {
	builder := &PatchCategoryReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *PatchCategoryReqBuilder) Id(id string) *PatchCategoryReqBuilder {
	builder.apiReq.PathParams.Set("id", fmt.Sprint(id))
	return builder
}
func (builder *PatchCategoryReqBuilder) Category(category *Category) *PatchCategoryReqBuilder {
	builder.category = category
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *PatchCategoryReqBuilder) Build() *PatchCategoryReq {
	req := &PatchCategoryReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.category
	return req
}

type PatchCategoryReq struct {
	apiReq   *larkcore.ApiReq
	Category *Category `body:""`
}

type PatchCategoryResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *PatchCategoryResp) Success() bool {
	return resp.Code == 0
}

type SubscribeEventReqBodyBuilder struct {
	events     []*Event
	eventsFlag bool
}

// 生成body的New构造器
func NewSubscribeEventReqBodyBuilder() *SubscribeEventReqBodyBuilder {
	builder := &SubscribeEventReqBodyBuilder{}
	return builder
}

// 1.2 生成body的builder属性方法
func (builder *SubscribeEventReqBodyBuilder) Events(events []*Event) *SubscribeEventReqBodyBuilder {
	builder.events = events
	builder.eventsFlag = true
	return builder
}

// 1.3 生成body的build方法
func (builder *SubscribeEventReqBodyBuilder) Build() *SubscribeEventReqBody {
	req := &SubscribeEventReqBody{}
	if builder.eventsFlag {
		req.Events = builder.events
	}
	return req
}

// 上传文件path开始
type SubscribeEventPathReqBodyBuilder struct {
	events     []*Event
	eventsFlag bool
}

func NewSubscribeEventPathReqBodyBuilder() *SubscribeEventPathReqBodyBuilder {
	builder := &SubscribeEventPathReqBodyBuilder{}
	return builder
}
func (builder *SubscribeEventPathReqBodyBuilder) Events(events []*Event) *SubscribeEventPathReqBodyBuilder {
	builder.events = events
	builder.eventsFlag = true
	return builder
}

func (builder *SubscribeEventPathReqBodyBuilder) Build() (*SubscribeEventReqBody, error) {
	req := &SubscribeEventReqBody{}
	if builder.eventsFlag {
		req.Events = builder.events
	}
	return req, nil
}

// 上传文件path结束

// 1.4 生成请求的builder结构体
type SubscribeEventReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *SubscribeEventReqBody
}

// 生成请求的New构造器
func NewSubscribeEventReqBuilder() *SubscribeEventReqBuilder {
	builder := &SubscribeEventReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *SubscribeEventReqBuilder) Body(body *SubscribeEventReqBody) *SubscribeEventReqBuilder {
	builder.body = body
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *SubscribeEventReqBuilder) Build() *SubscribeEventReq {
	req := &SubscribeEventReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.Body = builder.body
	return req
}

type SubscribeEventReqBody struct {
	Events []*Event `json:"events,omitempty"`
}

type SubscribeEventReq struct {
	apiReq *larkcore.ApiReq
	Body   *SubscribeEventReqBody `body:""`
}

type SubscribeEventResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *SubscribeEventResp) Success() bool {
	return resp.Code == 0
}

type UnsubscribeEventReqBodyBuilder struct {
	events     []*Event
	eventsFlag bool
}

// 生成body的New构造器
func NewUnsubscribeEventReqBodyBuilder() *UnsubscribeEventReqBodyBuilder {
	builder := &UnsubscribeEventReqBodyBuilder{}
	return builder
}

// 1.2 生成body的builder属性方法
func (builder *UnsubscribeEventReqBodyBuilder) Events(events []*Event) *UnsubscribeEventReqBodyBuilder {
	builder.events = events
	builder.eventsFlag = true
	return builder
}

// 1.3 生成body的build方法
func (builder *UnsubscribeEventReqBodyBuilder) Build() *UnsubscribeEventReqBody {
	req := &UnsubscribeEventReqBody{}
	if builder.eventsFlag {
		req.Events = builder.events
	}
	return req
}

// 上传文件path开始
type UnsubscribeEventPathReqBodyBuilder struct {
	events     []*Event
	eventsFlag bool
}

func NewUnsubscribeEventPathReqBodyBuilder() *UnsubscribeEventPathReqBodyBuilder {
	builder := &UnsubscribeEventPathReqBodyBuilder{}
	return builder
}
func (builder *UnsubscribeEventPathReqBodyBuilder) Events(events []*Event) *UnsubscribeEventPathReqBodyBuilder {
	builder.events = events
	builder.eventsFlag = true
	return builder
}

func (builder *UnsubscribeEventPathReqBodyBuilder) Build() (*UnsubscribeEventReqBody, error) {
	req := &UnsubscribeEventReqBody{}
	if builder.eventsFlag {
		req.Events = builder.events
	}
	return req, nil
}

// 上传文件path结束

// 1.4 生成请求的builder结构体
type UnsubscribeEventReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *UnsubscribeEventReqBody
}

// 生成请求的New构造器
func NewUnsubscribeEventReqBuilder() *UnsubscribeEventReqBuilder {
	builder := &UnsubscribeEventReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *UnsubscribeEventReqBuilder) Body(body *UnsubscribeEventReqBody) *UnsubscribeEventReqBuilder {
	builder.body = body
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *UnsubscribeEventReqBuilder) Build() *UnsubscribeEventReq {
	req := &UnsubscribeEventReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.Body = builder.body
	return req
}

type UnsubscribeEventReqBody struct {
	Events []*Event `json:"events,omitempty"`
}

type UnsubscribeEventReq struct {
	apiReq *larkcore.ApiReq
	Body   *UnsubscribeEventReqBody `body:""`
}

type UnsubscribeEventResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *UnsubscribeEventResp) Success() bool {
	return resp.Code == 0
}

type CreateFaqReqBodyBuilder struct {
	faq     *FaqUpdateInfo
	faqFlag bool
}

// 生成body的New构造器
func NewCreateFaqReqBodyBuilder() *CreateFaqReqBodyBuilder {
	builder := &CreateFaqReqBodyBuilder{}
	return builder
}

// 1.2 生成body的builder属性方法
func (builder *CreateFaqReqBodyBuilder) Faq(faq *FaqUpdateInfo) *CreateFaqReqBodyBuilder {
	builder.faq = faq
	builder.faqFlag = true
	return builder
}

// 1.3 生成body的build方法
func (builder *CreateFaqReqBodyBuilder) Build() *CreateFaqReqBody {
	req := &CreateFaqReqBody{}
	if builder.faqFlag {
		req.Faq = builder.faq
	}
	return req
}

// 上传文件path开始
type CreateFaqPathReqBodyBuilder struct {
	faq     *FaqUpdateInfo
	faqFlag bool
}

func NewCreateFaqPathReqBodyBuilder() *CreateFaqPathReqBodyBuilder {
	builder := &CreateFaqPathReqBodyBuilder{}
	return builder
}
func (builder *CreateFaqPathReqBodyBuilder) Faq(faq *FaqUpdateInfo) *CreateFaqPathReqBodyBuilder {
	builder.faq = faq
	builder.faqFlag = true
	return builder
}

func (builder *CreateFaqPathReqBodyBuilder) Build() (*CreateFaqReqBody, error) {
	req := &CreateFaqReqBody{}
	if builder.faqFlag {
		req.Faq = builder.faq
	}
	return req, nil
}

// 上传文件path结束

// 1.4 生成请求的builder结构体
type CreateFaqReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *CreateFaqReqBody
}

// 生成请求的New构造器
func NewCreateFaqReqBuilder() *CreateFaqReqBuilder {
	builder := &CreateFaqReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *CreateFaqReqBuilder) Body(body *CreateFaqReqBody) *CreateFaqReqBuilder {
	builder.body = body
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *CreateFaqReqBuilder) Build() *CreateFaqReq {
	req := &CreateFaqReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.Body = builder.body
	return req
}

type CreateFaqReqBody struct {
	Faq *FaqUpdateInfo `json:"faq,omitempty"`
}

type CreateFaqReq struct {
	apiReq *larkcore.ApiReq
	Body   *CreateFaqReqBody `body:""`
}

type CreateFaqRespData struct {
	Faq *Faq `json:"faq,omitempty"`
}

type CreateFaqResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateFaqRespData `json:"data"`
}

func (resp *CreateFaqResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type DeleteFaqReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewDeleteFaqReqBuilder() *DeleteFaqReqBuilder {
	builder := &DeleteFaqReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *DeleteFaqReqBuilder) Id(id string) *DeleteFaqReqBuilder {
	builder.apiReq.PathParams.Set("id", fmt.Sprint(id))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *DeleteFaqReqBuilder) Build() *DeleteFaqReq {
	req := &DeleteFaqReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type DeleteFaqReq struct {
	apiReq *larkcore.ApiReq
}

type DeleteFaqResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *DeleteFaqResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type FaqImageFaqReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewFaqImageFaqReqBuilder() *FaqImageFaqReqBuilder {
	builder := &FaqImageFaqReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *FaqImageFaqReqBuilder) Id(id string) *FaqImageFaqReqBuilder {
	builder.apiReq.PathParams.Set("id", fmt.Sprint(id))
	return builder
}
func (builder *FaqImageFaqReqBuilder) ImageKey(imageKey string) *FaqImageFaqReqBuilder {
	builder.apiReq.PathParams.Set("image_key", fmt.Sprint(imageKey))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *FaqImageFaqReqBuilder) Build() *FaqImageFaqReq {
	req := &FaqImageFaqReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type FaqImageFaqReq struct {
	apiReq *larkcore.ApiReq
}

type FaqImageFaqResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	File     io.Reader `json:"-"`
	FileName string    `json:"-"`
}

func (resp *FaqImageFaqResp) Success() bool {
	return resp.Code == 0
}

// 下载api,生成WriteFile方法
func (resp *FaqImageFaqResp) WriteFile(fileName string) error {
	bs, err := ioutil.ReadAll(resp.File)
	if err != nil {
		return err
	}

	err = ioutil.WriteFile(fileName, bs, 0666)
	if err != nil {
		return err
	}
	return nil
}

// 1.4 生成请求的builder结构体
type GetFaqReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewGetFaqReqBuilder() *GetFaqReqBuilder {
	builder := &GetFaqReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *GetFaqReqBuilder) Id(id string) *GetFaqReqBuilder {
	builder.apiReq.PathParams.Set("id", fmt.Sprint(id))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *GetFaqReqBuilder) Build() *GetFaqReq {
	req := &GetFaqReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type GetFaqReq struct {
	apiReq *larkcore.ApiReq
}

type GetFaqRespData struct {
	Faq *Faq `json:"faq,omitempty"`
}

type GetFaqResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetFaqRespData `json:"data"`
}

func (resp *GetFaqResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type ListFaqReqBuilder struct {
	apiReq *larkcore.ApiReq
	limit  int
}

// 生成请求的New构造器
func NewListFaqReqBuilder() *ListFaqReqBuilder {
	builder := &ListFaqReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *ListFaqReqBuilder) Limit(limit int) *ListFaqReqBuilder {
	builder.limit = limit
	return builder
}
func (builder *ListFaqReqBuilder) CategoryId(categoryId string) *ListFaqReqBuilder {
	builder.apiReq.QueryParams.Set("category_id", fmt.Sprint(categoryId))
	return builder
}
func (builder *ListFaqReqBuilder) Status(status string) *ListFaqReqBuilder {
	builder.apiReq.QueryParams.Set("status", fmt.Sprint(status))
	return builder
}
func (builder *ListFaqReqBuilder) Search(search string) *ListFaqReqBuilder {
	builder.apiReq.QueryParams.Set("search", fmt.Sprint(search))
	return builder
}
func (builder *ListFaqReqBuilder) PageToken(pageToken string) *ListFaqReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}
func (builder *ListFaqReqBuilder) PageSize(pageSize int) *ListFaqReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *ListFaqReqBuilder) Build() *ListFaqReq {
	req := &ListFaqReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListFaqReq struct {
	apiReq *larkcore.ApiReq
	Limit  int
}

type ListFaqRespData struct {
	HasMore   *bool   `json:"has_more,omitempty"`
	PageToken *string `json:"page_token,omitempty"`
	PageSize  *int    `json:"page_size,omitempty"`
	Total     *int    `json:"total,omitempty"`
	Items     []*Faq  `json:"items,omitempty"`
}

type ListFaqResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListFaqRespData `json:"data"`
}

func (resp *ListFaqResp) Success() bool {
	return resp.Code == 0
}

type PatchFaqReqBodyBuilder struct {
	faq     *FaqUpdateInfo
	faqFlag bool
}

// 生成body的New构造器
func NewPatchFaqReqBodyBuilder() *PatchFaqReqBodyBuilder {
	builder := &PatchFaqReqBodyBuilder{}
	return builder
}

// 1.2 生成body的builder属性方法
func (builder *PatchFaqReqBodyBuilder) Faq(faq *FaqUpdateInfo) *PatchFaqReqBodyBuilder {
	builder.faq = faq
	builder.faqFlag = true
	return builder
}

// 1.3 生成body的build方法
func (builder *PatchFaqReqBodyBuilder) Build() *PatchFaqReqBody {
	req := &PatchFaqReqBody{}
	if builder.faqFlag {
		req.Faq = builder.faq
	}
	return req
}

// 上传文件path开始
type PatchFaqPathReqBodyBuilder struct {
	faq     *FaqUpdateInfo
	faqFlag bool
}

func NewPatchFaqPathReqBodyBuilder() *PatchFaqPathReqBodyBuilder {
	builder := &PatchFaqPathReqBodyBuilder{}
	return builder
}
func (builder *PatchFaqPathReqBodyBuilder) Faq(faq *FaqUpdateInfo) *PatchFaqPathReqBodyBuilder {
	builder.faq = faq
	builder.faqFlag = true
	return builder
}

func (builder *PatchFaqPathReqBodyBuilder) Build() (*PatchFaqReqBody, error) {
	req := &PatchFaqReqBody{}
	if builder.faqFlag {
		req.Faq = builder.faq
	}
	return req, nil
}

// 上传文件path结束

// 1.4 生成请求的builder结构体
type PatchFaqReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *PatchFaqReqBody
}

// 生成请求的New构造器
func NewPatchFaqReqBuilder() *PatchFaqReqBuilder {
	builder := &PatchFaqReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *PatchFaqReqBuilder) Id(id string) *PatchFaqReqBuilder {
	builder.apiReq.PathParams.Set("id", fmt.Sprint(id))
	return builder
}
func (builder *PatchFaqReqBuilder) Body(body *PatchFaqReqBody) *PatchFaqReqBuilder {
	builder.body = body
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *PatchFaqReqBuilder) Build() *PatchFaqReq {
	req := &PatchFaqReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.body
	return req
}

type PatchFaqReqBody struct {
	Faq *FaqUpdateInfo `json:"faq,omitempty"`
}

type PatchFaqReq struct {
	apiReq *larkcore.ApiReq
	Body   *PatchFaqReqBody `body:""`
}

type PatchFaqResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *PatchFaqResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type SearchFaqReqBuilder struct {
	apiReq *larkcore.ApiReq
	limit  int
}

// 生成请求的New构造器
func NewSearchFaqReqBuilder() *SearchFaqReqBuilder {
	builder := &SearchFaqReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *SearchFaqReqBuilder) Limit(limit int) *SearchFaqReqBuilder {
	builder.limit = limit
	return builder
}
func (builder *SearchFaqReqBuilder) Query(query string) *SearchFaqReqBuilder {
	builder.apiReq.QueryParams.Set("query", fmt.Sprint(query))
	return builder
}
func (builder *SearchFaqReqBuilder) Base64(base64 string) *SearchFaqReqBuilder {
	builder.apiReq.QueryParams.Set("base64", fmt.Sprint(base64))
	return builder
}
func (builder *SearchFaqReqBuilder) PageToken(pageToken string) *SearchFaqReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}
func (builder *SearchFaqReqBuilder) PageSize(pageSize int) *SearchFaqReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *SearchFaqReqBuilder) Build() *SearchFaqReq {
	req := &SearchFaqReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type SearchFaqReq struct {
	apiReq *larkcore.ApiReq
	Limit  int
}

type SearchFaqRespData struct {
	HasMore   *bool   `json:"has_more,omitempty"`
	PageToken *string `json:"page_token,omitempty"`
	Items     []*Faq  `json:"items,omitempty"`
}

type SearchFaqResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *SearchFaqRespData `json:"data"`
}

func (resp *SearchFaqResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type CancelApproveNotificationReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewCancelApproveNotificationReqBuilder() *CancelApproveNotificationReqBuilder {
	builder := &CancelApproveNotificationReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *CancelApproveNotificationReqBuilder) NotificationId(notificationId string) *CancelApproveNotificationReqBuilder {
	builder.apiReq.PathParams.Set("notification_id", fmt.Sprint(notificationId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *CancelApproveNotificationReqBuilder) Build() *CancelApproveNotificationReq {
	req := &CancelApproveNotificationReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type CancelApproveNotificationReq struct {
	apiReq *larkcore.ApiReq
}

type CancelApproveNotificationResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *CancelApproveNotificationResp) Success() bool {
	return resp.Code == 0
}

type CancelSendNotificationReqBodyBuilder struct {
	isRecall     bool
	isRecallFlag bool
}

// 生成body的New构造器
func NewCancelSendNotificationReqBodyBuilder() *CancelSendNotificationReqBodyBuilder {
	builder := &CancelSendNotificationReqBodyBuilder{}
	return builder
}

// 1.2 生成body的builder属性方法
func (builder *CancelSendNotificationReqBodyBuilder) IsRecall(isRecall bool) *CancelSendNotificationReqBodyBuilder {
	builder.isRecall = isRecall
	builder.isRecallFlag = true
	return builder
}

// 1.3 生成body的build方法
func (builder *CancelSendNotificationReqBodyBuilder) Build() *CancelSendNotificationReqBody {
	req := &CancelSendNotificationReqBody{}
	if builder.isRecallFlag {
		req.IsRecall = &builder.isRecall
	}
	return req
}

// 上传文件path开始
type CancelSendNotificationPathReqBodyBuilder struct {
	isRecall     bool
	isRecallFlag bool
}

func NewCancelSendNotificationPathReqBodyBuilder() *CancelSendNotificationPathReqBodyBuilder {
	builder := &CancelSendNotificationPathReqBodyBuilder{}
	return builder
}
func (builder *CancelSendNotificationPathReqBodyBuilder) IsRecall(isRecall bool) *CancelSendNotificationPathReqBodyBuilder {
	builder.isRecall = isRecall
	builder.isRecallFlag = true
	return builder
}

func (builder *CancelSendNotificationPathReqBodyBuilder) Build() (*CancelSendNotificationReqBody, error) {
	req := &CancelSendNotificationReqBody{}
	if builder.isRecallFlag {
		req.IsRecall = &builder.isRecall
	}
	return req, nil
}

// 上传文件path结束

// 1.4 生成请求的builder结构体
type CancelSendNotificationReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *CancelSendNotificationReqBody
}

// 生成请求的New构造器
func NewCancelSendNotificationReqBuilder() *CancelSendNotificationReqBuilder {
	builder := &CancelSendNotificationReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *CancelSendNotificationReqBuilder) NotificationId(notificationId string) *CancelSendNotificationReqBuilder {
	builder.apiReq.PathParams.Set("notification_id", fmt.Sprint(notificationId))
	return builder
}
func (builder *CancelSendNotificationReqBuilder) Body(body *CancelSendNotificationReqBody) *CancelSendNotificationReqBuilder {
	builder.body = body
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *CancelSendNotificationReqBuilder) Build() *CancelSendNotificationReq {
	req := &CancelSendNotificationReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.body
	return req
}

type CancelSendNotificationReqBody struct {
	IsRecall *bool `json:"is_recall,omitempty"`
}

type CancelSendNotificationReq struct {
	apiReq *larkcore.ApiReq
	Body   *CancelSendNotificationReqBody `body:""`
}

type CancelSendNotificationResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *CancelSendNotificationResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type CreateNotificationReqBuilder struct {
	apiReq       *larkcore.ApiReq
	notification *Notification
}

// 生成请求的New构造器
func NewCreateNotificationReqBuilder() *CreateNotificationReqBuilder {
	builder := &CreateNotificationReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *CreateNotificationReqBuilder) UserIdType(userIdType string) *CreateNotificationReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}
func (builder *CreateNotificationReqBuilder) Notification(notification *Notification) *CreateNotificationReqBuilder {
	builder.notification = notification
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *CreateNotificationReqBuilder) Build() *CreateNotificationReq {
	req := &CreateNotificationReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.notification
	return req
}

type CreateNotificationReq struct {
	apiReq       *larkcore.ApiReq
	Notification *Notification `body:""`
}

type CreateNotificationRespData struct {
	NotificationId *string `json:"notification_id,omitempty"`
	Status         *int    `json:"status,omitempty"`
}

type CreateNotificationResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateNotificationRespData `json:"data"`
}

func (resp *CreateNotificationResp) Success() bool {
	return resp.Code == 0
}

type ExecuteSendNotificationReqBodyBuilder struct {
	sendAt     string
	sendAtFlag bool
}

// 生成body的New构造器
func NewExecuteSendNotificationReqBodyBuilder() *ExecuteSendNotificationReqBodyBuilder {
	builder := &ExecuteSendNotificationReqBodyBuilder{}
	return builder
}

// 1.2 生成body的builder属性方法
func (builder *ExecuteSendNotificationReqBodyBuilder) SendAt(sendAt string) *ExecuteSendNotificationReqBodyBuilder {
	builder.sendAt = sendAt
	builder.sendAtFlag = true
	return builder
}

// 1.3 生成body的build方法
func (builder *ExecuteSendNotificationReqBodyBuilder) Build() *ExecuteSendNotificationReqBody {
	req := &ExecuteSendNotificationReqBody{}
	if builder.sendAtFlag {
		req.SendAt = &builder.sendAt
	}
	return req
}

// 上传文件path开始
type ExecuteSendNotificationPathReqBodyBuilder struct {
	sendAt     string
	sendAtFlag bool
}

func NewExecuteSendNotificationPathReqBodyBuilder() *ExecuteSendNotificationPathReqBodyBuilder {
	builder := &ExecuteSendNotificationPathReqBodyBuilder{}
	return builder
}
func (builder *ExecuteSendNotificationPathReqBodyBuilder) SendAt(sendAt string) *ExecuteSendNotificationPathReqBodyBuilder {
	builder.sendAt = sendAt
	builder.sendAtFlag = true
	return builder
}

func (builder *ExecuteSendNotificationPathReqBodyBuilder) Build() (*ExecuteSendNotificationReqBody, error) {
	req := &ExecuteSendNotificationReqBody{}
	if builder.sendAtFlag {
		req.SendAt = &builder.sendAt
	}
	return req, nil
}

// 上传文件path结束

// 1.4 生成请求的builder结构体
type ExecuteSendNotificationReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *ExecuteSendNotificationReqBody
}

// 生成请求的New构造器
func NewExecuteSendNotificationReqBuilder() *ExecuteSendNotificationReqBuilder {
	builder := &ExecuteSendNotificationReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *ExecuteSendNotificationReqBuilder) NotificationId(notificationId string) *ExecuteSendNotificationReqBuilder {
	builder.apiReq.PathParams.Set("notification_id", fmt.Sprint(notificationId))
	return builder
}
func (builder *ExecuteSendNotificationReqBuilder) Body(body *ExecuteSendNotificationReqBody) *ExecuteSendNotificationReqBuilder {
	builder.body = body
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *ExecuteSendNotificationReqBuilder) Build() *ExecuteSendNotificationReq {
	req := &ExecuteSendNotificationReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.body
	return req
}

type ExecuteSendNotificationReqBody struct {
	SendAt *string `json:"send_at,omitempty"`
}

type ExecuteSendNotificationReq struct {
	apiReq *larkcore.ApiReq
	Body   *ExecuteSendNotificationReqBody `body:""`
}

type ExecuteSendNotificationResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *ExecuteSendNotificationResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type GetNotificationReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewGetNotificationReqBuilder() *GetNotificationReqBuilder {
	builder := &GetNotificationReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *GetNotificationReqBuilder) NotificationId(notificationId string) *GetNotificationReqBuilder {
	builder.apiReq.PathParams.Set("notification_id", fmt.Sprint(notificationId))
	return builder
}
func (builder *GetNotificationReqBuilder) UserIdType(userIdType string) *GetNotificationReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *GetNotificationReqBuilder) Build() *GetNotificationReq {
	req := &GetNotificationReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type GetNotificationReq struct {
	apiReq *larkcore.ApiReq
}

type GetNotificationRespData struct {
	Notification    *Notification `json:"notification,omitempty"`
	ApprovalAppLink *string       `json:"approval_app_link,omitempty"`
}

type GetNotificationResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetNotificationRespData `json:"data"`
}

func (resp *GetNotificationResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type PatchNotificationReqBuilder struct {
	apiReq       *larkcore.ApiReq
	notification *Notification
}

// 生成请求的New构造器
func NewPatchNotificationReqBuilder() *PatchNotificationReqBuilder {
	builder := &PatchNotificationReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *PatchNotificationReqBuilder) NotificationId(notificationId string) *PatchNotificationReqBuilder {
	builder.apiReq.PathParams.Set("notification_id", fmt.Sprint(notificationId))
	return builder
}
func (builder *PatchNotificationReqBuilder) UserIdType(userIdType string) *PatchNotificationReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}
func (builder *PatchNotificationReqBuilder) Notification(notification *Notification) *PatchNotificationReqBuilder {
	builder.notification = notification
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *PatchNotificationReqBuilder) Build() *PatchNotificationReq {
	req := &PatchNotificationReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.notification
	return req
}

type PatchNotificationReq struct {
	apiReq       *larkcore.ApiReq
	Notification *Notification `body:""`
}

type PatchNotificationResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *PatchNotificationResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type PreviewNotificationReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewPreviewNotificationReqBuilder() *PreviewNotificationReqBuilder {
	builder := &PreviewNotificationReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *PreviewNotificationReqBuilder) NotificationId(notificationId string) *PreviewNotificationReqBuilder {
	builder.apiReq.PathParams.Set("notification_id", fmt.Sprint(notificationId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *PreviewNotificationReqBuilder) Build() *PreviewNotificationReq {
	req := &PreviewNotificationReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type PreviewNotificationReq struct {
	apiReq *larkcore.ApiReq
}

type PreviewNotificationResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *PreviewNotificationResp) Success() bool {
	return resp.Code == 0
}

type SubmitApproveNotificationReqBodyBuilder struct {
	reason     string
	reasonFlag bool
}

// 生成body的New构造器
func NewSubmitApproveNotificationReqBodyBuilder() *SubmitApproveNotificationReqBodyBuilder {
	builder := &SubmitApproveNotificationReqBodyBuilder{}
	return builder
}

// 1.2 生成body的builder属性方法
func (builder *SubmitApproveNotificationReqBodyBuilder) Reason(reason string) *SubmitApproveNotificationReqBodyBuilder {
	builder.reason = reason
	builder.reasonFlag = true
	return builder
}

// 1.3 生成body的build方法
func (builder *SubmitApproveNotificationReqBodyBuilder) Build() *SubmitApproveNotificationReqBody {
	req := &SubmitApproveNotificationReqBody{}
	if builder.reasonFlag {
		req.Reason = &builder.reason
	}
	return req
}

// 上传文件path开始
type SubmitApproveNotificationPathReqBodyBuilder struct {
	reason     string
	reasonFlag bool
}

func NewSubmitApproveNotificationPathReqBodyBuilder() *SubmitApproveNotificationPathReqBodyBuilder {
	builder := &SubmitApproveNotificationPathReqBodyBuilder{}
	return builder
}
func (builder *SubmitApproveNotificationPathReqBodyBuilder) Reason(reason string) *SubmitApproveNotificationPathReqBodyBuilder {
	builder.reason = reason
	builder.reasonFlag = true
	return builder
}

func (builder *SubmitApproveNotificationPathReqBodyBuilder) Build() (*SubmitApproveNotificationReqBody, error) {
	req := &SubmitApproveNotificationReqBody{}
	if builder.reasonFlag {
		req.Reason = &builder.reason
	}
	return req, nil
}

// 上传文件path结束

// 1.4 生成请求的builder结构体
type SubmitApproveNotificationReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *SubmitApproveNotificationReqBody
}

// 生成请求的New构造器
func NewSubmitApproveNotificationReqBuilder() *SubmitApproveNotificationReqBuilder {
	builder := &SubmitApproveNotificationReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *SubmitApproveNotificationReqBuilder) NotificationId(notificationId string) *SubmitApproveNotificationReqBuilder {
	builder.apiReq.PathParams.Set("notification_id", fmt.Sprint(notificationId))
	return builder
}
func (builder *SubmitApproveNotificationReqBuilder) Body(body *SubmitApproveNotificationReqBody) *SubmitApproveNotificationReqBuilder {
	builder.body = body
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *SubmitApproveNotificationReqBuilder) Build() *SubmitApproveNotificationReq {
	req := &SubmitApproveNotificationReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.body
	return req
}

type SubmitApproveNotificationReqBody struct {
	Reason *string `json:"reason,omitempty"`
}

type SubmitApproveNotificationReq struct {
	apiReq *larkcore.ApiReq
	Body   *SubmitApproveNotificationReqBody `body:""`
}

type SubmitApproveNotificationRespData struct {
	HasAccess *bool `json:"has_access,omitempty"`
}

type SubmitApproveNotificationResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *SubmitApproveNotificationRespData `json:"data"`
}

func (resp *SubmitApproveNotificationResp) Success() bool {
	return resp.Code == 0
}

type AnswerUserQueryTicketReqBodyBuilder struct {
	eventId     string
	eventIdFlag bool
	faqs        []*UserQueryFaqInfo
	faqsFlag    bool
}

// 生成body的New构造器
func NewAnswerUserQueryTicketReqBodyBuilder() *AnswerUserQueryTicketReqBodyBuilder {
	builder := &AnswerUserQueryTicketReqBodyBuilder{}
	return builder
}

// 1.2 生成body的builder属性方法
func (builder *AnswerUserQueryTicketReqBodyBuilder) EventId(eventId string) *AnswerUserQueryTicketReqBodyBuilder {
	builder.eventId = eventId
	builder.eventIdFlag = true
	return builder
}
func (builder *AnswerUserQueryTicketReqBodyBuilder) Faqs(faqs []*UserQueryFaqInfo) *AnswerUserQueryTicketReqBodyBuilder {
	builder.faqs = faqs
	builder.faqsFlag = true
	return builder
}

// 1.3 生成body的build方法
func (builder *AnswerUserQueryTicketReqBodyBuilder) Build() *AnswerUserQueryTicketReqBody {
	req := &AnswerUserQueryTicketReqBody{}
	if builder.eventIdFlag {
		req.EventId = &builder.eventId
	}
	if builder.faqsFlag {
		req.Faqs = builder.faqs
	}
	return req
}

// 上传文件path开始
type AnswerUserQueryTicketPathReqBodyBuilder struct {
	eventId     string
	eventIdFlag bool
	faqs        []*UserQueryFaqInfo
	faqsFlag    bool
}

func NewAnswerUserQueryTicketPathReqBodyBuilder() *AnswerUserQueryTicketPathReqBodyBuilder {
	builder := &AnswerUserQueryTicketPathReqBodyBuilder{}
	return builder
}
func (builder *AnswerUserQueryTicketPathReqBodyBuilder) EventId(eventId string) *AnswerUserQueryTicketPathReqBodyBuilder {
	builder.eventId = eventId
	builder.eventIdFlag = true
	return builder
}
func (builder *AnswerUserQueryTicketPathReqBodyBuilder) Faqs(faqs []*UserQueryFaqInfo) *AnswerUserQueryTicketPathReqBodyBuilder {
	builder.faqs = faqs
	builder.faqsFlag = true
	return builder
}

func (builder *AnswerUserQueryTicketPathReqBodyBuilder) Build() (*AnswerUserQueryTicketReqBody, error) {
	req := &AnswerUserQueryTicketReqBody{}
	if builder.eventIdFlag {
		req.EventId = &builder.eventId
	}
	if builder.faqsFlag {
		req.Faqs = builder.faqs
	}
	return req, nil
}

// 上传文件path结束

// 1.4 生成请求的builder结构体
type AnswerUserQueryTicketReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *AnswerUserQueryTicketReqBody
}

// 生成请求的New构造器
func NewAnswerUserQueryTicketReqBuilder() *AnswerUserQueryTicketReqBuilder {
	builder := &AnswerUserQueryTicketReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *AnswerUserQueryTicketReqBuilder) TicketId(ticketId string) *AnswerUserQueryTicketReqBuilder {
	builder.apiReq.PathParams.Set("ticket_id", fmt.Sprint(ticketId))
	return builder
}
func (builder *AnswerUserQueryTicketReqBuilder) Body(body *AnswerUserQueryTicketReqBody) *AnswerUserQueryTicketReqBuilder {
	builder.body = body
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *AnswerUserQueryTicketReqBuilder) Build() *AnswerUserQueryTicketReq {
	req := &AnswerUserQueryTicketReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.body
	return req
}

type AnswerUserQueryTicketReqBody struct {
	EventId *string             `json:"event_id,omitempty"`
	Faqs    []*UserQueryFaqInfo `json:"faqs,omitempty"`
}

type AnswerUserQueryTicketReq struct {
	apiReq *larkcore.ApiReq
	Body   *AnswerUserQueryTicketReqBody `body:""`
}

type AnswerUserQueryTicketResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *AnswerUserQueryTicketResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type CustomizedFieldsTicketReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewCustomizedFieldsTicketReqBuilder() *CustomizedFieldsTicketReqBuilder {
	builder := &CustomizedFieldsTicketReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *CustomizedFieldsTicketReqBuilder) VisibleOnly(visibleOnly bool) *CustomizedFieldsTicketReqBuilder {
	builder.apiReq.QueryParams.Set("visible_only", fmt.Sprint(visibleOnly))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *CustomizedFieldsTicketReqBuilder) Build() *CustomizedFieldsTicketReq {
	req := &CustomizedFieldsTicketReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type CustomizedFieldsTicketReq struct {
	apiReq *larkcore.ApiReq
}

type CustomizedFieldsTicketRespData struct {
	UserCustomizedFields   []*UserCustomizedField   `json:"user_customized_fields,omitempty"`
	TicketCustomizedFields []*TicketCustomizedField `json:"ticket_customized_fields,omitempty"`
}

type CustomizedFieldsTicketResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CustomizedFieldsTicketRespData `json:"data"`
}

func (resp *CustomizedFieldsTicketResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type GetTicketReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewGetTicketReqBuilder() *GetTicketReqBuilder {
	builder := &GetTicketReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *GetTicketReqBuilder) TicketId(ticketId string) *GetTicketReqBuilder {
	builder.apiReq.PathParams.Set("ticket_id", fmt.Sprint(ticketId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *GetTicketReqBuilder) Build() *GetTicketReq {
	req := &GetTicketReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type GetTicketReq struct {
	apiReq *larkcore.ApiReq
}

type GetTicketRespData struct {
	Ticket *Ticket `json:"ticket,omitempty"`
}

type GetTicketResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetTicketRespData `json:"data"`
}

func (resp *GetTicketResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type ListTicketReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewListTicketReqBuilder() *ListTicketReqBuilder {
	builder := &ListTicketReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *ListTicketReqBuilder) TicketId(ticketId string) *ListTicketReqBuilder {
	builder.apiReq.QueryParams.Set("ticket_id", fmt.Sprint(ticketId))
	return builder
}
func (builder *ListTicketReqBuilder) AgentId(agentId string) *ListTicketReqBuilder {
	builder.apiReq.QueryParams.Set("agent_id", fmt.Sprint(agentId))
	return builder
}
func (builder *ListTicketReqBuilder) ClosedById(closedById string) *ListTicketReqBuilder {
	builder.apiReq.QueryParams.Set("closed_by_id", fmt.Sprint(closedById))
	return builder
}
func (builder *ListTicketReqBuilder) Type(type_ int) *ListTicketReqBuilder {
	builder.apiReq.QueryParams.Set("type", fmt.Sprint(type_))
	return builder
}
func (builder *ListTicketReqBuilder) Channel(channel int) *ListTicketReqBuilder {
	builder.apiReq.QueryParams.Set("channel", fmt.Sprint(channel))
	return builder
}
func (builder *ListTicketReqBuilder) Solved(solved int) *ListTicketReqBuilder {
	builder.apiReq.QueryParams.Set("solved", fmt.Sprint(solved))
	return builder
}
func (builder *ListTicketReqBuilder) Score(score int) *ListTicketReqBuilder {
	builder.apiReq.QueryParams.Set("score", fmt.Sprint(score))
	return builder
}
func (builder *ListTicketReqBuilder) StatusList(statusList []int) *ListTicketReqBuilder {
	builder.apiReq.QueryParams.Set("status_list", fmt.Sprint(statusList))
	return builder
}
func (builder *ListTicketReqBuilder) GuestName(guestName string) *ListTicketReqBuilder {
	builder.apiReq.QueryParams.Set("guest_name", fmt.Sprint(guestName))
	return builder
}
func (builder *ListTicketReqBuilder) GuestId(guestId string) *ListTicketReqBuilder {
	builder.apiReq.QueryParams.Set("guest_id", fmt.Sprint(guestId))
	return builder
}
func (builder *ListTicketReqBuilder) Tags(tags []string) *ListTicketReqBuilder {
	builder.apiReq.QueryParams.Set("tags", fmt.Sprint(tags))
	return builder
}
func (builder *ListTicketReqBuilder) Page(page int) *ListTicketReqBuilder {
	builder.apiReq.QueryParams.Set("page", fmt.Sprint(page))
	return builder
}
func (builder *ListTicketReqBuilder) PageSize(pageSize int) *ListTicketReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}
func (builder *ListTicketReqBuilder) CreateTimeStart(createTimeStart int) *ListTicketReqBuilder {
	builder.apiReq.QueryParams.Set("create_time_start", fmt.Sprint(createTimeStart))
	return builder
}
func (builder *ListTicketReqBuilder) CreateTimeEnd(createTimeEnd int) *ListTicketReqBuilder {
	builder.apiReq.QueryParams.Set("create_time_end", fmt.Sprint(createTimeEnd))
	return builder
}
func (builder *ListTicketReqBuilder) UpdateTimeStart(updateTimeStart int) *ListTicketReqBuilder {
	builder.apiReq.QueryParams.Set("update_time_start", fmt.Sprint(updateTimeStart))
	return builder
}
func (builder *ListTicketReqBuilder) UpdateTimeEnd(updateTimeEnd int) *ListTicketReqBuilder {
	builder.apiReq.QueryParams.Set("update_time_end", fmt.Sprint(updateTimeEnd))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *ListTicketReqBuilder) Build() *ListTicketReq {
	req := &ListTicketReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListTicketReq struct {
	apiReq *larkcore.ApiReq
}

type ListTicketRespData struct {
	Total   *int      `json:"total,omitempty"`
	Tickets []*Ticket `json:"tickets,omitempty"`
}

type ListTicketResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListTicketRespData `json:"data"`
}

func (resp *ListTicketResp) Success() bool {
	return resp.Code == 0
}

type StartServiceTicketReqBodyBuilder struct {
	humanService        bool
	humanServiceFlag    bool
	appointedAgents     []string
	appointedAgentsFlag bool
	openId              string
	openIdFlag          bool
	customizedInfo      string
	customizedInfoFlag  bool
}

// 生成body的New构造器
func NewStartServiceTicketReqBodyBuilder() *StartServiceTicketReqBodyBuilder {
	builder := &StartServiceTicketReqBodyBuilder{}
	return builder
}

// 1.2 生成body的builder属性方法
func (builder *StartServiceTicketReqBodyBuilder) HumanService(humanService bool) *StartServiceTicketReqBodyBuilder {
	builder.humanService = humanService
	builder.humanServiceFlag = true
	return builder
}
func (builder *StartServiceTicketReqBodyBuilder) AppointedAgents(appointedAgents []string) *StartServiceTicketReqBodyBuilder {
	builder.appointedAgents = appointedAgents
	builder.appointedAgentsFlag = true
	return builder
}
func (builder *StartServiceTicketReqBodyBuilder) OpenId(openId string) *StartServiceTicketReqBodyBuilder {
	builder.openId = openId
	builder.openIdFlag = true
	return builder
}
func (builder *StartServiceTicketReqBodyBuilder) CustomizedInfo(customizedInfo string) *StartServiceTicketReqBodyBuilder {
	builder.customizedInfo = customizedInfo
	builder.customizedInfoFlag = true
	return builder
}

// 1.3 生成body的build方法
func (builder *StartServiceTicketReqBodyBuilder) Build() *StartServiceTicketReqBody {
	req := &StartServiceTicketReqBody{}
	if builder.humanServiceFlag {
		req.HumanService = &builder.humanService
	}
	if builder.appointedAgentsFlag {
		req.AppointedAgents = builder.appointedAgents
	}
	if builder.openIdFlag {
		req.OpenId = &builder.openId
	}
	if builder.customizedInfoFlag {
		req.CustomizedInfo = &builder.customizedInfo
	}
	return req
}

// 上传文件path开始
type StartServiceTicketPathReqBodyBuilder struct {
	humanService        bool
	humanServiceFlag    bool
	appointedAgents     []string
	appointedAgentsFlag bool
	openId              string
	openIdFlag          bool
	customizedInfo      string
	customizedInfoFlag  bool
}

func NewStartServiceTicketPathReqBodyBuilder() *StartServiceTicketPathReqBodyBuilder {
	builder := &StartServiceTicketPathReqBodyBuilder{}
	return builder
}
func (builder *StartServiceTicketPathReqBodyBuilder) HumanService(humanService bool) *StartServiceTicketPathReqBodyBuilder {
	builder.humanService = humanService
	builder.humanServiceFlag = true
	return builder
}
func (builder *StartServiceTicketPathReqBodyBuilder) AppointedAgents(appointedAgents []string) *StartServiceTicketPathReqBodyBuilder {
	builder.appointedAgents = appointedAgents
	builder.appointedAgentsFlag = true
	return builder
}
func (builder *StartServiceTicketPathReqBodyBuilder) OpenId(openId string) *StartServiceTicketPathReqBodyBuilder {
	builder.openId = openId
	builder.openIdFlag = true
	return builder
}
func (builder *StartServiceTicketPathReqBodyBuilder) CustomizedInfo(customizedInfo string) *StartServiceTicketPathReqBodyBuilder {
	builder.customizedInfo = customizedInfo
	builder.customizedInfoFlag = true
	return builder
}

func (builder *StartServiceTicketPathReqBodyBuilder) Build() (*StartServiceTicketReqBody, error) {
	req := &StartServiceTicketReqBody{}
	if builder.humanServiceFlag {
		req.HumanService = &builder.humanService
	}
	if builder.appointedAgentsFlag {
		req.AppointedAgents = builder.appointedAgents
	}
	if builder.openIdFlag {
		req.OpenId = &builder.openId
	}
	if builder.customizedInfoFlag {
		req.CustomizedInfo = &builder.customizedInfo
	}
	return req, nil
}

// 上传文件path结束

// 1.4 生成请求的builder结构体
type StartServiceTicketReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *StartServiceTicketReqBody
}

// 生成请求的New构造器
func NewStartServiceTicketReqBuilder() *StartServiceTicketReqBuilder {
	builder := &StartServiceTicketReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *StartServiceTicketReqBuilder) Body(body *StartServiceTicketReqBody) *StartServiceTicketReqBuilder {
	builder.body = body
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *StartServiceTicketReqBuilder) Build() *StartServiceTicketReq {
	req := &StartServiceTicketReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.Body = builder.body
	return req
}

type StartServiceTicketReqBody struct {
	HumanService    *bool    `json:"human_service,omitempty"`
	AppointedAgents []string `json:"appointed_agents,omitempty"`
	OpenId          *string  `json:"open_id,omitempty"`
	CustomizedInfo  *string  `json:"customized_info,omitempty"`
}

type StartServiceTicketReq struct {
	apiReq *larkcore.ApiReq
	Body   *StartServiceTicketReqBody `body:""`
}

type StartServiceTicketRespData struct {
	ChatId *string `json:"chat_id,omitempty"`
}

type StartServiceTicketResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *StartServiceTicketRespData `json:"data"`
}

func (resp *StartServiceTicketResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type TicketImageTicketReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewTicketImageTicketReqBuilder() *TicketImageTicketReqBuilder {
	builder := &TicketImageTicketReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *TicketImageTicketReqBuilder) TicketId(ticketId string) *TicketImageTicketReqBuilder {
	builder.apiReq.QueryParams.Set("ticket_id", fmt.Sprint(ticketId))
	return builder
}
func (builder *TicketImageTicketReqBuilder) MsgId(msgId string) *TicketImageTicketReqBuilder {
	builder.apiReq.QueryParams.Set("msg_id", fmt.Sprint(msgId))
	return builder
}
func (builder *TicketImageTicketReqBuilder) Index(index int) *TicketImageTicketReqBuilder {
	builder.apiReq.QueryParams.Set("index", fmt.Sprint(index))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *TicketImageTicketReqBuilder) Build() *TicketImageTicketReq {
	req := &TicketImageTicketReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type TicketImageTicketReq struct {
	apiReq *larkcore.ApiReq
}

type TicketImageTicketResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	File     io.Reader `json:"-"`
	FileName string    `json:"-"`
}

func (resp *TicketImageTicketResp) Success() bool {
	return resp.Code == 0
}

// 下载api,生成WriteFile方法
func (resp *TicketImageTicketResp) WriteFile(fileName string) error {
	bs, err := ioutil.ReadAll(resp.File)
	if err != nil {
		return err
	}

	err = ioutil.WriteFile(fileName, bs, 0666)
	if err != nil {
		return err
	}
	return nil
}

type UpdateTicketReqBodyBuilder struct {
	status               int
	statusFlag           bool
	tagNames             []string
	tagNamesFlag         bool
	comment              string
	commentFlag          bool
	customizedFields     []*CustomizedFieldDisplayItem
	customizedFieldsFlag bool
	ticketType           int
	ticketTypeFlag       bool
	solved               int
	solvedFlag           bool
	channel              int
	channelFlag          bool
}

// 生成body的New构造器
func NewUpdateTicketReqBodyBuilder() *UpdateTicketReqBodyBuilder {
	builder := &UpdateTicketReqBodyBuilder{}
	return builder
}

// 1.2 生成body的builder属性方法
func (builder *UpdateTicketReqBodyBuilder) Status(status int) *UpdateTicketReqBodyBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}
func (builder *UpdateTicketReqBodyBuilder) TagNames(tagNames []string) *UpdateTicketReqBodyBuilder {
	builder.tagNames = tagNames
	builder.tagNamesFlag = true
	return builder
}
func (builder *UpdateTicketReqBodyBuilder) Comment(comment string) *UpdateTicketReqBodyBuilder {
	builder.comment = comment
	builder.commentFlag = true
	return builder
}
func (builder *UpdateTicketReqBodyBuilder) CustomizedFields(customizedFields []*CustomizedFieldDisplayItem) *UpdateTicketReqBodyBuilder {
	builder.customizedFields = customizedFields
	builder.customizedFieldsFlag = true
	return builder
}
func (builder *UpdateTicketReqBodyBuilder) TicketType(ticketType int) *UpdateTicketReqBodyBuilder {
	builder.ticketType = ticketType
	builder.ticketTypeFlag = true
	return builder
}
func (builder *UpdateTicketReqBodyBuilder) Solved(solved int) *UpdateTicketReqBodyBuilder {
	builder.solved = solved
	builder.solvedFlag = true
	return builder
}
func (builder *UpdateTicketReqBodyBuilder) Channel(channel int) *UpdateTicketReqBodyBuilder {
	builder.channel = channel
	builder.channelFlag = true
	return builder
}

// 1.3 生成body的build方法
func (builder *UpdateTicketReqBodyBuilder) Build() *UpdateTicketReqBody {
	req := &UpdateTicketReqBody{}
	if builder.statusFlag {
		req.Status = &builder.status
	}
	if builder.tagNamesFlag {
		req.TagNames = builder.tagNames
	}
	if builder.commentFlag {
		req.Comment = &builder.comment
	}
	if builder.customizedFieldsFlag {
		req.CustomizedFields = builder.customizedFields
	}
	if builder.ticketTypeFlag {
		req.TicketType = &builder.ticketType
	}
	if builder.solvedFlag {
		req.Solved = &builder.solved
	}
	if builder.channelFlag {
		req.Channel = &builder.channel
	}
	return req
}

// 上传文件path开始
type UpdateTicketPathReqBodyBuilder struct {
	status               int
	statusFlag           bool
	tagNames             []string
	tagNamesFlag         bool
	comment              string
	commentFlag          bool
	customizedFields     []*CustomizedFieldDisplayItem
	customizedFieldsFlag bool
	ticketType           int
	ticketTypeFlag       bool
	solved               int
	solvedFlag           bool
	channel              int
	channelFlag          bool
}

func NewUpdateTicketPathReqBodyBuilder() *UpdateTicketPathReqBodyBuilder {
	builder := &UpdateTicketPathReqBodyBuilder{}
	return builder
}
func (builder *UpdateTicketPathReqBodyBuilder) Status(status int) *UpdateTicketPathReqBodyBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}
func (builder *UpdateTicketPathReqBodyBuilder) TagNames(tagNames []string) *UpdateTicketPathReqBodyBuilder {
	builder.tagNames = tagNames
	builder.tagNamesFlag = true
	return builder
}
func (builder *UpdateTicketPathReqBodyBuilder) Comment(comment string) *UpdateTicketPathReqBodyBuilder {
	builder.comment = comment
	builder.commentFlag = true
	return builder
}
func (builder *UpdateTicketPathReqBodyBuilder) CustomizedFields(customizedFields []*CustomizedFieldDisplayItem) *UpdateTicketPathReqBodyBuilder {
	builder.customizedFields = customizedFields
	builder.customizedFieldsFlag = true
	return builder
}
func (builder *UpdateTicketPathReqBodyBuilder) TicketType(ticketType int) *UpdateTicketPathReqBodyBuilder {
	builder.ticketType = ticketType
	builder.ticketTypeFlag = true
	return builder
}
func (builder *UpdateTicketPathReqBodyBuilder) Solved(solved int) *UpdateTicketPathReqBodyBuilder {
	builder.solved = solved
	builder.solvedFlag = true
	return builder
}
func (builder *UpdateTicketPathReqBodyBuilder) Channel(channel int) *UpdateTicketPathReqBodyBuilder {
	builder.channel = channel
	builder.channelFlag = true
	return builder
}

func (builder *UpdateTicketPathReqBodyBuilder) Build() (*UpdateTicketReqBody, error) {
	req := &UpdateTicketReqBody{}
	if builder.statusFlag {
		req.Status = &builder.status
	}
	if builder.tagNamesFlag {
		req.TagNames = builder.tagNames
	}
	if builder.commentFlag {
		req.Comment = &builder.comment
	}
	if builder.customizedFieldsFlag {
		req.CustomizedFields = builder.customizedFields
	}
	if builder.ticketTypeFlag {
		req.TicketType = &builder.ticketType
	}
	if builder.solvedFlag {
		req.Solved = &builder.solved
	}
	if builder.channelFlag {
		req.Channel = &builder.channel
	}
	return req, nil
}

// 上传文件path结束

// 1.4 生成请求的builder结构体
type UpdateTicketReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *UpdateTicketReqBody
}

// 生成请求的New构造器
func NewUpdateTicketReqBuilder() *UpdateTicketReqBuilder {
	builder := &UpdateTicketReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *UpdateTicketReqBuilder) TicketId(ticketId string) *UpdateTicketReqBuilder {
	builder.apiReq.PathParams.Set("ticket_id", fmt.Sprint(ticketId))
	return builder
}
func (builder *UpdateTicketReqBuilder) Body(body *UpdateTicketReqBody) *UpdateTicketReqBuilder {
	builder.body = body
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *UpdateTicketReqBuilder) Build() *UpdateTicketReq {
	req := &UpdateTicketReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.body
	return req
}

type UpdateTicketReqBody struct {
	Status           *int                          `json:"status,omitempty"`
	TagNames         []string                      `json:"tag_names,omitempty"`
	Comment          *string                       `json:"comment,omitempty"`
	CustomizedFields []*CustomizedFieldDisplayItem `json:"customized_fields,omitempty"`
	TicketType       *int                          `json:"ticket_type,omitempty"`
	Solved           *int                          `json:"solved,omitempty"`
	Channel          *int                          `json:"channel,omitempty"`
}

type UpdateTicketReq struct {
	apiReq *larkcore.ApiReq
	Body   *UpdateTicketReqBody `body:""`
}

type UpdateTicketResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *UpdateTicketResp) Success() bool {
	return resp.Code == 0
}

type CreateTicketMessageReqBodyBuilder struct {
	msgType     string
	msgTypeFlag bool
	content     string
	contentFlag bool
}

// 生成body的New构造器
func NewCreateTicketMessageReqBodyBuilder() *CreateTicketMessageReqBodyBuilder {
	builder := &CreateTicketMessageReqBodyBuilder{}
	return builder
}

// 1.2 生成body的builder属性方法
func (builder *CreateTicketMessageReqBodyBuilder) MsgType(msgType string) *CreateTicketMessageReqBodyBuilder {
	builder.msgType = msgType
	builder.msgTypeFlag = true
	return builder
}
func (builder *CreateTicketMessageReqBodyBuilder) Content(content string) *CreateTicketMessageReqBodyBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}

// 1.3 生成body的build方法
func (builder *CreateTicketMessageReqBodyBuilder) Build() *CreateTicketMessageReqBody {
	req := &CreateTicketMessageReqBody{}
	if builder.msgTypeFlag {
		req.MsgType = &builder.msgType
	}
	if builder.contentFlag {
		req.Content = &builder.content
	}
	return req
}

// 上传文件path开始
type CreateTicketMessagePathReqBodyBuilder struct {
	msgType     string
	msgTypeFlag bool
	content     string
	contentFlag bool
}

func NewCreateTicketMessagePathReqBodyBuilder() *CreateTicketMessagePathReqBodyBuilder {
	builder := &CreateTicketMessagePathReqBodyBuilder{}
	return builder
}
func (builder *CreateTicketMessagePathReqBodyBuilder) MsgType(msgType string) *CreateTicketMessagePathReqBodyBuilder {
	builder.msgType = msgType
	builder.msgTypeFlag = true
	return builder
}
func (builder *CreateTicketMessagePathReqBodyBuilder) Content(content string) *CreateTicketMessagePathReqBodyBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}

func (builder *CreateTicketMessagePathReqBodyBuilder) Build() (*CreateTicketMessageReqBody, error) {
	req := &CreateTicketMessageReqBody{}
	if builder.msgTypeFlag {
		req.MsgType = &builder.msgType
	}
	if builder.contentFlag {
		req.Content = &builder.content
	}
	return req, nil
}

// 上传文件path结束

// 1.4 生成请求的builder结构体
type CreateTicketMessageReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *CreateTicketMessageReqBody
}

// 生成请求的New构造器
func NewCreateTicketMessageReqBuilder() *CreateTicketMessageReqBuilder {
	builder := &CreateTicketMessageReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *CreateTicketMessageReqBuilder) TicketId(ticketId string) *CreateTicketMessageReqBuilder {
	builder.apiReq.PathParams.Set("ticket_id", fmt.Sprint(ticketId))
	return builder
}
func (builder *CreateTicketMessageReqBuilder) Body(body *CreateTicketMessageReqBody) *CreateTicketMessageReqBuilder {
	builder.body = body
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *CreateTicketMessageReqBuilder) Build() *CreateTicketMessageReq {
	req := &CreateTicketMessageReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.body
	return req
}

type CreateTicketMessageReqBody struct {
	MsgType *string `json:"msg_type,omitempty"`
	Content *string `json:"content,omitempty"`
}

type CreateTicketMessageReq struct {
	apiReq *larkcore.ApiReq
	Body   *CreateTicketMessageReqBody `body:""`
}

type CreateTicketMessageRespData struct {
	MessageId *string `json:"message_id,omitempty"`
}

type CreateTicketMessageResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateTicketMessageRespData `json:"data"`
}

func (resp *CreateTicketMessageResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type ListTicketMessageReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewListTicketMessageReqBuilder() *ListTicketMessageReqBuilder {
	builder := &ListTicketMessageReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *ListTicketMessageReqBuilder) TicketId(ticketId string) *ListTicketMessageReqBuilder {
	builder.apiReq.PathParams.Set("ticket_id", fmt.Sprint(ticketId))
	return builder
}
func (builder *ListTicketMessageReqBuilder) TimeStart(timeStart int) *ListTicketMessageReqBuilder {
	builder.apiReq.QueryParams.Set("time_start", fmt.Sprint(timeStart))
	return builder
}
func (builder *ListTicketMessageReqBuilder) TimeEnd(timeEnd int) *ListTicketMessageReqBuilder {
	builder.apiReq.QueryParams.Set("time_end", fmt.Sprint(timeEnd))
	return builder
}
func (builder *ListTicketMessageReqBuilder) Page(page int) *ListTicketMessageReqBuilder {
	builder.apiReq.QueryParams.Set("page", fmt.Sprint(page))
	return builder
}
func (builder *ListTicketMessageReqBuilder) PageSize(pageSize int) *ListTicketMessageReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *ListTicketMessageReqBuilder) Build() *ListTicketMessageReq {
	req := &ListTicketMessageReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListTicketMessageReq struct {
	apiReq *larkcore.ApiReq
}

type ListTicketMessageRespData struct {
	Messages []*TicketMessage `json:"messages,omitempty"`
	Total    *int             `json:"total,omitempty"`
}

type ListTicketMessageResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListTicketMessageRespData `json:"data"`
}

func (resp *ListTicketMessageResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type CreateTicketCustomizedFieldReqBuilder struct {
	apiReq                *larkcore.ApiReq
	ticketCustomizedField *TicketCustomizedField
}

// 生成请求的New构造器
func NewCreateTicketCustomizedFieldReqBuilder() *CreateTicketCustomizedFieldReqBuilder {
	builder := &CreateTicketCustomizedFieldReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *CreateTicketCustomizedFieldReqBuilder) TicketCustomizedField(ticketCustomizedField *TicketCustomizedField) *CreateTicketCustomizedFieldReqBuilder {
	builder.ticketCustomizedField = ticketCustomizedField
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *CreateTicketCustomizedFieldReqBuilder) Build() *CreateTicketCustomizedFieldReq {
	req := &CreateTicketCustomizedFieldReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.Body = builder.ticketCustomizedField
	return req
}

type CreateTicketCustomizedFieldReq struct {
	apiReq                *larkcore.ApiReq
	TicketCustomizedField *TicketCustomizedField `body:""`
}

type CreateTicketCustomizedFieldResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *CreateTicketCustomizedFieldResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type DeleteTicketCustomizedFieldReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewDeleteTicketCustomizedFieldReqBuilder() *DeleteTicketCustomizedFieldReqBuilder {
	builder := &DeleteTicketCustomizedFieldReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *DeleteTicketCustomizedFieldReqBuilder) TicketCustomizedFieldId(ticketCustomizedFieldId string) *DeleteTicketCustomizedFieldReqBuilder {
	builder.apiReq.PathParams.Set("ticket_customized_field_id", fmt.Sprint(ticketCustomizedFieldId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *DeleteTicketCustomizedFieldReqBuilder) Build() *DeleteTicketCustomizedFieldReq {
	req := &DeleteTicketCustomizedFieldReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type DeleteTicketCustomizedFieldReq struct {
	apiReq *larkcore.ApiReq
}

type DeleteTicketCustomizedFieldResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *DeleteTicketCustomizedFieldResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type GetTicketCustomizedFieldReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewGetTicketCustomizedFieldReqBuilder() *GetTicketCustomizedFieldReqBuilder {
	builder := &GetTicketCustomizedFieldReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *GetTicketCustomizedFieldReqBuilder) TicketCustomizedFieldId(ticketCustomizedFieldId string) *GetTicketCustomizedFieldReqBuilder {
	builder.apiReq.PathParams.Set("ticket_customized_field_id", fmt.Sprint(ticketCustomizedFieldId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *GetTicketCustomizedFieldReqBuilder) Build() *GetTicketCustomizedFieldReq {
	req := &GetTicketCustomizedFieldReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type GetTicketCustomizedFieldReq struct {
	apiReq *larkcore.ApiReq
}

type GetTicketCustomizedFieldRespData struct {
	TicketCustomizedFieldId *string     `json:"ticket_customized_field_id,omitempty"`
	HelpdeskId              *string     `json:"helpdesk_id,omitempty"`
	KeyName                 *string     `json:"key_name,omitempty"`
	DisplayName             *string     `json:"display_name,omitempty"`
	Position                *string     `json:"position,omitempty"`
	FieldType               *string     `json:"field_type,omitempty"`
	Description             *string     `json:"description,omitempty"`
	Visible                 *bool       `json:"visible,omitempty"`
	Editable                *bool       `json:"editable,omitempty"`
	Required                *bool       `json:"required,omitempty"`
	CreatedAt               *string     `json:"created_at,omitempty"`
	UpdatedAt               *string     `json:"updated_at,omitempty"`
	CreatedBy               *TicketUser `json:"created_by,omitempty"`
	UpdatedBy               *TicketUser `json:"updated_by,omitempty"`
	DropdownAllowMultiple   *bool       `json:"dropdown_allow_multiple,omitempty"`
}

type GetTicketCustomizedFieldResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetTicketCustomizedFieldRespData `json:"data"`
}

func (resp *GetTicketCustomizedFieldResp) Success() bool {
	return resp.Code == 0
}

type ListTicketCustomizedFieldReqBodyBuilder struct {
	visible     bool
	visibleFlag bool
}

// 生成body的New构造器
func NewListTicketCustomizedFieldReqBodyBuilder() *ListTicketCustomizedFieldReqBodyBuilder {
	builder := &ListTicketCustomizedFieldReqBodyBuilder{}
	return builder
}

// 1.2 生成body的builder属性方法
func (builder *ListTicketCustomizedFieldReqBodyBuilder) Visible(visible bool) *ListTicketCustomizedFieldReqBodyBuilder {
	builder.visible = visible
	builder.visibleFlag = true
	return builder
}

// 1.3 生成body的build方法
func (builder *ListTicketCustomizedFieldReqBodyBuilder) Build() *ListTicketCustomizedFieldReqBody {
	req := &ListTicketCustomizedFieldReqBody{}
	if builder.visibleFlag {
		req.Visible = &builder.visible
	}
	return req
}

// 上传文件path开始
type ListTicketCustomizedFieldPathReqBodyBuilder struct {
	visible     bool
	visibleFlag bool
}

func NewListTicketCustomizedFieldPathReqBodyBuilder() *ListTicketCustomizedFieldPathReqBodyBuilder {
	builder := &ListTicketCustomizedFieldPathReqBodyBuilder{}
	return builder
}
func (builder *ListTicketCustomizedFieldPathReqBodyBuilder) Visible(visible bool) *ListTicketCustomizedFieldPathReqBodyBuilder {
	builder.visible = visible
	builder.visibleFlag = true
	return builder
}

func (builder *ListTicketCustomizedFieldPathReqBodyBuilder) Build() (*ListTicketCustomizedFieldReqBody, error) {
	req := &ListTicketCustomizedFieldReqBody{}
	if builder.visibleFlag {
		req.Visible = &builder.visible
	}
	return req, nil
}

// 上传文件path结束

// 1.4 生成请求的builder结构体
type ListTicketCustomizedFieldReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *ListTicketCustomizedFieldReqBody
}

// 生成请求的New构造器
func NewListTicketCustomizedFieldReqBuilder() *ListTicketCustomizedFieldReqBuilder {
	builder := &ListTicketCustomizedFieldReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *ListTicketCustomizedFieldReqBuilder) PageToken(pageToken string) *ListTicketCustomizedFieldReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}
func (builder *ListTicketCustomizedFieldReqBuilder) PageSize(pageSize int) *ListTicketCustomizedFieldReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}
func (builder *ListTicketCustomizedFieldReqBuilder) Body(body *ListTicketCustomizedFieldReqBody) *ListTicketCustomizedFieldReqBuilder {
	builder.body = body
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *ListTicketCustomizedFieldReqBuilder) Build() *ListTicketCustomizedFieldReq {
	req := &ListTicketCustomizedFieldReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.body
	return req
}

type ListTicketCustomizedFieldReqBody struct {
	Visible *bool `json:"visible,omitempty"`
}

type ListTicketCustomizedFieldReq struct {
	apiReq *larkcore.ApiReq
	Body   *ListTicketCustomizedFieldReqBody `body:""`
}

type ListTicketCustomizedFieldRespData struct {
	HasMore       *bool                    `json:"has_more,omitempty"`
	NextPageToken *string                  `json:"next_page_token,omitempty"`
	Items         []*TicketCustomizedField `json:"items,omitempty"`
}

type ListTicketCustomizedFieldResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListTicketCustomizedFieldRespData `json:"data"`
}

func (resp *ListTicketCustomizedFieldResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type PatchTicketCustomizedFieldReqBuilder struct {
	apiReq                *larkcore.ApiReq
	ticketCustomizedField *TicketCustomizedField
}

// 生成请求的New构造器
func NewPatchTicketCustomizedFieldReqBuilder() *PatchTicketCustomizedFieldReqBuilder {
	builder := &PatchTicketCustomizedFieldReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *PatchTicketCustomizedFieldReqBuilder) TicketCustomizedFieldId(ticketCustomizedFieldId string) *PatchTicketCustomizedFieldReqBuilder {
	builder.apiReq.PathParams.Set("ticket_customized_field_id", fmt.Sprint(ticketCustomizedFieldId))
	return builder
}
func (builder *PatchTicketCustomizedFieldReqBuilder) TicketCustomizedField(ticketCustomizedField *TicketCustomizedField) *PatchTicketCustomizedFieldReqBuilder {
	builder.ticketCustomizedField = ticketCustomizedField
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *PatchTicketCustomizedFieldReqBuilder) Build() *PatchTicketCustomizedFieldReq {
	req := &PatchTicketCustomizedFieldReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.ticketCustomizedField
	return req
}

type PatchTicketCustomizedFieldReq struct {
	apiReq                *larkcore.ApiReq
	TicketCustomizedField *TicketCustomizedField `body:""`
}

type PatchTicketCustomizedFieldResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *PatchTicketCustomizedFieldResp) Success() bool {
	return resp.Code == 0
}

// 生成消息事件结构体

type P2NotificationApproveV1Data struct {
	NotificationId *string `json:"notification_id,omitempty"`
	HelpdeskId     *string `json:"helpdesk_id,omitempty"`
	ApproveStatus  *string `json:"approve_status,omitempty"`
}

type P2NotificationApproveV1 struct {
	*larkevent.EventV2Base
	*larkevent.EventReq
	Event *P2NotificationApproveV1Data `json:"event"`
}

func (m *P2NotificationApproveV1) RawReq(req *larkevent.EventReq) {
	m.EventReq = req
}

type P2TicketCreatedV1Data struct {
	TicketId         *string                       `json:"ticket_id,omitempty"`
	HelpdeskId       *string                       `json:"helpdesk_id,omitempty"`
	Guest            *TicketUserEvent              `json:"guest,omitempty"`
	Stage            *int                          `json:"stage,omitempty"`
	Status           *int                          `json:"status,omitempty"`
	Score            *int                          `json:"score,omitempty"`
	CreatedAt        *int                          `json:"created_at,omitempty"`
	UpdatedAt        *int                          `json:"updated_at,omitempty"`
	ClosedAt         *int                          `json:"closed_at,omitempty"`
	Channel          *int                          `json:"channel,omitempty"`
	Solve            *int                          `json:"solve,omitempty"`
	CustomizedFields []*CustomizedFieldDisplayItem `json:"customized_fields,omitempty"`
	ChatId           *string                       `json:"chat_id,omitempty"`
}

type P2TicketCreatedV1 struct {
	*larkevent.EventV2Base
	*larkevent.EventReq
	Event *P2TicketCreatedV1Data `json:"event"`
}

func (m *P2TicketCreatedV1) RawReq(req *larkevent.EventReq) {
	m.EventReq = req
}

type P2TicketUpdatedV1Data struct {
	Object    *TicketEvent           `json:"object,omitempty"`
	OldObject *TicketEventUpdateInfo `json:"old_object,omitempty"`
}

type P2TicketUpdatedV1 struct {
	*larkevent.EventV2Base
	*larkevent.EventReq
	Event *P2TicketUpdatedV1Data `json:"event"`
}

func (m *P2TicketUpdatedV1) RawReq(req *larkevent.EventReq) {
	m.EventReq = req
}

// 生成请求的builder构造器
// 1.1 生成body的builder结构体
type ListFaqIterator struct {
	nextPageToken *string
	items         []*Faq
	index         int
	limit         int
	ctx           context.Context
	req           *ListFaqReq
	listFunc      func(ctx context.Context, req *ListFaqReq, options ...larkcore.RequestOptionFunc) (*ListFaqResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *ListFaqIterator) Next() (bool, *Faq, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListFaqIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

type SearchFaqIterator struct {
	nextPageToken *string
	items         []*Faq
	index         int
	limit         int
	ctx           context.Context
	req           *SearchFaqReq
	listFunc      func(ctx context.Context, req *SearchFaqReq, options ...larkcore.RequestOptionFunc) (*SearchFaqResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *SearchFaqIterator) Next() (bool, *Faq, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *SearchFaqIterator) NextPageToken() *string {
	return iterator.nextPageToken
}
