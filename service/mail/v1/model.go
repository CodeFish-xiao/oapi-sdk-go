// Package mail code generated by oapi sdk gen
package larkmail

import (
	"fmt"

	"context"
	"errors"

	"github.com/larksuite/oapi-sdk-go/v3/core"
)

// 生成枚举值

const (
	WhoCanSendMailANYONE           = "ANYONE"
	WhoCanSendMailALLINTERNALUSERS = "ALL_INTERNAL_USERS"
	WhoCanSendMailALLGROUPMEMBERS  = "ALL_GROUP_MEMBERS"
	WhoCanSendMailCUSTOMMEMBERS    = "CUSTOM_MEMBERS"
)

const (
	UserIdTypeUserId  = "user_id"
	UserIdTypeUnionId = "union_id"
	UserIdTypeOpenId  = "open_id"
)

const (
	TypeUSER          = "USER"
	TypeDEPARTMENT    = "DEPARTMENT"
	TypeCOMPANY       = "COMPANY"
	TypeEXTERNALUSER  = "EXTERNAL_USER"
	TypeMAILGROUP     = "MAIL_GROUP"
	TypePUBLICMAILBOX = "PUBLIC_MAILBOX"
	TypeOTHERMEMBER   = "OTHER_MEMBER"
)

const (
	DepartmentIdTypeDepartmentId     = "department_id"
	DepartmentIdTypeOpenDepartmentId = "open_department_id"
)

// 生成数据类型

type EmailAlias struct {
	PrimaryEmail *string `json:"primary_email,omitempty"`
	EmailAlias   *string `json:"email_alias,omitempty"`
}

// builder开始
type EmailAliasBuilder struct {
	primaryEmail     string
	primaryEmailFlag bool
	emailAlias       string
	emailAliasFlag   bool
}

func NewEmailAliasBuilder() *EmailAliasBuilder {
	builder := &EmailAliasBuilder{}
	return builder
}

func (builder *EmailAliasBuilder) PrimaryEmail(primaryEmail string) *EmailAliasBuilder {
	builder.primaryEmail = primaryEmail
	builder.primaryEmailFlag = true
	return builder
}
func (builder *EmailAliasBuilder) EmailAlias(emailAlias string) *EmailAliasBuilder {
	builder.emailAlias = emailAlias
	builder.emailAliasFlag = true
	return builder
}

func (builder *EmailAliasBuilder) Build() *EmailAlias {
	req := &EmailAlias{}
	if builder.primaryEmailFlag {
		req.PrimaryEmail = &builder.primaryEmail

	}
	if builder.emailAliasFlag {
		req.EmailAlias = &builder.emailAlias

	}
	return req
}

// builder结束

type Mailgroup struct {
	MailgroupId             *string `json:"mailgroup_id,omitempty"`
	Email                   *string `json:"email,omitempty"`
	Name                    *string `json:"name,omitempty"`
	Description             *string `json:"description,omitempty"`
	DirectMembersCount      *string `json:"direct_members_count,omitempty"`
	IncludeExternalMember   *bool   `json:"include_external_member,omitempty"`
	IncludeAllCompanyMember *bool   `json:"include_all_company_member,omitempty"`
	WhoCanSendMail          *string `json:"who_can_send_mail,omitempty"`
}

// builder开始
type MailgroupBuilder struct {
	mailgroupId                 string
	mailgroupIdFlag             bool
	email                       string
	emailFlag                   bool
	name                        string
	nameFlag                    bool
	description                 string
	descriptionFlag             bool
	directMembersCount          string
	directMembersCountFlag      bool
	includeExternalMember       bool
	includeExternalMemberFlag   bool
	includeAllCompanyMember     bool
	includeAllCompanyMemberFlag bool
	whoCanSendMail              string
	whoCanSendMailFlag          bool
}

func NewMailgroupBuilder() *MailgroupBuilder {
	builder := &MailgroupBuilder{}
	return builder
}

func (builder *MailgroupBuilder) MailgroupId(mailgroupId string) *MailgroupBuilder {
	builder.mailgroupId = mailgroupId
	builder.mailgroupIdFlag = true
	return builder
}
func (builder *MailgroupBuilder) Email(email string) *MailgroupBuilder {
	builder.email = email
	builder.emailFlag = true
	return builder
}
func (builder *MailgroupBuilder) Name(name string) *MailgroupBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *MailgroupBuilder) Description(description string) *MailgroupBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}
func (builder *MailgroupBuilder) DirectMembersCount(directMembersCount string) *MailgroupBuilder {
	builder.directMembersCount = directMembersCount
	builder.directMembersCountFlag = true
	return builder
}
func (builder *MailgroupBuilder) IncludeExternalMember(includeExternalMember bool) *MailgroupBuilder {
	builder.includeExternalMember = includeExternalMember
	builder.includeExternalMemberFlag = true
	return builder
}
func (builder *MailgroupBuilder) IncludeAllCompanyMember(includeAllCompanyMember bool) *MailgroupBuilder {
	builder.includeAllCompanyMember = includeAllCompanyMember
	builder.includeAllCompanyMemberFlag = true
	return builder
}
func (builder *MailgroupBuilder) WhoCanSendMail(whoCanSendMail string) *MailgroupBuilder {
	builder.whoCanSendMail = whoCanSendMail
	builder.whoCanSendMailFlag = true
	return builder
}

func (builder *MailgroupBuilder) Build() *Mailgroup {
	req := &Mailgroup{}
	if builder.mailgroupIdFlag {
		req.MailgroupId = &builder.mailgroupId

	}
	if builder.emailFlag {
		req.Email = &builder.email

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	if builder.directMembersCountFlag {
		req.DirectMembersCount = &builder.directMembersCount

	}
	if builder.includeExternalMemberFlag {
		req.IncludeExternalMember = &builder.includeExternalMember

	}
	if builder.includeAllCompanyMemberFlag {
		req.IncludeAllCompanyMember = &builder.includeAllCompanyMember

	}
	if builder.whoCanSendMailFlag {
		req.WhoCanSendMail = &builder.whoCanSendMail

	}
	return req
}

// builder结束

type MailgroupMember struct {
	MemberId     *string `json:"member_id,omitempty"`
	Email        *string `json:"email,omitempty"`
	UserId       *string `json:"user_id,omitempty"`
	DepartmentId *string `json:"department_id,omitempty"`
	Type         *string `json:"type,omitempty"`
}

// builder开始
type MailgroupMemberBuilder struct {
	memberId         string
	memberIdFlag     bool
	email            string
	emailFlag        bool
	userId           string
	userIdFlag       bool
	departmentId     string
	departmentIdFlag bool
	type_            string
	typeFlag         bool
}

func NewMailgroupMemberBuilder() *MailgroupMemberBuilder {
	builder := &MailgroupMemberBuilder{}
	return builder
}

func (builder *MailgroupMemberBuilder) MemberId(memberId string) *MailgroupMemberBuilder {
	builder.memberId = memberId
	builder.memberIdFlag = true
	return builder
}
func (builder *MailgroupMemberBuilder) Email(email string) *MailgroupMemberBuilder {
	builder.email = email
	builder.emailFlag = true
	return builder
}
func (builder *MailgroupMemberBuilder) UserId(userId string) *MailgroupMemberBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}
func (builder *MailgroupMemberBuilder) DepartmentId(departmentId string) *MailgroupMemberBuilder {
	builder.departmentId = departmentId
	builder.departmentIdFlag = true
	return builder
}
func (builder *MailgroupMemberBuilder) Type(type_ string) *MailgroupMemberBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}

func (builder *MailgroupMemberBuilder) Build() *MailgroupMember {
	req := &MailgroupMember{}
	if builder.memberIdFlag {
		req.MemberId = &builder.memberId

	}
	if builder.emailFlag {
		req.Email = &builder.email

	}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.departmentIdFlag {
		req.DepartmentId = &builder.departmentId

	}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	return req
}

// builder结束

type MailgroupPermissionMember struct {
	PermissionMemberId *string `json:"permission_member_id,omitempty"`
	UserId             *string `json:"user_id,omitempty"`
	DepartmentId       *string `json:"department_id,omitempty"`
	Type               *string `json:"type,omitempty"`
}

// builder开始
type MailgroupPermissionMemberBuilder struct {
	permissionMemberId     string
	permissionMemberIdFlag bool
	userId                 string
	userIdFlag             bool
	departmentId           string
	departmentIdFlag       bool
	type_                  string
	typeFlag               bool
}

func NewMailgroupPermissionMemberBuilder() *MailgroupPermissionMemberBuilder {
	builder := &MailgroupPermissionMemberBuilder{}
	return builder
}

func (builder *MailgroupPermissionMemberBuilder) PermissionMemberId(permissionMemberId string) *MailgroupPermissionMemberBuilder {
	builder.permissionMemberId = permissionMemberId
	builder.permissionMemberIdFlag = true
	return builder
}
func (builder *MailgroupPermissionMemberBuilder) UserId(userId string) *MailgroupPermissionMemberBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}
func (builder *MailgroupPermissionMemberBuilder) DepartmentId(departmentId string) *MailgroupPermissionMemberBuilder {
	builder.departmentId = departmentId
	builder.departmentIdFlag = true
	return builder
}
func (builder *MailgroupPermissionMemberBuilder) Type(type_ string) *MailgroupPermissionMemberBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}

func (builder *MailgroupPermissionMemberBuilder) Build() *MailgroupPermissionMember {
	req := &MailgroupPermissionMember{}
	if builder.permissionMemberIdFlag {
		req.PermissionMemberId = &builder.permissionMemberId

	}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.departmentIdFlag {
		req.DepartmentId = &builder.departmentId

	}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	return req
}

// builder结束

type Message struct {
	Raw *string `json:"raw,omitempty"`
}

// builder开始
type MessageBuilder struct {
	raw     string
	rawFlag bool
}

func NewMessageBuilder() *MessageBuilder {
	builder := &MessageBuilder{}
	return builder
}

func (builder *MessageBuilder) Raw(raw string) *MessageBuilder {
	builder.raw = raw
	builder.rawFlag = true
	return builder
}

func (builder *MessageBuilder) Build() *Message {
	req := &Message{}
	if builder.rawFlag {
		req.Raw = &builder.raw

	}
	return req
}

// builder结束

type PublicMailbox struct {
	PublicMailboxId *string `json:"public_mailbox_id,omitempty"`
	Email           *string `json:"email,omitempty"`
	Name            *string `json:"name,omitempty"`
}

// builder开始
type PublicMailboxBuilder struct {
	publicMailboxId     string
	publicMailboxIdFlag bool
	email               string
	emailFlag           bool
	name                string
	nameFlag            bool
}

func NewPublicMailboxBuilder() *PublicMailboxBuilder {
	builder := &PublicMailboxBuilder{}
	return builder
}

func (builder *PublicMailboxBuilder) PublicMailboxId(publicMailboxId string) *PublicMailboxBuilder {
	builder.publicMailboxId = publicMailboxId
	builder.publicMailboxIdFlag = true
	return builder
}
func (builder *PublicMailboxBuilder) Email(email string) *PublicMailboxBuilder {
	builder.email = email
	builder.emailFlag = true
	return builder
}
func (builder *PublicMailboxBuilder) Name(name string) *PublicMailboxBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *PublicMailboxBuilder) Build() *PublicMailbox {
	req := &PublicMailbox{}
	if builder.publicMailboxIdFlag {
		req.PublicMailboxId = &builder.publicMailboxId

	}
	if builder.emailFlag {
		req.Email = &builder.email

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	return req
}

// builder结束

type PublicMailboxMember struct {
	MemberId *string `json:"member_id,omitempty"`
	UserId   *string `json:"user_id,omitempty"`
	Type     *string `json:"type,omitempty"`
}

// builder开始
type PublicMailboxMemberBuilder struct {
	memberId     string
	memberIdFlag bool
	userId       string
	userIdFlag   bool
	type_        string
	typeFlag     bool
}

func NewPublicMailboxMemberBuilder() *PublicMailboxMemberBuilder {
	builder := &PublicMailboxMemberBuilder{}
	return builder
}

func (builder *PublicMailboxMemberBuilder) MemberId(memberId string) *PublicMailboxMemberBuilder {
	builder.memberId = memberId
	builder.memberIdFlag = true
	return builder
}
func (builder *PublicMailboxMemberBuilder) UserId(userId string) *PublicMailboxMemberBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}
func (builder *PublicMailboxMemberBuilder) Type(type_ string) *PublicMailboxMemberBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}

func (builder *PublicMailboxMemberBuilder) Build() *PublicMailboxMember {
	req := &PublicMailboxMember{}
	if builder.memberIdFlag {
		req.MemberId = &builder.memberId

	}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	return req
}

// builder结束

type User struct {
	Email  *string `json:"email,omitempty"`
	Status *int    `json:"status,omitempty"`
	Type   *int    `json:"type,omitempty"`
}

// builder开始
type UserBuilder struct {
	email      string
	emailFlag  bool
	status     int
	statusFlag bool
	type_      int
	typeFlag   bool
}

func NewUserBuilder() *UserBuilder {
	builder := &UserBuilder{}
	return builder
}

func (builder *UserBuilder) Email(email string) *UserBuilder {
	builder.email = email
	builder.emailFlag = true
	return builder
}
func (builder *UserBuilder) Status(status int) *UserBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}
func (builder *UserBuilder) Type(type_ int) *UserBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}

func (builder *UserBuilder) Build() *User {
	req := &User{}
	if builder.emailFlag {
		req.Email = &builder.email

	}
	if builder.statusFlag {
		req.Status = &builder.status

	}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	return req
}

// builder结束

// 生成请求和响应结果类型，以及请求对象的Builder构造器

// 1.4 生成请求的builder结构体
type CreateMailgroupReqBuilder struct {
	httpReq   *larkcore.HttpReq
	mailgroup *Mailgroup
}

// 生成请求的New构造器
func NewCreateMailgroupReqBuilder() *CreateMailgroupReqBuilder {
	builder := &CreateMailgroupReqBuilder{}
	builder.httpReq = &larkcore.HttpReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *CreateMailgroupReqBuilder) Mailgroup(mailgroup *Mailgroup) *CreateMailgroupReqBuilder {
	builder.mailgroup = mailgroup
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *CreateMailgroupReqBuilder) Build() *CreateMailgroupReq {
	req := &CreateMailgroupReq{}
	req.httpReq = &larkcore.HttpReq{}
	req.httpReq.Body = builder.mailgroup
	return req
}

type CreateMailgroupReq struct {
	httpReq   *larkcore.HttpReq
	Mailgroup *Mailgroup `body:""`
}

type CreateMailgroupRespData struct {
	MailgroupId             *string `json:"mailgroup_id,omitempty"`
	Email                   *string `json:"email,omitempty"`
	Name                    *string `json:"name,omitempty"`
	Description             *string `json:"description,omitempty"`
	DirectMembersCount      *string `json:"direct_members_count,omitempty"`
	IncludeExternalMember   *bool   `json:"include_external_member,omitempty"`
	IncludeAllCompanyMember *bool   `json:"include_all_company_member,omitempty"`
	WhoCanSendMail          *string `json:"who_can_send_mail,omitempty"`
}

type CreateMailgroupResp struct {
	*larkcore.RawResponse `json:"-"`
	larkcore.CodeError
	Data *CreateMailgroupRespData `json:"data"`
}

func (resp *CreateMailgroupResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type DeleteMailgroupReqBuilder struct {
	httpReq *larkcore.HttpReq
}

// 生成请求的New构造器
func NewDeleteMailgroupReqBuilder() *DeleteMailgroupReqBuilder {
	builder := &DeleteMailgroupReqBuilder{}
	builder.httpReq = &larkcore.HttpReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *DeleteMailgroupReqBuilder) MailgroupId(mailgroupId string) *DeleteMailgroupReqBuilder {
	builder.httpReq.PathParams.Set("mailgroup_id", fmt.Sprint(mailgroupId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *DeleteMailgroupReqBuilder) Build() *DeleteMailgroupReq {
	req := &DeleteMailgroupReq{}
	req.httpReq = &larkcore.HttpReq{}
	req.httpReq.PathParams = builder.httpReq.PathParams
	return req
}

type DeleteMailgroupReq struct {
	httpReq *larkcore.HttpReq
}

type DeleteMailgroupResp struct {
	*larkcore.RawResponse `json:"-"`
	larkcore.CodeError
}

func (resp *DeleteMailgroupResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type GetMailgroupReqBuilder struct {
	httpReq *larkcore.HttpReq
}

// 生成请求的New构造器
func NewGetMailgroupReqBuilder() *GetMailgroupReqBuilder {
	builder := &GetMailgroupReqBuilder{}
	builder.httpReq = &larkcore.HttpReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *GetMailgroupReqBuilder) MailgroupId(mailgroupId string) *GetMailgroupReqBuilder {
	builder.httpReq.PathParams.Set("mailgroup_id", fmt.Sprint(mailgroupId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *GetMailgroupReqBuilder) Build() *GetMailgroupReq {
	req := &GetMailgroupReq{}
	req.httpReq = &larkcore.HttpReq{}
	req.httpReq.PathParams = builder.httpReq.PathParams
	return req
}

type GetMailgroupReq struct {
	httpReq *larkcore.HttpReq
}

type GetMailgroupRespData struct {
	MailgroupId             *string `json:"mailgroup_id,omitempty"`
	Email                   *string `json:"email,omitempty"`
	Name                    *string `json:"name,omitempty"`
	Description             *string `json:"description,omitempty"`
	DirectMembersCount      *string `json:"direct_members_count,omitempty"`
	IncludeExternalMember   *bool   `json:"include_external_member,omitempty"`
	IncludeAllCompanyMember *bool   `json:"include_all_company_member,omitempty"`
	WhoCanSendMail          *string `json:"who_can_send_mail,omitempty"`
}

type GetMailgroupResp struct {
	*larkcore.RawResponse `json:"-"`
	larkcore.CodeError
	Data *GetMailgroupRespData `json:"data"`
}

func (resp *GetMailgroupResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type ListMailgroupReqBuilder struct {
	httpReq *larkcore.HttpReq
	limit   int
}

// 生成请求的New构造器
func NewListMailgroupReqBuilder() *ListMailgroupReqBuilder {
	builder := &ListMailgroupReqBuilder{}
	builder.httpReq = &larkcore.HttpReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *ListMailgroupReqBuilder) Limit(limit int) *ListMailgroupReqBuilder {
	builder.limit = limit
	return builder
}
func (builder *ListMailgroupReqBuilder) ManagerUserId(managerUserId string) *ListMailgroupReqBuilder {
	builder.httpReq.QueryParams.Set("manager_user_id", fmt.Sprint(managerUserId))
	return builder
}
func (builder *ListMailgroupReqBuilder) UserIdType(userIdType string) *ListMailgroupReqBuilder {
	builder.httpReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}
func (builder *ListMailgroupReqBuilder) PageToken(pageToken string) *ListMailgroupReqBuilder {
	builder.httpReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}
func (builder *ListMailgroupReqBuilder) PageSize(pageSize int) *ListMailgroupReqBuilder {
	builder.httpReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *ListMailgroupReqBuilder) Build() *ListMailgroupReq {
	req := &ListMailgroupReq{}
	req.httpReq = &larkcore.HttpReq{}
	req.Limit = builder.limit
	req.httpReq.QueryParams = builder.httpReq.QueryParams
	return req
}

type ListMailgroupReq struct {
	httpReq *larkcore.HttpReq
	Limit   int
}

type ListMailgroupRespData struct {
	HasMore   *bool        `json:"has_more,omitempty"`
	PageToken *string      `json:"page_token,omitempty"`
	Items     []*Mailgroup `json:"items,omitempty"`
}

type ListMailgroupResp struct {
	*larkcore.RawResponse `json:"-"`
	larkcore.CodeError
	Data *ListMailgroupRespData `json:"data"`
}

func (resp *ListMailgroupResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type PatchMailgroupReqBuilder struct {
	httpReq   *larkcore.HttpReq
	mailgroup *Mailgroup
}

// 生成请求的New构造器
func NewPatchMailgroupReqBuilder() *PatchMailgroupReqBuilder {
	builder := &PatchMailgroupReqBuilder{}
	builder.httpReq = &larkcore.HttpReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *PatchMailgroupReqBuilder) MailgroupId(mailgroupId string) *PatchMailgroupReqBuilder {
	builder.httpReq.PathParams.Set("mailgroup_id", fmt.Sprint(mailgroupId))
	return builder
}
func (builder *PatchMailgroupReqBuilder) Mailgroup(mailgroup *Mailgroup) *PatchMailgroupReqBuilder {
	builder.mailgroup = mailgroup
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *PatchMailgroupReqBuilder) Build() *PatchMailgroupReq {
	req := &PatchMailgroupReq{}
	req.httpReq = &larkcore.HttpReq{}
	req.httpReq.PathParams = builder.httpReq.PathParams
	req.httpReq.Body = builder.mailgroup
	return req
}

type PatchMailgroupReq struct {
	httpReq   *larkcore.HttpReq
	Mailgroup *Mailgroup `body:""`
}

type PatchMailgroupRespData struct {
	MailgroupId             *string `json:"mailgroup_id,omitempty"`
	Email                   *string `json:"email,omitempty"`
	Name                    *string `json:"name,omitempty"`
	Description             *string `json:"description,omitempty"`
	DirectMembersCount      *string `json:"direct_members_count,omitempty"`
	IncludeExternalMember   *bool   `json:"include_external_member,omitempty"`
	IncludeAllCompanyMember *bool   `json:"include_all_company_member,omitempty"`
	WhoCanSendMail          *string `json:"who_can_send_mail,omitempty"`
}

type PatchMailgroupResp struct {
	*larkcore.RawResponse `json:"-"`
	larkcore.CodeError
	Data *PatchMailgroupRespData `json:"data"`
}

func (resp *PatchMailgroupResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type UpdateMailgroupReqBuilder struct {
	httpReq   *larkcore.HttpReq
	mailgroup *Mailgroup
}

// 生成请求的New构造器
func NewUpdateMailgroupReqBuilder() *UpdateMailgroupReqBuilder {
	builder := &UpdateMailgroupReqBuilder{}
	builder.httpReq = &larkcore.HttpReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *UpdateMailgroupReqBuilder) MailgroupId(mailgroupId string) *UpdateMailgroupReqBuilder {
	builder.httpReq.PathParams.Set("mailgroup_id", fmt.Sprint(mailgroupId))
	return builder
}
func (builder *UpdateMailgroupReqBuilder) Mailgroup(mailgroup *Mailgroup) *UpdateMailgroupReqBuilder {
	builder.mailgroup = mailgroup
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *UpdateMailgroupReqBuilder) Build() *UpdateMailgroupReq {
	req := &UpdateMailgroupReq{}
	req.httpReq = &larkcore.HttpReq{}
	req.httpReq.PathParams = builder.httpReq.PathParams
	req.httpReq.Body = builder.mailgroup
	return req
}

type UpdateMailgroupReq struct {
	httpReq   *larkcore.HttpReq
	Mailgroup *Mailgroup `body:""`
}

type UpdateMailgroupRespData struct {
	MailgroupId             *string `json:"mailgroup_id,omitempty"`
	Email                   *string `json:"email,omitempty"`
	Name                    *string `json:"name,omitempty"`
	Description             *string `json:"description,omitempty"`
	DirectMembersCount      *string `json:"direct_members_count,omitempty"`
	IncludeExternalMember   *bool   `json:"include_external_member,omitempty"`
	IncludeAllCompanyMember *bool   `json:"include_all_company_member,omitempty"`
	WhoCanSendMail          *string `json:"who_can_send_mail,omitempty"`
}

type UpdateMailgroupResp struct {
	*larkcore.RawResponse `json:"-"`
	larkcore.CodeError
	Data *UpdateMailgroupRespData `json:"data"`
}

func (resp *UpdateMailgroupResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type CreateMailgroupAliasReqBuilder struct {
	httpReq    *larkcore.HttpReq
	emailAlias *EmailAlias
}

// 生成请求的New构造器
func NewCreateMailgroupAliasReqBuilder() *CreateMailgroupAliasReqBuilder {
	builder := &CreateMailgroupAliasReqBuilder{}
	builder.httpReq = &larkcore.HttpReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *CreateMailgroupAliasReqBuilder) MailgroupId(mailgroupId string) *CreateMailgroupAliasReqBuilder {
	builder.httpReq.PathParams.Set("mailgroup_id", fmt.Sprint(mailgroupId))
	return builder
}
func (builder *CreateMailgroupAliasReqBuilder) EmailAlias(emailAlias *EmailAlias) *CreateMailgroupAliasReqBuilder {
	builder.emailAlias = emailAlias
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *CreateMailgroupAliasReqBuilder) Build() *CreateMailgroupAliasReq {
	req := &CreateMailgroupAliasReq{}
	req.httpReq = &larkcore.HttpReq{}
	req.httpReq.PathParams = builder.httpReq.PathParams
	req.httpReq.Body = builder.emailAlias
	return req
}

type CreateMailgroupAliasReq struct {
	httpReq    *larkcore.HttpReq
	EmailAlias *EmailAlias `body:""`
}

type CreateMailgroupAliasRespData struct {
	MailgroupAlias *EmailAlias `json:"mailgroup_alias,omitempty"`
}

type CreateMailgroupAliasResp struct {
	*larkcore.RawResponse `json:"-"`
	larkcore.CodeError
	Data *CreateMailgroupAliasRespData `json:"data"`
}

func (resp *CreateMailgroupAliasResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type DeleteMailgroupAliasReqBuilder struct {
	httpReq *larkcore.HttpReq
}

// 生成请求的New构造器
func NewDeleteMailgroupAliasReqBuilder() *DeleteMailgroupAliasReqBuilder {
	builder := &DeleteMailgroupAliasReqBuilder{}
	builder.httpReq = &larkcore.HttpReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *DeleteMailgroupAliasReqBuilder) MailgroupId(mailgroupId string) *DeleteMailgroupAliasReqBuilder {
	builder.httpReq.PathParams.Set("mailgroup_id", fmt.Sprint(mailgroupId))
	return builder
}
func (builder *DeleteMailgroupAliasReqBuilder) AliasId(aliasId string) *DeleteMailgroupAliasReqBuilder {
	builder.httpReq.PathParams.Set("alias_id", fmt.Sprint(aliasId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *DeleteMailgroupAliasReqBuilder) Build() *DeleteMailgroupAliasReq {
	req := &DeleteMailgroupAliasReq{}
	req.httpReq = &larkcore.HttpReq{}
	req.httpReq.PathParams = builder.httpReq.PathParams
	return req
}

type DeleteMailgroupAliasReq struct {
	httpReq *larkcore.HttpReq
}

type DeleteMailgroupAliasResp struct {
	*larkcore.RawResponse `json:"-"`
	larkcore.CodeError
}

func (resp *DeleteMailgroupAliasResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type ListMailgroupAliasReqBuilder struct {
	httpReq *larkcore.HttpReq
}

// 生成请求的New构造器
func NewListMailgroupAliasReqBuilder() *ListMailgroupAliasReqBuilder {
	builder := &ListMailgroupAliasReqBuilder{}
	builder.httpReq = &larkcore.HttpReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *ListMailgroupAliasReqBuilder) MailgroupId(mailgroupId string) *ListMailgroupAliasReqBuilder {
	builder.httpReq.PathParams.Set("mailgroup_id", fmt.Sprint(mailgroupId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *ListMailgroupAliasReqBuilder) Build() *ListMailgroupAliasReq {
	req := &ListMailgroupAliasReq{}
	req.httpReq = &larkcore.HttpReq{}
	req.httpReq.PathParams = builder.httpReq.PathParams
	return req
}

type ListMailgroupAliasReq struct {
	httpReq *larkcore.HttpReq
}

type ListMailgroupAliasRespData struct {
	Items []*EmailAlias `json:"items,omitempty"`
}

type ListMailgroupAliasResp struct {
	*larkcore.RawResponse `json:"-"`
	larkcore.CodeError
	Data *ListMailgroupAliasRespData `json:"data"`
}

func (resp *ListMailgroupAliasResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type CreateMailgroupMemberReqBuilder struct {
	httpReq         *larkcore.HttpReq
	mailgroupMember *MailgroupMember
}

// 生成请求的New构造器
func NewCreateMailgroupMemberReqBuilder() *CreateMailgroupMemberReqBuilder {
	builder := &CreateMailgroupMemberReqBuilder{}
	builder.httpReq = &larkcore.HttpReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *CreateMailgroupMemberReqBuilder) MailgroupId(mailgroupId string) *CreateMailgroupMemberReqBuilder {
	builder.httpReq.PathParams.Set("mailgroup_id", fmt.Sprint(mailgroupId))
	return builder
}
func (builder *CreateMailgroupMemberReqBuilder) UserIdType(userIdType string) *CreateMailgroupMemberReqBuilder {
	builder.httpReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}
func (builder *CreateMailgroupMemberReqBuilder) DepartmentIdType(departmentIdType string) *CreateMailgroupMemberReqBuilder {
	builder.httpReq.QueryParams.Set("department_id_type", fmt.Sprint(departmentIdType))
	return builder
}
func (builder *CreateMailgroupMemberReqBuilder) MailgroupMember(mailgroupMember *MailgroupMember) *CreateMailgroupMemberReqBuilder {
	builder.mailgroupMember = mailgroupMember
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *CreateMailgroupMemberReqBuilder) Build() *CreateMailgroupMemberReq {
	req := &CreateMailgroupMemberReq{}
	req.httpReq = &larkcore.HttpReq{}
	req.httpReq.PathParams = builder.httpReq.PathParams
	req.httpReq.QueryParams = builder.httpReq.QueryParams
	req.httpReq.Body = builder.mailgroupMember
	return req
}

type CreateMailgroupMemberReq struct {
	httpReq         *larkcore.HttpReq
	MailgroupMember *MailgroupMember `body:""`
}

type CreateMailgroupMemberRespData struct {
	MemberId     *string `json:"member_id,omitempty"`
	Email        *string `json:"email,omitempty"`
	UserId       *string `json:"user_id,omitempty"`
	DepartmentId *string `json:"department_id,omitempty"`
	Type         *string `json:"type,omitempty"`
}

type CreateMailgroupMemberResp struct {
	*larkcore.RawResponse `json:"-"`
	larkcore.CodeError
	Data *CreateMailgroupMemberRespData `json:"data"`
}

func (resp *CreateMailgroupMemberResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type DeleteMailgroupMemberReqBuilder struct {
	httpReq *larkcore.HttpReq
}

// 生成请求的New构造器
func NewDeleteMailgroupMemberReqBuilder() *DeleteMailgroupMemberReqBuilder {
	builder := &DeleteMailgroupMemberReqBuilder{}
	builder.httpReq = &larkcore.HttpReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *DeleteMailgroupMemberReqBuilder) MailgroupId(mailgroupId string) *DeleteMailgroupMemberReqBuilder {
	builder.httpReq.PathParams.Set("mailgroup_id", fmt.Sprint(mailgroupId))
	return builder
}
func (builder *DeleteMailgroupMemberReqBuilder) MemberId(memberId string) *DeleteMailgroupMemberReqBuilder {
	builder.httpReq.PathParams.Set("member_id", fmt.Sprint(memberId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *DeleteMailgroupMemberReqBuilder) Build() *DeleteMailgroupMemberReq {
	req := &DeleteMailgroupMemberReq{}
	req.httpReq = &larkcore.HttpReq{}
	req.httpReq.PathParams = builder.httpReq.PathParams
	return req
}

type DeleteMailgroupMemberReq struct {
	httpReq *larkcore.HttpReq
}

type DeleteMailgroupMemberResp struct {
	*larkcore.RawResponse `json:"-"`
	larkcore.CodeError
}

func (resp *DeleteMailgroupMemberResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type GetMailgroupMemberReqBuilder struct {
	httpReq *larkcore.HttpReq
}

// 生成请求的New构造器
func NewGetMailgroupMemberReqBuilder() *GetMailgroupMemberReqBuilder {
	builder := &GetMailgroupMemberReqBuilder{}
	builder.httpReq = &larkcore.HttpReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *GetMailgroupMemberReqBuilder) MailgroupId(mailgroupId string) *GetMailgroupMemberReqBuilder {
	builder.httpReq.PathParams.Set("mailgroup_id", fmt.Sprint(mailgroupId))
	return builder
}
func (builder *GetMailgroupMemberReqBuilder) MemberId(memberId string) *GetMailgroupMemberReqBuilder {
	builder.httpReq.PathParams.Set("member_id", fmt.Sprint(memberId))
	return builder
}
func (builder *GetMailgroupMemberReqBuilder) UserIdType(userIdType string) *GetMailgroupMemberReqBuilder {
	builder.httpReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}
func (builder *GetMailgroupMemberReqBuilder) DepartmentIdType(departmentIdType string) *GetMailgroupMemberReqBuilder {
	builder.httpReq.QueryParams.Set("department_id_type", fmt.Sprint(departmentIdType))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *GetMailgroupMemberReqBuilder) Build() *GetMailgroupMemberReq {
	req := &GetMailgroupMemberReq{}
	req.httpReq = &larkcore.HttpReq{}
	req.httpReq.PathParams = builder.httpReq.PathParams
	req.httpReq.QueryParams = builder.httpReq.QueryParams
	return req
}

type GetMailgroupMemberReq struct {
	httpReq *larkcore.HttpReq
}

type GetMailgroupMemberRespData struct {
	MemberId     *string `json:"member_id,omitempty"`
	Email        *string `json:"email,omitempty"`
	UserId       *string `json:"user_id,omitempty"`
	DepartmentId *string `json:"department_id,omitempty"`
	Type         *string `json:"type,omitempty"`
}

type GetMailgroupMemberResp struct {
	*larkcore.RawResponse `json:"-"`
	larkcore.CodeError
	Data *GetMailgroupMemberRespData `json:"data"`
}

func (resp *GetMailgroupMemberResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type ListMailgroupMemberReqBuilder struct {
	httpReq *larkcore.HttpReq
	limit   int
}

// 生成请求的New构造器
func NewListMailgroupMemberReqBuilder() *ListMailgroupMemberReqBuilder {
	builder := &ListMailgroupMemberReqBuilder{}
	builder.httpReq = &larkcore.HttpReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *ListMailgroupMemberReqBuilder) Limit(limit int) *ListMailgroupMemberReqBuilder {
	builder.limit = limit
	return builder
}
func (builder *ListMailgroupMemberReqBuilder) MailgroupId(mailgroupId string) *ListMailgroupMemberReqBuilder {
	builder.httpReq.PathParams.Set("mailgroup_id", fmt.Sprint(mailgroupId))
	return builder
}
func (builder *ListMailgroupMemberReqBuilder) UserIdType(userIdType string) *ListMailgroupMemberReqBuilder {
	builder.httpReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}
func (builder *ListMailgroupMemberReqBuilder) DepartmentIdType(departmentIdType string) *ListMailgroupMemberReqBuilder {
	builder.httpReq.QueryParams.Set("department_id_type", fmt.Sprint(departmentIdType))
	return builder
}
func (builder *ListMailgroupMemberReqBuilder) PageToken(pageToken string) *ListMailgroupMemberReqBuilder {
	builder.httpReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}
func (builder *ListMailgroupMemberReqBuilder) PageSize(pageSize int) *ListMailgroupMemberReqBuilder {
	builder.httpReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *ListMailgroupMemberReqBuilder) Build() *ListMailgroupMemberReq {
	req := &ListMailgroupMemberReq{}
	req.httpReq = &larkcore.HttpReq{}
	req.Limit = builder.limit
	req.httpReq.PathParams = builder.httpReq.PathParams
	req.httpReq.QueryParams = builder.httpReq.QueryParams
	return req
}

type ListMailgroupMemberReq struct {
	httpReq *larkcore.HttpReq
	Limit   int
}

type ListMailgroupMemberRespData struct {
	HasMore   *bool              `json:"has_more,omitempty"`
	PageToken *string            `json:"page_token,omitempty"`
	Items     []*MailgroupMember `json:"items,omitempty"`
}

type ListMailgroupMemberResp struct {
	*larkcore.RawResponse `json:"-"`
	larkcore.CodeError
	Data *ListMailgroupMemberRespData `json:"data"`
}

func (resp *ListMailgroupMemberResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type CreateMailgroupPermissionMemberReqBuilder struct {
	httpReq                   *larkcore.HttpReq
	mailgroupPermissionMember *MailgroupPermissionMember
}

// 生成请求的New构造器
func NewCreateMailgroupPermissionMemberReqBuilder() *CreateMailgroupPermissionMemberReqBuilder {
	builder := &CreateMailgroupPermissionMemberReqBuilder{}
	builder.httpReq = &larkcore.HttpReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *CreateMailgroupPermissionMemberReqBuilder) MailgroupId(mailgroupId string) *CreateMailgroupPermissionMemberReqBuilder {
	builder.httpReq.PathParams.Set("mailgroup_id", fmt.Sprint(mailgroupId))
	return builder
}
func (builder *CreateMailgroupPermissionMemberReqBuilder) UserIdType(userIdType string) *CreateMailgroupPermissionMemberReqBuilder {
	builder.httpReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}
func (builder *CreateMailgroupPermissionMemberReqBuilder) DepartmentIdType(departmentIdType string) *CreateMailgroupPermissionMemberReqBuilder {
	builder.httpReq.QueryParams.Set("department_id_type", fmt.Sprint(departmentIdType))
	return builder
}
func (builder *CreateMailgroupPermissionMemberReqBuilder) MailgroupPermissionMember(mailgroupPermissionMember *MailgroupPermissionMember) *CreateMailgroupPermissionMemberReqBuilder {
	builder.mailgroupPermissionMember = mailgroupPermissionMember
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *CreateMailgroupPermissionMemberReqBuilder) Build() *CreateMailgroupPermissionMemberReq {
	req := &CreateMailgroupPermissionMemberReq{}
	req.httpReq = &larkcore.HttpReq{}
	req.httpReq.PathParams = builder.httpReq.PathParams
	req.httpReq.QueryParams = builder.httpReq.QueryParams
	req.httpReq.Body = builder.mailgroupPermissionMember
	return req
}

type CreateMailgroupPermissionMemberReq struct {
	httpReq                   *larkcore.HttpReq
	MailgroupPermissionMember *MailgroupPermissionMember `body:""`
}

type CreateMailgroupPermissionMemberRespData struct {
	PermissionMemberId *string `json:"permission_member_id,omitempty"`
	UserId             *string `json:"user_id,omitempty"`
	DepartmentId       *string `json:"department_id,omitempty"`
	Type               *string `json:"type,omitempty"`
}

type CreateMailgroupPermissionMemberResp struct {
	*larkcore.RawResponse `json:"-"`
	larkcore.CodeError
	Data *CreateMailgroupPermissionMemberRespData `json:"data"`
}

func (resp *CreateMailgroupPermissionMemberResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type DeleteMailgroupPermissionMemberReqBuilder struct {
	httpReq *larkcore.HttpReq
}

// 生成请求的New构造器
func NewDeleteMailgroupPermissionMemberReqBuilder() *DeleteMailgroupPermissionMemberReqBuilder {
	builder := &DeleteMailgroupPermissionMemberReqBuilder{}
	builder.httpReq = &larkcore.HttpReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *DeleteMailgroupPermissionMemberReqBuilder) MailgroupId(mailgroupId string) *DeleteMailgroupPermissionMemberReqBuilder {
	builder.httpReq.PathParams.Set("mailgroup_id", fmt.Sprint(mailgroupId))
	return builder
}
func (builder *DeleteMailgroupPermissionMemberReqBuilder) PermissionMemberId(permissionMemberId string) *DeleteMailgroupPermissionMemberReqBuilder {
	builder.httpReq.PathParams.Set("permission_member_id", fmt.Sprint(permissionMemberId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *DeleteMailgroupPermissionMemberReqBuilder) Build() *DeleteMailgroupPermissionMemberReq {
	req := &DeleteMailgroupPermissionMemberReq{}
	req.httpReq = &larkcore.HttpReq{}
	req.httpReq.PathParams = builder.httpReq.PathParams
	return req
}

type DeleteMailgroupPermissionMemberReq struct {
	httpReq *larkcore.HttpReq
}

type DeleteMailgroupPermissionMemberResp struct {
	*larkcore.RawResponse `json:"-"`
	larkcore.CodeError
}

func (resp *DeleteMailgroupPermissionMemberResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type GetMailgroupPermissionMemberReqBuilder struct {
	httpReq *larkcore.HttpReq
}

// 生成请求的New构造器
func NewGetMailgroupPermissionMemberReqBuilder() *GetMailgroupPermissionMemberReqBuilder {
	builder := &GetMailgroupPermissionMemberReqBuilder{}
	builder.httpReq = &larkcore.HttpReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *GetMailgroupPermissionMemberReqBuilder) MailgroupId(mailgroupId string) *GetMailgroupPermissionMemberReqBuilder {
	builder.httpReq.PathParams.Set("mailgroup_id", fmt.Sprint(mailgroupId))
	return builder
}
func (builder *GetMailgroupPermissionMemberReqBuilder) PermissionMemberId(permissionMemberId string) *GetMailgroupPermissionMemberReqBuilder {
	builder.httpReq.PathParams.Set("permission_member_id", fmt.Sprint(permissionMemberId))
	return builder
}
func (builder *GetMailgroupPermissionMemberReqBuilder) UserIdType(userIdType string) *GetMailgroupPermissionMemberReqBuilder {
	builder.httpReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}
func (builder *GetMailgroupPermissionMemberReqBuilder) DepartmentIdType(departmentIdType string) *GetMailgroupPermissionMemberReqBuilder {
	builder.httpReq.QueryParams.Set("department_id_type", fmt.Sprint(departmentIdType))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *GetMailgroupPermissionMemberReqBuilder) Build() *GetMailgroupPermissionMemberReq {
	req := &GetMailgroupPermissionMemberReq{}
	req.httpReq = &larkcore.HttpReq{}
	req.httpReq.PathParams = builder.httpReq.PathParams
	req.httpReq.QueryParams = builder.httpReq.QueryParams
	return req
}

type GetMailgroupPermissionMemberReq struct {
	httpReq *larkcore.HttpReq
}

type GetMailgroupPermissionMemberRespData struct {
	PermissionMemberId *string `json:"permission_member_id,omitempty"`
	UserId             *string `json:"user_id,omitempty"`
	DepartmentId       *string `json:"department_id,omitempty"`
	Type               *string `json:"type,omitempty"`
}

type GetMailgroupPermissionMemberResp struct {
	*larkcore.RawResponse `json:"-"`
	larkcore.CodeError
	Data *GetMailgroupPermissionMemberRespData `json:"data"`
}

func (resp *GetMailgroupPermissionMemberResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type ListMailgroupPermissionMemberReqBuilder struct {
	httpReq *larkcore.HttpReq
	limit   int
}

// 生成请求的New构造器
func NewListMailgroupPermissionMemberReqBuilder() *ListMailgroupPermissionMemberReqBuilder {
	builder := &ListMailgroupPermissionMemberReqBuilder{}
	builder.httpReq = &larkcore.HttpReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *ListMailgroupPermissionMemberReqBuilder) Limit(limit int) *ListMailgroupPermissionMemberReqBuilder {
	builder.limit = limit
	return builder
}
func (builder *ListMailgroupPermissionMemberReqBuilder) MailgroupId(mailgroupId string) *ListMailgroupPermissionMemberReqBuilder {
	builder.httpReq.PathParams.Set("mailgroup_id", fmt.Sprint(mailgroupId))
	return builder
}
func (builder *ListMailgroupPermissionMemberReqBuilder) UserIdType(userIdType string) *ListMailgroupPermissionMemberReqBuilder {
	builder.httpReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}
func (builder *ListMailgroupPermissionMemberReqBuilder) DepartmentIdType(departmentIdType string) *ListMailgroupPermissionMemberReqBuilder {
	builder.httpReq.QueryParams.Set("department_id_type", fmt.Sprint(departmentIdType))
	return builder
}
func (builder *ListMailgroupPermissionMemberReqBuilder) PageToken(pageToken string) *ListMailgroupPermissionMemberReqBuilder {
	builder.httpReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}
func (builder *ListMailgroupPermissionMemberReqBuilder) PageSize(pageSize int) *ListMailgroupPermissionMemberReqBuilder {
	builder.httpReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *ListMailgroupPermissionMemberReqBuilder) Build() *ListMailgroupPermissionMemberReq {
	req := &ListMailgroupPermissionMemberReq{}
	req.httpReq = &larkcore.HttpReq{}
	req.Limit = builder.limit
	req.httpReq.PathParams = builder.httpReq.PathParams
	req.httpReq.QueryParams = builder.httpReq.QueryParams
	return req
}

type ListMailgroupPermissionMemberReq struct {
	httpReq *larkcore.HttpReq
	Limit   int
}

type ListMailgroupPermissionMemberRespData struct {
	HasMore   *bool                        `json:"has_more,omitempty"`
	PageToken *string                      `json:"page_token,omitempty"`
	Items     []*MailgroupPermissionMember `json:"items,omitempty"`
}

type ListMailgroupPermissionMemberResp struct {
	*larkcore.RawResponse `json:"-"`
	larkcore.CodeError
	Data *ListMailgroupPermissionMemberRespData `json:"data"`
}

func (resp *ListMailgroupPermissionMemberResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type CreatePublicMailboxReqBuilder struct {
	httpReq       *larkcore.HttpReq
	publicMailbox *PublicMailbox
}

// 生成请求的New构造器
func NewCreatePublicMailboxReqBuilder() *CreatePublicMailboxReqBuilder {
	builder := &CreatePublicMailboxReqBuilder{}
	builder.httpReq = &larkcore.HttpReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *CreatePublicMailboxReqBuilder) PublicMailbox(publicMailbox *PublicMailbox) *CreatePublicMailboxReqBuilder {
	builder.publicMailbox = publicMailbox
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *CreatePublicMailboxReqBuilder) Build() *CreatePublicMailboxReq {
	req := &CreatePublicMailboxReq{}
	req.httpReq = &larkcore.HttpReq{}
	req.httpReq.Body = builder.publicMailbox
	return req
}

type CreatePublicMailboxReq struct {
	httpReq       *larkcore.HttpReq
	PublicMailbox *PublicMailbox `body:""`
}

type CreatePublicMailboxRespData struct {
	PublicMailboxId *string `json:"public_mailbox_id,omitempty"`
	Email           *string `json:"email,omitempty"`
	Name            *string `json:"name,omitempty"`
}

type CreatePublicMailboxResp struct {
	*larkcore.RawResponse `json:"-"`
	larkcore.CodeError
	Data *CreatePublicMailboxRespData `json:"data"`
}

func (resp *CreatePublicMailboxResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type DeletePublicMailboxReqBuilder struct {
	httpReq *larkcore.HttpReq
}

// 生成请求的New构造器
func NewDeletePublicMailboxReqBuilder() *DeletePublicMailboxReqBuilder {
	builder := &DeletePublicMailboxReqBuilder{}
	builder.httpReq = &larkcore.HttpReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *DeletePublicMailboxReqBuilder) PublicMailboxId(publicMailboxId string) *DeletePublicMailboxReqBuilder {
	builder.httpReq.PathParams.Set("public_mailbox_id", fmt.Sprint(publicMailboxId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *DeletePublicMailboxReqBuilder) Build() *DeletePublicMailboxReq {
	req := &DeletePublicMailboxReq{}
	req.httpReq = &larkcore.HttpReq{}
	req.httpReq.PathParams = builder.httpReq.PathParams
	return req
}

type DeletePublicMailboxReq struct {
	httpReq *larkcore.HttpReq
}

type DeletePublicMailboxResp struct {
	*larkcore.RawResponse `json:"-"`
	larkcore.CodeError
}

func (resp *DeletePublicMailboxResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type GetPublicMailboxReqBuilder struct {
	httpReq *larkcore.HttpReq
}

// 生成请求的New构造器
func NewGetPublicMailboxReqBuilder() *GetPublicMailboxReqBuilder {
	builder := &GetPublicMailboxReqBuilder{}
	builder.httpReq = &larkcore.HttpReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *GetPublicMailboxReqBuilder) PublicMailboxId(publicMailboxId string) *GetPublicMailboxReqBuilder {
	builder.httpReq.PathParams.Set("public_mailbox_id", fmt.Sprint(publicMailboxId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *GetPublicMailboxReqBuilder) Build() *GetPublicMailboxReq {
	req := &GetPublicMailboxReq{}
	req.httpReq = &larkcore.HttpReq{}
	req.httpReq.PathParams = builder.httpReq.PathParams
	return req
}

type GetPublicMailboxReq struct {
	httpReq *larkcore.HttpReq
}

type GetPublicMailboxRespData struct {
	PublicMailboxId *string `json:"public_mailbox_id,omitempty"`
	Email           *string `json:"email,omitempty"`
	Name            *string `json:"name,omitempty"`
}

type GetPublicMailboxResp struct {
	*larkcore.RawResponse `json:"-"`
	larkcore.CodeError
	Data *GetPublicMailboxRespData `json:"data"`
}

func (resp *GetPublicMailboxResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type ListPublicMailboxReqBuilder struct {
	httpReq *larkcore.HttpReq
	limit   int
}

// 生成请求的New构造器
func NewListPublicMailboxReqBuilder() *ListPublicMailboxReqBuilder {
	builder := &ListPublicMailboxReqBuilder{}
	builder.httpReq = &larkcore.HttpReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *ListPublicMailboxReqBuilder) Limit(limit int) *ListPublicMailboxReqBuilder {
	builder.limit = limit
	return builder
}
func (builder *ListPublicMailboxReqBuilder) PageToken(pageToken string) *ListPublicMailboxReqBuilder {
	builder.httpReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}
func (builder *ListPublicMailboxReqBuilder) PageSize(pageSize int) *ListPublicMailboxReqBuilder {
	builder.httpReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *ListPublicMailboxReqBuilder) Build() *ListPublicMailboxReq {
	req := &ListPublicMailboxReq{}
	req.httpReq = &larkcore.HttpReq{}
	req.Limit = builder.limit
	req.httpReq.QueryParams = builder.httpReq.QueryParams
	return req
}

type ListPublicMailboxReq struct {
	httpReq *larkcore.HttpReq
	Limit   int
}

type ListPublicMailboxRespData struct {
	HasMore   *bool            `json:"has_more,omitempty"`
	PageToken *string          `json:"page_token,omitempty"`
	Items     []*PublicMailbox `json:"items,omitempty"`
}

type ListPublicMailboxResp struct {
	*larkcore.RawResponse `json:"-"`
	larkcore.CodeError
	Data *ListPublicMailboxRespData `json:"data"`
}

func (resp *ListPublicMailboxResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type PatchPublicMailboxReqBuilder struct {
	httpReq       *larkcore.HttpReq
	publicMailbox *PublicMailbox
}

// 生成请求的New构造器
func NewPatchPublicMailboxReqBuilder() *PatchPublicMailboxReqBuilder {
	builder := &PatchPublicMailboxReqBuilder{}
	builder.httpReq = &larkcore.HttpReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *PatchPublicMailboxReqBuilder) PublicMailboxId(publicMailboxId string) *PatchPublicMailboxReqBuilder {
	builder.httpReq.PathParams.Set("public_mailbox_id", fmt.Sprint(publicMailboxId))
	return builder
}
func (builder *PatchPublicMailboxReqBuilder) PublicMailbox(publicMailbox *PublicMailbox) *PatchPublicMailboxReqBuilder {
	builder.publicMailbox = publicMailbox
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *PatchPublicMailboxReqBuilder) Build() *PatchPublicMailboxReq {
	req := &PatchPublicMailboxReq{}
	req.httpReq = &larkcore.HttpReq{}
	req.httpReq.PathParams = builder.httpReq.PathParams
	req.httpReq.Body = builder.publicMailbox
	return req
}

type PatchPublicMailboxReq struct {
	httpReq       *larkcore.HttpReq
	PublicMailbox *PublicMailbox `body:""`
}

type PatchPublicMailboxRespData struct {
	PublicMailboxId *string `json:"public_mailbox_id,omitempty"`
	Email           *string `json:"email,omitempty"`
	Name            *string `json:"name,omitempty"`
}

type PatchPublicMailboxResp struct {
	*larkcore.RawResponse `json:"-"`
	larkcore.CodeError
	Data *PatchPublicMailboxRespData `json:"data"`
}

func (resp *PatchPublicMailboxResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type UpdatePublicMailboxReqBuilder struct {
	httpReq       *larkcore.HttpReq
	publicMailbox *PublicMailbox
}

// 生成请求的New构造器
func NewUpdatePublicMailboxReqBuilder() *UpdatePublicMailboxReqBuilder {
	builder := &UpdatePublicMailboxReqBuilder{}
	builder.httpReq = &larkcore.HttpReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *UpdatePublicMailboxReqBuilder) PublicMailboxId(publicMailboxId string) *UpdatePublicMailboxReqBuilder {
	builder.httpReq.PathParams.Set("public_mailbox_id", fmt.Sprint(publicMailboxId))
	return builder
}
func (builder *UpdatePublicMailboxReqBuilder) PublicMailbox(publicMailbox *PublicMailbox) *UpdatePublicMailboxReqBuilder {
	builder.publicMailbox = publicMailbox
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *UpdatePublicMailboxReqBuilder) Build() *UpdatePublicMailboxReq {
	req := &UpdatePublicMailboxReq{}
	req.httpReq = &larkcore.HttpReq{}
	req.httpReq.PathParams = builder.httpReq.PathParams
	req.httpReq.Body = builder.publicMailbox
	return req
}

type UpdatePublicMailboxReq struct {
	httpReq       *larkcore.HttpReq
	PublicMailbox *PublicMailbox `body:""`
}

type UpdatePublicMailboxRespData struct {
	PublicMailboxId *string `json:"public_mailbox_id,omitempty"`
	Email           *string `json:"email,omitempty"`
	Name            *string `json:"name,omitempty"`
}

type UpdatePublicMailboxResp struct {
	*larkcore.RawResponse `json:"-"`
	larkcore.CodeError
	Data *UpdatePublicMailboxRespData `json:"data"`
}

func (resp *UpdatePublicMailboxResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type CreatePublicMailboxAliasReqBuilder struct {
	httpReq    *larkcore.HttpReq
	emailAlias *EmailAlias
}

// 生成请求的New构造器
func NewCreatePublicMailboxAliasReqBuilder() *CreatePublicMailboxAliasReqBuilder {
	builder := &CreatePublicMailboxAliasReqBuilder{}
	builder.httpReq = &larkcore.HttpReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *CreatePublicMailboxAliasReqBuilder) PublicMailboxId(publicMailboxId string) *CreatePublicMailboxAliasReqBuilder {
	builder.httpReq.PathParams.Set("public_mailbox_id", fmt.Sprint(publicMailboxId))
	return builder
}
func (builder *CreatePublicMailboxAliasReqBuilder) EmailAlias(emailAlias *EmailAlias) *CreatePublicMailboxAliasReqBuilder {
	builder.emailAlias = emailAlias
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *CreatePublicMailboxAliasReqBuilder) Build() *CreatePublicMailboxAliasReq {
	req := &CreatePublicMailboxAliasReq{}
	req.httpReq = &larkcore.HttpReq{}
	req.httpReq.PathParams = builder.httpReq.PathParams
	req.httpReq.Body = builder.emailAlias
	return req
}

type CreatePublicMailboxAliasReq struct {
	httpReq    *larkcore.HttpReq
	EmailAlias *EmailAlias `body:""`
}

type CreatePublicMailboxAliasRespData struct {
	PublicMailboxAlias *EmailAlias `json:"public_mailbox_alias,omitempty"`
}

type CreatePublicMailboxAliasResp struct {
	*larkcore.RawResponse `json:"-"`
	larkcore.CodeError
	Data *CreatePublicMailboxAliasRespData `json:"data"`
}

func (resp *CreatePublicMailboxAliasResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type DeletePublicMailboxAliasReqBuilder struct {
	httpReq *larkcore.HttpReq
}

// 生成请求的New构造器
func NewDeletePublicMailboxAliasReqBuilder() *DeletePublicMailboxAliasReqBuilder {
	builder := &DeletePublicMailboxAliasReqBuilder{}
	builder.httpReq = &larkcore.HttpReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *DeletePublicMailboxAliasReqBuilder) PublicMailboxId(publicMailboxId string) *DeletePublicMailboxAliasReqBuilder {
	builder.httpReq.PathParams.Set("public_mailbox_id", fmt.Sprint(publicMailboxId))
	return builder
}
func (builder *DeletePublicMailboxAliasReqBuilder) AliasId(aliasId string) *DeletePublicMailboxAliasReqBuilder {
	builder.httpReq.PathParams.Set("alias_id", fmt.Sprint(aliasId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *DeletePublicMailboxAliasReqBuilder) Build() *DeletePublicMailboxAliasReq {
	req := &DeletePublicMailboxAliasReq{}
	req.httpReq = &larkcore.HttpReq{}
	req.httpReq.PathParams = builder.httpReq.PathParams
	return req
}

type DeletePublicMailboxAliasReq struct {
	httpReq *larkcore.HttpReq
}

type DeletePublicMailboxAliasResp struct {
	*larkcore.RawResponse `json:"-"`
	larkcore.CodeError
}

func (resp *DeletePublicMailboxAliasResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type ListPublicMailboxAliasReqBuilder struct {
	httpReq *larkcore.HttpReq
}

// 生成请求的New构造器
func NewListPublicMailboxAliasReqBuilder() *ListPublicMailboxAliasReqBuilder {
	builder := &ListPublicMailboxAliasReqBuilder{}
	builder.httpReq = &larkcore.HttpReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *ListPublicMailboxAliasReqBuilder) PublicMailboxId(publicMailboxId string) *ListPublicMailboxAliasReqBuilder {
	builder.httpReq.PathParams.Set("public_mailbox_id", fmt.Sprint(publicMailboxId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *ListPublicMailboxAliasReqBuilder) Build() *ListPublicMailboxAliasReq {
	req := &ListPublicMailboxAliasReq{}
	req.httpReq = &larkcore.HttpReq{}
	req.httpReq.PathParams = builder.httpReq.PathParams
	return req
}

type ListPublicMailboxAliasReq struct {
	httpReq *larkcore.HttpReq
}

type ListPublicMailboxAliasRespData struct {
	Items []*EmailAlias `json:"items,omitempty"`
}

type ListPublicMailboxAliasResp struct {
	*larkcore.RawResponse `json:"-"`
	larkcore.CodeError
	Data *ListPublicMailboxAliasRespData `json:"data"`
}

func (resp *ListPublicMailboxAliasResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type ClearPublicMailboxMemberReqBuilder struct {
	httpReq *larkcore.HttpReq
}

// 生成请求的New构造器
func NewClearPublicMailboxMemberReqBuilder() *ClearPublicMailboxMemberReqBuilder {
	builder := &ClearPublicMailboxMemberReqBuilder{}
	builder.httpReq = &larkcore.HttpReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *ClearPublicMailboxMemberReqBuilder) PublicMailboxId(publicMailboxId string) *ClearPublicMailboxMemberReqBuilder {
	builder.httpReq.PathParams.Set("public_mailbox_id", fmt.Sprint(publicMailboxId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *ClearPublicMailboxMemberReqBuilder) Build() *ClearPublicMailboxMemberReq {
	req := &ClearPublicMailboxMemberReq{}
	req.httpReq = &larkcore.HttpReq{}
	req.httpReq.PathParams = builder.httpReq.PathParams
	return req
}

type ClearPublicMailboxMemberReq struct {
	httpReq *larkcore.HttpReq
}

type ClearPublicMailboxMemberResp struct {
	*larkcore.RawResponse `json:"-"`
	larkcore.CodeError
}

func (resp *ClearPublicMailboxMemberResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type CreatePublicMailboxMemberReqBuilder struct {
	httpReq             *larkcore.HttpReq
	publicMailboxMember *PublicMailboxMember
}

// 生成请求的New构造器
func NewCreatePublicMailboxMemberReqBuilder() *CreatePublicMailboxMemberReqBuilder {
	builder := &CreatePublicMailboxMemberReqBuilder{}
	builder.httpReq = &larkcore.HttpReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *CreatePublicMailboxMemberReqBuilder) PublicMailboxId(publicMailboxId string) *CreatePublicMailboxMemberReqBuilder {
	builder.httpReq.PathParams.Set("public_mailbox_id", fmt.Sprint(publicMailboxId))
	return builder
}
func (builder *CreatePublicMailboxMemberReqBuilder) UserIdType(userIdType string) *CreatePublicMailboxMemberReqBuilder {
	builder.httpReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}
func (builder *CreatePublicMailboxMemberReqBuilder) PublicMailboxMember(publicMailboxMember *PublicMailboxMember) *CreatePublicMailboxMemberReqBuilder {
	builder.publicMailboxMember = publicMailboxMember
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *CreatePublicMailboxMemberReqBuilder) Build() *CreatePublicMailboxMemberReq {
	req := &CreatePublicMailboxMemberReq{}
	req.httpReq = &larkcore.HttpReq{}
	req.httpReq.PathParams = builder.httpReq.PathParams
	req.httpReq.QueryParams = builder.httpReq.QueryParams
	req.httpReq.Body = builder.publicMailboxMember
	return req
}

type CreatePublicMailboxMemberReq struct {
	httpReq             *larkcore.HttpReq
	PublicMailboxMember *PublicMailboxMember `body:""`
}

type CreatePublicMailboxMemberRespData struct {
	MemberId *string `json:"member_id,omitempty"`
	UserId   *string `json:"user_id,omitempty"`
	Type     *string `json:"type,omitempty"`
}

type CreatePublicMailboxMemberResp struct {
	*larkcore.RawResponse `json:"-"`
	larkcore.CodeError
	Data *CreatePublicMailboxMemberRespData `json:"data"`
}

func (resp *CreatePublicMailboxMemberResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type DeletePublicMailboxMemberReqBuilder struct {
	httpReq *larkcore.HttpReq
}

// 生成请求的New构造器
func NewDeletePublicMailboxMemberReqBuilder() *DeletePublicMailboxMemberReqBuilder {
	builder := &DeletePublicMailboxMemberReqBuilder{}
	builder.httpReq = &larkcore.HttpReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *DeletePublicMailboxMemberReqBuilder) PublicMailboxId(publicMailboxId string) *DeletePublicMailboxMemberReqBuilder {
	builder.httpReq.PathParams.Set("public_mailbox_id", fmt.Sprint(publicMailboxId))
	return builder
}
func (builder *DeletePublicMailboxMemberReqBuilder) MemberId(memberId string) *DeletePublicMailboxMemberReqBuilder {
	builder.httpReq.PathParams.Set("member_id", fmt.Sprint(memberId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *DeletePublicMailboxMemberReqBuilder) Build() *DeletePublicMailboxMemberReq {
	req := &DeletePublicMailboxMemberReq{}
	req.httpReq = &larkcore.HttpReq{}
	req.httpReq.PathParams = builder.httpReq.PathParams
	return req
}

type DeletePublicMailboxMemberReq struct {
	httpReq *larkcore.HttpReq
}

type DeletePublicMailboxMemberResp struct {
	*larkcore.RawResponse `json:"-"`
	larkcore.CodeError
}

func (resp *DeletePublicMailboxMemberResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type GetPublicMailboxMemberReqBuilder struct {
	httpReq *larkcore.HttpReq
}

// 生成请求的New构造器
func NewGetPublicMailboxMemberReqBuilder() *GetPublicMailboxMemberReqBuilder {
	builder := &GetPublicMailboxMemberReqBuilder{}
	builder.httpReq = &larkcore.HttpReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *GetPublicMailboxMemberReqBuilder) PublicMailboxId(publicMailboxId string) *GetPublicMailboxMemberReqBuilder {
	builder.httpReq.PathParams.Set("public_mailbox_id", fmt.Sprint(publicMailboxId))
	return builder
}
func (builder *GetPublicMailboxMemberReqBuilder) MemberId(memberId string) *GetPublicMailboxMemberReqBuilder {
	builder.httpReq.PathParams.Set("member_id", fmt.Sprint(memberId))
	return builder
}
func (builder *GetPublicMailboxMemberReqBuilder) UserIdType(userIdType string) *GetPublicMailboxMemberReqBuilder {
	builder.httpReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *GetPublicMailboxMemberReqBuilder) Build() *GetPublicMailboxMemberReq {
	req := &GetPublicMailboxMemberReq{}
	req.httpReq = &larkcore.HttpReq{}
	req.httpReq.PathParams = builder.httpReq.PathParams
	req.httpReq.QueryParams = builder.httpReq.QueryParams
	return req
}

type GetPublicMailboxMemberReq struct {
	httpReq *larkcore.HttpReq
}

type GetPublicMailboxMemberRespData struct {
	MemberId *string `json:"member_id,omitempty"`
	UserId   *string `json:"user_id,omitempty"`
	Type     *string `json:"type,omitempty"`
}

type GetPublicMailboxMemberResp struct {
	*larkcore.RawResponse `json:"-"`
	larkcore.CodeError
	Data *GetPublicMailboxMemberRespData `json:"data"`
}

func (resp *GetPublicMailboxMemberResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type ListPublicMailboxMemberReqBuilder struct {
	httpReq *larkcore.HttpReq
	limit   int
}

// 生成请求的New构造器
func NewListPublicMailboxMemberReqBuilder() *ListPublicMailboxMemberReqBuilder {
	builder := &ListPublicMailboxMemberReqBuilder{}
	builder.httpReq = &larkcore.HttpReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *ListPublicMailboxMemberReqBuilder) Limit(limit int) *ListPublicMailboxMemberReqBuilder {
	builder.limit = limit
	return builder
}
func (builder *ListPublicMailboxMemberReqBuilder) PublicMailboxId(publicMailboxId string) *ListPublicMailboxMemberReqBuilder {
	builder.httpReq.PathParams.Set("public_mailbox_id", fmt.Sprint(publicMailboxId))
	return builder
}
func (builder *ListPublicMailboxMemberReqBuilder) UserIdType(userIdType string) *ListPublicMailboxMemberReqBuilder {
	builder.httpReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}
func (builder *ListPublicMailboxMemberReqBuilder) PageToken(pageToken string) *ListPublicMailboxMemberReqBuilder {
	builder.httpReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}
func (builder *ListPublicMailboxMemberReqBuilder) PageSize(pageSize int) *ListPublicMailboxMemberReqBuilder {
	builder.httpReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *ListPublicMailboxMemberReqBuilder) Build() *ListPublicMailboxMemberReq {
	req := &ListPublicMailboxMemberReq{}
	req.httpReq = &larkcore.HttpReq{}
	req.Limit = builder.limit
	req.httpReq.PathParams = builder.httpReq.PathParams
	req.httpReq.QueryParams = builder.httpReq.QueryParams
	return req
}

type ListPublicMailboxMemberReq struct {
	httpReq *larkcore.HttpReq
	Limit   int
}

type ListPublicMailboxMemberRespData struct {
	HasMore   *bool                  `json:"has_more,omitempty"`
	PageToken *string                `json:"page_token,omitempty"`
	Items     []*PublicMailboxMember `json:"items,omitempty"`
}

type ListPublicMailboxMemberResp struct {
	*larkcore.RawResponse `json:"-"`
	larkcore.CodeError
	Data *ListPublicMailboxMemberRespData `json:"data"`
}

func (resp *ListPublicMailboxMemberResp) Success() bool {
	return resp.Code == 0
}

type QueryUserReqBodyBuilder struct {
	emailList     []string
	emailListFlag bool
}

// 生成body的New构造器
func NewQueryUserReqBodyBuilder() *QueryUserReqBodyBuilder {
	builder := &QueryUserReqBodyBuilder{}
	return builder
}

// 1.2 生成body的builder属性方法
func (builder *QueryUserReqBodyBuilder) EmailList(emailList []string) *QueryUserReqBodyBuilder {
	builder.emailList = emailList
	builder.emailListFlag = true
	return builder
}

// 1.3 生成body的build方法
func (builder *QueryUserReqBodyBuilder) Build() *QueryUserReqBody {
	req := &QueryUserReqBody{}
	if builder.emailListFlag {
		req.EmailList = builder.emailList
	}
	return req
}

// 上传文件path开始
type QueryUserPathReqBodyBuilder struct {
	emailList     []string
	emailListFlag bool
}

func NewQueryUserPathReqBodyBuilder() *QueryUserPathReqBodyBuilder {
	builder := &QueryUserPathReqBodyBuilder{}
	return builder
}
func (builder *QueryUserPathReqBodyBuilder) EmailList(emailList []string) *QueryUserPathReqBodyBuilder {
	builder.emailList = emailList
	builder.emailListFlag = true
	return builder
}

func (builder *QueryUserPathReqBodyBuilder) Build() (*QueryUserReqBody, error) {
	req := &QueryUserReqBody{}
	if builder.emailListFlag {
		req.EmailList = builder.emailList
	}
	return req, nil
}

// 上传文件path结束

// 1.4 生成请求的builder结构体
type QueryUserReqBuilder struct {
	httpReq *larkcore.HttpReq
	body    *QueryUserReqBody
}

// 生成请求的New构造器
func NewQueryUserReqBuilder() *QueryUserReqBuilder {
	builder := &QueryUserReqBuilder{}
	builder.httpReq = &larkcore.HttpReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *QueryUserReqBuilder) Body(body *QueryUserReqBody) *QueryUserReqBuilder {
	builder.body = body
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *QueryUserReqBuilder) Build() *QueryUserReq {
	req := &QueryUserReq{}
	req.httpReq = &larkcore.HttpReq{}
	req.httpReq.Body = builder.body
	return req
}

type QueryUserReqBody struct {
	EmailList []string `json:"email_list,omitempty"`
}

type QueryUserReq struct {
	httpReq *larkcore.HttpReq
	Body    *QueryUserReqBody `body:""`
}

type QueryUserRespData struct {
	UserList []*User `json:"user_list,omitempty"`
}

type QueryUserResp struct {
	*larkcore.RawResponse `json:"-"`
	larkcore.CodeError
	Data *QueryUserRespData `json:"data"`
}

func (resp *QueryUserResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type DeleteUserMailboxReqBuilder struct {
	httpReq *larkcore.HttpReq
}

// 生成请求的New构造器
func NewDeleteUserMailboxReqBuilder() *DeleteUserMailboxReqBuilder {
	builder := &DeleteUserMailboxReqBuilder{}
	builder.httpReq = &larkcore.HttpReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *DeleteUserMailboxReqBuilder) UserMailboxId(userMailboxId string) *DeleteUserMailboxReqBuilder {
	builder.httpReq.PathParams.Set("user_mailbox_id", fmt.Sprint(userMailboxId))
	return builder
}
func (builder *DeleteUserMailboxReqBuilder) TransferMailbox(transferMailbox string) *DeleteUserMailboxReqBuilder {
	builder.httpReq.QueryParams.Set("transfer_mailbox", fmt.Sprint(transferMailbox))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *DeleteUserMailboxReqBuilder) Build() *DeleteUserMailboxReq {
	req := &DeleteUserMailboxReq{}
	req.httpReq = &larkcore.HttpReq{}
	req.httpReq.PathParams = builder.httpReq.PathParams
	req.httpReq.QueryParams = builder.httpReq.QueryParams
	return req
}

type DeleteUserMailboxReq struct {
	httpReq *larkcore.HttpReq
}

type DeleteUserMailboxResp struct {
	*larkcore.RawResponse `json:"-"`
	larkcore.CodeError
}

func (resp *DeleteUserMailboxResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type CreateUserMailboxAliasReqBuilder struct {
	httpReq    *larkcore.HttpReq
	emailAlias *EmailAlias
}

// 生成请求的New构造器
func NewCreateUserMailboxAliasReqBuilder() *CreateUserMailboxAliasReqBuilder {
	builder := &CreateUserMailboxAliasReqBuilder{}
	builder.httpReq = &larkcore.HttpReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *CreateUserMailboxAliasReqBuilder) UserMailboxId(userMailboxId string) *CreateUserMailboxAliasReqBuilder {
	builder.httpReq.PathParams.Set("user_mailbox_id", fmt.Sprint(userMailboxId))
	return builder
}
func (builder *CreateUserMailboxAliasReqBuilder) EmailAlias(emailAlias *EmailAlias) *CreateUserMailboxAliasReqBuilder {
	builder.emailAlias = emailAlias
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *CreateUserMailboxAliasReqBuilder) Build() *CreateUserMailboxAliasReq {
	req := &CreateUserMailboxAliasReq{}
	req.httpReq = &larkcore.HttpReq{}
	req.httpReq.PathParams = builder.httpReq.PathParams
	req.httpReq.Body = builder.emailAlias
	return req
}

type CreateUserMailboxAliasReq struct {
	httpReq    *larkcore.HttpReq
	EmailAlias *EmailAlias `body:""`
}

type CreateUserMailboxAliasRespData struct {
	UserMailboxAlias *EmailAlias `json:"user_mailbox_alias,omitempty"`
}

type CreateUserMailboxAliasResp struct {
	*larkcore.RawResponse `json:"-"`
	larkcore.CodeError
	Data *CreateUserMailboxAliasRespData `json:"data"`
}

func (resp *CreateUserMailboxAliasResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type DeleteUserMailboxAliasReqBuilder struct {
	httpReq *larkcore.HttpReq
}

// 生成请求的New构造器
func NewDeleteUserMailboxAliasReqBuilder() *DeleteUserMailboxAliasReqBuilder {
	builder := &DeleteUserMailboxAliasReqBuilder{}
	builder.httpReq = &larkcore.HttpReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *DeleteUserMailboxAliasReqBuilder) UserMailboxId(userMailboxId string) *DeleteUserMailboxAliasReqBuilder {
	builder.httpReq.PathParams.Set("user_mailbox_id", fmt.Sprint(userMailboxId))
	return builder
}
func (builder *DeleteUserMailboxAliasReqBuilder) AliasId(aliasId string) *DeleteUserMailboxAliasReqBuilder {
	builder.httpReq.PathParams.Set("alias_id", fmt.Sprint(aliasId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *DeleteUserMailboxAliasReqBuilder) Build() *DeleteUserMailboxAliasReq {
	req := &DeleteUserMailboxAliasReq{}
	req.httpReq = &larkcore.HttpReq{}
	req.httpReq.PathParams = builder.httpReq.PathParams
	return req
}

type DeleteUserMailboxAliasReq struct {
	httpReq *larkcore.HttpReq
}

type DeleteUserMailboxAliasResp struct {
	*larkcore.RawResponse `json:"-"`
	larkcore.CodeError
}

func (resp *DeleteUserMailboxAliasResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type ListUserMailboxAliasReqBuilder struct {
	httpReq *larkcore.HttpReq
}

// 生成请求的New构造器
func NewListUserMailboxAliasReqBuilder() *ListUserMailboxAliasReqBuilder {
	builder := &ListUserMailboxAliasReqBuilder{}
	builder.httpReq = &larkcore.HttpReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *ListUserMailboxAliasReqBuilder) UserMailboxId(userMailboxId string) *ListUserMailboxAliasReqBuilder {
	builder.httpReq.PathParams.Set("user_mailbox_id", fmt.Sprint(userMailboxId))
	return builder
}
func (builder *ListUserMailboxAliasReqBuilder) PageToken(pageToken string) *ListUserMailboxAliasReqBuilder {
	builder.httpReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}
func (builder *ListUserMailboxAliasReqBuilder) PageSize(pageSize int) *ListUserMailboxAliasReqBuilder {
	builder.httpReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *ListUserMailboxAliasReqBuilder) Build() *ListUserMailboxAliasReq {
	req := &ListUserMailboxAliasReq{}
	req.httpReq = &larkcore.HttpReq{}
	req.httpReq.PathParams = builder.httpReq.PathParams
	req.httpReq.QueryParams = builder.httpReq.QueryParams
	return req
}

type ListUserMailboxAliasReq struct {
	httpReq *larkcore.HttpReq
}

type ListUserMailboxAliasRespData struct {
	Items []*EmailAlias `json:"items,omitempty"`
}

type ListUserMailboxAliasResp struct {
	*larkcore.RawResponse `json:"-"`
	larkcore.CodeError
	Data *ListUserMailboxAliasRespData `json:"data"`
}

func (resp *ListUserMailboxAliasResp) Success() bool {
	return resp.Code == 0
}

// 生成消息事件结构体

// 生成请求的builder构造器
// 1.1 生成body的builder结构体
type ListMailgroupIterator struct {
	nextPageToken *string
	items         []*Mailgroup
	index         int
	limit         int
	ctx           context.Context
	req           *ListMailgroupReq
	listFunc      func(ctx context.Context, req *ListMailgroupReq, options ...larkcore.RequestOptionFunc) (*ListMailgroupResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *ListMailgroupIterator) Next() (bool, *Mailgroup, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.httpReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListMailgroupIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

type ListMailgroupMemberIterator struct {
	nextPageToken *string
	items         []*MailgroupMember
	index         int
	limit         int
	ctx           context.Context
	req           *ListMailgroupMemberReq
	listFunc      func(ctx context.Context, req *ListMailgroupMemberReq, options ...larkcore.RequestOptionFunc) (*ListMailgroupMemberResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *ListMailgroupMemberIterator) Next() (bool, *MailgroupMember, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.httpReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListMailgroupMemberIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

type ListMailgroupPermissionMemberIterator struct {
	nextPageToken *string
	items         []*MailgroupPermissionMember
	index         int
	limit         int
	ctx           context.Context
	req           *ListMailgroupPermissionMemberReq
	listFunc      func(ctx context.Context, req *ListMailgroupPermissionMemberReq, options ...larkcore.RequestOptionFunc) (*ListMailgroupPermissionMemberResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *ListMailgroupPermissionMemberIterator) Next() (bool, *MailgroupPermissionMember, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.httpReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListMailgroupPermissionMemberIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

type ListPublicMailboxIterator struct {
	nextPageToken *string
	items         []*PublicMailbox
	index         int
	limit         int
	ctx           context.Context
	req           *ListPublicMailboxReq
	listFunc      func(ctx context.Context, req *ListPublicMailboxReq, options ...larkcore.RequestOptionFunc) (*ListPublicMailboxResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *ListPublicMailboxIterator) Next() (bool, *PublicMailbox, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.httpReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListPublicMailboxIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

type ListPublicMailboxMemberIterator struct {
	nextPageToken *string
	items         []*PublicMailboxMember
	index         int
	limit         int
	ctx           context.Context
	req           *ListPublicMailboxMemberReq
	listFunc      func(ctx context.Context, req *ListPublicMailboxMemberReq, options ...larkcore.RequestOptionFunc) (*ListPublicMailboxMemberResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *ListPublicMailboxMemberIterator) Next() (bool, *PublicMailboxMember, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.httpReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListPublicMailboxMemberIterator) NextPageToken() *string {
	return iterator.nextPageToken
}
