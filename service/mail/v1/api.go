// Package mail code generated by oapi sdk gen
package mail

import (
	"context"
	"net/http"

	"github.com/feishu/oapi-sdk-go/core"
)

/**
构建业务域服务实例
**/
func NewService(httpClient *http.Client, config *core.Config) *MailService {
	m := &MailService{httpClient: httpClient, config: config}
	m.Mailgroup = &mailgroup{service: m}
	m.MailgroupAlias = &mailgroupAlias{service: m}
	m.MailgroupMember = &mailgroupMember{service: m}
	m.MailgroupPermissionMember = &mailgroupPermissionMember{service: m}
	m.PublicMailbox = &publicMailbox{service: m}
	m.PublicMailboxAlias = &publicMailboxAlias{service: m}
	m.PublicMailboxMember = &publicMailboxMember{service: m}
	m.User = &user{service: m}
	m.UserMailbox = &userMailbox{service: m}
	m.UserMailboxAlias = &userMailboxAlias{service: m}
	return m
}

/**
业务域服务定义
**/
type MailService struct {
	httpClient                *http.Client
	config                    *core.Config
	Mailgroup                 *mailgroup
	MailgroupAlias            *mailgroupAlias
	MailgroupMember           *mailgroupMember
	MailgroupPermissionMember *mailgroupPermissionMember
	PublicMailbox             *publicMailbox
	PublicMailboxAlias        *publicMailboxAlias
	PublicMailboxMember       *publicMailboxMember
	User                      *user
	UserMailbox               *userMailbox
	UserMailboxAlias          *userMailboxAlias
}

/**
资源服务定义
**/
type mailgroup struct {
	service *MailService
}
type mailgroupAlias struct {
	service *MailService
}
type mailgroupMember struct {
	service *MailService
}
type mailgroupPermissionMember struct {
	service *MailService
}
type publicMailbox struct {
	service *MailService
}
type publicMailboxAlias struct {
	service *MailService
}
type publicMailboxMember struct {
	service *MailService
}
type user struct {
	service *MailService
}
type userMailbox struct {
	service *MailService
}
type userMailboxAlias struct {
	service *MailService
}

/**
资源服务方法定义
**/
func (m *mailgroup) Create(ctx context.Context, req *CreateMailgroupReq, options ...core.RequestOptionFunc) (*CreateMailgroupResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, m.service.config, http.MethodPost,
		"/open-apis/mail/v1/mailgroups", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &CreateMailgroupResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *mailgroup) Delete(ctx context.Context, req *DeleteMailgroupReq, options ...core.RequestOptionFunc) (*DeleteMailgroupResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, m.service.config, http.MethodDelete,
		"/open-apis/mail/v1/mailgroups/:mailgroup_id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &DeleteMailgroupResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *mailgroup) Get(ctx context.Context, req *GetMailgroupReq, options ...core.RequestOptionFunc) (*GetMailgroupResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, m.service.config, http.MethodGet,
		"/open-apis/mail/v1/mailgroups/:mailgroup_id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &GetMailgroupResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *mailgroup) List(ctx context.Context, req *ListMailgroupReq, options ...core.RequestOptionFunc) (*ListMailgroupResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, m.service.config, http.MethodGet,
		"/open-apis/mail/v1/mailgroups", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &ListMailgroupResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}

/**如果是分页查询，则添加迭代器函数**/
func (m *mailgroup) ListMailgroup(ctx context.Context, req *ListMailgroupReq, options ...core.RequestOptionFunc) (*ListMailgroupIterator, error) {
	return &ListMailgroupIterator{
		ctx:      ctx,
		req:      req,
		listFunc: m.List,
		options:  options,
		limit:    req.Limit}, nil
}
func (m *mailgroup) Patch(ctx context.Context, req *PatchMailgroupReq, options ...core.RequestOptionFunc) (*PatchMailgroupResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, m.service.config, http.MethodPatch,
		"/open-apis/mail/v1/mailgroups/:mailgroup_id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &PatchMailgroupResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *mailgroup) Update(ctx context.Context, req *UpdateMailgroupReq, options ...core.RequestOptionFunc) (*UpdateMailgroupResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, m.service.config, http.MethodPut,
		"/open-apis/mail/v1/mailgroups/:mailgroup_id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &UpdateMailgroupResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *mailgroupAlias) Create(ctx context.Context, req *CreateMailgroupAliasReq, options ...core.RequestOptionFunc) (*CreateMailgroupAliasResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, m.service.config, http.MethodPost,
		"/open-apis/mail/v1/mailgroups/:mailgroup_id/aliases", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &CreateMailgroupAliasResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *mailgroupAlias) Delete(ctx context.Context, req *DeleteMailgroupAliasReq, options ...core.RequestOptionFunc) (*DeleteMailgroupAliasResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, m.service.config, http.MethodDelete,
		"/open-apis/mail/v1/mailgroups/:mailgroup_id/aliases/:alias_id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &DeleteMailgroupAliasResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *mailgroupAlias) List(ctx context.Context, req *ListMailgroupAliasReq, options ...core.RequestOptionFunc) (*ListMailgroupAliasResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, m.service.config, http.MethodGet,
		"/open-apis/mail/v1/mailgroups/:mailgroup_id/aliases", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &ListMailgroupAliasResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *mailgroupMember) Create(ctx context.Context, req *CreateMailgroupMemberReq, options ...core.RequestOptionFunc) (*CreateMailgroupMemberResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, m.service.config, http.MethodPost,
		"/open-apis/mail/v1/mailgroups/:mailgroup_id/members", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &CreateMailgroupMemberResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *mailgroupMember) Delete(ctx context.Context, req *DeleteMailgroupMemberReq, options ...core.RequestOptionFunc) (*DeleteMailgroupMemberResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, m.service.config, http.MethodDelete,
		"/open-apis/mail/v1/mailgroups/:mailgroup_id/members/:member_id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &DeleteMailgroupMemberResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *mailgroupMember) Get(ctx context.Context, req *GetMailgroupMemberReq, options ...core.RequestOptionFunc) (*GetMailgroupMemberResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, m.service.config, http.MethodGet,
		"/open-apis/mail/v1/mailgroups/:mailgroup_id/members/:member_id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &GetMailgroupMemberResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *mailgroupMember) List(ctx context.Context, req *ListMailgroupMemberReq, options ...core.RequestOptionFunc) (*ListMailgroupMemberResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, m.service.config, http.MethodGet,
		"/open-apis/mail/v1/mailgroups/:mailgroup_id/members", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &ListMailgroupMemberResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}

/**如果是分页查询，则添加迭代器函数**/
func (m *mailgroupMember) ListMailgroupMember(ctx context.Context, req *ListMailgroupMemberReq, options ...core.RequestOptionFunc) (*ListMailgroupMemberIterator, error) {
	return &ListMailgroupMemberIterator{
		ctx:      ctx,
		req:      req,
		listFunc: m.List,
		options:  options,
		limit:    req.Limit}, nil
}
func (m *mailgroupPermissionMember) Create(ctx context.Context, req *CreateMailgroupPermissionMemberReq, options ...core.RequestOptionFunc) (*CreateMailgroupPermissionMemberResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, m.service.config, http.MethodPost,
		"/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &CreateMailgroupPermissionMemberResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *mailgroupPermissionMember) Delete(ctx context.Context, req *DeleteMailgroupPermissionMemberReq, options ...core.RequestOptionFunc) (*DeleteMailgroupPermissionMemberResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, m.service.config, http.MethodDelete,
		"/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members/:permission_member_id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &DeleteMailgroupPermissionMemberResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *mailgroupPermissionMember) Get(ctx context.Context, req *GetMailgroupPermissionMemberReq, options ...core.RequestOptionFunc) (*GetMailgroupPermissionMemberResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, m.service.config, http.MethodGet,
		"/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members/:permission_member_id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &GetMailgroupPermissionMemberResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *mailgroupPermissionMember) List(ctx context.Context, req *ListMailgroupPermissionMemberReq, options ...core.RequestOptionFunc) (*ListMailgroupPermissionMemberResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, m.service.config, http.MethodGet,
		"/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &ListMailgroupPermissionMemberResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}

/**如果是分页查询，则添加迭代器函数**/
func (m *mailgroupPermissionMember) ListMailgroupPermissionMember(ctx context.Context, req *ListMailgroupPermissionMemberReq, options ...core.RequestOptionFunc) (*ListMailgroupPermissionMemberIterator, error) {
	return &ListMailgroupPermissionMemberIterator{
		ctx:      ctx,
		req:      req,
		listFunc: m.List,
		options:  options,
		limit:    req.Limit}, nil
}
func (p *publicMailbox) Create(ctx context.Context, req *CreatePublicMailboxReq, options ...core.RequestOptionFunc) (*CreatePublicMailboxResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, p.service.config, http.MethodPost,
		"/open-apis/mail/v1/public_mailboxes", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &CreatePublicMailboxResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (p *publicMailbox) Delete(ctx context.Context, req *DeletePublicMailboxReq, options ...core.RequestOptionFunc) (*DeletePublicMailboxResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, p.service.config, http.MethodDelete,
		"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &DeletePublicMailboxResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (p *publicMailbox) Get(ctx context.Context, req *GetPublicMailboxReq, options ...core.RequestOptionFunc) (*GetPublicMailboxResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, p.service.config, http.MethodGet,
		"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &GetPublicMailboxResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (p *publicMailbox) List(ctx context.Context, req *ListPublicMailboxReq, options ...core.RequestOptionFunc) (*ListPublicMailboxResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, p.service.config, http.MethodGet,
		"/open-apis/mail/v1/public_mailboxes", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &ListPublicMailboxResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}

/**如果是分页查询，则添加迭代器函数**/
func (p *publicMailbox) ListPublicMailbox(ctx context.Context, req *ListPublicMailboxReq, options ...core.RequestOptionFunc) (*ListPublicMailboxIterator, error) {
	return &ListPublicMailboxIterator{
		ctx:      ctx,
		req:      req,
		listFunc: p.List,
		options:  options,
		limit:    req.Limit}, nil
}
func (p *publicMailbox) Patch(ctx context.Context, req *PatchPublicMailboxReq, options ...core.RequestOptionFunc) (*PatchPublicMailboxResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, p.service.config, http.MethodPatch,
		"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &PatchPublicMailboxResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (p *publicMailbox) Update(ctx context.Context, req *UpdatePublicMailboxReq, options ...core.RequestOptionFunc) (*UpdatePublicMailboxResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, p.service.config, http.MethodPut,
		"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &UpdatePublicMailboxResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (p *publicMailboxAlias) Create(ctx context.Context, req *CreatePublicMailboxAliasReq, options ...core.RequestOptionFunc) (*CreatePublicMailboxAliasResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, p.service.config, http.MethodPost,
		"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/aliases", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &CreatePublicMailboxAliasResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (p *publicMailboxAlias) Delete(ctx context.Context, req *DeletePublicMailboxAliasReq, options ...core.RequestOptionFunc) (*DeletePublicMailboxAliasResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, p.service.config, http.MethodDelete,
		"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/aliases/:alias_id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &DeletePublicMailboxAliasResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (p *publicMailboxAlias) List(ctx context.Context, req *ListPublicMailboxAliasReq, options ...core.RequestOptionFunc) (*ListPublicMailboxAliasResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, p.service.config, http.MethodGet,
		"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/aliases", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &ListPublicMailboxAliasResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (p *publicMailboxMember) Clear(ctx context.Context, req *ClearPublicMailboxMemberReq, options ...core.RequestOptionFunc) (*ClearPublicMailboxMemberResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, p.service.config, http.MethodPost,
		"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members/clear", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &ClearPublicMailboxMemberResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (p *publicMailboxMember) Create(ctx context.Context, req *CreatePublicMailboxMemberReq, options ...core.RequestOptionFunc) (*CreatePublicMailboxMemberResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, p.service.config, http.MethodPost,
		"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &CreatePublicMailboxMemberResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (p *publicMailboxMember) Delete(ctx context.Context, req *DeletePublicMailboxMemberReq, options ...core.RequestOptionFunc) (*DeletePublicMailboxMemberResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, p.service.config, http.MethodDelete,
		"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members/:member_id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &DeletePublicMailboxMemberResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (p *publicMailboxMember) Get(ctx context.Context, req *GetPublicMailboxMemberReq, options ...core.RequestOptionFunc) (*GetPublicMailboxMemberResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, p.service.config, http.MethodGet,
		"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members/:member_id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &GetPublicMailboxMemberResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (p *publicMailboxMember) List(ctx context.Context, req *ListPublicMailboxMemberReq, options ...core.RequestOptionFunc) (*ListPublicMailboxMemberResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, p.service.config, http.MethodGet,
		"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &ListPublicMailboxMemberResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}

/**如果是分页查询，则添加迭代器函数**/
func (p *publicMailboxMember) ListPublicMailboxMember(ctx context.Context, req *ListPublicMailboxMemberReq, options ...core.RequestOptionFunc) (*ListPublicMailboxMemberIterator, error) {
	return &ListPublicMailboxMemberIterator{
		ctx:      ctx,
		req:      req,
		listFunc: p.List,
		options:  options,
		limit:    req.Limit}, nil
}
func (u *user) Query(ctx context.Context, req *QueryUserReq, options ...core.RequestOptionFunc) (*QueryUserResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, u.service.config, http.MethodPost,
		"/open-apis/mail/v1/users/query", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &QueryUserResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (u *userMailbox) Delete(ctx context.Context, req *DeleteUserMailboxReq, options ...core.RequestOptionFunc) (*DeleteUserMailboxResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, u.service.config, http.MethodDelete,
		"/open-apis/mail/v1/user_mailboxes/:user_mailbox_id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &DeleteUserMailboxResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (u *userMailboxAlias) Create(ctx context.Context, req *CreateUserMailboxAliasReq, options ...core.RequestOptionFunc) (*CreateUserMailboxAliasResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, u.service.config, http.MethodPost,
		"/open-apis/mail/v1/user_mailboxes/:user_mailbox_id/aliases", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &CreateUserMailboxAliasResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (u *userMailboxAlias) Delete(ctx context.Context, req *DeleteUserMailboxAliasReq, options ...core.RequestOptionFunc) (*DeleteUserMailboxAliasResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, u.service.config, http.MethodDelete,
		"/open-apis/mail/v1/user_mailboxes/:user_mailbox_id/aliases/:alias_id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &DeleteUserMailboxAliasResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (u *userMailboxAlias) List(ctx context.Context, req *ListUserMailboxAliasReq, options ...core.RequestOptionFunc) (*ListUserMailboxAliasResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, u.service.config, http.MethodGet,
		"/open-apis/mail/v1/user_mailboxes/:user_mailbox_id/aliases", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &ListUserMailboxAliasResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
