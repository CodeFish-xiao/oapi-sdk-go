// Package okr code generated by oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package larkokr

import (
	"io"

	"bytes"

	"fmt"

	"github.com/larksuite/oapi-sdk-go/v3/core"
)

const (
	TargetTypeOkr的O  = 2
	TargetTypeOkr的KR = 3
)

const (
	UserIdTypeUserId        = "user_id"
	UserIdTypeUnionId       = "union_id"
	UserIdTypeOpenId        = "open_id"
	UserIdTypePeopleAdminId = "people_admin_id"
)

type AlignObjective struct {
	Id     *string `json:"id,omitempty"`
	OkrId  *string `json:"okr_id,omitempty"`
	UserId *string `json:"user_id,omitempty"`
}

type AlignObjectiveBuilder struct {
	id         string
	idFlag     bool
	okrId      string
	okrIdFlag  bool
	userId     string
	userIdFlag bool
}

func NewAlignObjectiveBuilder() *AlignObjectiveBuilder {
	builder := &AlignObjectiveBuilder{}
	return builder
}

func (builder *AlignObjectiveBuilder) Id(id string) *AlignObjectiveBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *AlignObjectiveBuilder) OkrId(okrId string) *AlignObjectiveBuilder {
	builder.okrId = okrId
	builder.okrIdFlag = true
	return builder
}
func (builder *AlignObjectiveBuilder) UserId(userId string) *AlignObjectiveBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}

func (builder *AlignObjectiveBuilder) Build() *AlignObjective {
	req := &AlignObjective{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.okrIdFlag {
		req.OkrId = &builder.okrId

	}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	return req
}

type ContentBlock struct {
	Blocks []*ContentBlockElement `json:"blocks,omitempty"`
}

type ContentBlockBuilder struct {
	blocks     []*ContentBlockElement
	blocksFlag bool
}

func NewContentBlockBuilder() *ContentBlockBuilder {
	builder := &ContentBlockBuilder{}
	return builder
}

func (builder *ContentBlockBuilder) Blocks(blocks []*ContentBlockElement) *ContentBlockBuilder {
	builder.blocks = blocks
	builder.blocksFlag = true
	return builder
}

func (builder *ContentBlockBuilder) Build() *ContentBlock {
	req := &ContentBlock{}
	if builder.blocksFlag {
		req.Blocks = builder.blocks
	}
	return req
}

type ContentBlockElement struct {
	Type      *string           `json:"type,omitempty"`
	Paragraph *ContentParagraph `json:"paragraph,omitempty"`
	Gallery   *ContentGallery   `json:"gallery,omitempty"`
}

type ContentBlockElementBuilder struct {
	type_         string
	typeFlag      bool
	paragraph     *ContentParagraph
	paragraphFlag bool
	gallery       *ContentGallery
	galleryFlag   bool
}

func NewContentBlockElementBuilder() *ContentBlockElementBuilder {
	builder := &ContentBlockElementBuilder{}
	return builder
}

func (builder *ContentBlockElementBuilder) Type(type_ string) *ContentBlockElementBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}
func (builder *ContentBlockElementBuilder) Paragraph(paragraph *ContentParagraph) *ContentBlockElementBuilder {
	builder.paragraph = paragraph
	builder.paragraphFlag = true
	return builder
}
func (builder *ContentBlockElementBuilder) Gallery(gallery *ContentGallery) *ContentBlockElementBuilder {
	builder.gallery = gallery
	builder.galleryFlag = true
	return builder
}

func (builder *ContentBlockElementBuilder) Build() *ContentBlockElement {
	req := &ContentBlockElement{}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	if builder.paragraphFlag {
		req.Paragraph = builder.paragraph
	}
	if builder.galleryFlag {
		req.Gallery = builder.gallery
	}
	return req
}

type ContentColor struct {
	Red   *int     `json:"red,omitempty"`
	Green *int     `json:"green,omitempty"`
	Blue  *int     `json:"blue,omitempty"`
	Alpha *float64 `json:"alpha,omitempty"`
}

type ContentColorBuilder struct {
	red       int
	redFlag   bool
	green     int
	greenFlag bool
	blue      int
	blueFlag  bool
	alpha     float64
	alphaFlag bool
}

func NewContentColorBuilder() *ContentColorBuilder {
	builder := &ContentColorBuilder{}
	return builder
}

func (builder *ContentColorBuilder) Red(red int) *ContentColorBuilder {
	builder.red = red
	builder.redFlag = true
	return builder
}
func (builder *ContentColorBuilder) Green(green int) *ContentColorBuilder {
	builder.green = green
	builder.greenFlag = true
	return builder
}
func (builder *ContentColorBuilder) Blue(blue int) *ContentColorBuilder {
	builder.blue = blue
	builder.blueFlag = true
	return builder
}
func (builder *ContentColorBuilder) Alpha(alpha float64) *ContentColorBuilder {
	builder.alpha = alpha
	builder.alphaFlag = true
	return builder
}

func (builder *ContentColorBuilder) Build() *ContentColor {
	req := &ContentColor{}
	if builder.redFlag {
		req.Red = &builder.red

	}
	if builder.greenFlag {
		req.Green = &builder.green

	}
	if builder.blueFlag {
		req.Blue = &builder.blue

	}
	if builder.alphaFlag {
		req.Alpha = &builder.alpha

	}
	return req
}

type ContentDocsLink struct {
	Url   *string `json:"url,omitempty"`
	Title *string `json:"title,omitempty"`
}

type ContentDocsLinkBuilder struct {
	url       string
	urlFlag   bool
	title     string
	titleFlag bool
}

func NewContentDocsLinkBuilder() *ContentDocsLinkBuilder {
	builder := &ContentDocsLinkBuilder{}
	return builder
}

func (builder *ContentDocsLinkBuilder) Url(url string) *ContentDocsLinkBuilder {
	builder.url = url
	builder.urlFlag = true
	return builder
}
func (builder *ContentDocsLinkBuilder) Title(title string) *ContentDocsLinkBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}

func (builder *ContentDocsLinkBuilder) Build() *ContentDocsLink {
	req := &ContentDocsLink{}
	if builder.urlFlag {
		req.Url = &builder.url

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	return req
}

type ContentGallery struct {
	ImageList []*ContentImageItem `json:"imageList,omitempty"`
}

type ContentGalleryBuilder struct {
	imageList     []*ContentImageItem
	imageListFlag bool
}

func NewContentGalleryBuilder() *ContentGalleryBuilder {
	builder := &ContentGalleryBuilder{}
	return builder
}

func (builder *ContentGalleryBuilder) ImageList(imageList []*ContentImageItem) *ContentGalleryBuilder {
	builder.imageList = imageList
	builder.imageListFlag = true
	return builder
}

func (builder *ContentGalleryBuilder) Build() *ContentGallery {
	req := &ContentGallery{}
	if builder.imageListFlag {
		req.ImageList = builder.imageList
	}
	return req
}

type ContentImageItem struct {
	FileToken *string  `json:"fileToken,omitempty"`
	Url       *string  `json:"url,omitempty"`
	Width     *float64 `json:"width,omitempty"`
	Height    *float64 `json:"height,omitempty"`
}

type ContentImageItemBuilder struct {
	fileToken     string
	fileTokenFlag bool
	url           string
	urlFlag       bool
	width         float64
	widthFlag     bool
	height        float64
	heightFlag    bool
}

func NewContentImageItemBuilder() *ContentImageItemBuilder {
	builder := &ContentImageItemBuilder{}
	return builder
}

func (builder *ContentImageItemBuilder) FileToken(fileToken string) *ContentImageItemBuilder {
	builder.fileToken = fileToken
	builder.fileTokenFlag = true
	return builder
}
func (builder *ContentImageItemBuilder) Url(url string) *ContentImageItemBuilder {
	builder.url = url
	builder.urlFlag = true
	return builder
}
func (builder *ContentImageItemBuilder) Width(width float64) *ContentImageItemBuilder {
	builder.width = width
	builder.widthFlag = true
	return builder
}
func (builder *ContentImageItemBuilder) Height(height float64) *ContentImageItemBuilder {
	builder.height = height
	builder.heightFlag = true
	return builder
}

func (builder *ContentImageItemBuilder) Build() *ContentImageItem {
	req := &ContentImageItem{}
	if builder.fileTokenFlag {
		req.FileToken = &builder.fileToken

	}
	if builder.urlFlag {
		req.Url = &builder.url

	}
	if builder.widthFlag {
		req.Width = &builder.width

	}
	if builder.heightFlag {
		req.Height = &builder.height

	}
	return req
}

type ContentLink struct {
	Url *string `json:"url,omitempty"`
}

type ContentLinkBuilder struct {
	url     string
	urlFlag bool
}

func NewContentLinkBuilder() *ContentLinkBuilder {
	builder := &ContentLinkBuilder{}
	return builder
}

func (builder *ContentLinkBuilder) Url(url string) *ContentLinkBuilder {
	builder.url = url
	builder.urlFlag = true
	return builder
}

func (builder *ContentLinkBuilder) Build() *ContentLink {
	req := &ContentLink{}
	if builder.urlFlag {
		req.Url = &builder.url

	}
	return req
}

type ContentList struct {
	Type        *string `json:"type,omitempty"`
	IndentLevel *int    `json:"indentLevel,omitempty"`
	Number      *int    `json:"number,omitempty"`
}

type ContentListBuilder struct {
	type_           string
	typeFlag        bool
	indentLevel     int
	indentLevelFlag bool
	number          int
	numberFlag      bool
}

func NewContentListBuilder() *ContentListBuilder {
	builder := &ContentListBuilder{}
	return builder
}

func (builder *ContentListBuilder) Type(type_ string) *ContentListBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}
func (builder *ContentListBuilder) IndentLevel(indentLevel int) *ContentListBuilder {
	builder.indentLevel = indentLevel
	builder.indentLevelFlag = true
	return builder
}
func (builder *ContentListBuilder) Number(number int) *ContentListBuilder {
	builder.number = number
	builder.numberFlag = true
	return builder
}

func (builder *ContentListBuilder) Build() *ContentList {
	req := &ContentList{}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	if builder.indentLevelFlag {
		req.IndentLevel = &builder.indentLevel

	}
	if builder.numberFlag {
		req.Number = &builder.number

	}
	return req
}

type ContentParagraph struct {
	Style    *ContentParagraphStyle     `json:"style,omitempty"`
	Elements []*ContentParagraphElement `json:"elements,omitempty"`
}

type ContentParagraphBuilder struct {
	style        *ContentParagraphStyle
	styleFlag    bool
	elements     []*ContentParagraphElement
	elementsFlag bool
}

func NewContentParagraphBuilder() *ContentParagraphBuilder {
	builder := &ContentParagraphBuilder{}
	return builder
}

func (builder *ContentParagraphBuilder) Style(style *ContentParagraphStyle) *ContentParagraphBuilder {
	builder.style = style
	builder.styleFlag = true
	return builder
}
func (builder *ContentParagraphBuilder) Elements(elements []*ContentParagraphElement) *ContentParagraphBuilder {
	builder.elements = elements
	builder.elementsFlag = true
	return builder
}

func (builder *ContentParagraphBuilder) Build() *ContentParagraph {
	req := &ContentParagraph{}
	if builder.styleFlag {
		req.Style = builder.style
	}
	if builder.elementsFlag {
		req.Elements = builder.elements
	}
	return req
}

type ContentParagraphElement struct {
	Type     *string          `json:"type,omitempty"`
	TextRun  *ContentTextRun  `json:"textRun,omitempty"`
	DocsLink *ContentDocsLink `json:"docsLink,omitempty"`
	Person   *ContentPerson   `json:"person,omitempty"`
}

type ContentParagraphElementBuilder struct {
	type_        string
	typeFlag     bool
	textRun      *ContentTextRun
	textRunFlag  bool
	docsLink     *ContentDocsLink
	docsLinkFlag bool
	person       *ContentPerson
	personFlag   bool
}

func NewContentParagraphElementBuilder() *ContentParagraphElementBuilder {
	builder := &ContentParagraphElementBuilder{}
	return builder
}

func (builder *ContentParagraphElementBuilder) Type(type_ string) *ContentParagraphElementBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}
func (builder *ContentParagraphElementBuilder) TextRun(textRun *ContentTextRun) *ContentParagraphElementBuilder {
	builder.textRun = textRun
	builder.textRunFlag = true
	return builder
}
func (builder *ContentParagraphElementBuilder) DocsLink(docsLink *ContentDocsLink) *ContentParagraphElementBuilder {
	builder.docsLink = docsLink
	builder.docsLinkFlag = true
	return builder
}
func (builder *ContentParagraphElementBuilder) Person(person *ContentPerson) *ContentParagraphElementBuilder {
	builder.person = person
	builder.personFlag = true
	return builder
}

func (builder *ContentParagraphElementBuilder) Build() *ContentParagraphElement {
	req := &ContentParagraphElement{}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	if builder.textRunFlag {
		req.TextRun = builder.textRun
	}
	if builder.docsLinkFlag {
		req.DocsLink = builder.docsLink
	}
	if builder.personFlag {
		req.Person = builder.person
	}
	return req
}

type ContentParagraphStyle struct {
	List []*ContentList `json:"list,omitempty"`
}

type ContentParagraphStyleBuilder struct {
	list     []*ContentList
	listFlag bool
}

func NewContentParagraphStyleBuilder() *ContentParagraphStyleBuilder {
	builder := &ContentParagraphStyleBuilder{}
	return builder
}

func (builder *ContentParagraphStyleBuilder) List(list []*ContentList) *ContentParagraphStyleBuilder {
	builder.list = list
	builder.listFlag = true
	return builder
}

func (builder *ContentParagraphStyleBuilder) Build() *ContentParagraphStyle {
	req := &ContentParagraphStyle{}
	if builder.listFlag {
		req.List = builder.list
	}
	return req
}

type ContentPerson struct {
	OpenId *string `json:"openId,omitempty"`
}

type ContentPersonBuilder struct {
	openId     string
	openIdFlag bool
}

func NewContentPersonBuilder() *ContentPersonBuilder {
	builder := &ContentPersonBuilder{}
	return builder
}

func (builder *ContentPersonBuilder) OpenId(openId string) *ContentPersonBuilder {
	builder.openId = openId
	builder.openIdFlag = true
	return builder
}

func (builder *ContentPersonBuilder) Build() *ContentPerson {
	req := &ContentPerson{}
	if builder.openIdFlag {
		req.OpenId = &builder.openId

	}
	return req
}

type ContentTextRun struct {
	Text  *string           `json:"text,omitempty"`
	Style *ContentTextStyle `json:"style,omitempty"`
}

type ContentTextRunBuilder struct {
	text      string
	textFlag  bool
	style     *ContentTextStyle
	styleFlag bool
}

func NewContentTextRunBuilder() *ContentTextRunBuilder {
	builder := &ContentTextRunBuilder{}
	return builder
}

func (builder *ContentTextRunBuilder) Text(text string) *ContentTextRunBuilder {
	builder.text = text
	builder.textFlag = true
	return builder
}
func (builder *ContentTextRunBuilder) Style(style *ContentTextStyle) *ContentTextRunBuilder {
	builder.style = style
	builder.styleFlag = true
	return builder
}

func (builder *ContentTextRunBuilder) Build() *ContentTextRun {
	req := &ContentTextRun{}
	if builder.textFlag {
		req.Text = &builder.text

	}
	if builder.styleFlag {
		req.Style = builder.style
	}
	return req
}

type ContentTextStyle struct {
	Bold          *bool         `json:"bold,omitempty"`
	StrikeThrough *bool         `json:"strikeThrough,omitempty"`
	BackColor     *ContentColor `json:"backColor,omitempty"`
	TextColor     *ContentColor `json:"textColor,omitempty"`
	Link          *ContentLink  `json:"link,omitempty"`
}

type ContentTextStyleBuilder struct {
	bold              bool
	boldFlag          bool
	strikeThrough     bool
	strikeThroughFlag bool
	backColor         *ContentColor
	backColorFlag     bool
	textColor         *ContentColor
	textColorFlag     bool
	link              *ContentLink
	linkFlag          bool
}

func NewContentTextStyleBuilder() *ContentTextStyleBuilder {
	builder := &ContentTextStyleBuilder{}
	return builder
}

func (builder *ContentTextStyleBuilder) Bold(bold bool) *ContentTextStyleBuilder {
	builder.bold = bold
	builder.boldFlag = true
	return builder
}
func (builder *ContentTextStyleBuilder) StrikeThrough(strikeThrough bool) *ContentTextStyleBuilder {
	builder.strikeThrough = strikeThrough
	builder.strikeThroughFlag = true
	return builder
}
func (builder *ContentTextStyleBuilder) BackColor(backColor *ContentColor) *ContentTextStyleBuilder {
	builder.backColor = backColor
	builder.backColorFlag = true
	return builder
}
func (builder *ContentTextStyleBuilder) TextColor(textColor *ContentColor) *ContentTextStyleBuilder {
	builder.textColor = textColor
	builder.textColorFlag = true
	return builder
}
func (builder *ContentTextStyleBuilder) Link(link *ContentLink) *ContentTextStyleBuilder {
	builder.link = link
	builder.linkFlag = true
	return builder
}

func (builder *ContentTextStyleBuilder) Build() *ContentTextStyle {
	req := &ContentTextStyle{}
	if builder.boldFlag {
		req.Bold = &builder.bold

	}
	if builder.strikeThroughFlag {
		req.StrikeThrough = &builder.strikeThrough

	}
	if builder.backColorFlag {
		req.BackColor = builder.backColor
	}
	if builder.textColorFlag {
		req.TextColor = builder.textColor
	}
	if builder.linkFlag {
		req.Link = builder.link
	}
	return req
}

type CurrentOkrSimple struct {
	OkrId    *string `json:"okr_id,omitempty"`
	PeriodId *string `json:"period_id,omitempty"`
}

type CurrentOkrSimpleBuilder struct {
	okrId        string
	okrIdFlag    bool
	periodId     string
	periodIdFlag bool
}

func NewCurrentOkrSimpleBuilder() *CurrentOkrSimpleBuilder {
	builder := &CurrentOkrSimpleBuilder{}
	return builder
}

func (builder *CurrentOkrSimpleBuilder) OkrId(okrId string) *CurrentOkrSimpleBuilder {
	builder.okrId = okrId
	builder.okrIdFlag = true
	return builder
}
func (builder *CurrentOkrSimpleBuilder) PeriodId(periodId string) *CurrentOkrSimpleBuilder {
	builder.periodId = periodId
	builder.periodIdFlag = true
	return builder
}

func (builder *CurrentOkrSimpleBuilder) Build() *CurrentOkrSimple {
	req := &CurrentOkrSimple{}
	if builder.okrIdFlag {
		req.OkrId = &builder.okrId

	}
	if builder.periodIdFlag {
		req.PeriodId = &builder.periodId

	}
	return req
}

type Dummy struct {
	Id *string `json:"id,omitempty"`
}

type DummyBuilder struct {
	id     string
	idFlag bool
}

func NewDummyBuilder() *DummyBuilder {
	builder := &DummyBuilder{}
	return builder
}

func (builder *DummyBuilder) Id(id string) *DummyBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

func (builder *DummyBuilder) Build() *Dummy {
	req := &Dummy{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	return req
}

type ImageInfo struct {
	FileToken *string `json:"file_token,omitempty"`
	Url       *string `json:"url,omitempty"`
}

type ImageInfoBuilder struct {
	fileToken     string
	fileTokenFlag bool
	url           string
	urlFlag       bool
}

func NewImageInfoBuilder() *ImageInfoBuilder {
	builder := &ImageInfoBuilder{}
	return builder
}

func (builder *ImageInfoBuilder) FileToken(fileToken string) *ImageInfoBuilder {
	builder.fileToken = fileToken
	builder.fileTokenFlag = true
	return builder
}
func (builder *ImageInfoBuilder) Url(url string) *ImageInfoBuilder {
	builder.url = url
	builder.urlFlag = true
	return builder
}

func (builder *ImageInfoBuilder) Build() *ImageInfo {
	req := &ImageInfo{}
	if builder.fileTokenFlag {
		req.FileToken = &builder.fileToken

	}
	if builder.urlFlag {
		req.Url = &builder.url

	}
	return req
}

type Kr struct {
	Id         *string    `json:"id,omitempty"`
	Pos        *string    `json:"pos,omitempty"`
	Score      *string    `json:"score,omitempty"`
	Weight     *string    `json:"weight,omitempty"`
	Content    *KrContent `json:"content,omitempty"`
	CreateTime *int       `json:"create_time,omitempty"`
	ModifyTime *int       `json:"modify_time,omitempty"`
}

type KrBuilder struct {
	id             string
	idFlag         bool
	pos            string
	posFlag        bool
	score          string
	scoreFlag      bool
	weight         string
	weightFlag     bool
	content        *KrContent
	contentFlag    bool
	createTime     int
	createTimeFlag bool
	modifyTime     int
	modifyTimeFlag bool
}

func NewKrBuilder() *KrBuilder {
	builder := &KrBuilder{}
	return builder
}

func (builder *KrBuilder) Id(id string) *KrBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *KrBuilder) Pos(pos string) *KrBuilder {
	builder.pos = pos
	builder.posFlag = true
	return builder
}
func (builder *KrBuilder) Score(score string) *KrBuilder {
	builder.score = score
	builder.scoreFlag = true
	return builder
}
func (builder *KrBuilder) Weight(weight string) *KrBuilder {
	builder.weight = weight
	builder.weightFlag = true
	return builder
}
func (builder *KrBuilder) Content(content *KrContent) *KrBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}
func (builder *KrBuilder) CreateTime(createTime int) *KrBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}
func (builder *KrBuilder) ModifyTime(modifyTime int) *KrBuilder {
	builder.modifyTime = modifyTime
	builder.modifyTimeFlag = true
	return builder
}

func (builder *KrBuilder) Build() *Kr {
	req := &Kr{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.posFlag {
		req.Pos = &builder.pos

	}
	if builder.scoreFlag {
		req.Score = &builder.score

	}
	if builder.weightFlag {
		req.Weight = &builder.weight

	}
	if builder.contentFlag {
		req.Content = builder.content
	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.modifyTimeFlag {
		req.ModifyTime = &builder.modifyTime

	}
	return req
}

type KrContent struct {
	Zh *string `json:"zh,omitempty"`
	En *string `json:"en,omitempty"`
}

type KrContentBuilder struct {
	zh     string
	zhFlag bool
	en     string
	enFlag bool
}

func NewKrContentBuilder() *KrContentBuilder {
	builder := &KrContentBuilder{}
	return builder
}

func (builder *KrContentBuilder) Zh(zh string) *KrContentBuilder {
	builder.zh = zh
	builder.zhFlag = true
	return builder
}
func (builder *KrContentBuilder) En(en string) *KrContentBuilder {
	builder.en = en
	builder.enFlag = true
	return builder
}

func (builder *KrContentBuilder) Build() *KrContent {
	req := &KrContent{}
	if builder.zhFlag {
		req.Zh = &builder.zh

	}
	if builder.enFlag {
		req.En = &builder.en

	}
	return req
}

type Objective struct {
	Id                    *string            `json:"id,omitempty"`
	OkrId                 *string            `json:"okr_id,omitempty"`
	UserId                *string            `json:"user_id,omitempty"`
	Pos                   *string            `json:"pos,omitempty"`
	Score                 *string            `json:"score,omitempty"`
	Name                  *ObjectiveName     `json:"name,omitempty"`
	Progress              *ObjectiveProgress `json:"progress,omitempty"`
	CreateTime            *int               `json:"create_time,omitempty"`
	ModifyTime            *int               `json:"modify_time,omitempty"`
	KrList                []*Kr              `json:"kr_list,omitempty"`
	AligningObjectiveList []*AlignObjective  `json:"aligning_objective_list,omitempty"`
	AlignedObjectiveList  []*AlignObjective  `json:"aligned_objective_list,omitempty"`
}

type ObjectiveBuilder struct {
	id                        string
	idFlag                    bool
	okrId                     string
	okrIdFlag                 bool
	userId                    string
	userIdFlag                bool
	pos                       string
	posFlag                   bool
	score                     string
	scoreFlag                 bool
	name                      *ObjectiveName
	nameFlag                  bool
	progress                  *ObjectiveProgress
	progressFlag              bool
	createTime                int
	createTimeFlag            bool
	modifyTime                int
	modifyTimeFlag            bool
	krList                    []*Kr
	krListFlag                bool
	aligningObjectiveList     []*AlignObjective
	aligningObjectiveListFlag bool
	alignedObjectiveList      []*AlignObjective
	alignedObjectiveListFlag  bool
}

func NewObjectiveBuilder() *ObjectiveBuilder {
	builder := &ObjectiveBuilder{}
	return builder
}

func (builder *ObjectiveBuilder) Id(id string) *ObjectiveBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *ObjectiveBuilder) OkrId(okrId string) *ObjectiveBuilder {
	builder.okrId = okrId
	builder.okrIdFlag = true
	return builder
}
func (builder *ObjectiveBuilder) UserId(userId string) *ObjectiveBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}
func (builder *ObjectiveBuilder) Pos(pos string) *ObjectiveBuilder {
	builder.pos = pos
	builder.posFlag = true
	return builder
}
func (builder *ObjectiveBuilder) Score(score string) *ObjectiveBuilder {
	builder.score = score
	builder.scoreFlag = true
	return builder
}
func (builder *ObjectiveBuilder) Name(name *ObjectiveName) *ObjectiveBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *ObjectiveBuilder) Progress(progress *ObjectiveProgress) *ObjectiveBuilder {
	builder.progress = progress
	builder.progressFlag = true
	return builder
}
func (builder *ObjectiveBuilder) CreateTime(createTime int) *ObjectiveBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}
func (builder *ObjectiveBuilder) ModifyTime(modifyTime int) *ObjectiveBuilder {
	builder.modifyTime = modifyTime
	builder.modifyTimeFlag = true
	return builder
}
func (builder *ObjectiveBuilder) KrList(krList []*Kr) *ObjectiveBuilder {
	builder.krList = krList
	builder.krListFlag = true
	return builder
}
func (builder *ObjectiveBuilder) AligningObjectiveList(aligningObjectiveList []*AlignObjective) *ObjectiveBuilder {
	builder.aligningObjectiveList = aligningObjectiveList
	builder.aligningObjectiveListFlag = true
	return builder
}
func (builder *ObjectiveBuilder) AlignedObjectiveList(alignedObjectiveList []*AlignObjective) *ObjectiveBuilder {
	builder.alignedObjectiveList = alignedObjectiveList
	builder.alignedObjectiveListFlag = true
	return builder
}

func (builder *ObjectiveBuilder) Build() *Objective {
	req := &Objective{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.okrIdFlag {
		req.OkrId = &builder.okrId

	}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.posFlag {
		req.Pos = &builder.pos

	}
	if builder.scoreFlag {
		req.Score = &builder.score

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.progressFlag {
		req.Progress = builder.progress
	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.modifyTimeFlag {
		req.ModifyTime = &builder.modifyTime

	}
	if builder.krListFlag {
		req.KrList = builder.krList
	}
	if builder.aligningObjectiveListFlag {
		req.AligningObjectiveList = builder.aligningObjectiveList
	}
	if builder.alignedObjectiveListFlag {
		req.AlignedObjectiveList = builder.alignedObjectiveList
	}
	return req
}

type ObjectiveName struct {
	Zh *string `json:"zh,omitempty"`
	En *string `json:"en,omitempty"`
}

type ObjectiveNameBuilder struct {
	zh     string
	zhFlag bool
	en     string
	enFlag bool
}

func NewObjectiveNameBuilder() *ObjectiveNameBuilder {
	builder := &ObjectiveNameBuilder{}
	return builder
}

func (builder *ObjectiveNameBuilder) Zh(zh string) *ObjectiveNameBuilder {
	builder.zh = zh
	builder.zhFlag = true
	return builder
}
func (builder *ObjectiveNameBuilder) En(en string) *ObjectiveNameBuilder {
	builder.en = en
	builder.enFlag = true
	return builder
}

func (builder *ObjectiveNameBuilder) Build() *ObjectiveName {
	req := &ObjectiveName{}
	if builder.zhFlag {
		req.Zh = &builder.zh

	}
	if builder.enFlag {
		req.En = &builder.en

	}
	return req
}

type ObjectiveProgress struct {
	Zh *string `json:"zh,omitempty"`
	En *string `json:"en,omitempty"`
}

type ObjectiveProgressBuilder struct {
	zh     string
	zhFlag bool
	en     string
	enFlag bool
}

func NewObjectiveProgressBuilder() *ObjectiveProgressBuilder {
	builder := &ObjectiveProgressBuilder{}
	return builder
}

func (builder *ObjectiveProgressBuilder) Zh(zh string) *ObjectiveProgressBuilder {
	builder.zh = zh
	builder.zhFlag = true
	return builder
}
func (builder *ObjectiveProgressBuilder) En(en string) *ObjectiveProgressBuilder {
	builder.en = en
	builder.enFlag = true
	return builder
}

func (builder *ObjectiveProgressBuilder) Build() *ObjectiveProgress {
	req := &ObjectiveProgress{}
	if builder.zhFlag {
		req.Zh = &builder.zh

	}
	if builder.enFlag {
		req.En = &builder.en

	}
	return req
}

type Okr struct {
	OkrId         *string               `json:"okr_id,omitempty"`
	PeriodId      *string               `json:"period_id,omitempty"`
	PeriodType    *string               `json:"period_type,omitempty"`
	Name          *OkrName              `json:"name,omitempty"`
	CreateTime    *int                  `json:"create_time,omitempty"`
	ModifyTime    *int                  `json:"modify_time,omitempty"`
	ObjectiveList []*OkrDetailObjective `json:"objective_list,omitempty"`
	OkrScore      *int                  `json:"okr_score,omitempty"`
}

type OkrBuilder struct {
	okrId             string
	okrIdFlag         bool
	periodId          string
	periodIdFlag      bool
	periodType        string
	periodTypeFlag    bool
	name              *OkrName
	nameFlag          bool
	createTime        int
	createTimeFlag    bool
	modifyTime        int
	modifyTimeFlag    bool
	objectiveList     []*OkrDetailObjective
	objectiveListFlag bool
	okrScore          int
	okrScoreFlag      bool
}

func NewOkrBuilder() *OkrBuilder {
	builder := &OkrBuilder{}
	return builder
}

func (builder *OkrBuilder) OkrId(okrId string) *OkrBuilder {
	builder.okrId = okrId
	builder.okrIdFlag = true
	return builder
}
func (builder *OkrBuilder) PeriodId(periodId string) *OkrBuilder {
	builder.periodId = periodId
	builder.periodIdFlag = true
	return builder
}
func (builder *OkrBuilder) PeriodType(periodType string) *OkrBuilder {
	builder.periodType = periodType
	builder.periodTypeFlag = true
	return builder
}
func (builder *OkrBuilder) Name(name *OkrName) *OkrBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *OkrBuilder) CreateTime(createTime int) *OkrBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}
func (builder *OkrBuilder) ModifyTime(modifyTime int) *OkrBuilder {
	builder.modifyTime = modifyTime
	builder.modifyTimeFlag = true
	return builder
}
func (builder *OkrBuilder) ObjectiveList(objectiveList []*OkrDetailObjective) *OkrBuilder {
	builder.objectiveList = objectiveList
	builder.objectiveListFlag = true
	return builder
}
func (builder *OkrBuilder) OkrScore(okrScore int) *OkrBuilder {
	builder.okrScore = okrScore
	builder.okrScoreFlag = true
	return builder
}

func (builder *OkrBuilder) Build() *Okr {
	req := &Okr{}
	if builder.okrIdFlag {
		req.OkrId = &builder.okrId

	}
	if builder.periodIdFlag {
		req.PeriodId = &builder.periodId

	}
	if builder.periodTypeFlag {
		req.PeriodType = &builder.periodType

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.modifyTimeFlag {
		req.ModifyTime = &builder.modifyTime

	}
	if builder.objectiveListFlag {
		req.ObjectiveList = builder.objectiveList
	}
	if builder.okrScoreFlag {
		req.OkrScore = &builder.okrScore

	}
	return req
}

type OkrComment struct {
	Id                *string                            `json:"id,omitempty"`
	Content           *string                            `json:"content,omitempty"`
	CommentTime       *int                               `json:"comment_time,omitempty"`
	Commentator       *OkrObjectiveAlignedObjectiveOwner `json:"commentator,omitempty"`
	LastModifier      *OkrObjectiveAlignedObjectiveOwner `json:"last_modifier,omitempty"`
	ContentModifyTime *int                               `json:"content_modify_time,omitempty"`
	SolvedTime        *int                               `json:"solved_time,omitempty"`
}

type OkrCommentBuilder struct {
	id                    string
	idFlag                bool
	content               string
	contentFlag           bool
	commentTime           int
	commentTimeFlag       bool
	commentator           *OkrObjectiveAlignedObjectiveOwner
	commentatorFlag       bool
	lastModifier          *OkrObjectiveAlignedObjectiveOwner
	lastModifierFlag      bool
	contentModifyTime     int
	contentModifyTimeFlag bool
	solvedTime            int
	solvedTimeFlag        bool
}

func NewOkrCommentBuilder() *OkrCommentBuilder {
	builder := &OkrCommentBuilder{}
	return builder
}

func (builder *OkrCommentBuilder) Id(id string) *OkrCommentBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *OkrCommentBuilder) Content(content string) *OkrCommentBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}
func (builder *OkrCommentBuilder) CommentTime(commentTime int) *OkrCommentBuilder {
	builder.commentTime = commentTime
	builder.commentTimeFlag = true
	return builder
}
func (builder *OkrCommentBuilder) Commentator(commentator *OkrObjectiveAlignedObjectiveOwner) *OkrCommentBuilder {
	builder.commentator = commentator
	builder.commentatorFlag = true
	return builder
}
func (builder *OkrCommentBuilder) LastModifier(lastModifier *OkrObjectiveAlignedObjectiveOwner) *OkrCommentBuilder {
	builder.lastModifier = lastModifier
	builder.lastModifierFlag = true
	return builder
}
func (builder *OkrCommentBuilder) ContentModifyTime(contentModifyTime int) *OkrCommentBuilder {
	builder.contentModifyTime = contentModifyTime
	builder.contentModifyTimeFlag = true
	return builder
}
func (builder *OkrCommentBuilder) SolvedTime(solvedTime int) *OkrCommentBuilder {
	builder.solvedTime = solvedTime
	builder.solvedTimeFlag = true
	return builder
}

func (builder *OkrCommentBuilder) Build() *OkrComment {
	req := &OkrComment{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.commentTimeFlag {
		req.CommentTime = &builder.commentTime

	}
	if builder.commentatorFlag {
		req.Commentator = builder.commentator
	}
	if builder.lastModifierFlag {
		req.LastModifier = builder.lastModifier
	}
	if builder.contentModifyTimeFlag {
		req.ContentModifyTime = &builder.contentModifyTime

	}
	if builder.solvedTimeFlag {
		req.SolvedTime = &builder.solvedTime

	}
	return req
}

type OkrObjectiveAlignment struct {
	Id     *string `json:"id,omitempty"`
	ToId   *string `json:"to_id,omitempty"`
	ToType *int    `json:"to_type,omitempty"`
}

type OkrObjectiveAlignmentBuilder struct {
	id         string
	idFlag     bool
	toId       string
	toIdFlag   bool
	toType     int
	toTypeFlag bool
}

func NewOkrObjectiveAlignmentBuilder() *OkrObjectiveAlignmentBuilder {
	builder := &OkrObjectiveAlignmentBuilder{}
	return builder
}

func (builder *OkrObjectiveAlignmentBuilder) Id(id string) *OkrObjectiveAlignmentBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *OkrObjectiveAlignmentBuilder) ToId(toId string) *OkrObjectiveAlignmentBuilder {
	builder.toId = toId
	builder.toIdFlag = true
	return builder
}
func (builder *OkrObjectiveAlignmentBuilder) ToType(toType int) *OkrObjectiveAlignmentBuilder {
	builder.toType = toType
	builder.toTypeFlag = true
	return builder
}

func (builder *OkrObjectiveAlignmentBuilder) Build() *OkrObjectiveAlignment {
	req := &OkrObjectiveAlignment{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.toIdFlag {
		req.ToId = &builder.toId

	}
	if builder.toTypeFlag {
		req.ToType = &builder.toType

	}
	return req
}

type OkrBatch struct {
	Id            *string         `json:"id,omitempty"`
	Permission    *int            `json:"permission,omitempty"`
	PeriodId      *string         `json:"period_id,omitempty"`
	Name          *string         `json:"name,omitempty"`
	ObjectiveList []*OkrObjective `json:"objective_list,omitempty"`
	ConfirmStatus *int            `json:"confirm_status,omitempty"`
}

type OkrBatchBuilder struct {
	id                string
	idFlag            bool
	permission        int
	permissionFlag    bool
	periodId          string
	periodIdFlag      bool
	name              string
	nameFlag          bool
	objectiveList     []*OkrObjective
	objectiveListFlag bool
	confirmStatus     int
	confirmStatusFlag bool
}

func NewOkrBatchBuilder() *OkrBatchBuilder {
	builder := &OkrBatchBuilder{}
	return builder
}

func (builder *OkrBatchBuilder) Id(id string) *OkrBatchBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *OkrBatchBuilder) Permission(permission int) *OkrBatchBuilder {
	builder.permission = permission
	builder.permissionFlag = true
	return builder
}
func (builder *OkrBatchBuilder) PeriodId(periodId string) *OkrBatchBuilder {
	builder.periodId = periodId
	builder.periodIdFlag = true
	return builder
}
func (builder *OkrBatchBuilder) Name(name string) *OkrBatchBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *OkrBatchBuilder) ObjectiveList(objectiveList []*OkrObjective) *OkrBatchBuilder {
	builder.objectiveList = objectiveList
	builder.objectiveListFlag = true
	return builder
}
func (builder *OkrBatchBuilder) ConfirmStatus(confirmStatus int) *OkrBatchBuilder {
	builder.confirmStatus = confirmStatus
	builder.confirmStatusFlag = true
	return builder
}

func (builder *OkrBatchBuilder) Build() *OkrBatch {
	req := &OkrBatch{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.permissionFlag {
		req.Permission = &builder.permission

	}
	if builder.periodIdFlag {
		req.PeriodId = &builder.periodId

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.objectiveListFlag {
		req.ObjectiveList = builder.objectiveList
	}
	if builder.confirmStatusFlag {
		req.ConfirmStatus = &builder.confirmStatus

	}
	return req
}

type OkrDetail struct {
	OkrId         *string               `json:"okr_id,omitempty"`
	PeriodId      *string               `json:"period_id,omitempty"`
	PeriodType    *string               `json:"period_type,omitempty"`
	Name          *OkrName              `json:"name,omitempty"`
	CreateTime    *int                  `json:"create_time,omitempty"`
	ModifyTime    *int                  `json:"modify_time,omitempty"`
	ObjectiveList []*OkrDetailObjective `json:"objective_list,omitempty"`
	OkrScore      *int                  `json:"okr_score,omitempty"`
}

type OkrDetailBuilder struct {
	okrId             string
	okrIdFlag         bool
	periodId          string
	periodIdFlag      bool
	periodType        string
	periodTypeFlag    bool
	name              *OkrName
	nameFlag          bool
	createTime        int
	createTimeFlag    bool
	modifyTime        int
	modifyTimeFlag    bool
	objectiveList     []*OkrDetailObjective
	objectiveListFlag bool
	okrScore          int
	okrScoreFlag      bool
}

func NewOkrDetailBuilder() *OkrDetailBuilder {
	builder := &OkrDetailBuilder{}
	return builder
}

func (builder *OkrDetailBuilder) OkrId(okrId string) *OkrDetailBuilder {
	builder.okrId = okrId
	builder.okrIdFlag = true
	return builder
}
func (builder *OkrDetailBuilder) PeriodId(periodId string) *OkrDetailBuilder {
	builder.periodId = periodId
	builder.periodIdFlag = true
	return builder
}
func (builder *OkrDetailBuilder) PeriodType(periodType string) *OkrDetailBuilder {
	builder.periodType = periodType
	builder.periodTypeFlag = true
	return builder
}
func (builder *OkrDetailBuilder) Name(name *OkrName) *OkrDetailBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *OkrDetailBuilder) CreateTime(createTime int) *OkrDetailBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}
func (builder *OkrDetailBuilder) ModifyTime(modifyTime int) *OkrDetailBuilder {
	builder.modifyTime = modifyTime
	builder.modifyTimeFlag = true
	return builder
}
func (builder *OkrDetailBuilder) ObjectiveList(objectiveList []*OkrDetailObjective) *OkrDetailBuilder {
	builder.objectiveList = objectiveList
	builder.objectiveListFlag = true
	return builder
}
func (builder *OkrDetailBuilder) OkrScore(okrScore int) *OkrDetailBuilder {
	builder.okrScore = okrScore
	builder.okrScoreFlag = true
	return builder
}

func (builder *OkrDetailBuilder) Build() *OkrDetail {
	req := &OkrDetail{}
	if builder.okrIdFlag {
		req.OkrId = &builder.okrId

	}
	if builder.periodIdFlag {
		req.PeriodId = &builder.periodId

	}
	if builder.periodTypeFlag {
		req.PeriodType = &builder.periodType

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.modifyTimeFlag {
		req.ModifyTime = &builder.modifyTime

	}
	if builder.objectiveListFlag {
		req.ObjectiveList = builder.objectiveList
	}
	if builder.okrScoreFlag {
		req.OkrScore = &builder.okrScore

	}
	return req
}

type OkrDetailObjective struct {
	Id                    *string                    `json:"id,omitempty"`
	OkrId                 *string                    `json:"okr_id,omitempty"`
	UserId                *string                    `json:"user_id,omitempty"`
	Pos                   *int                       `json:"pos,omitempty"`
	Score                 *int                       `json:"score,omitempty"`
	Name                  *OkrName                   `json:"name,omitempty"`
	Progress              *OkrName                   `json:"progress,omitempty"`
	CreateTime            *int                       `json:"create_time,omitempty"`
	ModifyTime            *int                       `json:"modify_time,omitempty"`
	KrList                []*OkrDetailObjectiveKr    `json:"kr_list,omitempty"`
	AligningObjectiveList []*OkrDetailObjectiveAlign `json:"aligning_objective_list,omitempty"`
	AlignedObjectiveList  []*OkrDetailObjectiveAlign `json:"aligned_objective_list,omitempty"`
	Weight                *float64                   `json:"weight,omitempty"`
}

type OkrDetailObjectiveBuilder struct {
	id                        string
	idFlag                    bool
	okrId                     string
	okrIdFlag                 bool
	userId                    string
	userIdFlag                bool
	pos                       int
	posFlag                   bool
	score                     int
	scoreFlag                 bool
	name                      *OkrName
	nameFlag                  bool
	progress                  *OkrName
	progressFlag              bool
	createTime                int
	createTimeFlag            bool
	modifyTime                int
	modifyTimeFlag            bool
	krList                    []*OkrDetailObjectiveKr
	krListFlag                bool
	aligningObjectiveList     []*OkrDetailObjectiveAlign
	aligningObjectiveListFlag bool
	alignedObjectiveList      []*OkrDetailObjectiveAlign
	alignedObjectiveListFlag  bool
	weight                    float64
	weightFlag                bool
}

func NewOkrDetailObjectiveBuilder() *OkrDetailObjectiveBuilder {
	builder := &OkrDetailObjectiveBuilder{}
	return builder
}

func (builder *OkrDetailObjectiveBuilder) Id(id string) *OkrDetailObjectiveBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *OkrDetailObjectiveBuilder) OkrId(okrId string) *OkrDetailObjectiveBuilder {
	builder.okrId = okrId
	builder.okrIdFlag = true
	return builder
}
func (builder *OkrDetailObjectiveBuilder) UserId(userId string) *OkrDetailObjectiveBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}
func (builder *OkrDetailObjectiveBuilder) Pos(pos int) *OkrDetailObjectiveBuilder {
	builder.pos = pos
	builder.posFlag = true
	return builder
}
func (builder *OkrDetailObjectiveBuilder) Score(score int) *OkrDetailObjectiveBuilder {
	builder.score = score
	builder.scoreFlag = true
	return builder
}
func (builder *OkrDetailObjectiveBuilder) Name(name *OkrName) *OkrDetailObjectiveBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *OkrDetailObjectiveBuilder) Progress(progress *OkrName) *OkrDetailObjectiveBuilder {
	builder.progress = progress
	builder.progressFlag = true
	return builder
}
func (builder *OkrDetailObjectiveBuilder) CreateTime(createTime int) *OkrDetailObjectiveBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}
func (builder *OkrDetailObjectiveBuilder) ModifyTime(modifyTime int) *OkrDetailObjectiveBuilder {
	builder.modifyTime = modifyTime
	builder.modifyTimeFlag = true
	return builder
}
func (builder *OkrDetailObjectiveBuilder) KrList(krList []*OkrDetailObjectiveKr) *OkrDetailObjectiveBuilder {
	builder.krList = krList
	builder.krListFlag = true
	return builder
}
func (builder *OkrDetailObjectiveBuilder) AligningObjectiveList(aligningObjectiveList []*OkrDetailObjectiveAlign) *OkrDetailObjectiveBuilder {
	builder.aligningObjectiveList = aligningObjectiveList
	builder.aligningObjectiveListFlag = true
	return builder
}
func (builder *OkrDetailObjectiveBuilder) AlignedObjectiveList(alignedObjectiveList []*OkrDetailObjectiveAlign) *OkrDetailObjectiveBuilder {
	builder.alignedObjectiveList = alignedObjectiveList
	builder.alignedObjectiveListFlag = true
	return builder
}
func (builder *OkrDetailObjectiveBuilder) Weight(weight float64) *OkrDetailObjectiveBuilder {
	builder.weight = weight
	builder.weightFlag = true
	return builder
}

func (builder *OkrDetailObjectiveBuilder) Build() *OkrDetailObjective {
	req := &OkrDetailObjective{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.okrIdFlag {
		req.OkrId = &builder.okrId

	}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.posFlag {
		req.Pos = &builder.pos

	}
	if builder.scoreFlag {
		req.Score = &builder.score

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.progressFlag {
		req.Progress = builder.progress
	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.modifyTimeFlag {
		req.ModifyTime = &builder.modifyTime

	}
	if builder.krListFlag {
		req.KrList = builder.krList
	}
	if builder.aligningObjectiveListFlag {
		req.AligningObjectiveList = builder.aligningObjectiveList
	}
	if builder.alignedObjectiveListFlag {
		req.AlignedObjectiveList = builder.alignedObjectiveList
	}
	if builder.weightFlag {
		req.Weight = &builder.weight

	}
	return req
}

type OkrDetailObjectiveAlign struct {
	Id     *string `json:"id,omitempty"`
	OkrId  *string `json:"okr_id,omitempty"`
	UserId *string `json:"user_id,omitempty"`
}

type OkrDetailObjectiveAlignBuilder struct {
	id         string
	idFlag     bool
	okrId      string
	okrIdFlag  bool
	userId     string
	userIdFlag bool
}

func NewOkrDetailObjectiveAlignBuilder() *OkrDetailObjectiveAlignBuilder {
	builder := &OkrDetailObjectiveAlignBuilder{}
	return builder
}

func (builder *OkrDetailObjectiveAlignBuilder) Id(id string) *OkrDetailObjectiveAlignBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *OkrDetailObjectiveAlignBuilder) OkrId(okrId string) *OkrDetailObjectiveAlignBuilder {
	builder.okrId = okrId
	builder.okrIdFlag = true
	return builder
}
func (builder *OkrDetailObjectiveAlignBuilder) UserId(userId string) *OkrDetailObjectiveAlignBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}

func (builder *OkrDetailObjectiveAlignBuilder) Build() *OkrDetailObjectiveAlign {
	req := &OkrDetailObjectiveAlign{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.okrIdFlag {
		req.OkrId = &builder.okrId

	}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	return req
}

type OkrDetailObjectiveKr struct {
	Id         *string  `json:"id,omitempty"`
	Pos        *int     `json:"pos,omitempty"`
	Score      *int     `json:"score,omitempty"`
	Weight     *float64 `json:"weight,omitempty"`
	Content    *OkrName `json:"content,omitempty"`
	CreateTime *int     `json:"create_time,omitempty"`
	ModifyTime *int     `json:"modify_time,omitempty"`
}

type OkrDetailObjectiveKrBuilder struct {
	id             string
	idFlag         bool
	pos            int
	posFlag        bool
	score          int
	scoreFlag      bool
	weight         float64
	weightFlag     bool
	content        *OkrName
	contentFlag    bool
	createTime     int
	createTimeFlag bool
	modifyTime     int
	modifyTimeFlag bool
}

func NewOkrDetailObjectiveKrBuilder() *OkrDetailObjectiveKrBuilder {
	builder := &OkrDetailObjectiveKrBuilder{}
	return builder
}

func (builder *OkrDetailObjectiveKrBuilder) Id(id string) *OkrDetailObjectiveKrBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *OkrDetailObjectiveKrBuilder) Pos(pos int) *OkrDetailObjectiveKrBuilder {
	builder.pos = pos
	builder.posFlag = true
	return builder
}
func (builder *OkrDetailObjectiveKrBuilder) Score(score int) *OkrDetailObjectiveKrBuilder {
	builder.score = score
	builder.scoreFlag = true
	return builder
}
func (builder *OkrDetailObjectiveKrBuilder) Weight(weight float64) *OkrDetailObjectiveKrBuilder {
	builder.weight = weight
	builder.weightFlag = true
	return builder
}
func (builder *OkrDetailObjectiveKrBuilder) Content(content *OkrName) *OkrDetailObjectiveKrBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}
func (builder *OkrDetailObjectiveKrBuilder) CreateTime(createTime int) *OkrDetailObjectiveKrBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}
func (builder *OkrDetailObjectiveKrBuilder) ModifyTime(modifyTime int) *OkrDetailObjectiveKrBuilder {
	builder.modifyTime = modifyTime
	builder.modifyTimeFlag = true
	return builder
}

func (builder *OkrDetailObjectiveKrBuilder) Build() *OkrDetailObjectiveKr {
	req := &OkrDetailObjectiveKr{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.posFlag {
		req.Pos = &builder.pos

	}
	if builder.scoreFlag {
		req.Score = &builder.score

	}
	if builder.weightFlag {
		req.Weight = &builder.weight

	}
	if builder.contentFlag {
		req.Content = builder.content
	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.modifyTimeFlag {
		req.ModifyTime = &builder.modifyTime

	}
	return req
}

type OkrListInfo struct {
	CurrentOkr *Okr   `json:"current_okr,omitempty"`
	OkrList    []*Okr `json:"okr_list,omitempty"`
}

type OkrListInfoBuilder struct {
	currentOkr     *Okr
	currentOkrFlag bool
	okrList        []*Okr
	okrListFlag    bool
}

func NewOkrListInfoBuilder() *OkrListInfoBuilder {
	builder := &OkrListInfoBuilder{}
	return builder
}

func (builder *OkrListInfoBuilder) CurrentOkr(currentOkr *Okr) *OkrListInfoBuilder {
	builder.currentOkr = currentOkr
	builder.currentOkrFlag = true
	return builder
}
func (builder *OkrListInfoBuilder) OkrList(okrList []*Okr) *OkrListInfoBuilder {
	builder.okrList = okrList
	builder.okrListFlag = true
	return builder
}

func (builder *OkrListInfoBuilder) Build() *OkrListInfo {
	req := &OkrListInfo{}
	if builder.currentOkrFlag {
		req.CurrentOkr = builder.currentOkr
	}
	if builder.okrListFlag {
		req.OkrList = builder.okrList
	}
	return req
}

type OkrName struct {
	Zh *string `json:"zh,omitempty"`
	En *string `json:"en,omitempty"`
}

type OkrNameBuilder struct {
	zh     string
	zhFlag bool
	en     string
	enFlag bool
}

func NewOkrNameBuilder() *OkrNameBuilder {
	builder := &OkrNameBuilder{}
	return builder
}

func (builder *OkrNameBuilder) Zh(zh string) *OkrNameBuilder {
	builder.zh = zh
	builder.zhFlag = true
	return builder
}
func (builder *OkrNameBuilder) En(en string) *OkrNameBuilder {
	builder.en = en
	builder.enFlag = true
	return builder
}

func (builder *OkrNameBuilder) Build() *OkrName {
	req := &OkrName{}
	if builder.zhFlag {
		req.Zh = &builder.zh

	}
	if builder.enFlag {
		req.En = &builder.en

	}
	return req
}

type OkrObjective struct {
	Id                                 *string                              `json:"id,omitempty"`
	Permission                         *int                                 `json:"permission,omitempty"`
	Content                            *string                              `json:"content,omitempty"`
	ProgressReport                     *string                              `json:"progress_report,omitempty"`
	Score                              *int                                 `json:"score,omitempty"`
	Weight                             *float64                             `json:"weight,omitempty"`
	ProgressRate                       *OkrObjectiveProgressRate            `json:"progress_rate,omitempty"`
	KrList                             []*OkrObjectiveKr                    `json:"kr_list,omitempty"`
	AlignedObjectiveList               []*OkrObjectiveAlignedObjective      `json:"aligned_objective_list,omitempty"`
	AligningObjectiveList              []*OkrObjectiveAlignedObjective      `json:"aligning_objective_list,omitempty"`
	ProgressRecordList                 []*ProgressRecordSimplify            `json:"progress_record_list,omitempty"`
	ProgressRatePercentLastUpdatedTime *string                              `json:"progress_rate_percent_last_updated_time,omitempty"`
	ProgressRateStatusLastUpdatedTime  *string                              `json:"progress_rate_status_last_updated_time,omitempty"`
	ProgressRecordLastUpdatedTime      *string                              `json:"progress_record_last_updated_time,omitempty"`
	ProgressReportLastUpdatedTime      *string                              `json:"progress_report_last_updated_time,omitempty"`
	ScoreLastUpdatedTime               *string                              `json:"score_last_updated_time,omitempty"`
	Deadline                           *string                              `json:"deadline,omitempty"`
	MentionedUserList                  []*OkrObjectiveAlignedObjectiveOwner `json:"mentioned_user_list,omitempty"`
}

type OkrObjectiveBuilder struct {
	id                                     string
	idFlag                                 bool
	permission                             int
	permissionFlag                         bool
	content                                string
	contentFlag                            bool
	progressReport                         string
	progressReportFlag                     bool
	score                                  int
	scoreFlag                              bool
	weight                                 float64
	weightFlag                             bool
	progressRate                           *OkrObjectiveProgressRate
	progressRateFlag                       bool
	krList                                 []*OkrObjectiveKr
	krListFlag                             bool
	alignedObjectiveList                   []*OkrObjectiveAlignedObjective
	alignedObjectiveListFlag               bool
	aligningObjectiveList                  []*OkrObjectiveAlignedObjective
	aligningObjectiveListFlag              bool
	progressRecordList                     []*ProgressRecordSimplify
	progressRecordListFlag                 bool
	progressRatePercentLastUpdatedTime     string
	progressRatePercentLastUpdatedTimeFlag bool
	progressRateStatusLastUpdatedTime      string
	progressRateStatusLastUpdatedTimeFlag  bool
	progressRecordLastUpdatedTime          string
	progressRecordLastUpdatedTimeFlag      bool
	progressReportLastUpdatedTime          string
	progressReportLastUpdatedTimeFlag      bool
	scoreLastUpdatedTime                   string
	scoreLastUpdatedTimeFlag               bool
	deadline                               string
	deadlineFlag                           bool
	mentionedUserList                      []*OkrObjectiveAlignedObjectiveOwner
	mentionedUserListFlag                  bool
}

func NewOkrObjectiveBuilder() *OkrObjectiveBuilder {
	builder := &OkrObjectiveBuilder{}
	return builder
}

func (builder *OkrObjectiveBuilder) Id(id string) *OkrObjectiveBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *OkrObjectiveBuilder) Permission(permission int) *OkrObjectiveBuilder {
	builder.permission = permission
	builder.permissionFlag = true
	return builder
}
func (builder *OkrObjectiveBuilder) Content(content string) *OkrObjectiveBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}
func (builder *OkrObjectiveBuilder) ProgressReport(progressReport string) *OkrObjectiveBuilder {
	builder.progressReport = progressReport
	builder.progressReportFlag = true
	return builder
}
func (builder *OkrObjectiveBuilder) Score(score int) *OkrObjectiveBuilder {
	builder.score = score
	builder.scoreFlag = true
	return builder
}
func (builder *OkrObjectiveBuilder) Weight(weight float64) *OkrObjectiveBuilder {
	builder.weight = weight
	builder.weightFlag = true
	return builder
}
func (builder *OkrObjectiveBuilder) ProgressRate(progressRate *OkrObjectiveProgressRate) *OkrObjectiveBuilder {
	builder.progressRate = progressRate
	builder.progressRateFlag = true
	return builder
}
func (builder *OkrObjectiveBuilder) KrList(krList []*OkrObjectiveKr) *OkrObjectiveBuilder {
	builder.krList = krList
	builder.krListFlag = true
	return builder
}
func (builder *OkrObjectiveBuilder) AlignedObjectiveList(alignedObjectiveList []*OkrObjectiveAlignedObjective) *OkrObjectiveBuilder {
	builder.alignedObjectiveList = alignedObjectiveList
	builder.alignedObjectiveListFlag = true
	return builder
}
func (builder *OkrObjectiveBuilder) AligningObjectiveList(aligningObjectiveList []*OkrObjectiveAlignedObjective) *OkrObjectiveBuilder {
	builder.aligningObjectiveList = aligningObjectiveList
	builder.aligningObjectiveListFlag = true
	return builder
}
func (builder *OkrObjectiveBuilder) ProgressRecordList(progressRecordList []*ProgressRecordSimplify) *OkrObjectiveBuilder {
	builder.progressRecordList = progressRecordList
	builder.progressRecordListFlag = true
	return builder
}
func (builder *OkrObjectiveBuilder) ProgressRatePercentLastUpdatedTime(progressRatePercentLastUpdatedTime string) *OkrObjectiveBuilder {
	builder.progressRatePercentLastUpdatedTime = progressRatePercentLastUpdatedTime
	builder.progressRatePercentLastUpdatedTimeFlag = true
	return builder
}
func (builder *OkrObjectiveBuilder) ProgressRateStatusLastUpdatedTime(progressRateStatusLastUpdatedTime string) *OkrObjectiveBuilder {
	builder.progressRateStatusLastUpdatedTime = progressRateStatusLastUpdatedTime
	builder.progressRateStatusLastUpdatedTimeFlag = true
	return builder
}
func (builder *OkrObjectiveBuilder) ProgressRecordLastUpdatedTime(progressRecordLastUpdatedTime string) *OkrObjectiveBuilder {
	builder.progressRecordLastUpdatedTime = progressRecordLastUpdatedTime
	builder.progressRecordLastUpdatedTimeFlag = true
	return builder
}
func (builder *OkrObjectiveBuilder) ProgressReportLastUpdatedTime(progressReportLastUpdatedTime string) *OkrObjectiveBuilder {
	builder.progressReportLastUpdatedTime = progressReportLastUpdatedTime
	builder.progressReportLastUpdatedTimeFlag = true
	return builder
}
func (builder *OkrObjectiveBuilder) ScoreLastUpdatedTime(scoreLastUpdatedTime string) *OkrObjectiveBuilder {
	builder.scoreLastUpdatedTime = scoreLastUpdatedTime
	builder.scoreLastUpdatedTimeFlag = true
	return builder
}
func (builder *OkrObjectiveBuilder) Deadline(deadline string) *OkrObjectiveBuilder {
	builder.deadline = deadline
	builder.deadlineFlag = true
	return builder
}
func (builder *OkrObjectiveBuilder) MentionedUserList(mentionedUserList []*OkrObjectiveAlignedObjectiveOwner) *OkrObjectiveBuilder {
	builder.mentionedUserList = mentionedUserList
	builder.mentionedUserListFlag = true
	return builder
}

func (builder *OkrObjectiveBuilder) Build() *OkrObjective {
	req := &OkrObjective{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.permissionFlag {
		req.Permission = &builder.permission

	}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.progressReportFlag {
		req.ProgressReport = &builder.progressReport

	}
	if builder.scoreFlag {
		req.Score = &builder.score

	}
	if builder.weightFlag {
		req.Weight = &builder.weight

	}
	if builder.progressRateFlag {
		req.ProgressRate = builder.progressRate
	}
	if builder.krListFlag {
		req.KrList = builder.krList
	}
	if builder.alignedObjectiveListFlag {
		req.AlignedObjectiveList = builder.alignedObjectiveList
	}
	if builder.aligningObjectiveListFlag {
		req.AligningObjectiveList = builder.aligningObjectiveList
	}
	if builder.progressRecordListFlag {
		req.ProgressRecordList = builder.progressRecordList
	}
	if builder.progressRatePercentLastUpdatedTimeFlag {
		req.ProgressRatePercentLastUpdatedTime = &builder.progressRatePercentLastUpdatedTime

	}
	if builder.progressRateStatusLastUpdatedTimeFlag {
		req.ProgressRateStatusLastUpdatedTime = &builder.progressRateStatusLastUpdatedTime

	}
	if builder.progressRecordLastUpdatedTimeFlag {
		req.ProgressRecordLastUpdatedTime = &builder.progressRecordLastUpdatedTime

	}
	if builder.progressReportLastUpdatedTimeFlag {
		req.ProgressReportLastUpdatedTime = &builder.progressReportLastUpdatedTime

	}
	if builder.scoreLastUpdatedTimeFlag {
		req.ScoreLastUpdatedTime = &builder.scoreLastUpdatedTime

	}
	if builder.deadlineFlag {
		req.Deadline = &builder.deadline

	}
	if builder.mentionedUserListFlag {
		req.MentionedUserList = builder.mentionedUserList
	}
	return req
}

type OkrObjectiveAlignedObjective struct {
	Id    *string                            `json:"id,omitempty"`
	OkrId *string                            `json:"okr_id,omitempty"`
	Owner *OkrObjectiveAlignedObjectiveOwner `json:"owner,omitempty"`
}

type OkrObjectiveAlignedObjectiveBuilder struct {
	id        string
	idFlag    bool
	okrId     string
	okrIdFlag bool
	owner     *OkrObjectiveAlignedObjectiveOwner
	ownerFlag bool
}

func NewOkrObjectiveAlignedObjectiveBuilder() *OkrObjectiveAlignedObjectiveBuilder {
	builder := &OkrObjectiveAlignedObjectiveBuilder{}
	return builder
}

func (builder *OkrObjectiveAlignedObjectiveBuilder) Id(id string) *OkrObjectiveAlignedObjectiveBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *OkrObjectiveAlignedObjectiveBuilder) OkrId(okrId string) *OkrObjectiveAlignedObjectiveBuilder {
	builder.okrId = okrId
	builder.okrIdFlag = true
	return builder
}
func (builder *OkrObjectiveAlignedObjectiveBuilder) Owner(owner *OkrObjectiveAlignedObjectiveOwner) *OkrObjectiveAlignedObjectiveBuilder {
	builder.owner = owner
	builder.ownerFlag = true
	return builder
}

func (builder *OkrObjectiveAlignedObjectiveBuilder) Build() *OkrObjectiveAlignedObjective {
	req := &OkrObjectiveAlignedObjective{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.okrIdFlag {
		req.OkrId = &builder.okrId

	}
	if builder.ownerFlag {
		req.Owner = builder.owner
	}
	return req
}

type OkrObjectiveAlignedObjectiveOwner struct {
	OpenId *string `json:"open_id,omitempty"`
	UserId *string `json:"user_id,omitempty"`
}

type OkrObjectiveAlignedObjectiveOwnerBuilder struct {
	openId     string
	openIdFlag bool
	userId     string
	userIdFlag bool
}

func NewOkrObjectiveAlignedObjectiveOwnerBuilder() *OkrObjectiveAlignedObjectiveOwnerBuilder {
	builder := &OkrObjectiveAlignedObjectiveOwnerBuilder{}
	return builder
}

func (builder *OkrObjectiveAlignedObjectiveOwnerBuilder) OpenId(openId string) *OkrObjectiveAlignedObjectiveOwnerBuilder {
	builder.openId = openId
	builder.openIdFlag = true
	return builder
}
func (builder *OkrObjectiveAlignedObjectiveOwnerBuilder) UserId(userId string) *OkrObjectiveAlignedObjectiveOwnerBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}

func (builder *OkrObjectiveAlignedObjectiveOwnerBuilder) Build() *OkrObjectiveAlignedObjectiveOwner {
	req := &OkrObjectiveAlignedObjectiveOwner{}
	if builder.openIdFlag {
		req.OpenId = &builder.openId

	}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	return req
}

type OkrObjectiveKr struct {
	Id                                 *string                              `json:"id,omitempty"`
	Content                            *string                              `json:"content,omitempty"`
	Score                              *int                                 `json:"score,omitempty"`
	Weight                             *int                                 `json:"weight,omitempty"`
	KrWeight                           *float64                             `json:"kr_weight,omitempty"`
	ProgressRate                       *OkrObjectiveProgressRate            `json:"progress_rate,omitempty"`
	ProgressRecordList                 []*ProgressRecordSimplify            `json:"progress_record_list,omitempty"`
	ProgressRatePercentLastUpdatedTime *string                              `json:"progress_rate_percent_last_updated_time,omitempty"`
	ProgressRateStatusLastUpdatedTime  *string                              `json:"progress_rate_status_last_updated_time,omitempty"`
	ProgressRecordLastUpdatedTime      *string                              `json:"progress_record_last_updated_time,omitempty"`
	ProgressReportLastUpdatedTime      *string                              `json:"progress_report_last_updated_time,omitempty"`
	ScoreLastUpdatedTime               *string                              `json:"score_last_updated_time,omitempty"`
	Deadline                           *string                              `json:"deadline,omitempty"`
	MentionedUserList                  []*OkrObjectiveAlignedObjectiveOwner `json:"mentioned_user_list,omitempty"`
}

type OkrObjectiveKrBuilder struct {
	id                                     string
	idFlag                                 bool
	content                                string
	contentFlag                            bool
	score                                  int
	scoreFlag                              bool
	weight                                 int
	weightFlag                             bool
	krWeight                               float64
	krWeightFlag                           bool
	progressRate                           *OkrObjectiveProgressRate
	progressRateFlag                       bool
	progressRecordList                     []*ProgressRecordSimplify
	progressRecordListFlag                 bool
	progressRatePercentLastUpdatedTime     string
	progressRatePercentLastUpdatedTimeFlag bool
	progressRateStatusLastUpdatedTime      string
	progressRateStatusLastUpdatedTimeFlag  bool
	progressRecordLastUpdatedTime          string
	progressRecordLastUpdatedTimeFlag      bool
	progressReportLastUpdatedTime          string
	progressReportLastUpdatedTimeFlag      bool
	scoreLastUpdatedTime                   string
	scoreLastUpdatedTimeFlag               bool
	deadline                               string
	deadlineFlag                           bool
	mentionedUserList                      []*OkrObjectiveAlignedObjectiveOwner
	mentionedUserListFlag                  bool
}

func NewOkrObjectiveKrBuilder() *OkrObjectiveKrBuilder {
	builder := &OkrObjectiveKrBuilder{}
	return builder
}

func (builder *OkrObjectiveKrBuilder) Id(id string) *OkrObjectiveKrBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *OkrObjectiveKrBuilder) Content(content string) *OkrObjectiveKrBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}
func (builder *OkrObjectiveKrBuilder) Score(score int) *OkrObjectiveKrBuilder {
	builder.score = score
	builder.scoreFlag = true
	return builder
}
func (builder *OkrObjectiveKrBuilder) Weight(weight int) *OkrObjectiveKrBuilder {
	builder.weight = weight
	builder.weightFlag = true
	return builder
}
func (builder *OkrObjectiveKrBuilder) KrWeight(krWeight float64) *OkrObjectiveKrBuilder {
	builder.krWeight = krWeight
	builder.krWeightFlag = true
	return builder
}
func (builder *OkrObjectiveKrBuilder) ProgressRate(progressRate *OkrObjectiveProgressRate) *OkrObjectiveKrBuilder {
	builder.progressRate = progressRate
	builder.progressRateFlag = true
	return builder
}
func (builder *OkrObjectiveKrBuilder) ProgressRecordList(progressRecordList []*ProgressRecordSimplify) *OkrObjectiveKrBuilder {
	builder.progressRecordList = progressRecordList
	builder.progressRecordListFlag = true
	return builder
}
func (builder *OkrObjectiveKrBuilder) ProgressRatePercentLastUpdatedTime(progressRatePercentLastUpdatedTime string) *OkrObjectiveKrBuilder {
	builder.progressRatePercentLastUpdatedTime = progressRatePercentLastUpdatedTime
	builder.progressRatePercentLastUpdatedTimeFlag = true
	return builder
}
func (builder *OkrObjectiveKrBuilder) ProgressRateStatusLastUpdatedTime(progressRateStatusLastUpdatedTime string) *OkrObjectiveKrBuilder {
	builder.progressRateStatusLastUpdatedTime = progressRateStatusLastUpdatedTime
	builder.progressRateStatusLastUpdatedTimeFlag = true
	return builder
}
func (builder *OkrObjectiveKrBuilder) ProgressRecordLastUpdatedTime(progressRecordLastUpdatedTime string) *OkrObjectiveKrBuilder {
	builder.progressRecordLastUpdatedTime = progressRecordLastUpdatedTime
	builder.progressRecordLastUpdatedTimeFlag = true
	return builder
}
func (builder *OkrObjectiveKrBuilder) ProgressReportLastUpdatedTime(progressReportLastUpdatedTime string) *OkrObjectiveKrBuilder {
	builder.progressReportLastUpdatedTime = progressReportLastUpdatedTime
	builder.progressReportLastUpdatedTimeFlag = true
	return builder
}
func (builder *OkrObjectiveKrBuilder) ScoreLastUpdatedTime(scoreLastUpdatedTime string) *OkrObjectiveKrBuilder {
	builder.scoreLastUpdatedTime = scoreLastUpdatedTime
	builder.scoreLastUpdatedTimeFlag = true
	return builder
}
func (builder *OkrObjectiveKrBuilder) Deadline(deadline string) *OkrObjectiveKrBuilder {
	builder.deadline = deadline
	builder.deadlineFlag = true
	return builder
}
func (builder *OkrObjectiveKrBuilder) MentionedUserList(mentionedUserList []*OkrObjectiveAlignedObjectiveOwner) *OkrObjectiveKrBuilder {
	builder.mentionedUserList = mentionedUserList
	builder.mentionedUserListFlag = true
	return builder
}

func (builder *OkrObjectiveKrBuilder) Build() *OkrObjectiveKr {
	req := &OkrObjectiveKr{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.scoreFlag {
		req.Score = &builder.score

	}
	if builder.weightFlag {
		req.Weight = &builder.weight

	}
	if builder.krWeightFlag {
		req.KrWeight = &builder.krWeight

	}
	if builder.progressRateFlag {
		req.ProgressRate = builder.progressRate
	}
	if builder.progressRecordListFlag {
		req.ProgressRecordList = builder.progressRecordList
	}
	if builder.progressRatePercentLastUpdatedTimeFlag {
		req.ProgressRatePercentLastUpdatedTime = &builder.progressRatePercentLastUpdatedTime

	}
	if builder.progressRateStatusLastUpdatedTimeFlag {
		req.ProgressRateStatusLastUpdatedTime = &builder.progressRateStatusLastUpdatedTime

	}
	if builder.progressRecordLastUpdatedTimeFlag {
		req.ProgressRecordLastUpdatedTime = &builder.progressRecordLastUpdatedTime

	}
	if builder.progressReportLastUpdatedTimeFlag {
		req.ProgressReportLastUpdatedTime = &builder.progressReportLastUpdatedTime

	}
	if builder.scoreLastUpdatedTimeFlag {
		req.ScoreLastUpdatedTime = &builder.scoreLastUpdatedTime

	}
	if builder.deadlineFlag {
		req.Deadline = &builder.deadline

	}
	if builder.mentionedUserListFlag {
		req.MentionedUserList = builder.mentionedUserList
	}
	return req
}

type OkrObjectiveProgressRate struct {
	Percent *int    `json:"percent,omitempty"`
	Status  *string `json:"status,omitempty"`
}

type OkrObjectiveProgressRateBuilder struct {
	percent     int
	percentFlag bool
	status      string
	statusFlag  bool
}

func NewOkrObjectiveProgressRateBuilder() *OkrObjectiveProgressRateBuilder {
	builder := &OkrObjectiveProgressRateBuilder{}
	return builder
}

func (builder *OkrObjectiveProgressRateBuilder) Percent(percent int) *OkrObjectiveProgressRateBuilder {
	builder.percent = percent
	builder.percentFlag = true
	return builder
}
func (builder *OkrObjectiveProgressRateBuilder) Status(status string) *OkrObjectiveProgressRateBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}

func (builder *OkrObjectiveProgressRateBuilder) Build() *OkrObjectiveProgressRate {
	req := &OkrObjectiveProgressRate{}
	if builder.percentFlag {
		req.Percent = &builder.percent

	}
	if builder.statusFlag {
		req.Status = &builder.status

	}
	return req
}

type OkrReview struct {
	UserId           *OkrObjectiveAlignedObjectiveOwner `json:"user_id,omitempty"`
	ReviewPeriodList []*OkrReviewPeriod                 `json:"review_period_list,omitempty"`
}

type OkrReviewBuilder struct {
	userId               *OkrObjectiveAlignedObjectiveOwner
	userIdFlag           bool
	reviewPeriodList     []*OkrReviewPeriod
	reviewPeriodListFlag bool
}

func NewOkrReviewBuilder() *OkrReviewBuilder {
	builder := &OkrReviewBuilder{}
	return builder
}

func (builder *OkrReviewBuilder) UserId(userId *OkrObjectiveAlignedObjectiveOwner) *OkrReviewBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}
func (builder *OkrReviewBuilder) ReviewPeriodList(reviewPeriodList []*OkrReviewPeriod) *OkrReviewBuilder {
	builder.reviewPeriodList = reviewPeriodList
	builder.reviewPeriodListFlag = true
	return builder
}

func (builder *OkrReviewBuilder) Build() *OkrReview {
	req := &OkrReview{}
	if builder.userIdFlag {
		req.UserId = builder.userId
	}
	if builder.reviewPeriodListFlag {
		req.ReviewPeriodList = builder.reviewPeriodList
	}
	return req
}

type OkrReviewPeriod struct {
	PeriodId           *string               `json:"period_id,omitempty"`
	CycleReviewList    []*OkrReviewPeriodUrl `json:"cycle_review_list,omitempty"`
	ProgressReportList []*OkrReviewPeriodUrl `json:"progress_report_list,omitempty"`
}

type OkrReviewPeriodBuilder struct {
	periodId               string
	periodIdFlag           bool
	cycleReviewList        []*OkrReviewPeriodUrl
	cycleReviewListFlag    bool
	progressReportList     []*OkrReviewPeriodUrl
	progressReportListFlag bool
}

func NewOkrReviewPeriodBuilder() *OkrReviewPeriodBuilder {
	builder := &OkrReviewPeriodBuilder{}
	return builder
}

func (builder *OkrReviewPeriodBuilder) PeriodId(periodId string) *OkrReviewPeriodBuilder {
	builder.periodId = periodId
	builder.periodIdFlag = true
	return builder
}
func (builder *OkrReviewPeriodBuilder) CycleReviewList(cycleReviewList []*OkrReviewPeriodUrl) *OkrReviewPeriodBuilder {
	builder.cycleReviewList = cycleReviewList
	builder.cycleReviewListFlag = true
	return builder
}
func (builder *OkrReviewPeriodBuilder) ProgressReportList(progressReportList []*OkrReviewPeriodUrl) *OkrReviewPeriodBuilder {
	builder.progressReportList = progressReportList
	builder.progressReportListFlag = true
	return builder
}

func (builder *OkrReviewPeriodBuilder) Build() *OkrReviewPeriod {
	req := &OkrReviewPeriod{}
	if builder.periodIdFlag {
		req.PeriodId = &builder.periodId

	}
	if builder.cycleReviewListFlag {
		req.CycleReviewList = builder.cycleReviewList
	}
	if builder.progressReportListFlag {
		req.ProgressReportList = builder.progressReportList
	}
	return req
}

type OkrReviewPeriodUrl struct {
	Url        *string `json:"url,omitempty"`
	CreateTime *string `json:"create_time,omitempty"`
}

type OkrReviewPeriodUrlBuilder struct {
	url            string
	urlFlag        bool
	createTime     string
	createTimeFlag bool
}

func NewOkrReviewPeriodUrlBuilder() *OkrReviewPeriodUrlBuilder {
	builder := &OkrReviewPeriodUrlBuilder{}
	return builder
}

func (builder *OkrReviewPeriodUrlBuilder) Url(url string) *OkrReviewPeriodUrlBuilder {
	builder.url = url
	builder.urlFlag = true
	return builder
}
func (builder *OkrReviewPeriodUrlBuilder) CreateTime(createTime string) *OkrReviewPeriodUrlBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}

func (builder *OkrReviewPeriodUrlBuilder) Build() *OkrReviewPeriodUrl {
	req := &OkrReviewPeriodUrl{}
	if builder.urlFlag {
		req.Url = &builder.url

	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	return req
}

type OkrSimple struct {
	Name       *OkrName `json:"name,omitempty"`
	OkrId      *string  `json:"okr_id,omitempty"`
	PeriodId   *string  `json:"period_id,omitempty"`
	PeriodType *string  `json:"period_type,omitempty"`
}

type OkrSimpleBuilder struct {
	name           *OkrName
	nameFlag       bool
	okrId          string
	okrIdFlag      bool
	periodId       string
	periodIdFlag   bool
	periodType     string
	periodTypeFlag bool
}

func NewOkrSimpleBuilder() *OkrSimpleBuilder {
	builder := &OkrSimpleBuilder{}
	return builder
}

func (builder *OkrSimpleBuilder) Name(name *OkrName) *OkrSimpleBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *OkrSimpleBuilder) OkrId(okrId string) *OkrSimpleBuilder {
	builder.okrId = okrId
	builder.okrIdFlag = true
	return builder
}
func (builder *OkrSimpleBuilder) PeriodId(periodId string) *OkrSimpleBuilder {
	builder.periodId = periodId
	builder.periodIdFlag = true
	return builder
}
func (builder *OkrSimpleBuilder) PeriodType(periodType string) *OkrSimpleBuilder {
	builder.periodType = periodType
	builder.periodTypeFlag = true
	return builder
}

func (builder *OkrSimpleBuilder) Build() *OkrSimple {
	req := &OkrSimple{}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.okrIdFlag {
		req.OkrId = &builder.okrId

	}
	if builder.periodIdFlag {
		req.PeriodId = &builder.periodId

	}
	if builder.periodTypeFlag {
		req.PeriodType = &builder.periodType

	}
	return req
}

type Period struct {
	Id     *string `json:"id,omitempty"`
	ZhName *string `json:"zh_name,omitempty"`
	EnName *string `json:"en_name,omitempty"`
	Status *int    `json:"status,omitempty"`
}

type PeriodBuilder struct {
	id         string
	idFlag     bool
	zhName     string
	zhNameFlag bool
	enName     string
	enNameFlag bool
	status     int
	statusFlag bool
}

func NewPeriodBuilder() *PeriodBuilder {
	builder := &PeriodBuilder{}
	return builder
}

func (builder *PeriodBuilder) Id(id string) *PeriodBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *PeriodBuilder) ZhName(zhName string) *PeriodBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}
func (builder *PeriodBuilder) EnName(enName string) *PeriodBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}
func (builder *PeriodBuilder) Status(status int) *PeriodBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}

func (builder *PeriodBuilder) Build() *Period {
	req := &Period{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.statusFlag {
		req.Status = &builder.status

	}
	return req
}

type ProgressItem struct {
	Content     *string  `json:"content,omitempty"`
	Timestamp   *int     `json:"timestamp,omitempty"`
	MentionList []string `json:"mention_list,omitempty"`
}

type ProgressItemBuilder struct {
	content         string
	contentFlag     bool
	timestamp       int
	timestampFlag   bool
	mentionList     []string
	mentionListFlag bool
}

func NewProgressItemBuilder() *ProgressItemBuilder {
	builder := &ProgressItemBuilder{}
	return builder
}

func (builder *ProgressItemBuilder) Content(content string) *ProgressItemBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}
func (builder *ProgressItemBuilder) Timestamp(timestamp int) *ProgressItemBuilder {
	builder.timestamp = timestamp
	builder.timestampFlag = true
	return builder
}
func (builder *ProgressItemBuilder) MentionList(mentionList []string) *ProgressItemBuilder {
	builder.mentionList = mentionList
	builder.mentionListFlag = true
	return builder
}

func (builder *ProgressItemBuilder) Build() *ProgressItem {
	req := &ProgressItem{}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.timestampFlag {
		req.Timestamp = &builder.timestamp

	}
	if builder.mentionListFlag {
		req.MentionList = builder.mentionList
	}
	return req
}

type ProgressRate struct {
	Percent *int `json:"percent,omitempty"`
	Status  *int `json:"status,omitempty"`
}

type ProgressRateBuilder struct {
	percent     int
	percentFlag bool
	status      int
	statusFlag  bool
}

func NewProgressRateBuilder() *ProgressRateBuilder {
	builder := &ProgressRateBuilder{}
	return builder
}

func (builder *ProgressRateBuilder) Percent(percent int) *ProgressRateBuilder {
	builder.percent = percent
	builder.percentFlag = true
	return builder
}
func (builder *ProgressRateBuilder) Status(status int) *ProgressRateBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}

func (builder *ProgressRateBuilder) Build() *ProgressRate {
	req := &ProgressRate{}
	if builder.percentFlag {
		req.Percent = &builder.percent

	}
	if builder.statusFlag {
		req.Status = &builder.status

	}
	return req
}

type ProgressRecord struct {
	ProgressId *string       `json:"progress_id,omitempty"`
	ModifyTime *string       `json:"modify_time,omitempty"`
	Content    *ContentBlock `json:"content,omitempty"`
}

type ProgressRecordBuilder struct {
	progressId     string
	progressIdFlag bool
	modifyTime     string
	modifyTimeFlag bool
	content        *ContentBlock
	contentFlag    bool
}

func NewProgressRecordBuilder() *ProgressRecordBuilder {
	builder := &ProgressRecordBuilder{}
	return builder
}

func (builder *ProgressRecordBuilder) ProgressId(progressId string) *ProgressRecordBuilder {
	builder.progressId = progressId
	builder.progressIdFlag = true
	return builder
}
func (builder *ProgressRecordBuilder) ModifyTime(modifyTime string) *ProgressRecordBuilder {
	builder.modifyTime = modifyTime
	builder.modifyTimeFlag = true
	return builder
}
func (builder *ProgressRecordBuilder) Content(content *ContentBlock) *ProgressRecordBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}

func (builder *ProgressRecordBuilder) Build() *ProgressRecord {
	req := &ProgressRecord{}
	if builder.progressIdFlag {
		req.ProgressId = &builder.progressId

	}
	if builder.modifyTimeFlag {
		req.ModifyTime = &builder.modifyTime

	}
	if builder.contentFlag {
		req.Content = builder.content
	}
	return req
}

type ProgressRecordSimplify struct {
	Id *string `json:"id,omitempty"`
}

type ProgressRecordSimplifyBuilder struct {
	id     string
	idFlag bool
}

func NewProgressRecordSimplifyBuilder() *ProgressRecordSimplifyBuilder {
	builder := &ProgressRecordSimplifyBuilder{}
	return builder
}

func (builder *ProgressRecordSimplifyBuilder) Id(id string) *ProgressRecordSimplifyBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

func (builder *ProgressRecordSimplifyBuilder) Build() *ProgressRecordSimplify {
	req := &ProgressRecordSimplify{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	return req
}

type UpsertObjective struct {
	Content      *string              `json:"content,omitempty"`
	MentionList  []string             `json:"mention_list,omitempty"`
	KrList       []*UpsertObjectiveKr `json:"kr_list,omitempty"`
	ProgressRate *ProgressRate        `json:"progress_rate,omitempty"`
	ProgressList []*ProgressItem      `json:"progress_list,omitempty"`
	Weight       *float64             `json:"weight,omitempty"`
}

type UpsertObjectiveBuilder struct {
	content          string
	contentFlag      bool
	mentionList      []string
	mentionListFlag  bool
	krList           []*UpsertObjectiveKr
	krListFlag       bool
	progressRate     *ProgressRate
	progressRateFlag bool
	progressList     []*ProgressItem
	progressListFlag bool
	weight           float64
	weightFlag       bool
}

func NewUpsertObjectiveBuilder() *UpsertObjectiveBuilder {
	builder := &UpsertObjectiveBuilder{}
	return builder
}

func (builder *UpsertObjectiveBuilder) Content(content string) *UpsertObjectiveBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}
func (builder *UpsertObjectiveBuilder) MentionList(mentionList []string) *UpsertObjectiveBuilder {
	builder.mentionList = mentionList
	builder.mentionListFlag = true
	return builder
}
func (builder *UpsertObjectiveBuilder) KrList(krList []*UpsertObjectiveKr) *UpsertObjectiveBuilder {
	builder.krList = krList
	builder.krListFlag = true
	return builder
}
func (builder *UpsertObjectiveBuilder) ProgressRate(progressRate *ProgressRate) *UpsertObjectiveBuilder {
	builder.progressRate = progressRate
	builder.progressRateFlag = true
	return builder
}
func (builder *UpsertObjectiveBuilder) ProgressList(progressList []*ProgressItem) *UpsertObjectiveBuilder {
	builder.progressList = progressList
	builder.progressListFlag = true
	return builder
}
func (builder *UpsertObjectiveBuilder) Weight(weight float64) *UpsertObjectiveBuilder {
	builder.weight = weight
	builder.weightFlag = true
	return builder
}

func (builder *UpsertObjectiveBuilder) Build() *UpsertObjective {
	req := &UpsertObjective{}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.mentionListFlag {
		req.MentionList = builder.mentionList
	}
	if builder.krListFlag {
		req.KrList = builder.krList
	}
	if builder.progressRateFlag {
		req.ProgressRate = builder.progressRate
	}
	if builder.progressListFlag {
		req.ProgressList = builder.progressList
	}
	if builder.weightFlag {
		req.Weight = &builder.weight

	}
	return req
}

type UpsertObjectiveKr struct {
	Content      *string         `json:"content,omitempty"`
	MentionList  []string        `json:"mention_list,omitempty"`
	Score        *int            `json:"score,omitempty"`
	ProgressRate *ProgressRate   `json:"progress_rate,omitempty"`
	ProgressList []*ProgressItem `json:"progress_list,omitempty"`
	Weight       *float64        `json:"weight,omitempty"`
}

type UpsertObjectiveKrBuilder struct {
	content          string
	contentFlag      bool
	mentionList      []string
	mentionListFlag  bool
	score            int
	scoreFlag        bool
	progressRate     *ProgressRate
	progressRateFlag bool
	progressList     []*ProgressItem
	progressListFlag bool
	weight           float64
	weightFlag       bool
}

func NewUpsertObjectiveKrBuilder() *UpsertObjectiveKrBuilder {
	builder := &UpsertObjectiveKrBuilder{}
	return builder
}

func (builder *UpsertObjectiveKrBuilder) Content(content string) *UpsertObjectiveKrBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}
func (builder *UpsertObjectiveKrBuilder) MentionList(mentionList []string) *UpsertObjectiveKrBuilder {
	builder.mentionList = mentionList
	builder.mentionListFlag = true
	return builder
}
func (builder *UpsertObjectiveKrBuilder) Score(score int) *UpsertObjectiveKrBuilder {
	builder.score = score
	builder.scoreFlag = true
	return builder
}
func (builder *UpsertObjectiveKrBuilder) ProgressRate(progressRate *ProgressRate) *UpsertObjectiveKrBuilder {
	builder.progressRate = progressRate
	builder.progressRateFlag = true
	return builder
}
func (builder *UpsertObjectiveKrBuilder) ProgressList(progressList []*ProgressItem) *UpsertObjectiveKrBuilder {
	builder.progressList = progressList
	builder.progressListFlag = true
	return builder
}
func (builder *UpsertObjectiveKrBuilder) Weight(weight float64) *UpsertObjectiveKrBuilder {
	builder.weight = weight
	builder.weightFlag = true
	return builder
}

func (builder *UpsertObjectiveKrBuilder) Build() *UpsertObjectiveKr {
	req := &UpsertObjectiveKr{}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.mentionListFlag {
		req.MentionList = builder.mentionList
	}
	if builder.scoreFlag {
		req.Score = &builder.score

	}
	if builder.progressRateFlag {
		req.ProgressRate = builder.progressRate
	}
	if builder.progressListFlag {
		req.ProgressList = builder.progressList
	}
	if builder.weightFlag {
		req.Weight = &builder.weight

	}
	return req
}

type User struct {
	Id *string `json:"id,omitempty"`
}

type UserBuilder struct {
	id     string
	idFlag bool
}

func NewUserBuilder() *UserBuilder {
	builder := &UserBuilder{}
	return builder
}

func (builder *UserBuilder) Id(id string) *UserBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

func (builder *UserBuilder) Build() *User {
	req := &User{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	return req
}

type UserOkr struct {
	Id            *string             `json:"id,omitempty"`
	Name          *string             `json:"name,omitempty"`
	Permission    *int                `json:"permission,omitempty"`
	ObjectiveList []*UserOkrObjective `json:"objective_list,omitempty"`
}

type UserOkrBuilder struct {
	id                string
	idFlag            bool
	name              string
	nameFlag          bool
	permission        int
	permissionFlag    bool
	objectiveList     []*UserOkrObjective
	objectiveListFlag bool
}

func NewUserOkrBuilder() *UserOkrBuilder {
	builder := &UserOkrBuilder{}
	return builder
}

func (builder *UserOkrBuilder) Id(id string) *UserOkrBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *UserOkrBuilder) Name(name string) *UserOkrBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *UserOkrBuilder) Permission(permission int) *UserOkrBuilder {
	builder.permission = permission
	builder.permissionFlag = true
	return builder
}
func (builder *UserOkrBuilder) ObjectiveList(objectiveList []*UserOkrObjective) *UserOkrBuilder {
	builder.objectiveList = objectiveList
	builder.objectiveListFlag = true
	return builder
}

func (builder *UserOkrBuilder) Build() *UserOkr {
	req := &UserOkr{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.permissionFlag {
		req.Permission = &builder.permission

	}
	if builder.objectiveListFlag {
		req.ObjectiveList = builder.objectiveList
	}
	return req
}

type UserOkrObjective struct {
	Id                    *string                             `json:"id,omitempty"`
	Permission            *int                                `json:"permission,omitempty"`
	Content               *string                             `json:"content,omitempty"`
	ProgressReport        *string                             `json:"progress_report,omitempty"`
	Score                 *string                             `json:"score,omitempty"`
	ProgressRate          *UserOkrObjectiveProgressRate       `json:"progress_rate,omitempty"`
	KrList                []*UserOkrObjectiveKr               `json:"kr_list,omitempty"`
	AlignedObjectiveList  []*UserOkrObjectiveAlignedObjective `json:"aligned_objective_list,omitempty"`
	AligningObjectiveList []*UserOkrObjectiveAlignedObjective `json:"aligning_objective_list,omitempty"`
}

type UserOkrObjectiveBuilder struct {
	id                        string
	idFlag                    bool
	permission                int
	permissionFlag            bool
	content                   string
	contentFlag               bool
	progressReport            string
	progressReportFlag        bool
	score                     string
	scoreFlag                 bool
	progressRate              *UserOkrObjectiveProgressRate
	progressRateFlag          bool
	krList                    []*UserOkrObjectiveKr
	krListFlag                bool
	alignedObjectiveList      []*UserOkrObjectiveAlignedObjective
	alignedObjectiveListFlag  bool
	aligningObjectiveList     []*UserOkrObjectiveAlignedObjective
	aligningObjectiveListFlag bool
}

func NewUserOkrObjectiveBuilder() *UserOkrObjectiveBuilder {
	builder := &UserOkrObjectiveBuilder{}
	return builder
}

func (builder *UserOkrObjectiveBuilder) Id(id string) *UserOkrObjectiveBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *UserOkrObjectiveBuilder) Permission(permission int) *UserOkrObjectiveBuilder {
	builder.permission = permission
	builder.permissionFlag = true
	return builder
}
func (builder *UserOkrObjectiveBuilder) Content(content string) *UserOkrObjectiveBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}
func (builder *UserOkrObjectiveBuilder) ProgressReport(progressReport string) *UserOkrObjectiveBuilder {
	builder.progressReport = progressReport
	builder.progressReportFlag = true
	return builder
}
func (builder *UserOkrObjectiveBuilder) Score(score string) *UserOkrObjectiveBuilder {
	builder.score = score
	builder.scoreFlag = true
	return builder
}
func (builder *UserOkrObjectiveBuilder) ProgressRate(progressRate *UserOkrObjectiveProgressRate) *UserOkrObjectiveBuilder {
	builder.progressRate = progressRate
	builder.progressRateFlag = true
	return builder
}
func (builder *UserOkrObjectiveBuilder) KrList(krList []*UserOkrObjectiveKr) *UserOkrObjectiveBuilder {
	builder.krList = krList
	builder.krListFlag = true
	return builder
}
func (builder *UserOkrObjectiveBuilder) AlignedObjectiveList(alignedObjectiveList []*UserOkrObjectiveAlignedObjective) *UserOkrObjectiveBuilder {
	builder.alignedObjectiveList = alignedObjectiveList
	builder.alignedObjectiveListFlag = true
	return builder
}
func (builder *UserOkrObjectiveBuilder) AligningObjectiveList(aligningObjectiveList []*UserOkrObjectiveAlignedObjective) *UserOkrObjectiveBuilder {
	builder.aligningObjectiveList = aligningObjectiveList
	builder.aligningObjectiveListFlag = true
	return builder
}

func (builder *UserOkrObjectiveBuilder) Build() *UserOkrObjective {
	req := &UserOkrObjective{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.permissionFlag {
		req.Permission = &builder.permission

	}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.progressReportFlag {
		req.ProgressReport = &builder.progressReport

	}
	if builder.scoreFlag {
		req.Score = &builder.score

	}
	if builder.progressRateFlag {
		req.ProgressRate = builder.progressRate
	}
	if builder.krListFlag {
		req.KrList = builder.krList
	}
	if builder.alignedObjectiveListFlag {
		req.AlignedObjectiveList = builder.alignedObjectiveList
	}
	if builder.aligningObjectiveListFlag {
		req.AligningObjectiveList = builder.aligningObjectiveList
	}
	return req
}

type UserOkrObjectiveAlignedObjective struct {
	Id    *string                                `json:"id,omitempty"`
	OkrId *string                                `json:"okr_id,omitempty"`
	Owner *UserOkrObjectiveAlignedObjectiveOwner `json:"owner,omitempty"`
}

type UserOkrObjectiveAlignedObjectiveBuilder struct {
	id        string
	idFlag    bool
	okrId     string
	okrIdFlag bool
	owner     *UserOkrObjectiveAlignedObjectiveOwner
	ownerFlag bool
}

func NewUserOkrObjectiveAlignedObjectiveBuilder() *UserOkrObjectiveAlignedObjectiveBuilder {
	builder := &UserOkrObjectiveAlignedObjectiveBuilder{}
	return builder
}

func (builder *UserOkrObjectiveAlignedObjectiveBuilder) Id(id string) *UserOkrObjectiveAlignedObjectiveBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *UserOkrObjectiveAlignedObjectiveBuilder) OkrId(okrId string) *UserOkrObjectiveAlignedObjectiveBuilder {
	builder.okrId = okrId
	builder.okrIdFlag = true
	return builder
}
func (builder *UserOkrObjectiveAlignedObjectiveBuilder) Owner(owner *UserOkrObjectiveAlignedObjectiveOwner) *UserOkrObjectiveAlignedObjectiveBuilder {
	builder.owner = owner
	builder.ownerFlag = true
	return builder
}

func (builder *UserOkrObjectiveAlignedObjectiveBuilder) Build() *UserOkrObjectiveAlignedObjective {
	req := &UserOkrObjectiveAlignedObjective{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.okrIdFlag {
		req.OkrId = &builder.okrId

	}
	if builder.ownerFlag {
		req.Owner = builder.owner
	}
	return req
}

type UserOkrObjectiveAlignedObjectiveOwner struct {
	OpenId     *string `json:"open_id,omitempty"`
	EmployeeId *string `json:"employee_id,omitempty"`
	EmployeeNo *string `json:"employee_no,omitempty"`
	UnionId    *string `json:"union_id,omitempty"`
	Name       *string `json:"name,omitempty"`
}

type UserOkrObjectiveAlignedObjectiveOwnerBuilder struct {
	openId         string
	openIdFlag     bool
	employeeId     string
	employeeIdFlag bool
	employeeNo     string
	employeeNoFlag bool
	unionId        string
	unionIdFlag    bool
	name           string
	nameFlag       bool
}

func NewUserOkrObjectiveAlignedObjectiveOwnerBuilder() *UserOkrObjectiveAlignedObjectiveOwnerBuilder {
	builder := &UserOkrObjectiveAlignedObjectiveOwnerBuilder{}
	return builder
}

func (builder *UserOkrObjectiveAlignedObjectiveOwnerBuilder) OpenId(openId string) *UserOkrObjectiveAlignedObjectiveOwnerBuilder {
	builder.openId = openId
	builder.openIdFlag = true
	return builder
}
func (builder *UserOkrObjectiveAlignedObjectiveOwnerBuilder) EmployeeId(employeeId string) *UserOkrObjectiveAlignedObjectiveOwnerBuilder {
	builder.employeeId = employeeId
	builder.employeeIdFlag = true
	return builder
}
func (builder *UserOkrObjectiveAlignedObjectiveOwnerBuilder) EmployeeNo(employeeNo string) *UserOkrObjectiveAlignedObjectiveOwnerBuilder {
	builder.employeeNo = employeeNo
	builder.employeeNoFlag = true
	return builder
}
func (builder *UserOkrObjectiveAlignedObjectiveOwnerBuilder) UnionId(unionId string) *UserOkrObjectiveAlignedObjectiveOwnerBuilder {
	builder.unionId = unionId
	builder.unionIdFlag = true
	return builder
}
func (builder *UserOkrObjectiveAlignedObjectiveOwnerBuilder) Name(name string) *UserOkrObjectiveAlignedObjectiveOwnerBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *UserOkrObjectiveAlignedObjectiveOwnerBuilder) Build() *UserOkrObjectiveAlignedObjectiveOwner {
	req := &UserOkrObjectiveAlignedObjectiveOwner{}
	if builder.openIdFlag {
		req.OpenId = &builder.openId

	}
	if builder.employeeIdFlag {
		req.EmployeeId = &builder.employeeId

	}
	if builder.employeeNoFlag {
		req.EmployeeNo = &builder.employeeNo

	}
	if builder.unionIdFlag {
		req.UnionId = &builder.unionId

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	return req
}

type UserOkrObjectiveKr struct {
	Id           *string                       `json:"id,omitempty"`
	Content      *string                       `json:"content,omitempty"`
	Score        *int                          `json:"score,omitempty"`
	Weight       *int                          `json:"weight,omitempty"`
	ProgressRate *UserOkrObjectiveProgressRate `json:"progress_rate,omitempty"`
}

type UserOkrObjectiveKrBuilder struct {
	id               string
	idFlag           bool
	content          string
	contentFlag      bool
	score            int
	scoreFlag        bool
	weight           int
	weightFlag       bool
	progressRate     *UserOkrObjectiveProgressRate
	progressRateFlag bool
}

func NewUserOkrObjectiveKrBuilder() *UserOkrObjectiveKrBuilder {
	builder := &UserOkrObjectiveKrBuilder{}
	return builder
}

func (builder *UserOkrObjectiveKrBuilder) Id(id string) *UserOkrObjectiveKrBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *UserOkrObjectiveKrBuilder) Content(content string) *UserOkrObjectiveKrBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}
func (builder *UserOkrObjectiveKrBuilder) Score(score int) *UserOkrObjectiveKrBuilder {
	builder.score = score
	builder.scoreFlag = true
	return builder
}
func (builder *UserOkrObjectiveKrBuilder) Weight(weight int) *UserOkrObjectiveKrBuilder {
	builder.weight = weight
	builder.weightFlag = true
	return builder
}
func (builder *UserOkrObjectiveKrBuilder) ProgressRate(progressRate *UserOkrObjectiveProgressRate) *UserOkrObjectiveKrBuilder {
	builder.progressRate = progressRate
	builder.progressRateFlag = true
	return builder
}

func (builder *UserOkrObjectiveKrBuilder) Build() *UserOkrObjectiveKr {
	req := &UserOkrObjectiveKr{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.scoreFlag {
		req.Score = &builder.score

	}
	if builder.weightFlag {
		req.Weight = &builder.weight

	}
	if builder.progressRateFlag {
		req.ProgressRate = builder.progressRate
	}
	return req
}

type UserOkrObjectiveProgressRate struct {
	Percent *int    `json:"percent,omitempty"`
	Status  *string `json:"status,omitempty"`
}

type UserOkrObjectiveProgressRateBuilder struct {
	percent     int
	percentFlag bool
	status      string
	statusFlag  bool
}

func NewUserOkrObjectiveProgressRateBuilder() *UserOkrObjectiveProgressRateBuilder {
	builder := &UserOkrObjectiveProgressRateBuilder{}
	return builder
}

func (builder *UserOkrObjectiveProgressRateBuilder) Percent(percent int) *UserOkrObjectiveProgressRateBuilder {
	builder.percent = percent
	builder.percentFlag = true
	return builder
}
func (builder *UserOkrObjectiveProgressRateBuilder) Status(status string) *UserOkrObjectiveProgressRateBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}

func (builder *UserOkrObjectiveProgressRateBuilder) Build() *UserOkrObjectiveProgressRate {
	req := &UserOkrObjectiveProgressRate{}
	if builder.percentFlag {
		req.Percent = &builder.percent

	}
	if builder.statusFlag {
		req.Status = &builder.status

	}
	return req
}

type UploadImageReqBodyBuilder struct {
	data           io.Reader
	dataFlag       bool
	targetId       string
	targetIdFlag   bool
	targetType     int
	targetTypeFlag bool
}

func NewUploadImageReqBodyBuilder() *UploadImageReqBodyBuilder {
	builder := &UploadImageReqBodyBuilder{}
	return builder
}

func (builder *UploadImageReqBodyBuilder) Data(data io.Reader) *UploadImageReqBodyBuilder {
	builder.data = data
	builder.dataFlag = true
	return builder
}
func (builder *UploadImageReqBodyBuilder) TargetId(targetId string) *UploadImageReqBodyBuilder {
	builder.targetId = targetId
	builder.targetIdFlag = true
	return builder
}
func (builder *UploadImageReqBodyBuilder) TargetType(targetType int) *UploadImageReqBodyBuilder {
	builder.targetType = targetType
	builder.targetTypeFlag = true
	return builder
}

func (builder *UploadImageReqBodyBuilder) Build() *UploadImageReqBody {
	req := &UploadImageReqBody{}
	if builder.dataFlag {
		req.Data = builder.data
	}
	if builder.targetIdFlag {
		req.TargetId = &builder.targetId
	}
	if builder.targetTypeFlag {
		req.TargetType = &builder.targetType
	}
	return req
}

type UploadImagePathReqBodyBuilder struct {
	dataPath       string
	dataPathFlag   bool
	targetId       string
	targetIdFlag   bool
	targetType     int
	targetTypeFlag bool
}

func NewUploadImagePathReqBodyBuilder() *UploadImagePathReqBodyBuilder {
	builder := &UploadImagePathReqBodyBuilder{}
	return builder
}
func (builder *UploadImagePathReqBodyBuilder) DataPath(dataPath string) *UploadImagePathReqBodyBuilder {
	builder.dataPath = dataPath
	builder.dataPathFlag = true
	return builder
}
func (builder *UploadImagePathReqBodyBuilder) TargetId(targetId string) *UploadImagePathReqBodyBuilder {
	builder.targetId = targetId
	builder.targetIdFlag = true
	return builder
}
func (builder *UploadImagePathReqBodyBuilder) TargetType(targetType int) *UploadImagePathReqBodyBuilder {
	builder.targetType = targetType
	builder.targetTypeFlag = true
	return builder
}

func (builder *UploadImagePathReqBodyBuilder) Build() (*UploadImageReqBody, error) {
	req := &UploadImageReqBody{}
	if builder.dataPathFlag {
		data, err := larkcore.File2Bytes(builder.dataPath)
		if err != nil {
			return nil, err
		}
		req.Data = bytes.NewBuffer(data)
	}
	if builder.targetIdFlag {
		req.TargetId = &builder.targetId
	}
	if builder.targetTypeFlag {
		req.TargetType = &builder.targetType
	}
	return req, nil
}

type UploadImageReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *UploadImageReqBody
}

func NewUploadImageReqBuilder() *UploadImageReqBuilder {
	builder := &UploadImageReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *UploadImageReqBuilder) Body(body *UploadImageReqBody) *UploadImageReqBuilder {
	builder.body = body
	return builder
}

func (builder *UploadImageReqBuilder) Build() *UploadImageReq {
	req := &UploadImageReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.Body = builder.body
	return req
}

type UploadImageReqBody struct {
	Data       io.Reader `json:"data,omitempty"`
	TargetId   *string   `json:"target_id,omitempty"`
	TargetType *int      `json:"target_type,omitempty"`
}

type UploadImageReq struct {
	apiReq *larkcore.ApiReq
	Body   *UploadImageReqBody `body:""`
}

type UploadImageRespData struct {
	Data *ImageInfo `json:"data,omitempty"`
}

type UploadImageResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *UploadImageRespData `json:"data"`
}

func (resp *UploadImageResp) Success() bool {
	return resp.Code == 0
}

type BatchGetOkrReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewBatchGetOkrReqBuilder() *BatchGetOkrReqBuilder {
	builder := &BatchGetOkrReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *BatchGetOkrReqBuilder) UserIdType(userIdType string) *BatchGetOkrReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}
func (builder *BatchGetOkrReqBuilder) OkrIds(okrIds []string) *BatchGetOkrReqBuilder {
	builder.apiReq.QueryParams.Set("okr_ids", fmt.Sprint(okrIds))
	return builder
}
func (builder *BatchGetOkrReqBuilder) Lang(lang string) *BatchGetOkrReqBuilder {
	builder.apiReq.QueryParams.Set("lang", fmt.Sprint(lang))
	return builder
}

func (builder *BatchGetOkrReqBuilder) Build() *BatchGetOkrReq {
	req := &BatchGetOkrReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type BatchGetOkrReq struct {
	apiReq *larkcore.ApiReq
}

type BatchGetOkrRespData struct {
	OkrList []*OkrBatch `json:"okr_list,omitempty"`
}

type BatchGetOkrResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *BatchGetOkrRespData `json:"data"`
}

func (resp *BatchGetOkrResp) Success() bool {
	return resp.Code == 0
}

type ListPeriodReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewListPeriodReqBuilder() *ListPeriodReqBuilder {
	builder := &ListPeriodReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *ListPeriodReqBuilder) PageToken(pageToken string) *ListPeriodReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}
func (builder *ListPeriodReqBuilder) PageSize(pageSize int) *ListPeriodReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

func (builder *ListPeriodReqBuilder) Build() *ListPeriodReq {
	req := &ListPeriodReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListPeriodReq struct {
	apiReq *larkcore.ApiReq
}

type ListPeriodRespData struct {
	PageToken *string   `json:"page_token,omitempty"`
	HasMore   *bool     `json:"has_more,omitempty"`
	Items     []*Period `json:"items,omitempty"`
}

type ListPeriodResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListPeriodRespData `json:"data"`
}

func (resp *ListPeriodResp) Success() bool {
	return resp.Code == 0
}

type CreateProgressRecordReqBodyBuilder struct {
	sourceTitle     string
	sourceTitleFlag bool
	sourceUrl       string
	sourceUrlFlag   bool
	targetId        string
	targetIdFlag    bool
	targetType      int
	targetTypeFlag  bool
	content         *ContentBlock
	contentFlag     bool
}

func NewCreateProgressRecordReqBodyBuilder() *CreateProgressRecordReqBodyBuilder {
	builder := &CreateProgressRecordReqBodyBuilder{}
	return builder
}

func (builder *CreateProgressRecordReqBodyBuilder) SourceTitle(sourceTitle string) *CreateProgressRecordReqBodyBuilder {
	builder.sourceTitle = sourceTitle
	builder.sourceTitleFlag = true
	return builder
}
func (builder *CreateProgressRecordReqBodyBuilder) SourceUrl(sourceUrl string) *CreateProgressRecordReqBodyBuilder {
	builder.sourceUrl = sourceUrl
	builder.sourceUrlFlag = true
	return builder
}
func (builder *CreateProgressRecordReqBodyBuilder) TargetId(targetId string) *CreateProgressRecordReqBodyBuilder {
	builder.targetId = targetId
	builder.targetIdFlag = true
	return builder
}
func (builder *CreateProgressRecordReqBodyBuilder) TargetType(targetType int) *CreateProgressRecordReqBodyBuilder {
	builder.targetType = targetType
	builder.targetTypeFlag = true
	return builder
}
func (builder *CreateProgressRecordReqBodyBuilder) Content(content *ContentBlock) *CreateProgressRecordReqBodyBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}

func (builder *CreateProgressRecordReqBodyBuilder) Build() *CreateProgressRecordReqBody {
	req := &CreateProgressRecordReqBody{}
	if builder.sourceTitleFlag {
		req.SourceTitle = &builder.sourceTitle
	}
	if builder.sourceUrlFlag {
		req.SourceUrl = &builder.sourceUrl
	}
	if builder.targetIdFlag {
		req.TargetId = &builder.targetId
	}
	if builder.targetTypeFlag {
		req.TargetType = &builder.targetType
	}
	if builder.contentFlag {
		req.Content = builder.content
	}
	return req
}

type CreateProgressRecordPathReqBodyBuilder struct {
	sourceTitle     string
	sourceTitleFlag bool
	sourceUrl       string
	sourceUrlFlag   bool
	targetId        string
	targetIdFlag    bool
	targetType      int
	targetTypeFlag  bool
	content         *ContentBlock
	contentFlag     bool
}

func NewCreateProgressRecordPathReqBodyBuilder() *CreateProgressRecordPathReqBodyBuilder {
	builder := &CreateProgressRecordPathReqBodyBuilder{}
	return builder
}
func (builder *CreateProgressRecordPathReqBodyBuilder) SourceTitle(sourceTitle string) *CreateProgressRecordPathReqBodyBuilder {
	builder.sourceTitle = sourceTitle
	builder.sourceTitleFlag = true
	return builder
}
func (builder *CreateProgressRecordPathReqBodyBuilder) SourceUrl(sourceUrl string) *CreateProgressRecordPathReqBodyBuilder {
	builder.sourceUrl = sourceUrl
	builder.sourceUrlFlag = true
	return builder
}
func (builder *CreateProgressRecordPathReqBodyBuilder) TargetId(targetId string) *CreateProgressRecordPathReqBodyBuilder {
	builder.targetId = targetId
	builder.targetIdFlag = true
	return builder
}
func (builder *CreateProgressRecordPathReqBodyBuilder) TargetType(targetType int) *CreateProgressRecordPathReqBodyBuilder {
	builder.targetType = targetType
	builder.targetTypeFlag = true
	return builder
}
func (builder *CreateProgressRecordPathReqBodyBuilder) Content(content *ContentBlock) *CreateProgressRecordPathReqBodyBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}

func (builder *CreateProgressRecordPathReqBodyBuilder) Build() (*CreateProgressRecordReqBody, error) {
	req := &CreateProgressRecordReqBody{}
	if builder.sourceTitleFlag {
		req.SourceTitle = &builder.sourceTitle
	}
	if builder.sourceUrlFlag {
		req.SourceUrl = &builder.sourceUrl
	}
	if builder.targetIdFlag {
		req.TargetId = &builder.targetId
	}
	if builder.targetTypeFlag {
		req.TargetType = &builder.targetType
	}
	if builder.contentFlag {
		req.Content = builder.content
	}
	return req, nil
}

type CreateProgressRecordReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *CreateProgressRecordReqBody
}

func NewCreateProgressRecordReqBuilder() *CreateProgressRecordReqBuilder {
	builder := &CreateProgressRecordReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *CreateProgressRecordReqBuilder) Body(body *CreateProgressRecordReqBody) *CreateProgressRecordReqBuilder {
	builder.body = body
	return builder
}

func (builder *CreateProgressRecordReqBuilder) Build() *CreateProgressRecordReq {
	req := &CreateProgressRecordReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.Body = builder.body
	return req
}

type CreateProgressRecordReqBody struct {
	SourceTitle *string       `json:"source_title,omitempty"`
	SourceUrl   *string       `json:"source_url,omitempty"`
	TargetId    *string       `json:"target_id,omitempty"`
	TargetType  *int          `json:"target_type,omitempty"`
	Content     *ContentBlock `json:"content,omitempty"`
}

type CreateProgressRecordReq struct {
	apiReq *larkcore.ApiReq
	Body   *CreateProgressRecordReqBody `body:""`
}

type CreateProgressRecordRespData struct {
	Data *ProgressRecord `json:"data,omitempty"`
}

type CreateProgressRecordResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateProgressRecordRespData `json:"data"`
}

func (resp *CreateProgressRecordResp) Success() bool {
	return resp.Code == 0
}

type DeleteProgressRecordReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewDeleteProgressRecordReqBuilder() *DeleteProgressRecordReqBuilder {
	builder := &DeleteProgressRecordReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *DeleteProgressRecordReqBuilder) ProgressId(progressId string) *DeleteProgressRecordReqBuilder {
	builder.apiReq.PathParams.Set("progress_id", fmt.Sprint(progressId))
	return builder
}

func (builder *DeleteProgressRecordReqBuilder) Build() *DeleteProgressRecordReq {
	req := &DeleteProgressRecordReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type DeleteProgressRecordReq struct {
	apiReq *larkcore.ApiReq
}

type DeleteProgressRecordResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *DeleteProgressRecordResp) Success() bool {
	return resp.Code == 0
}

type GetProgressRecordReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewGetProgressRecordReqBuilder() *GetProgressRecordReqBuilder {
	builder := &GetProgressRecordReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *GetProgressRecordReqBuilder) ProgressId(progressId string) *GetProgressRecordReqBuilder {
	builder.apiReq.PathParams.Set("progress_id", fmt.Sprint(progressId))
	return builder
}

func (builder *GetProgressRecordReqBuilder) Build() *GetProgressRecordReq {
	req := &GetProgressRecordReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type GetProgressRecordReq struct {
	apiReq *larkcore.ApiReq
}

type GetProgressRecordRespData struct {
	ProgressId *string       `json:"progress_id,omitempty"`
	ModifyTime *string       `json:"modify_time,omitempty"`
	Content    *ContentBlock `json:"content,omitempty"`
}

type GetProgressRecordResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetProgressRecordRespData `json:"data"`
}

func (resp *GetProgressRecordResp) Success() bool {
	return resp.Code == 0
}

type UpdateProgressRecordReqBodyBuilder struct {
	content     *ContentBlock
	contentFlag bool
}

func NewUpdateProgressRecordReqBodyBuilder() *UpdateProgressRecordReqBodyBuilder {
	builder := &UpdateProgressRecordReqBodyBuilder{}
	return builder
}

func (builder *UpdateProgressRecordReqBodyBuilder) Content(content *ContentBlock) *UpdateProgressRecordReqBodyBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}

func (builder *UpdateProgressRecordReqBodyBuilder) Build() *UpdateProgressRecordReqBody {
	req := &UpdateProgressRecordReqBody{}
	if builder.contentFlag {
		req.Content = builder.content
	}
	return req
}

type UpdateProgressRecordPathReqBodyBuilder struct {
	content     *ContentBlock
	contentFlag bool
}

func NewUpdateProgressRecordPathReqBodyBuilder() *UpdateProgressRecordPathReqBodyBuilder {
	builder := &UpdateProgressRecordPathReqBodyBuilder{}
	return builder
}
func (builder *UpdateProgressRecordPathReqBodyBuilder) Content(content *ContentBlock) *UpdateProgressRecordPathReqBodyBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}

func (builder *UpdateProgressRecordPathReqBodyBuilder) Build() (*UpdateProgressRecordReqBody, error) {
	req := &UpdateProgressRecordReqBody{}
	if builder.contentFlag {
		req.Content = builder.content
	}
	return req, nil
}

type UpdateProgressRecordReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *UpdateProgressRecordReqBody
}

func NewUpdateProgressRecordReqBuilder() *UpdateProgressRecordReqBuilder {
	builder := &UpdateProgressRecordReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *UpdateProgressRecordReqBuilder) ProgressId(progressId string) *UpdateProgressRecordReqBuilder {
	builder.apiReq.PathParams.Set("progress_id", fmt.Sprint(progressId))
	return builder
}
func (builder *UpdateProgressRecordReqBuilder) Body(body *UpdateProgressRecordReqBody) *UpdateProgressRecordReqBuilder {
	builder.body = body
	return builder
}

func (builder *UpdateProgressRecordReqBuilder) Build() *UpdateProgressRecordReq {
	req := &UpdateProgressRecordReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.body
	return req
}

type UpdateProgressRecordReqBody struct {
	Content *ContentBlock `json:"content,omitempty"`
}

type UpdateProgressRecordReq struct {
	apiReq *larkcore.ApiReq
	Body   *UpdateProgressRecordReqBody `body:""`
}

type UpdateProgressRecordRespData struct {
	Data *ProgressRecord `json:"data,omitempty"`
}

type UpdateProgressRecordResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *UpdateProgressRecordRespData `json:"data"`
}

func (resp *UpdateProgressRecordResp) Success() bool {
	return resp.Code == 0
}

type ListUserOkrReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewListUserOkrReqBuilder() *ListUserOkrReqBuilder {
	builder := &ListUserOkrReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *ListUserOkrReqBuilder) UserId(userId string) *ListUserOkrReqBuilder {
	builder.apiReq.PathParams.Set("user_id", fmt.Sprint(userId))
	return builder
}
func (builder *ListUserOkrReqBuilder) UserIdType(userIdType string) *ListUserOkrReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}
func (builder *ListUserOkrReqBuilder) Offset(offset string) *ListUserOkrReqBuilder {
	builder.apiReq.QueryParams.Set("offset", fmt.Sprint(offset))
	return builder
}
func (builder *ListUserOkrReqBuilder) Limit(limit string) *ListUserOkrReqBuilder {
	builder.apiReq.QueryParams.Set("limit", fmt.Sprint(limit))
	return builder
}
func (builder *ListUserOkrReqBuilder) Lang(lang string) *ListUserOkrReqBuilder {
	builder.apiReq.QueryParams.Set("lang", fmt.Sprint(lang))
	return builder
}
func (builder *ListUserOkrReqBuilder) PeriodIds(periodIds []string) *ListUserOkrReqBuilder {
	builder.apiReq.QueryParams.Set("period_ids", fmt.Sprint(periodIds))
	return builder
}

func (builder *ListUserOkrReqBuilder) Build() *ListUserOkrReq {
	req := &ListUserOkrReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListUserOkrReq struct {
	apiReq *larkcore.ApiReq
}

type ListUserOkrRespData struct {
	Total   *int        `json:"total,omitempty"`
	OkrList []*OkrBatch `json:"okr_list,omitempty"`
}

type ListUserOkrResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListUserOkrRespData `json:"data"`
}

func (resp *ListUserOkrResp) Success() bool {
	return resp.Code == 0
}
