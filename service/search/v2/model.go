// Package search code generated by oapi sdk gen
package search

import (
	"context"
	"errors"
	"fmt"

	"github.com/feishu/oapi-sdk-go/core"
)

/**生成枚举值 **/

const (
	StateOnline  string = "0"
	StateOffline string = "1"
)

const (
	ViewFULL  string = "0"
	ViewBASIC string = "1"
)

/**生成数据类型 **/

type Acl struct {
	Access *string `json:"access,omitempty"`
	Value  *string `json:"value,omitempty"`
	Type   *string `json:"type,omitempty"`
}

type BatchItemResult struct {
	ItemId    *string `json:"item_id,omitempty"`
	IsSuccess *bool   `json:"is_success,omitempty"`
	Err       *string `json:"err,omitempty"`
}

type ConnectDataSource struct {
	ServiceUrl         *string `json:"service_url,omitempty"`
	ProjectName        *string `json:"project_name,omitempty"`
	DisplayName        *string `json:"display_name,omitempty"`
	Description        *string `json:"description,omitempty"`
	IconUrl            *string `json:"icon_url,omitempty"`
	ProjectDescription *string `json:"project_description,omitempty"`
	ContactEmail       *string `json:"contact_email,omitempty"`
	TenantName         *string `json:"tenant_name,omitempty"`
}

type DataSource struct {
	Id               *int64    `json:"id,omitempty,string"`
	Name             *string   `json:"name,omitempty"`
	State            *int      `json:"state,omitempty"`
	Description      *string   `json:"description,omitempty"`
	CreateTime       *string   `json:"create_time,omitempty"`
	UpdateTime       *string   `json:"update_time,omitempty"`
	IsExceedQuota    *bool     `json:"is_exceed_quota,omitempty"`
	IconUrl          *string   `json:"icon_url,omitempty"`
	Template         *string   `json:"template,omitempty"`
	SearchableFields []string  `json:"searchable_fields,omitempty"`
	I18nName         *I18nMeta `json:"i18n_name,omitempty"`
	I18nDescription  *I18nMeta `json:"i18n_description,omitempty"`
	SchemaId         *string   `json:"schema_id,omitempty"`
}

type I18nMeta struct {
	ZhCn *string `json:"zh_cn,omitempty"`
	EnUs *string `json:"en_us,omitempty"`
	JaJp *string `json:"ja_jp,omitempty"`
}

type Item struct {
	Id             *string       `json:"id,omitempty"`
	Acl            []*Acl        `json:"acl,omitempty"`
	Metadata       *ItemMetadata `json:"metadata,omitempty"`
	StructuredData *string       `json:"structured_data,omitempty"`
	Content        *ItemContent  `json:"content,omitempty"`
}

type ItemContent struct {
	Format      *string `json:"format,omitempty"`
	ContentData *string `json:"content_data,omitempty"`
}

type ItemMetadata struct {
	Title           *string `json:"title,omitempty"`
	SourceUrl       *string `json:"source_url,omitempty"`
	CreateTime      *int    `json:"create_time,omitempty"`
	UpdateTime      *int    `json:"update_time,omitempty"`
	SourceUrlMobile *string `json:"source_url_mobile,omitempty"`
}

type ItemRecord struct {
	ItemId       *string `json:"item_id,omitempty"`
	DataSourceId *string `json:"data_source_id,omitempty"`
	Version      *string `json:"version,omitempty"`
	CreatedAt    *string `json:"created_at,omitempty"`
	UpdatedAt    *string `json:"updated_at,omitempty"`
}

type Schema struct {
	Properties []*SchemaProperty `json:"properties,omitempty"`
	Display    *SchemaDisplay    `json:"display,omitempty"`
	SchemaId   *string           `json:"schema_id,omitempty"`
}

type SchemaDisplay struct {
	CardKey       *string                      `json:"card_key,omitempty"`
	FieldsMapping []*SchemaDisplayFieldMapping `json:"fields_mapping,omitempty"`
}

type SchemaDisplayFieldMapping struct {
	DisplayField *string `json:"display_field,omitempty"`
	DataField    *string `json:"data_field,omitempty"`
}

type SchemaDisplayOption struct {
	DisplayLabel *string `json:"display_label,omitempty"`
	DisplayType  *string `json:"display_type,omitempty"`
}

type SchemaProperty struct {
	Name            *string                `json:"name,omitempty"`
	Type            *string                `json:"type,omitempty"`
	IsSearchable    *bool                  `json:"is_searchable,omitempty"`
	IsSortable      *bool                  `json:"is_sortable,omitempty"`
	IsReturnable    *bool                  `json:"is_returnable,omitempty"`
	SortOptions     *SchemaSortOptions     `json:"sort_options,omitempty"`
	TypeDefinitions *SchemaTypeDefinitions `json:"type_definitions,omitempty"`
	SearchOptions   *SchemaSearchOptions   `json:"search_options,omitempty"`
}

type SchemaPropertyDefinition struct {
	Name                 *string              `json:"name,omitempty"`
	IsReturnable         *bool                `json:"is_returnable,omitempty"`
	IsRepeatable         *bool                `json:"is_repeatable,omitempty"`
	IsSortable           *bool                `json:"is_sortable,omitempty"`
	IsFacetable          *bool                `json:"is_facetable,omitempty"`
	IsWildcardSearchable *bool                `json:"is_wildcard_searchable,omitempty"`
	Type                 *string              `json:"type,omitempty"`
	DisplayOptions       *SchemaDisplayOption `json:"display_options,omitempty"`
}

type SchemaSearchOptions struct {
	EnableSemanticMatch     *bool `json:"enable_semantic_match,omitempty"`
	EnableExactMatch        *bool `json:"enable_exact_match,omitempty"`
	EnablePrefixMatch       *bool `json:"enable_prefix_match,omitempty"`
	EnableNumberSuffixMatch *bool `json:"enable_number_suffix_match,omitempty"`
	EnableCamelMatch        *bool `json:"enable_camel_match,omitempty"`
}

type SchemaSortOptions struct {
	Priority *int    `json:"priority,omitempty"`
	Order    *string `json:"order,omitempty"`
}

type SchemaTagOptions struct {
	Name  *string `json:"name,omitempty"`
	Color *string `json:"color,omitempty"`
	Text  *string `json:"text,omitempty"`
}

type SchemaTypeDefinitions struct {
	Tag []*SchemaTagOptions `json:"tag,omitempty"`
}

/**生成请求和响应结果类型，以及请求对象的Builder构造器 **/

/*1.4 生成请求的builder结构体*/
type CreateDataSourceReqBuilder struct {
	dataSource     *DataSource
	dataSourceFlag bool
}

// 生成请求的New构造器
func NewCreateDataSourceReqBuilder() *CreateDataSourceReqBuilder {
	builder := &CreateDataSourceReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *CreateDataSourceReqBuilder) DataSource(dataSource *DataSource) *CreateDataSourceReqBuilder {
	builder.dataSource = dataSource
	builder.dataSourceFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *CreateDataSourceReqBuilder) Build() *CreateDataSourceReq {
	req := &CreateDataSourceReq{}
	if builder.dataSourceFlag {
		req.DataSource = builder.dataSource
	}
	return req
}

type CreateDataSourceReq struct {
	DataSource *DataSource `body:""`
}

type CreateDataSourceRespData struct {
	DataSource *DataSource `json:"data_source,omitempty"`
}

type CreateDataSourceResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *CreateDataSourceRespData `json:"data"`
}

func (resp *CreateDataSourceResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type DeleteDataSourceReqBuilder struct {
	dataSourceId     string
	dataSourceIdFlag bool
}

// 生成请求的New构造器
func NewDeleteDataSourceReqBuilder() *DeleteDataSourceReqBuilder {
	builder := &DeleteDataSourceReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *DeleteDataSourceReqBuilder) DataSourceId(dataSourceId string) *DeleteDataSourceReqBuilder {
	builder.dataSourceId = dataSourceId
	builder.dataSourceIdFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *DeleteDataSourceReqBuilder) Build() *DeleteDataSourceReq {
	req := &DeleteDataSourceReq{}
	if builder.dataSourceIdFlag {
		req.DataSourceId = builder.dataSourceId
	}
	return req
}

type DeleteDataSourceReq struct {
	DataSourceId string `path:"data_source_id"`
}

type DeleteDataSourceResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *DeleteDataSourceResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type GetDataSourceReqBuilder struct {
	dataSourceId     string
	dataSourceIdFlag bool
}

// 生成请求的New构造器
func NewGetDataSourceReqBuilder() *GetDataSourceReqBuilder {
	builder := &GetDataSourceReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *GetDataSourceReqBuilder) DataSourceId(dataSourceId string) *GetDataSourceReqBuilder {
	builder.dataSourceId = dataSourceId
	builder.dataSourceIdFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *GetDataSourceReqBuilder) Build() *GetDataSourceReq {
	req := &GetDataSourceReq{}
	if builder.dataSourceIdFlag {
		req.DataSourceId = builder.dataSourceId
	}
	return req
}

type GetDataSourceReq struct {
	DataSourceId string `path:"data_source_id"`
}

type GetDataSourceRespData struct {
	DataSource *DataSource `json:"data_source,omitempty"`
}

type GetDataSourceResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *GetDataSourceRespData `json:"data"`
}

func (resp *GetDataSourceResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type ListDataSourceReqBuilder struct {
	view          int
	viewFlag      bool
	pageToken     string
	pageTokenFlag bool
	pageSize      int
	pageSizeFlag  bool
	limit         int
}

// 生成请求的New构造器
func NewListDataSourceReqBuilder() *ListDataSourceReqBuilder {
	builder := &ListDataSourceReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *ListDataSourceReqBuilder) Limit(limit int) *ListDataSourceReqBuilder {
	builder.limit = limit
	return builder
}
func (builder *ListDataSourceReqBuilder) View(view int) *ListDataSourceReqBuilder {
	builder.view = view
	builder.viewFlag = true
	return builder
}
func (builder *ListDataSourceReqBuilder) PageToken(pageToken string) *ListDataSourceReqBuilder {
	builder.pageToken = pageToken
	builder.pageTokenFlag = true
	return builder
}
func (builder *ListDataSourceReqBuilder) PageSize(pageSize int) *ListDataSourceReqBuilder {
	builder.pageSize = pageSize
	builder.pageSizeFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *ListDataSourceReqBuilder) Build() *ListDataSourceReq {
	req := &ListDataSourceReq{}
	req.Limit = builder.limit
	if builder.viewFlag {
		req.View = &builder.view
	}
	if builder.pageTokenFlag {
		req.PageToken = &builder.pageToken
	}
	if builder.pageSizeFlag {
		req.PageSize = &builder.pageSize
	}
	return req
}

type ListDataSourceReq struct {
	View      *int    `query:"view"`
	PageToken *string `query:"page_token"`
	PageSize  *int    `query:"page_size"`
	Limit     int
}

type ListDataSourceRespData struct {
	HasMore   *bool         `json:"has_more,omitempty"`
	PageToken *string       `json:"page_token,omitempty"`
	Items     []*DataSource `json:"items,omitempty"`
}

type ListDataSourceResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *ListDataSourceRespData `json:"data"`
}

func (resp *ListDataSourceResp) Success() bool {
	return resp.Code == 0
}

type PatchDataSourceReqBodyBuilder struct {
	name                string
	nameFlag            bool
	state               int
	stateFlag           bool
	description         string
	descriptionFlag     bool
	iconUrl             string
	iconUrlFlag         bool
	i18nName            *ItemMetadata
	i18nNameFlag        bool
	i18nDescription     *I18nMeta
	i18nDescriptionFlag bool
}

// 生成body的New构造器
func NewPatchDataSourceReqBodyBuilder() *PatchDataSourceReqBodyBuilder {
	builder := &PatchDataSourceReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *PatchDataSourceReqBodyBuilder) Name(name string) *PatchDataSourceReqBodyBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *PatchDataSourceReqBodyBuilder) State(state int) *PatchDataSourceReqBodyBuilder {
	builder.state = state
	builder.stateFlag = true
	return builder
}
func (builder *PatchDataSourceReqBodyBuilder) Description(description string) *PatchDataSourceReqBodyBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}
func (builder *PatchDataSourceReqBodyBuilder) IconUrl(iconUrl string) *PatchDataSourceReqBodyBuilder {
	builder.iconUrl = iconUrl
	builder.iconUrlFlag = true
	return builder
}
func (builder *PatchDataSourceReqBodyBuilder) I18nName(i18nName *ItemMetadata) *PatchDataSourceReqBodyBuilder {
	builder.i18nName = i18nName
	builder.i18nNameFlag = true
	return builder
}
func (builder *PatchDataSourceReqBodyBuilder) I18nDescription(i18nDescription *I18nMeta) *PatchDataSourceReqBodyBuilder {
	builder.i18nDescription = i18nDescription
	builder.i18nDescriptionFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *PatchDataSourceReqBodyBuilder) Build() *PatchDataSourceReqBody {
	req := &PatchDataSourceReqBody{}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.stateFlag {
		req.State = &builder.state

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	if builder.iconUrlFlag {
		req.IconUrl = &builder.iconUrl

	}
	if builder.i18nNameFlag {
		req.I18nName = builder.i18nName

	}
	if builder.i18nDescriptionFlag {
		req.I18nDescription = builder.i18nDescription

	}
	return req
}

/**上传文件path开始**/
type PatchDataSourcePathReqBodyBuilder struct {
	name                string
	nameFlag            bool
	state               int
	stateFlag           bool
	description         string
	descriptionFlag     bool
	iconUrl             string
	iconUrlFlag         bool
	i18nName            *ItemMetadata
	i18nNameFlag        bool
	i18nDescription     *I18nMeta
	i18nDescriptionFlag bool
}

func NewPatchDataSourcePathReqBodyBuilder() *PatchDataSourcePathReqBodyBuilder {
	builder := &PatchDataSourcePathReqBodyBuilder{}
	return builder
}
func (builder *PatchDataSourcePathReqBodyBuilder) Name(name string) *PatchDataSourcePathReqBodyBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *PatchDataSourcePathReqBodyBuilder) State(state int) *PatchDataSourcePathReqBodyBuilder {
	builder.state = state
	builder.stateFlag = true
	return builder
}
func (builder *PatchDataSourcePathReqBodyBuilder) Description(description string) *PatchDataSourcePathReqBodyBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}
func (builder *PatchDataSourcePathReqBodyBuilder) IconUrl(iconUrl string) *PatchDataSourcePathReqBodyBuilder {
	builder.iconUrl = iconUrl
	builder.iconUrlFlag = true
	return builder
}
func (builder *PatchDataSourcePathReqBodyBuilder) I18nName(i18nName *ItemMetadata) *PatchDataSourcePathReqBodyBuilder {
	builder.i18nName = i18nName
	builder.i18nNameFlag = true
	return builder
}
func (builder *PatchDataSourcePathReqBodyBuilder) I18nDescription(i18nDescription *I18nMeta) *PatchDataSourcePathReqBodyBuilder {
	builder.i18nDescription = i18nDescription
	builder.i18nDescriptionFlag = true
	return builder
}

func (builder *PatchDataSourcePathReqBodyBuilder) Build() (*PatchDataSourceReqBody, error) {
	req := &PatchDataSourceReqBody{}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.stateFlag {
		req.State = &builder.state

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	if builder.iconUrlFlag {
		req.IconUrl = &builder.iconUrl

	}
	if builder.i18nNameFlag {
		req.I18nName = builder.i18nName
	}
	if builder.i18nDescriptionFlag {
		req.I18nDescription = builder.i18nDescription
	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type PatchDataSourceReqBuilder struct {
	dataSourceId     string
	dataSourceIdFlag bool
	body             *PatchDataSourceReqBody
	bodyFlag         bool
}

// 生成请求的New构造器
func NewPatchDataSourceReqBuilder() *PatchDataSourceReqBuilder {
	builder := &PatchDataSourceReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *PatchDataSourceReqBuilder) DataSourceId(dataSourceId string) *PatchDataSourceReqBuilder {
	builder.dataSourceId = dataSourceId
	builder.dataSourceIdFlag = true
	return builder
}
func (builder *PatchDataSourceReqBuilder) Body(body *PatchDataSourceReqBody) *PatchDataSourceReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *PatchDataSourceReqBuilder) Build() *PatchDataSourceReq {
	req := &PatchDataSourceReq{}
	if builder.dataSourceIdFlag {
		req.DataSourceId = builder.dataSourceId
	}
	if builder.bodyFlag {
		req.Body = builder.body
	}
	return req
}

type PatchDataSourceReqBody struct {
	Name            *string       `json:"name,omitempty"`
	State           *int          `json:"state,omitempty"`
	Description     *string       `json:"description,omitempty"`
	IconUrl         *string       `json:"icon_url,omitempty"`
	I18nName        *ItemMetadata `json:"i18n_name,omitempty"`
	I18nDescription *I18nMeta     `json:"i18n_description,omitempty"`
}

type PatchDataSourceReq struct {
	DataSourceId string                  `path:"data_source_id"`
	Body         *PatchDataSourceReqBody `body:""`
}

type PatchDataSourceRespData struct {
	DataSource *DataSource `json:"data_source,omitempty"`
}

type PatchDataSourceResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *PatchDataSourceRespData `json:"data"`
}

func (resp *PatchDataSourceResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type CreateDataSourceItemReqBuilder struct {
	dataSourceId     string
	dataSourceIdFlag bool
	item             *Item
	itemFlag         bool
}

// 生成请求的New构造器
func NewCreateDataSourceItemReqBuilder() *CreateDataSourceItemReqBuilder {
	builder := &CreateDataSourceItemReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *CreateDataSourceItemReqBuilder) DataSourceId(dataSourceId string) *CreateDataSourceItemReqBuilder {
	builder.dataSourceId = dataSourceId
	builder.dataSourceIdFlag = true
	return builder
}
func (builder *CreateDataSourceItemReqBuilder) Item(item *Item) *CreateDataSourceItemReqBuilder {
	builder.item = item
	builder.itemFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *CreateDataSourceItemReqBuilder) Build() *CreateDataSourceItemReq {
	req := &CreateDataSourceItemReq{}
	if builder.dataSourceIdFlag {
		req.DataSourceId = builder.dataSourceId
	}
	if builder.itemFlag {
		req.Item = builder.item
	}
	return req
}

type CreateDataSourceItemReq struct {
	DataSourceId string `path:"data_source_id"`
	Item         *Item  `body:""`
}

type CreateDataSourceItemResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *CreateDataSourceItemResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type DeleteDataSourceItemReqBuilder struct {
	dataSourceId     string
	dataSourceIdFlag bool
	itemId           string
	itemIdFlag       bool
}

// 生成请求的New构造器
func NewDeleteDataSourceItemReqBuilder() *DeleteDataSourceItemReqBuilder {
	builder := &DeleteDataSourceItemReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *DeleteDataSourceItemReqBuilder) DataSourceId(dataSourceId string) *DeleteDataSourceItemReqBuilder {
	builder.dataSourceId = dataSourceId
	builder.dataSourceIdFlag = true
	return builder
}
func (builder *DeleteDataSourceItemReqBuilder) ItemId(itemId string) *DeleteDataSourceItemReqBuilder {
	builder.itemId = itemId
	builder.itemIdFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *DeleteDataSourceItemReqBuilder) Build() *DeleteDataSourceItemReq {
	req := &DeleteDataSourceItemReq{}
	if builder.dataSourceIdFlag {
		req.DataSourceId = builder.dataSourceId
	}
	if builder.itemIdFlag {
		req.ItemId = builder.itemId
	}
	return req
}

type DeleteDataSourceItemReq struct {
	DataSourceId string `path:"data_source_id"`
	ItemId       string `path:"item_id"`
}

type DeleteDataSourceItemResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *DeleteDataSourceItemResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type GetDataSourceItemReqBuilder struct {
	dataSourceId     string
	dataSourceIdFlag bool
	itemId           string
	itemIdFlag       bool
}

// 生成请求的New构造器
func NewGetDataSourceItemReqBuilder() *GetDataSourceItemReqBuilder {
	builder := &GetDataSourceItemReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *GetDataSourceItemReqBuilder) DataSourceId(dataSourceId string) *GetDataSourceItemReqBuilder {
	builder.dataSourceId = dataSourceId
	builder.dataSourceIdFlag = true
	return builder
}
func (builder *GetDataSourceItemReqBuilder) ItemId(itemId string) *GetDataSourceItemReqBuilder {
	builder.itemId = itemId
	builder.itemIdFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *GetDataSourceItemReqBuilder) Build() *GetDataSourceItemReq {
	req := &GetDataSourceItemReq{}
	if builder.dataSourceIdFlag {
		req.DataSourceId = builder.dataSourceId
	}
	if builder.itemIdFlag {
		req.ItemId = builder.itemId
	}
	return req
}

type GetDataSourceItemReq struct {
	DataSourceId string `path:"data_source_id"`
	ItemId       string `path:"item_id"`
}

type GetDataSourceItemRespData struct {
	Item *Item `json:"item,omitempty"`
}

type GetDataSourceItemResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *GetDataSourceItemRespData `json:"data"`
}

func (resp *GetDataSourceItemResp) Success() bool {
	return resp.Code == 0
}

/**生成消息事件结构体 **/

/* 生成请求的builder构造器*/
/*1.1 生成body的builder结构体*/
/**如果是分页查询，则添加迭代器定义**/
type ListDataSourceIterator struct {
	nextPageToken *string
	items         []*DataSource
	index         int
	limit         int
	ctx           context.Context
	req           *ListDataSourceReq
	listFunc      func(ctx context.Context, req *ListDataSourceReq, options ...core.RequestOptionFunc) (*ListDataSourceResp, error)
	options       []core.RequestOptionFunc
	curlNum       int
}

func (iterator *ListDataSourceIterator) Next() (bool, *DataSource, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum > iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.PageToken = iterator.nextPageToken
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListDataSourceIterator) NextPageToken() *string {
	return iterator.nextPageToken
}
