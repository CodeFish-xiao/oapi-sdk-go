// Package im code generated by oapi sdk gen
package larkim

import (
	"net/http"
	"bytes"
	"context"
	
	"github.com/larksuite/oapi-sdk-go/core"
)


// 构建业务域服务实例
func NewService(config *larkcore.Config) *ImService {
	i := &ImService{config:config}
	i.BatchMessage = &batchMessage{service: i}
	i.Chat = &chat{service: i}
	i.ChatAnnouncement = &chatAnnouncement{service: i}
	i.ChatManagers = &chatManagers{service: i}
	i.ChatMemberBot = &chatMemberBot{service: i}
	i.ChatMemberUser = &chatMemberUser{service: i}
	i.ChatMembers = &chatMembers{service: i}
	i.ChatModeration = &chatModeration{service: i}
	i.ChatTab = &chatTab{service: i}
	i.ChatTopNotice = &chatTopNotice{service: i}
	i.File = &file{service: i}
	i.Image = &image{service: i}
	i.Message = &message{service: i}
	i.MessageReaction = &messageReaction{service: i}
	i.MessageResource = &messageResource{service: i}
	return i
}


// 业务域服务定义
type ImService struct {
	config *larkcore.Config
	BatchMessage *batchMessage
	Chat *chat
	ChatAnnouncement *chatAnnouncement
	ChatManagers *chatManagers
	ChatMemberBot *chatMemberBot
	ChatMemberUser *chatMemberUser
	ChatMembers *chatMembers
	ChatModeration *chatModeration
	ChatTab *chatTab
	ChatTopNotice *chatTopNotice
	File *file
	Image *image
	Message *message
	MessageReaction *messageReaction
	MessageResource *messageResource
}



// 资源服务定义
type batchMessage struct {
   service *ImService
}
type chat struct {
   service *ImService
}
type chatAnnouncement struct {
   service *ImService
}
type chatManagers struct {
   service *ImService
}
type chatMemberBot struct {
   service *ImService
}
type chatMemberUser struct {
   service *ImService
}
type chatMembers struct {
   service *ImService
}
type chatModeration struct {
   service *ImService
}
type chatTab struct {
   service *ImService
}
type chatTopNotice struct {
   service *ImService
}
type file struct {
   service *ImService
}
type image struct {
   service *ImService
}
type message struct {
   service *ImService
}
type messageReaction struct {
   service *ImService
}
type messageResource struct {
   service *ImService
}
// 资源服务方法定义
func (b *batchMessage) Delete(ctx context.Context, req *DeleteBatchMessageReq, options ...larkcore.RequestOptionFunc) (*DeleteBatchMessageResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,b.service.config, http.MethodDelete,
		"/open-apis/im/v1/batch_messages/:batch_message_id", []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &DeleteBatchMessageResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (b *batchMessage) GetProgress(ctx context.Context, req *GetProgressBatchMessageReq, options ...larkcore.RequestOptionFunc) (*GetProgressBatchMessageResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,b.service.config, http.MethodGet,
		"/open-apis/im/v1/batch_messages/:batch_message_id/get_progress", []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &GetProgressBatchMessageResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (b *batchMessage) ReadUser(ctx context.Context, req *ReadUserBatchMessageReq, options ...larkcore.RequestOptionFunc) (*ReadUserBatchMessageResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,b.service.config, http.MethodGet,
		"/open-apis/im/v1/batch_messages/:batch_message_id/read_user", []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &ReadUserBatchMessageResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (c *chat) Create(ctx context.Context, req *CreateChatReq, options ...larkcore.RequestOptionFunc) (*CreateChatResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,c.service.config, http.MethodPost,
		"/open-apis/im/v1/chats", []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &CreateChatResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (c *chat) Delete(ctx context.Context, req *DeleteChatReq, options ...larkcore.RequestOptionFunc) (*DeleteChatResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,c.service.config, http.MethodDelete,
		"/open-apis/im/v1/chats/:chat_id", []larkcore.AccessTokenType{larkcore.AccessTokenTypeUser, larkcore.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &DeleteChatResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (c *chat) Get(ctx context.Context, req *GetChatReq, options ...larkcore.RequestOptionFunc) (*GetChatResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,c.service.config, http.MethodGet,
		"/open-apis/im/v1/chats/:chat_id", []larkcore.AccessTokenType{larkcore.AccessTokenTypeUser, larkcore.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &GetChatResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (c *chat) List(ctx context.Context, req *ListChatReq, options ...larkcore.RequestOptionFunc) (*ListChatResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,c.service.config, http.MethodGet,
		"/open-apis/im/v1/chats", []larkcore.AccessTokenType{larkcore.AccessTokenTypeUser, larkcore.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &ListChatResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (c *chat) ListByIterator(ctx context.Context, req *ListChatReq, options ...larkcore.RequestOptionFunc) (*ListChatIterator, error) {
   return &ListChatIterator{
	  ctx:	  ctx,
	  req:	  req,
	  listFunc: c.List,
	  options:  options,
	  limit: req.Limit}, nil
}
func (c *chat) Search(ctx context.Context, req *SearchChatReq, options ...larkcore.RequestOptionFunc) (*SearchChatResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,c.service.config, http.MethodGet,
		"/open-apis/im/v1/chats/search", []larkcore.AccessTokenType{larkcore.AccessTokenTypeUser, larkcore.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &SearchChatResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (c *chat) SearchByIterator(ctx context.Context, req *SearchChatReq, options ...larkcore.RequestOptionFunc) (*SearchChatIterator, error) {
   return &SearchChatIterator{
	  ctx:	  ctx,
	  req:	  req,
	  listFunc: c.Search,
	  options:  options,
	  limit: req.Limit}, nil
}
func (c *chat) Update(ctx context.Context, req *UpdateChatReq, options ...larkcore.RequestOptionFunc) (*UpdateChatResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,c.service.config, http.MethodPut,
		"/open-apis/im/v1/chats/:chat_id", []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant, larkcore.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &UpdateChatResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (c *chatAnnouncement) Get(ctx context.Context, req *GetChatAnnouncementReq, options ...larkcore.RequestOptionFunc) (*GetChatAnnouncementResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,c.service.config, http.MethodGet,
		"/open-apis/im/v1/chats/:chat_id/announcement", []larkcore.AccessTokenType{larkcore.AccessTokenTypeUser, larkcore.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &GetChatAnnouncementResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (c *chatAnnouncement) Patch(ctx context.Context, req *PatchChatAnnouncementReq, options ...larkcore.RequestOptionFunc) (*PatchChatAnnouncementResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,c.service.config, http.MethodPatch,
		"/open-apis/im/v1/chats/:chat_id/announcement", []larkcore.AccessTokenType{larkcore.AccessTokenTypeUser, larkcore.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &PatchChatAnnouncementResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (c *chatManagers) AddManagers(ctx context.Context, req *AddManagersChatManagersReq, options ...larkcore.RequestOptionFunc) (*AddManagersChatManagersResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,c.service.config, http.MethodPost,
		"/open-apis/im/v1/chats/:chat_id/managers/add_managers", []larkcore.AccessTokenType{larkcore.AccessTokenTypeUser, larkcore.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &AddManagersChatManagersResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (c *chatManagers) DeleteManagers(ctx context.Context, req *DeleteManagersChatManagersReq, options ...larkcore.RequestOptionFunc) (*DeleteManagersChatManagersResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,c.service.config, http.MethodPost,
		"/open-apis/im/v1/chats/:chat_id/managers/delete_managers", []larkcore.AccessTokenType{larkcore.AccessTokenTypeUser, larkcore.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &DeleteManagersChatManagersResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (c *chatMembers) Create(ctx context.Context, req *CreateChatMembersReq, options ...larkcore.RequestOptionFunc) (*CreateChatMembersResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,c.service.config, http.MethodPost,
		"/open-apis/im/v1/chats/:chat_id/members", []larkcore.AccessTokenType{larkcore.AccessTokenTypeUser, larkcore.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &CreateChatMembersResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (c *chatMembers) Delete(ctx context.Context, req *DeleteChatMembersReq, options ...larkcore.RequestOptionFunc) (*DeleteChatMembersResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,c.service.config, http.MethodDelete,
		"/open-apis/im/v1/chats/:chat_id/members", []larkcore.AccessTokenType{larkcore.AccessTokenTypeUser, larkcore.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &DeleteChatMembersResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (c *chatMembers) Get(ctx context.Context, req *GetChatMembersReq, options ...larkcore.RequestOptionFunc) (*GetChatMembersResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,c.service.config, http.MethodGet,
		"/open-apis/im/v1/chats/:chat_id/members", []larkcore.AccessTokenType{larkcore.AccessTokenTypeUser, larkcore.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &GetChatMembersResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (c *chatMembers) GetByIterator(ctx context.Context, req *GetChatMembersReq, options ...larkcore.RequestOptionFunc) (*GetChatMembersIterator, error) {
   return &GetChatMembersIterator{
	  ctx:	  ctx,
	  req:	  req,
	  listFunc: c.Get,
	  options:  options,
	  limit: req.Limit}, nil
}
func (c *chatMembers) IsInChat(ctx context.Context, req *IsInChatChatMembersReq, options ...larkcore.RequestOptionFunc) (*IsInChatChatMembersResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,c.service.config, http.MethodGet,
		"/open-apis/im/v1/chats/:chat_id/members/is_in_chat", []larkcore.AccessTokenType{larkcore.AccessTokenTypeUser, larkcore.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &IsInChatChatMembersResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (c *chatMembers) MeJoin(ctx context.Context, req *MeJoinChatMembersReq, options ...larkcore.RequestOptionFunc) (*MeJoinChatMembersResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,c.service.config, http.MethodPatch,
		"/open-apis/im/v1/chats/:chat_id/members/me_join", []larkcore.AccessTokenType{larkcore.AccessTokenTypeUser, larkcore.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &MeJoinChatMembersResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (c *chatModeration) Get(ctx context.Context, req *GetChatModerationReq, options ...larkcore.RequestOptionFunc) (*GetChatModerationResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,c.service.config, http.MethodGet,
		"/open-apis/im/v1/chats/:chat_id/moderation", []larkcore.AccessTokenType{larkcore.AccessTokenTypeUser, larkcore.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &GetChatModerationResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (c *chatModeration) GetByIterator(ctx context.Context, req *GetChatModerationReq, options ...larkcore.RequestOptionFunc) (*GetChatModerationIterator, error) {
   return &GetChatModerationIterator{
	  ctx:	  ctx,
	  req:	  req,
	  listFunc: c.Get,
	  options:  options,
	  limit: req.Limit}, nil
}
func (c *chatModeration) Update(ctx context.Context, req *UpdateChatModerationReq, options ...larkcore.RequestOptionFunc) (*UpdateChatModerationResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,c.service.config, http.MethodPut,
		"/open-apis/im/v1/chats/:chat_id/moderation", []larkcore.AccessTokenType{larkcore.AccessTokenTypeUser, larkcore.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &UpdateChatModerationResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (c *chatTab) Create(ctx context.Context, req *CreateChatTabReq, options ...larkcore.RequestOptionFunc) (*CreateChatTabResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,c.service.config, http.MethodPost,
		"/open-apis/im/v1/chats/:chat_id/chat_tabs", []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant, larkcore.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &CreateChatTabResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (c *chatTab) DeleteTabs(ctx context.Context, req *DeleteTabsChatTabReq, options ...larkcore.RequestOptionFunc) (*DeleteTabsChatTabResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,c.service.config, http.MethodDelete,
		"/open-apis/im/v1/chats/:chat_id/chat_tabs/delete_tabs", []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant, larkcore.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &DeleteTabsChatTabResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (c *chatTab) ListTabs(ctx context.Context, req *ListTabsChatTabReq, options ...larkcore.RequestOptionFunc) (*ListTabsChatTabResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,c.service.config, http.MethodGet,
		"/open-apis/im/v1/chats/:chat_id/chat_tabs/list_tabs", []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant, larkcore.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &ListTabsChatTabResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (c *chatTab) SortTabs(ctx context.Context, req *SortTabsChatTabReq, options ...larkcore.RequestOptionFunc) (*SortTabsChatTabResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,c.service.config, http.MethodPost,
		"/open-apis/im/v1/chats/:chat_id/chat_tabs/sort_tabs", []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant, larkcore.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &SortTabsChatTabResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (c *chatTab) UpdateTabs(ctx context.Context, req *UpdateTabsChatTabReq, options ...larkcore.RequestOptionFunc) (*UpdateTabsChatTabResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,c.service.config, http.MethodPost,
		"/open-apis/im/v1/chats/:chat_id/chat_tabs/update_tabs", []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant, larkcore.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &UpdateTabsChatTabResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (c *chatTopNotice) DeleteTopNotice(ctx context.Context, req *DeleteTopNoticeChatTopNoticeReq, options ...larkcore.RequestOptionFunc) (*DeleteTopNoticeChatTopNoticeResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,c.service.config, http.MethodPost,
		"/open-apis/im/v1/chats/:chat_id/top_notice/delete_top_notice", []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant, larkcore.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &DeleteTopNoticeChatTopNoticeResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (c *chatTopNotice) PutTopNotice(ctx context.Context, req *PutTopNoticeChatTopNoticeReq, options ...larkcore.RequestOptionFunc) (*PutTopNoticeChatTopNoticeResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,c.service.config, http.MethodPost,
		"/open-apis/im/v1/chats/:chat_id/top_notice/put_top_notice", []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant, larkcore.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &PutTopNoticeChatTopNoticeResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (f *file) Create(ctx context.Context, req *CreateFileReq, options ...larkcore.RequestOptionFunc) (*CreateFileResp, error) {
	options = append(options, larkcore.WithFileUpload())
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,f.service.config, http.MethodPost,
		"/open-apis/im/v1/files", []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &CreateFileResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (f *file) Get(ctx context.Context, req *GetFileReq, options ...larkcore.RequestOptionFunc) (*GetFileResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,f.service.config, http.MethodGet,
		"/open-apis/im/v1/files/:file_key", []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &GetFileResp{RawResponse: rawResp}
	// 如果是下载，则设置响应结果
	if rawResp.StatusCode == http.StatusOK {
		resp.File = bytes.NewBuffer(rawResp.RawBody)
		resp.FileName = larkcore.FileNameByHeader(rawResp.Header)
		return resp, err
	}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (i *image) Create(ctx context.Context, req *CreateImageReq, options ...larkcore.RequestOptionFunc) (*CreateImageResp, error) {
	options = append(options, larkcore.WithFileUpload())
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,i.service.config, http.MethodPost,
		"/open-apis/im/v1/images", []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &CreateImageResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (i *image) Get(ctx context.Context, req *GetImageReq, options ...larkcore.RequestOptionFunc) (*GetImageResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,i.service.config, http.MethodGet,
		"/open-apis/im/v1/images/:image_key", []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &GetImageResp{RawResponse: rawResp}
	// 如果是下载，则设置响应结果
	if rawResp.StatusCode == http.StatusOK {
		resp.File = bytes.NewBuffer(rawResp.RawBody)
		resp.FileName = larkcore.FileNameByHeader(rawResp.Header)
		return resp, err
	}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *message) Create(ctx context.Context, req *CreateMessageReq, options ...larkcore.RequestOptionFunc) (*CreateMessageResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,m.service.config, http.MethodPost,
		"/open-apis/im/v1/messages", []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant, larkcore.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &CreateMessageResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *message) Delete(ctx context.Context, req *DeleteMessageReq, options ...larkcore.RequestOptionFunc) (*DeleteMessageResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,m.service.config, http.MethodDelete,
		"/open-apis/im/v1/messages/:message_id", []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant, larkcore.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &DeleteMessageResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *message) Get(ctx context.Context, req *GetMessageReq, options ...larkcore.RequestOptionFunc) (*GetMessageResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,m.service.config, http.MethodGet,
		"/open-apis/im/v1/messages/:message_id", []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &GetMessageResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *message) List(ctx context.Context, req *ListMessageReq, options ...larkcore.RequestOptionFunc) (*ListMessageResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,m.service.config, http.MethodGet,
		"/open-apis/im/v1/messages", []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &ListMessageResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *message) ListByIterator(ctx context.Context, req *ListMessageReq, options ...larkcore.RequestOptionFunc) (*ListMessageIterator, error) {
   return &ListMessageIterator{
	  ctx:	  ctx,
	  req:	  req,
	  listFunc: m.List,
	  options:  options,
	  limit: req.Limit}, nil
}
func (m *message) Patch(ctx context.Context, req *PatchMessageReq, options ...larkcore.RequestOptionFunc) (*PatchMessageResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,m.service.config, http.MethodPatch,
		"/open-apis/im/v1/messages/:message_id", []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant, larkcore.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &PatchMessageResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *message) ReadUsers(ctx context.Context, req *ReadUsersMessageReq, options ...larkcore.RequestOptionFunc) (*ReadUsersMessageResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,m.service.config, http.MethodGet,
		"/open-apis/im/v1/messages/:message_id/read_users", []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &ReadUsersMessageResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *message) Reply(ctx context.Context, req *ReplyMessageReq, options ...larkcore.RequestOptionFunc) (*ReplyMessageResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,m.service.config, http.MethodPost,
		"/open-apis/im/v1/messages/:message_id/reply", []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant, larkcore.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &ReplyMessageResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *message) UrgentApp(ctx context.Context, req *UrgentAppMessageReq, options ...larkcore.RequestOptionFunc) (*UrgentAppMessageResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,m.service.config, http.MethodPatch,
		"/open-apis/im/v1/messages/:message_id/urgent_app", []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &UrgentAppMessageResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *message) UrgentPhone(ctx context.Context, req *UrgentPhoneMessageReq, options ...larkcore.RequestOptionFunc) (*UrgentPhoneMessageResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,m.service.config, http.MethodPatch,
		"/open-apis/im/v1/messages/:message_id/urgent_phone", []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &UrgentPhoneMessageResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *message) UrgentSms(ctx context.Context, req *UrgentSmsMessageReq, options ...larkcore.RequestOptionFunc) (*UrgentSmsMessageResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,m.service.config, http.MethodPatch,
		"/open-apis/im/v1/messages/:message_id/urgent_sms", []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &UrgentSmsMessageResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *messageReaction) Create(ctx context.Context, req *CreateMessageReactionReq, options ...larkcore.RequestOptionFunc) (*CreateMessageReactionResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,m.service.config, http.MethodPost,
		"/open-apis/im/v1/messages/:message_id/reactions", []larkcore.AccessTokenType{larkcore.AccessTokenTypeUser, larkcore.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &CreateMessageReactionResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *messageReaction) Delete(ctx context.Context, req *DeleteMessageReactionReq, options ...larkcore.RequestOptionFunc) (*DeleteMessageReactionResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,m.service.config, http.MethodDelete,
		"/open-apis/im/v1/messages/:message_id/reactions/:reaction_id", []larkcore.AccessTokenType{larkcore.AccessTokenTypeUser, larkcore.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &DeleteMessageReactionResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *messageReaction) List(ctx context.Context, req *ListMessageReactionReq, options ...larkcore.RequestOptionFunc) (*ListMessageReactionResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,m.service.config, http.MethodGet,
		"/open-apis/im/v1/messages/:message_id/reactions", []larkcore.AccessTokenType{larkcore.AccessTokenTypeUser, larkcore.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &ListMessageReactionResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *messageReaction) ListByIterator(ctx context.Context, req *ListMessageReactionReq, options ...larkcore.RequestOptionFunc) (*ListMessageReactionIterator, error) {
   return &ListMessageReactionIterator{
	  ctx:	  ctx,
	  req:	  req,
	  listFunc: m.List,
	  options:  options,
	  limit: req.Limit}, nil
}
func (m *messageResource) Get(ctx context.Context, req *GetMessageResourceReq, options ...larkcore.RequestOptionFunc) (*GetMessageResourceResp, error) {
	// 发起请求
	rawResp, err := larkcore.SendRequest(ctx,m.service.config, http.MethodGet,
		"/open-apis/im/v1/messages/:message_id/resources/:file_key", []larkcore.AccessTokenType{larkcore.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &GetMessageResourceResp{RawResponse: rawResp}
	// 如果是下载，则设置响应结果
	if rawResp.StatusCode == http.StatusOK {
		resp.File = bytes.NewBuffer(rawResp.RawBody)
		resp.FileName = larkcore.FileNameByHeader(rawResp.Header)
		return resp, err
	}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}