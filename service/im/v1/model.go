// Package im code generated by oapi sdk gen
package im

import (
	"io"
	
	"bytes"
	
	"io/ioutil"
	
	"context"
	"errors"
	"fmt"
	
	"github.com/feishu/oapi-sdk-go/event"
	
	"github.com/feishu/oapi-sdk-go/core"

)

/**生成枚举值 **/

const (
	  USER_ID_TYPE_USER_ID string  = "user_id"
	  USER_ID_TYPE_UNION_ID string  = "union_id"
	  USER_ID_TYPE_OPEN_ID string  = "open_id"
)

const (
	  OWNER_ID_TYPE_USER_ID string  = "user_id"
	  OWNER_ID_TYPE_UNION_ID string  = "union_id"
	  OWNER_ID_TYPE_OPEN_ID string  = "open_id"
	  OWNER_ID_TYPE_APP_ID string  = "app_id"
)

const (
	  MODIFIER_ID_TYPE_USER_ID string  = "user_id"
	  MODIFIER_ID_TYPE_UNION_ID string  = "union_id"
	  MODIFIER_ID_TYPE_OPEN_ID string  = "open_id"
	  MODIFIER_ID_TYPE_APP_ID string  = "app_id"
)

const (
	  MEMBER_ID_TYPE_USER_ID string  = "user_id"
	  MEMBER_ID_TYPE_UNION_ID string  = "union_id"
	  MEMBER_ID_TYPE_OPEN_ID string  = "open_id"
	  MEMBER_ID_TYPE_APP_ID string  = "app_id"
)

const (
	  SUCCEED_TYPE_0 string  = "0"
	  SUCCEED_TYPE_1 string  = "1"
	  SUCCEED_TYPE_2 string  = "2"
)

const (
	  FILE_TYPE_OPUS string  = "opus"
	  FILE_TYPE_MP4 string  = "mp4"
	  FILE_TYPE_PDF string  = "pdf"
	  FILE_TYPE_DOC string  = "doc"
	  FILE_TYPE_XLS string  = "xls"
	  FILE_TYPE_PPT string  = "ppt"
	  FILE_TYPE_STREAM string  = "stream"
)

const (
	  IMAGE_TYPE_MESSAGE string  = "message"
	  IMAGE_TYPE_AVATAR string  = "avatar"
)

const (
	  RECEIVE_ID_TYPE_OPEN_ID string  = "open_id"
	  RECEIVE_ID_TYPE_USER_ID string  = "user_id"
	  RECEIVE_ID_TYPE_UNION_ID string  = "union_id"
	  RECEIVE_ID_TYPE_EMAIL string  = "email"
	  RECEIVE_ID_TYPE_CHAT_ID string  = "chat_id"
)



/**生成数据类型 **/

type BatchMessage struct {
	BatchMessageId  *string `json:"batch_message_id,omitempty"`
	BatchSendProgress  *BatchSendProgress `json:"batch_send_progress,omitempty"`
	BatchRecallProgress  *BatchRecallProgress `json:"batch_recall_progress,omitempty"`
}

type BatchMessageReadUser struct {
	ReadCount  *string `json:"read_count,omitempty"`
	TotalCount  *string `json:"total_count,omitempty"`
}

type BatchMessageRecallProgress struct {
	Recall  *bool `json:"recall,omitempty"`
	RecallCount  *int `json:"recall_count,omitempty"`
}

type BatchMessageSendProgress struct {
	ValidUserIdsCount  *int `json:"valid_user_ids_count,omitempty"`
	SuccessUserIdsCount  *int `json:"success_user_ids_count,omitempty"`
	ReadUserIdsCount  *int `json:"read_user_ids_count,omitempty"`
}

type BatchRecallProgress struct {
	RecallCount  *string `json:"recall_count,omitempty"`
	TotalRecallCount  *string `json:"total_recall_count,omitempty"`
}

type BatchSendProgress struct {
	SendCount  *string `json:"send_count,omitempty"`
	TotalSendCount  *string `json:"total_send_count,omitempty"`
}

type Chat struct {
	ChatId  *string `json:"chat_id,omitempty"`
	Avatar  *string `json:"avatar,omitempty"`
	Name  *string `json:"name,omitempty"`
	Description  *string `json:"description,omitempty"`
	I18nNames  *I18nNames `json:"i18n_names,omitempty"`
	OnlyOwnerAdd  *bool `json:"only_owner_add,omitempty"`
	ShareAllowed  *bool `json:"share_allowed,omitempty"`
	OnlyOwnerAtAll  *bool `json:"only_owner_at_all,omitempty"`
	OnlyOwnerEdit  *bool `json:"only_owner_edit,omitempty"`
	OwnerUserId  *string `json:"owner_user_id,omitempty"`
	Type  *string `json:"type,omitempty"`
	
}

type ChatAnnouncement struct {
}

type ChatManagers struct {
	ManagerId  *int64 `json:"manager_id,omitempty,string"`
}

type ChatMember struct {
	UserId  *string `json:"user_id,omitempty"`
}

type ChatMemberBot struct {
	BotId  *string `json:"bot_id,omitempty"`
}

type ChatMemberUser struct {
	Name  *string `json:"name,omitempty"`
	TenantKey  *string `json:"tenant_key,omitempty"`
	UserId  *UserId `json:"user_id,omitempty"`
}

type ChatMembers struct {
	UserId  *string `json:"user_id,omitempty"`
}

type ChatTab struct {
	TabId  *string `json:"tab_id,omitempty"`
	TabName  *string `json:"tab_name,omitempty"`
	TabType  *string `json:"tab_type,omitempty"`
	TabContent  *ChatTabContent `json:"tab_content,omitempty"`
}

type ChatTopNotice struct {
	ActionType  *string `json:"action_type,omitempty"`
	MessageId  *string `json:"message_id,omitempty"`
}

type ChatChange struct {
	Avatar  *string `json:"avatar,omitempty"`
	Name  *string `json:"name,omitempty"`
	Description  *string `json:"description,omitempty"`
	I18nNames  *I18nNames `json:"i18n_names,omitempty"`
	AddMemberPermission  *string `json:"add_member_permission,omitempty"`
	ShareCardPermission  *string `json:"share_card_permission,omitempty"`
	AtAllPermission  *string `json:"at_all_permission,omitempty"`
	EditPermission  *string `json:"edit_permission,omitempty"`
	MembershipApproval  *string `json:"membership_approval,omitempty"`
	JoinMessageVisibility  *string `json:"join_message_visibility,omitempty"`
	LeaveMessageVisibility  *string `json:"leave_message_visibility,omitempty"`
	ModerationPermission  *string `json:"moderation_permission,omitempty"`
	OwnerId  *UserId `json:"owner_id,omitempty"`
	
}

type ChatTabContent struct {
	Url  *string `json:"url,omitempty"`
	Doc  *string `json:"doc,omitempty"`
	MeetingMinute  *string `json:"meeting_minute,omitempty"`
}

type Emoji struct {
	EmojiType  *string `json:"emoji_type,omitempty"`
}

type EventMessage struct {
	MessageId  *string `json:"message_id,omitempty"`
	RootId  *string `json:"root_id,omitempty"`
	ParentId  *string `json:"parent_id,omitempty"`
	CreateTime  *int64 `json:"create_time,omitempty,string"`
	ChatId  *string `json:"chat_id,omitempty"`
	ChatType  *string `json:"chat_type,omitempty"`
	MessageType  *string `json:"message_type,omitempty"`
	Content  *string `json:"content,omitempty"`
	Mentions  []*MentionEvent `json:"mentions,omitempty"`
}

type EventMessageReader struct {
	ReaderId  *UserId `json:"reader_id,omitempty"`
	ReadTime  *string `json:"read_time,omitempty"`
	TenantKey  *string `json:"tenant_key,omitempty"`
}

type EventSender struct {
	SenderId  *UserId `json:"sender_id,omitempty"`
	SenderType  *string `json:"sender_type,omitempty"`
	TenantKey  *string `json:"tenant_key,omitempty"`
}

type File struct {
}

type I18nNames struct {
	ZhCn  *string `json:"zh_cn,omitempty"`
	EnUs  *string `json:"en_us,omitempty"`
	JaJp  *string `json:"ja_jp,omitempty"`
}

type ImDepthData struct {
	PDate  *string `json:"p_date,omitempty"`
	DepartmentId  *string `json:"department_id,omitempty"`
	DepartmentPath  *string `json:"department_path,omitempty"`
	SendMsgRate  *float64 `json:"send_msg_rate,omitempty"`
	AvgSendMsgCnt  *float64 `json:"avg_send_msg_cnt,omitempty"`
	PcSendMsgRate  *float64 `json:"pc_send_msg_rate,omitempty"`
	PcAvgSendMsgCnt  *float64 `json:"pc_avg_send_msg_cnt,omitempty"`
	MobileSendMsgRate  *float64 `json:"mobile_send_msg_rate,omitempty"`
	MobileAvgSendMsgCnt  *float64 `json:"mobile_avg_send_msg_cnt,omitempty"`
	MeetingGroupSendMsgRate  *float64 `json:"meeting_group_send_msg_rate,omitempty"`
	TenantGroupSendMsgRate  *float64 `json:"tenant_group_send_msg_rate,omitempty"`
	DeptGroupSendMsgRate  *float64 `json:"dept_group_send_msg_rate,omitempty"`
	TopicGroupSendMsgRate  *float64 `json:"topic_group_send_msg_rate,omitempty"`
	GroupAtMsgRate  *float64 `json:"group_at_msg_rate,omitempty"`
	GroupReplyMsgRate  *float64 `json:"group_reply_msg_rate,omitempty"`
	ReactionRate  *float64 `json:"reaction_rate,omitempty"`
	P2pSendMsgRate  *float64 `json:"p2p_send_msg_rate,omitempty"`
	ImgSendMsgRate  *float64 `json:"img_send_msg_rate,omitempty"`
	FileSendMsgRate  *float64 `json:"file_send_msg_rate,omitempty"`
	StickerSendMsgRate  *float64 `json:"sticker_send_msg_rate,omitempty"`
	PostSendMsgRate  *float64 `json:"post_send_msg_rate,omitempty"`
}

type Image struct {
}

type ListChat struct {
	ChatId  *string `json:"chat_id,omitempty"`
	Avatar  *string `json:"avatar,omitempty"`
	Name  *string `json:"name,omitempty"`
	Description  *string `json:"description,omitempty"`
	OwnerId  *string `json:"owner_id,omitempty"`
	OwnerIdType  *string `json:"owner_id_type,omitempty"`
	External  *bool `json:"external,omitempty"`
	TenantKey  *string `json:"tenant_key,omitempty"`
	
}

type ListEventModerator struct {
	TenantKey  *string `json:"tenant_key,omitempty"`
	UserId  *UserId `json:"user_id,omitempty"`
}

type ListMember struct {
	MemberIdType  *string `json:"member_id_type,omitempty"`
	MemberId  *string `json:"member_id,omitempty"`
	Name  *string `json:"name,omitempty"`
	TenantKey  *string `json:"tenant_key,omitempty"`
}

type ListModerator struct {
	UserIdType  *string `json:"user_id_type,omitempty"`
	UserId  *string `json:"user_id,omitempty"`
	TenantKey  *string `json:"tenant_key,omitempty"`
}

type Mention struct {
	Key  *string `json:"key,omitempty"`
	Id  *string `json:"id,omitempty"`
	IdType  *string `json:"id_type,omitempty"`
	Name  *string `json:"name,omitempty"`
	TenantKey  *string `json:"tenant_key,omitempty"`
}

type MentionEvent struct {
	Key  *string `json:"key,omitempty"`
	Id  *UserId `json:"id,omitempty"`
	Name  *string `json:"name,omitempty"`
	TenantKey  *string `json:"tenant_key,omitempty"`
}

type Message struct {
	MessageId  *string `json:"message_id,omitempty"`
	RootId  *string `json:"root_id,omitempty"`
	ParentId  *string `json:"parent_id,omitempty"`
	MsgType  *string `json:"msg_type,omitempty"`
	CreateTime  *int64 `json:"create_time,omitempty,string"`
	UpdateTime  *int64 `json:"update_time,omitempty,string"`
	Deleted  *bool `json:"deleted,omitempty"`
	Updated  *bool `json:"updated,omitempty"`
	ChatId  *string `json:"chat_id,omitempty"`
	Sender  *Sender `json:"sender,omitempty"`
	Body  *MessageBody `json:"body,omitempty"`
	Mentions  []*Mention `json:"mentions,omitempty"`
	UpperMessageId  *string `json:"upper_message_id,omitempty"`
}

type MessageReaction struct {
	ReactionId  *string `json:"reaction_id,omitempty"`
	Operator  *Operator `json:"operator,omitempty"`
	ActionTime  *int64 `json:"action_time,omitempty,string"`
	ReactionType  *Emoji `json:"reaction_type,omitempty"`
}

type MessageResource struct {
}

type MessageBody struct {
	Content  *string `json:"content,omitempty"`
}

type ModeratorList struct {
	AddedMemberList  []*ListEventModerator `json:"added_member_list,omitempty"`
	RemovedMemberList  []*ListEventModerator `json:"removed_member_list,omitempty"`
}

type MsgProcessData struct {
	PDate  *string `json:"p_date,omitempty"`
	DepartmentId  *string `json:"department_id,omitempty"`
	DepartmentPath  *string `json:"department_path,omitempty"`
	AvgImpMsgReadRate12h  *float64 `json:"avg_imp_msg_read_rate_12h,omitempty"`
	MsgReadRate12h  *float64 `json:"msg_read_rate_12h,omitempty"`
	AvgReceiveMsgCnt  *float64 `json:"avg_receive_msg_cnt,omitempty"`
	AvgReadMsgCnt  *float64 `json:"avg_read_msg_cnt,omitempty"`
	AvgImpReadMsgCnt  *float64 `json:"avg_imp_read_msg_cnt,omitempty"`
	AvgImpReceiveMsgCnt  *float64 `json:"avg_imp_receive_msg_cnt,omitempty"`
	HighLoadRate  *float64 `json:"high_load_rate,omitempty"`
	BigGroupMsgRate  *float64 `json:"big_group_msg_rate,omitempty"`
	BigGroupTopicMsgRate  *float64 `json:"big_group_topic_msg_rate,omitempty"`
	AvgReceiveBotMsgCnt  *float64 `json:"avg_receive_bot_msg_cnt,omitempty"`
	AvgBotImpMsgReadRate12h  *float64 `json:"avg_bot_imp_msg_read_rate_12h,omitempty"`
	ReceiveBotMsgRate  *float64 `json:"receive_bot_msg_rate,omitempty"`
	UseChatBoxRate  *float64 `json:"use_chat_box_rate,omitempty"`
	ReceiveMuteMsgRate  *float64 `json:"receive_mute_msg_rate,omitempty"`
	ReadMuteMsgRate  *float64 `json:"read_mute_msg_rate,omitempty"`
	AvgReceiveImpMsgChatCnt  *float64 `json:"avg_receive_imp_msg_chat_cnt,omitempty"`
}

type Operator struct {
	OperatorId  *string `json:"operator_id,omitempty"`
	OperatorType  *string `json:"operator_type,omitempty"`
}

type ReadUser struct {
	UserIdType  *string `json:"user_id_type,omitempty"`
	UserId  *string `json:"user_id,omitempty"`
	Timestamp  *string `json:"timestamp,omitempty"`
	TenantKey  *string `json:"tenant_key,omitempty"`
}

type Sender struct {
	Id  *string `json:"id,omitempty"`
	IdType  *string `json:"id_type,omitempty"`
	SenderType  *string `json:"sender_type,omitempty"`
	TenantKey  *string `json:"tenant_key,omitempty"`
}

type SpecialFocus struct {
	Id  *string `json:"id,omitempty"`
	IdType  *string `json:"id_type,omitempty"`
}

type SpecialFocusUnread struct {
	Id  *string `json:"id,omitempty"`
	IdType  *string `json:"id_type,omitempty"`
	UnreadCount  *string `json:"unread_count,omitempty"`
}

type UrgentReceivers struct {
	UserIdList  []string `json:"user_id_list,omitempty"`
}

type UserId struct {
	UserId  *string `json:"user_id,omitempty"`
	OpenId  *string `json:"open_id,omitempty"`
	UnionId  *string `json:"union_id,omitempty"`
}


/**生成请求和响应结果类型，以及请求对象的Builder构造器 **/


/*1.4 生成请求的builder结构体*/
type DeleteBatchMessageReqBuilder struct {
	batchMessageId  string
	batchMessageIdFlag  bool

}

// 生成请求的New构造器
func NewDeleteBatchMessageReqBuilder() * DeleteBatchMessageReqBuilder{
   builder := &DeleteBatchMessageReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * DeleteBatchMessageReqBuilder) BatchMessageId(batchMessageId string) *DeleteBatchMessageReqBuilder  {
  builder.batchMessageId = batchMessageId
  builder.batchMessageIdFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * DeleteBatchMessageReqBuilder ) Build() *DeleteBatchMessageReq {
   req := &DeleteBatchMessageReq{}
   if builder.batchMessageIdFlag {
	  req.BatchMessageId = builder.batchMessageId
   }
   return req
}


type DeleteBatchMessageReq struct {
	BatchMessageId  string `path:"batch_message_id"`

}


type DeleteBatchMessageResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}


/*1.4 生成请求的builder结构体*/
type GetProgressBatchMessageReqBuilder struct {
	batchMessageId  string
	batchMessageIdFlag  bool

}

// 生成请求的New构造器
func NewGetProgressBatchMessageReqBuilder() * GetProgressBatchMessageReqBuilder{
   builder := &GetProgressBatchMessageReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * GetProgressBatchMessageReqBuilder) BatchMessageId(batchMessageId string) *GetProgressBatchMessageReqBuilder  {
  builder.batchMessageId = batchMessageId
  builder.batchMessageIdFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * GetProgressBatchMessageReqBuilder ) Build() *GetProgressBatchMessageReq {
   req := &GetProgressBatchMessageReq{}
   if builder.batchMessageIdFlag {
	  req.BatchMessageId = builder.batchMessageId
   }
   return req
}


type GetProgressBatchMessageReq struct {
	BatchMessageId  string `path:"batch_message_id"`

}

type GetProgressBatchMessageRespData struct {
	BatchMessageSendProgress  *BatchMessageSendProgress `json:"batch_message_send_progress,omitempty"`
	BatchMessageRecallProgress  *BatchMessageRecallProgress `json:"batch_message_recall_progress,omitempty"`
}

type GetProgressBatchMessageResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *GetProgressBatchMessageRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type ReadUserBatchMessageReqBuilder struct {
	batchMessageId  string
	batchMessageIdFlag  bool

}

// 生成请求的New构造器
func NewReadUserBatchMessageReqBuilder() * ReadUserBatchMessageReqBuilder{
   builder := &ReadUserBatchMessageReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * ReadUserBatchMessageReqBuilder) BatchMessageId(batchMessageId string) *ReadUserBatchMessageReqBuilder  {
  builder.batchMessageId = batchMessageId
  builder.batchMessageIdFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * ReadUserBatchMessageReqBuilder ) Build() *ReadUserBatchMessageReq {
   req := &ReadUserBatchMessageReq{}
   if builder.batchMessageIdFlag {
	  req.BatchMessageId = builder.batchMessageId
   }
   return req
}


type ReadUserBatchMessageReq struct {
	BatchMessageId  string `path:"batch_message_id"`

}

type ReadUserBatchMessageRespData struct {
	ReadUser  *BatchMessageReadUser `json:"read_user,omitempty"`
}

type ReadUserBatchMessageResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *ReadUserBatchMessageRespData `json:"data"`
}

type CreateChatReqBodyBuilder struct {
	avatar  string
	avatarFlag  bool
	name  string
	nameFlag  bool
	description  string
	descriptionFlag  bool
	i18nNames  *I18nNames
	i18nNamesFlag  bool
	ownerId  string
	ownerIdFlag  bool
	userIdList  []string
	userIdListFlag  bool
	botIdList  []string
	botIdListFlag  bool
	chatMode  string
	chatModeFlag  bool
	chatType  string
	chatTypeFlag  bool
	external  bool
	externalFlag  bool
	joinMessageVisibility  string
	joinMessageVisibilityFlag  bool
	leaveMessageVisibility  string
	leaveMessageVisibilityFlag  bool
	membershipApproval  string
	membershipApprovalFlag  bool
	
}

// 生成body的New构造器
func NewCreateChatReqBodyBuilder() * CreateChatReqBodyBuilder{
  builder := &CreateChatReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * CreateChatReqBodyBuilder ) Avatar(avatar string) *CreateChatReqBodyBuilder {
  builder.avatar = avatar
  builder.avatarFlag = true
  return builder
}
func (builder * CreateChatReqBodyBuilder ) Name(name string) *CreateChatReqBodyBuilder {
  builder.name = name
  builder.nameFlag = true
  return builder
}
func (builder * CreateChatReqBodyBuilder ) Description(description string) *CreateChatReqBodyBuilder {
  builder.description = description
  builder.descriptionFlag = true
  return builder
}
func (builder * CreateChatReqBodyBuilder ) I18nNames(i18nNames *I18nNames) *CreateChatReqBodyBuilder {
  builder.i18nNames = i18nNames
  builder.i18nNamesFlag = true
  return builder
}
func (builder * CreateChatReqBodyBuilder ) OwnerId(ownerId string) *CreateChatReqBodyBuilder {
  builder.ownerId = ownerId
  builder.ownerIdFlag = true
  return builder
}
func (builder * CreateChatReqBodyBuilder ) UserIdList(userIdList []string) *CreateChatReqBodyBuilder {
  builder.userIdList = userIdList
  builder.userIdListFlag = true
  return builder
}
func (builder * CreateChatReqBodyBuilder ) BotIdList(botIdList []string) *CreateChatReqBodyBuilder {
  builder.botIdList = botIdList
  builder.botIdListFlag = true
  return builder
}
func (builder * CreateChatReqBodyBuilder ) ChatMode(chatMode string) *CreateChatReqBodyBuilder {
  builder.chatMode = chatMode
  builder.chatModeFlag = true
  return builder
}
func (builder * CreateChatReqBodyBuilder ) ChatType(chatType string) *CreateChatReqBodyBuilder {
  builder.chatType = chatType
  builder.chatTypeFlag = true
  return builder
}
func (builder * CreateChatReqBodyBuilder ) External(external bool) *CreateChatReqBodyBuilder {
  builder.external = external
  builder.externalFlag = true
  return builder
}
func (builder * CreateChatReqBodyBuilder ) JoinMessageVisibility(joinMessageVisibility string) *CreateChatReqBodyBuilder {
  builder.joinMessageVisibility = joinMessageVisibility
  builder.joinMessageVisibilityFlag = true
  return builder
}
func (builder * CreateChatReqBodyBuilder ) LeaveMessageVisibility(leaveMessageVisibility string) *CreateChatReqBodyBuilder {
  builder.leaveMessageVisibility = leaveMessageVisibility
  builder.leaveMessageVisibilityFlag = true
  return builder
}
func (builder * CreateChatReqBodyBuilder ) MembershipApproval(membershipApproval string) *CreateChatReqBodyBuilder {
  builder.membershipApproval = membershipApproval
  builder.membershipApprovalFlag = true
  return builder
}



/*1.3 生成body的build方法*/
func (builder * CreateChatReqBodyBuilder ) Build() *CreateChatReqBody {
   req := &CreateChatReqBody{}
   if builder.avatarFlag {
	  req.Avatar = &builder.avatar
	  

   }
   if builder.nameFlag {
	  req.Name = &builder.name
	  

   }
   if builder.descriptionFlag {
	  req.Description = &builder.description
	  

   }
   if builder.i18nNamesFlag {
	  req.I18nNames = builder.i18nNames

   }
   if builder.ownerIdFlag {
	  req.OwnerId = &builder.ownerId
	  

   }
   if builder.userIdListFlag {
	  req.UserIdList = builder.userIdList

   }
   if builder.botIdListFlag {
	  req.BotIdList = builder.botIdList

   }
   if builder.chatModeFlag {
	  req.ChatMode = &builder.chatMode
	  

   }
   if builder.chatTypeFlag {
	  req.ChatType = &builder.chatType
	  

   }
   if builder.externalFlag {
	  req.External = &builder.external
	  

   }
   if builder.joinMessageVisibilityFlag {
	  req.JoinMessageVisibility = &builder.joinMessageVisibility
	  

   }
   if builder.leaveMessageVisibilityFlag {
	  req.LeaveMessageVisibility = &builder.leaveMessageVisibility
	  

   }
   if builder.membershipApprovalFlag {
	  req.MembershipApproval = &builder.membershipApproval
	  

   }

   return req
}

/**上传文件path开始**/
type CreateChatPathReqBodyBuilder struct {
	avatar  string
	avatarFlag  bool
	name  string
	nameFlag  bool
	description  string
	descriptionFlag  bool
	i18nNames  *I18nNames
	i18nNamesFlag  bool
	ownerId  string
	ownerIdFlag  bool
	userIdList  []string
	userIdListFlag  bool
	botIdList  []string
	botIdListFlag  bool
	chatMode  string
	chatModeFlag  bool
	chatType  string
	chatTypeFlag  bool
	external  bool
	externalFlag  bool
	joinMessageVisibility  string
	joinMessageVisibilityFlag  bool
	leaveMessageVisibility  string
	leaveMessageVisibilityFlag  bool
	membershipApproval  string
	membershipApprovalFlag  bool
	labels  []string
	labelsFlag  bool
}

// 生成body的New构造器
func NewCreateChatPathReqBodyBuilder() * CreateChatPathReqBodyBuilder{
  builder := &CreateChatPathReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * CreateChatPathReqBodyBuilder ) Avatar(avatar string) *CreateChatPathReqBodyBuilder {
  builder.avatar = avatar
  builder.avatarFlag = true
  return builder
}
func (builder * CreateChatPathReqBodyBuilder ) Name(name string) *CreateChatPathReqBodyBuilder {
  builder.name = name
  builder.nameFlag = true
  return builder
}
func (builder * CreateChatPathReqBodyBuilder ) Description(description string) *CreateChatPathReqBodyBuilder {
  builder.description = description
  builder.descriptionFlag = true
  return builder
}
func (builder * CreateChatPathReqBodyBuilder ) I18nNames(i18nNames *I18nNames) *CreateChatPathReqBodyBuilder {
  builder.i18nNames = i18nNames
  builder.i18nNamesFlag = true
  return builder
}
func (builder * CreateChatPathReqBodyBuilder ) OwnerId(ownerId string) *CreateChatPathReqBodyBuilder {
  builder.ownerId = ownerId
  builder.ownerIdFlag = true
  return builder
}
func (builder * CreateChatPathReqBodyBuilder ) UserIdList(userIdList []string) *CreateChatPathReqBodyBuilder {
  builder.userIdList = userIdList
  builder.userIdListFlag = true
  return builder
}
func (builder * CreateChatPathReqBodyBuilder ) BotIdList(botIdList []string) *CreateChatPathReqBodyBuilder {
  builder.botIdList = botIdList
  builder.botIdListFlag = true
  return builder
}
func (builder * CreateChatPathReqBodyBuilder ) ChatMode(chatMode string) *CreateChatPathReqBodyBuilder {
  builder.chatMode = chatMode
  builder.chatModeFlag = true
  return builder
}
func (builder * CreateChatPathReqBodyBuilder ) ChatType(chatType string) *CreateChatPathReqBodyBuilder {
  builder.chatType = chatType
  builder.chatTypeFlag = true
  return builder
}
func (builder * CreateChatPathReqBodyBuilder ) External(external bool) *CreateChatPathReqBodyBuilder {
  builder.external = external
  builder.externalFlag = true
  return builder
}
func (builder * CreateChatPathReqBodyBuilder ) JoinMessageVisibility(joinMessageVisibility string) *CreateChatPathReqBodyBuilder {
  builder.joinMessageVisibility = joinMessageVisibility
  builder.joinMessageVisibilityFlag = true
  return builder
}
func (builder * CreateChatPathReqBodyBuilder ) LeaveMessageVisibility(leaveMessageVisibility string) *CreateChatPathReqBodyBuilder {
  builder.leaveMessageVisibility = leaveMessageVisibility
  builder.leaveMessageVisibilityFlag = true
  return builder
}
func (builder * CreateChatPathReqBodyBuilder ) MembershipApproval(membershipApproval string) *CreateChatPathReqBodyBuilder {
  builder.membershipApproval = membershipApproval
  builder.membershipApprovalFlag = true
  return builder
}



/*1.3 生成body的build方法*/
func (builder * CreateChatPathReqBodyBuilder ) Build() (*CreateChatReqBody, error) {
   req := &CreateChatReqBody{}
   if builder.avatarFlag {
	  req.Avatar = &builder.avatar
	  
   }
   if builder.nameFlag {
	  req.Name = &builder.name
	  
   }
   if builder.descriptionFlag {
	  req.Description = &builder.description
	  
   }
   if builder.i18nNamesFlag {
	   req.I18nNames = builder.i18nNames
   }
   if builder.ownerIdFlag {
	  req.OwnerId = &builder.ownerId
	  
   }
   if builder.userIdListFlag {
	   req.UserIdList = builder.userIdList
   }
   if builder.botIdListFlag {
	   req.BotIdList = builder.botIdList
   }
   if builder.chatModeFlag {
	  req.ChatMode = &builder.chatMode
	  
   }
   if builder.chatTypeFlag {
	  req.ChatType = &builder.chatType
	  
   }
   if builder.externalFlag {
	  req.External = &builder.external
	  
   }
   if builder.joinMessageVisibilityFlag {
	  req.JoinMessageVisibility = &builder.joinMessageVisibility
	  
   }
   if builder.leaveMessageVisibilityFlag {
	  req.LeaveMessageVisibility = &builder.leaveMessageVisibility
	  
   }
   if builder.membershipApprovalFlag {
	  req.MembershipApproval = &builder.membershipApproval
	  
   }

   return req, nil
}
/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type CreateChatReqBuilder struct {
	userIdType  string
	userIdTypeFlag  bool
	setBotManager  bool
	setBotManagerFlag  bool
	body *CreateChatReqBody
	bodyFlag bool

}

// 生成请求的New构造器
func NewCreateChatReqBuilder() * CreateChatReqBuilder{
   builder := &CreateChatReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * CreateChatReqBuilder) UserIdType(userIdType string) *CreateChatReqBuilder  {
  builder.userIdType = userIdType
  builder.userIdTypeFlag = true
  return builder
}
func (builder * CreateChatReqBuilder) SetBotManager(setBotManager bool) *CreateChatReqBuilder  {
  builder.setBotManager = setBotManager
  builder.setBotManagerFlag = true
  return builder
}
func (builder * CreateChatReqBuilder) Body(body *CreateChatReqBody) *CreateChatReqBuilder  {
  builder.body = body
  builder.bodyFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * CreateChatReqBuilder ) Build() *CreateChatReq {
   req := &CreateChatReq{}
   if builder.userIdTypeFlag {
	  req.UserIdType = &builder.userIdType
   }
   if builder.setBotManagerFlag {
	  req.SetBotManager = &builder.setBotManager
   }
   if builder.bodyFlag {
	  req.Body = builder.body

   }
   return req
}

type CreateChatReqBody struct {
	Avatar  *string `json:"avatar,omitempty"`
	Name  *string `json:"name,omitempty"`
	Description  *string `json:"description,omitempty"`
	I18nNames  *I18nNames `json:"i18n_names,omitempty"`
	OwnerId  *string `json:"owner_id,omitempty"`
	UserIdList  []string `json:"user_id_list,omitempty"`
	BotIdList  []string `json:"bot_id_list,omitempty"`
	ChatMode  *string `json:"chat_mode,omitempty"`
	ChatType  *string `json:"chat_type,omitempty"`
	External  *bool `json:"external,omitempty"`
	JoinMessageVisibility  *string `json:"join_message_visibility,omitempty"`
	LeaveMessageVisibility  *string `json:"leave_message_visibility,omitempty"`
	MembershipApproval  *string `json:"membership_approval,omitempty"`
	
}

type CreateChatReq struct {
	UserIdType  *string `query:"user_id_type"`
	SetBotManager  *bool `query:"set_bot_manager"`
	Body *CreateChatReqBody `body:""`

}

type CreateChatRespData struct {
	ChatId  *string `json:"chat_id,omitempty"`
	Avatar  *string `json:"avatar,omitempty"`
	Name  *string `json:"name,omitempty"`
	Description  *string `json:"description,omitempty"`
	I18nNames  *I18nNames `json:"i18n_names,omitempty"`
	OwnerId  *string `json:"owner_id,omitempty"`
	OwnerIdType  *string `json:"owner_id_type,omitempty"`
	AddMemberPermission  *string `json:"add_member_permission,omitempty"`
	ShareCardPermission  *string `json:"share_card_permission,omitempty"`
	AtAllPermission  *string `json:"at_all_permission,omitempty"`
	EditPermission  *string `json:"edit_permission,omitempty"`
	ChatMode  *string `json:"chat_mode,omitempty"`
	ChatType  *string `json:"chat_type,omitempty"`
	ChatTag  *string `json:"chat_tag,omitempty"`
	External  *bool `json:"external,omitempty"`
	TenantKey  *string `json:"tenant_key,omitempty"`
	JoinMessageVisibility  *string `json:"join_message_visibility,omitempty"`
	LeaveMessageVisibility  *string `json:"leave_message_visibility,omitempty"`
	MembershipApproval  *string `json:"membership_approval,omitempty"`
	ModerationPermission  *string `json:"moderation_permission,omitempty"`
	
}

type CreateChatResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *CreateChatRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type DeleteChatReqBuilder struct {
	chatId  string
	chatIdFlag  bool

}

// 生成请求的New构造器
func NewDeleteChatReqBuilder() * DeleteChatReqBuilder{
   builder := &DeleteChatReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * DeleteChatReqBuilder) ChatId(chatId string) *DeleteChatReqBuilder  {
  builder.chatId = chatId
  builder.chatIdFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * DeleteChatReqBuilder ) Build() *DeleteChatReq {
   req := &DeleteChatReq{}
   if builder.chatIdFlag {
	  req.ChatId = builder.chatId
   }
   return req
}


type DeleteChatReq struct {
	ChatId  string `path:"chat_id"`

}


type DeleteChatResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}


/*1.4 生成请求的builder结构体*/
type GetChatReqBuilder struct {
	chatId  string
	chatIdFlag  bool
	userIdType  string
	userIdTypeFlag  bool

}

// 生成请求的New构造器
func NewGetChatReqBuilder() * GetChatReqBuilder{
   builder := &GetChatReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * GetChatReqBuilder) ChatId(chatId string) *GetChatReqBuilder  {
  builder.chatId = chatId
  builder.chatIdFlag = true
  return builder
}
func (builder * GetChatReqBuilder) UserIdType(userIdType string) *GetChatReqBuilder  {
  builder.userIdType = userIdType
  builder.userIdTypeFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * GetChatReqBuilder ) Build() *GetChatReq {
   req := &GetChatReq{}
   if builder.chatIdFlag {
	  req.ChatId = builder.chatId
   }
   if builder.userIdTypeFlag {
	  req.UserIdType = &builder.userIdType
   }
   return req
}


type GetChatReq struct {
	ChatId  string `path:"chat_id"`
	UserIdType  *string `query:"user_id_type"`

}

type GetChatRespData struct {
	Avatar  *string `json:"avatar,omitempty"`
	Name  *string `json:"name,omitempty"`
	Description  *string `json:"description,omitempty"`
	I18nNames  *I18nNames `json:"i18n_names,omitempty"`
	AddMemberPermission  *string `json:"add_member_permission,omitempty"`
	ShareCardPermission  *string `json:"share_card_permission,omitempty"`
	AtAllPermission  *string `json:"at_all_permission,omitempty"`
	EditPermission  *string `json:"edit_permission,omitempty"`
	OwnerIdType  *string `json:"owner_id_type,omitempty"`
	OwnerId  *string `json:"owner_id,omitempty"`
	ChatMode  *string `json:"chat_mode,omitempty"`
	ChatType  *string `json:"chat_type,omitempty"`
	ChatTag  *string `json:"chat_tag,omitempty"`
	JoinMessageVisibility  *string `json:"join_message_visibility,omitempty"`
	LeaveMessageVisibility  *string `json:"leave_message_visibility,omitempty"`
	MembershipApproval  *string `json:"membership_approval,omitempty"`
	ModerationPermission  *string `json:"moderation_permission,omitempty"`
	External  *bool `json:"external,omitempty"`
	TenantKey  *string `json:"tenant_key,omitempty"`
	UserCount  *string `json:"user_count,omitempty"`
	BotCount  *string `json:"bot_count,omitempty"`
	
}

type GetChatResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *GetChatRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type ListChatReqBuilder struct {
	userIdType  string
	userIdTypeFlag  bool
	pageToken  string
	pageTokenFlag  bool
	pageSize  int
	pageSizeFlag  bool
	limit int

}

// 生成请求的New构造器
func NewListChatReqBuilder() * ListChatReqBuilder{
   builder := &ListChatReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * ListChatReqBuilder) Limit(limit int ) *ListChatReqBuilder  {
  builder.limit = limit
  return builder
}
func (builder * ListChatReqBuilder) UserIdType(userIdType string) *ListChatReqBuilder  {
  builder.userIdType = userIdType
  builder.userIdTypeFlag = true
  return builder
}
func (builder * ListChatReqBuilder) PageToken(pageToken string) *ListChatReqBuilder  {
  builder.pageToken = pageToken
  builder.pageTokenFlag = true
  return builder
}
func (builder * ListChatReqBuilder) PageSize(pageSize int) *ListChatReqBuilder  {
  builder.pageSize = pageSize
  builder.pageSizeFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * ListChatReqBuilder ) Build() *ListChatReq {
   req := &ListChatReq{}
   req.Limit = builder.limit
   if builder.userIdTypeFlag {
	  req.UserIdType = &builder.userIdType
   }
   if builder.pageTokenFlag {
	  req.PageToken = &builder.pageToken
   }
   if builder.pageSizeFlag {
	  req.PageSize = &builder.pageSize
   }
   return req
}


type ListChatReq struct {
	UserIdType  *string `query:"user_id_type"`
	PageToken  *string `query:"page_token"`
	PageSize  *int `query:"page_size"`
	Limit int

}

type ListChatRespData struct {
	Items  []*ListChat `json:"items,omitempty"`
	PageToken  *string `json:"page_token,omitempty"`
	HasMore  *bool `json:"has_more,omitempty"`
}

type ListChatResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *ListChatRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type SearchChatReqBuilder struct {
	userIdType  string
	userIdTypeFlag  bool
	query  string
	queryFlag  bool
	pageToken  string
	pageTokenFlag  bool
	pageSize  int
	pageSizeFlag  bool
	limit int

}

// 生成请求的New构造器
func NewSearchChatReqBuilder() * SearchChatReqBuilder{
   builder := &SearchChatReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * SearchChatReqBuilder) Limit(limit int ) *SearchChatReqBuilder  {
  builder.limit = limit
  return builder
}
func (builder * SearchChatReqBuilder) UserIdType(userIdType string) *SearchChatReqBuilder  {
  builder.userIdType = userIdType
  builder.userIdTypeFlag = true
  return builder
}
func (builder * SearchChatReqBuilder) Query(query string) *SearchChatReqBuilder  {
  builder.query = query
  builder.queryFlag = true
  return builder
}
func (builder * SearchChatReqBuilder) PageToken(pageToken string) *SearchChatReqBuilder  {
  builder.pageToken = pageToken
  builder.pageTokenFlag = true
  return builder
}
func (builder * SearchChatReqBuilder) PageSize(pageSize int) *SearchChatReqBuilder  {
  builder.pageSize = pageSize
  builder.pageSizeFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * SearchChatReqBuilder ) Build() *SearchChatReq {
   req := &SearchChatReq{}
   req.Limit = builder.limit
   if builder.userIdTypeFlag {
	  req.UserIdType = &builder.userIdType
   }
   if builder.queryFlag {
	  req.Query = &builder.query
   }
   if builder.pageTokenFlag {
	  req.PageToken = &builder.pageToken
   }
   if builder.pageSizeFlag {
	  req.PageSize = &builder.pageSize
   }
   return req
}


type SearchChatReq struct {
	UserIdType  *string `query:"user_id_type"`
	Query  *string `query:"query"`
	PageToken  *string `query:"page_token"`
	PageSize  *int `query:"page_size"`
	Limit int

}

type SearchChatRespData struct {
	Items  []*ListChat `json:"items,omitempty"`
	PageToken  *string `json:"page_token,omitempty"`
	HasMore  *bool `json:"has_more,omitempty"`
}

type SearchChatResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *SearchChatRespData `json:"data"`
}

type UpdateChatReqBodyBuilder struct {
	avatar  string
	avatarFlag  bool
	name  string
	nameFlag  bool
	description  string
	descriptionFlag  bool
	i18nNames  *I18nNames
	i18nNamesFlag  bool
	addMemberPermission  string
	addMemberPermissionFlag  bool
	shareCardPermission  string
	shareCardPermissionFlag  bool
	atAllPermission  string
	atAllPermissionFlag  bool
	editPermission  string
	editPermissionFlag  bool
	ownerId  string
	ownerIdFlag  bool
	joinMessageVisibility  string
	joinMessageVisibilityFlag  bool
	leaveMessageVisibility  string
	leaveMessageVisibilityFlag  bool
	membershipApproval  string
	membershipApprovalFlag  bool
	
}

// 生成body的New构造器
func NewUpdateChatReqBodyBuilder() * UpdateChatReqBodyBuilder{
  builder := &UpdateChatReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * UpdateChatReqBodyBuilder ) Avatar(avatar string) *UpdateChatReqBodyBuilder {
  builder.avatar = avatar
  builder.avatarFlag = true
  return builder
}
func (builder * UpdateChatReqBodyBuilder ) Name(name string) *UpdateChatReqBodyBuilder {
  builder.name = name
  builder.nameFlag = true
  return builder
}
func (builder * UpdateChatReqBodyBuilder ) Description(description string) *UpdateChatReqBodyBuilder {
  builder.description = description
  builder.descriptionFlag = true
  return builder
}
func (builder * UpdateChatReqBodyBuilder ) I18nNames(i18nNames *I18nNames) *UpdateChatReqBodyBuilder {
  builder.i18nNames = i18nNames
  builder.i18nNamesFlag = true
  return builder
}
func (builder * UpdateChatReqBodyBuilder ) AddMemberPermission(addMemberPermission string) *UpdateChatReqBodyBuilder {
  builder.addMemberPermission = addMemberPermission
  builder.addMemberPermissionFlag = true
  return builder
}
func (builder * UpdateChatReqBodyBuilder ) ShareCardPermission(shareCardPermission string) *UpdateChatReqBodyBuilder {
  builder.shareCardPermission = shareCardPermission
  builder.shareCardPermissionFlag = true
  return builder
}
func (builder * UpdateChatReqBodyBuilder ) AtAllPermission(atAllPermission string) *UpdateChatReqBodyBuilder {
  builder.atAllPermission = atAllPermission
  builder.atAllPermissionFlag = true
  return builder
}
func (builder * UpdateChatReqBodyBuilder ) EditPermission(editPermission string) *UpdateChatReqBodyBuilder {
  builder.editPermission = editPermission
  builder.editPermissionFlag = true
  return builder
}
func (builder * UpdateChatReqBodyBuilder ) OwnerId(ownerId string) *UpdateChatReqBodyBuilder {
  builder.ownerId = ownerId
  builder.ownerIdFlag = true
  return builder
}
func (builder * UpdateChatReqBodyBuilder ) JoinMessageVisibility(joinMessageVisibility string) *UpdateChatReqBodyBuilder {
  builder.joinMessageVisibility = joinMessageVisibility
  builder.joinMessageVisibilityFlag = true
  return builder
}
func (builder * UpdateChatReqBodyBuilder ) LeaveMessageVisibility(leaveMessageVisibility string) *UpdateChatReqBodyBuilder {
  builder.leaveMessageVisibility = leaveMessageVisibility
  builder.leaveMessageVisibilityFlag = true
  return builder
}
func (builder * UpdateChatReqBodyBuilder ) MembershipApproval(membershipApproval string) *UpdateChatReqBodyBuilder {
  builder.membershipApproval = membershipApproval
  builder.membershipApprovalFlag = true
  return builder
}



/*1.3 生成body的build方法*/
func (builder * UpdateChatReqBodyBuilder ) Build() *UpdateChatReqBody {
   req := &UpdateChatReqBody{}
   if builder.avatarFlag {
	  req.Avatar = &builder.avatar
	  

   }
   if builder.nameFlag {
	  req.Name = &builder.name
	  

   }
   if builder.descriptionFlag {
	  req.Description = &builder.description
	  

   }
   if builder.i18nNamesFlag {
	  req.I18nNames = builder.i18nNames

   }
   if builder.addMemberPermissionFlag {
	  req.AddMemberPermission = &builder.addMemberPermission
	  

   }
   if builder.shareCardPermissionFlag {
	  req.ShareCardPermission = &builder.shareCardPermission
	  

   }
   if builder.atAllPermissionFlag {
	  req.AtAllPermission = &builder.atAllPermission
	  

   }
   if builder.editPermissionFlag {
	  req.EditPermission = &builder.editPermission
	  

   }
   if builder.ownerIdFlag {
	  req.OwnerId = &builder.ownerId
	  

   }
   if builder.joinMessageVisibilityFlag {
	  req.JoinMessageVisibility = &builder.joinMessageVisibility
	  

   }
   if builder.leaveMessageVisibilityFlag {
	  req.LeaveMessageVisibility = &builder.leaveMessageVisibility
	  

   }
   if builder.membershipApprovalFlag {
	  req.MembershipApproval = &builder.membershipApproval
	  

   }

   return req
}

/**上传文件path开始**/
type UpdateChatPathReqBodyBuilder struct {
	avatar  string
	avatarFlag  bool
	name  string
	nameFlag  bool
	description  string
	descriptionFlag  bool
	i18nNames  *I18nNames
	i18nNamesFlag  bool
	addMemberPermission  string
	addMemberPermissionFlag  bool
	shareCardPermission  string
	shareCardPermissionFlag  bool
	atAllPermission  string
	atAllPermissionFlag  bool
	editPermission  string
	editPermissionFlag  bool
	ownerId  string
	ownerIdFlag  bool
	joinMessageVisibility  string
	joinMessageVisibilityFlag  bool
	leaveMessageVisibility  string
	leaveMessageVisibilityFlag  bool
	membershipApproval  string
	membershipApprovalFlag  bool
	labels  []string
	labelsFlag  bool
}

// 生成body的New构造器
func NewUpdateChatPathReqBodyBuilder() * UpdateChatPathReqBodyBuilder{
  builder := &UpdateChatPathReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * UpdateChatPathReqBodyBuilder ) Avatar(avatar string) *UpdateChatPathReqBodyBuilder {
  builder.avatar = avatar
  builder.avatarFlag = true
  return builder
}
func (builder * UpdateChatPathReqBodyBuilder ) Name(name string) *UpdateChatPathReqBodyBuilder {
  builder.name = name
  builder.nameFlag = true
  return builder
}
func (builder * UpdateChatPathReqBodyBuilder ) Description(description string) *UpdateChatPathReqBodyBuilder {
  builder.description = description
  builder.descriptionFlag = true
  return builder
}
func (builder * UpdateChatPathReqBodyBuilder ) I18nNames(i18nNames *I18nNames) *UpdateChatPathReqBodyBuilder {
  builder.i18nNames = i18nNames
  builder.i18nNamesFlag = true
  return builder
}
func (builder * UpdateChatPathReqBodyBuilder ) AddMemberPermission(addMemberPermission string) *UpdateChatPathReqBodyBuilder {
  builder.addMemberPermission = addMemberPermission
  builder.addMemberPermissionFlag = true
  return builder
}
func (builder * UpdateChatPathReqBodyBuilder ) ShareCardPermission(shareCardPermission string) *UpdateChatPathReqBodyBuilder {
  builder.shareCardPermission = shareCardPermission
  builder.shareCardPermissionFlag = true
  return builder
}
func (builder * UpdateChatPathReqBodyBuilder ) AtAllPermission(atAllPermission string) *UpdateChatPathReqBodyBuilder {
  builder.atAllPermission = atAllPermission
  builder.atAllPermissionFlag = true
  return builder
}
func (builder * UpdateChatPathReqBodyBuilder ) EditPermission(editPermission string) *UpdateChatPathReqBodyBuilder {
  builder.editPermission = editPermission
  builder.editPermissionFlag = true
  return builder
}
func (builder * UpdateChatPathReqBodyBuilder ) OwnerId(ownerId string) *UpdateChatPathReqBodyBuilder {
  builder.ownerId = ownerId
  builder.ownerIdFlag = true
  return builder
}
func (builder * UpdateChatPathReqBodyBuilder ) JoinMessageVisibility(joinMessageVisibility string) *UpdateChatPathReqBodyBuilder {
  builder.joinMessageVisibility = joinMessageVisibility
  builder.joinMessageVisibilityFlag = true
  return builder
}
func (builder * UpdateChatPathReqBodyBuilder ) LeaveMessageVisibility(leaveMessageVisibility string) *UpdateChatPathReqBodyBuilder {
  builder.leaveMessageVisibility = leaveMessageVisibility
  builder.leaveMessageVisibilityFlag = true
  return builder
}
func (builder * UpdateChatPathReqBodyBuilder ) MembershipApproval(membershipApproval string) *UpdateChatPathReqBodyBuilder {
  builder.membershipApproval = membershipApproval
  builder.membershipApprovalFlag = true
  return builder
}



/*1.3 生成body的build方法*/
func (builder * UpdateChatPathReqBodyBuilder ) Build() (*UpdateChatReqBody, error) {
   req := &UpdateChatReqBody{}
   if builder.avatarFlag {
	  req.Avatar = &builder.avatar
	  
   }
   if builder.nameFlag {
	  req.Name = &builder.name
	  
   }
   if builder.descriptionFlag {
	  req.Description = &builder.description
	  
   }
   if builder.i18nNamesFlag {
	   req.I18nNames = builder.i18nNames
   }
   if builder.addMemberPermissionFlag {
	  req.AddMemberPermission = &builder.addMemberPermission
	  
   }
   if builder.shareCardPermissionFlag {
	  req.ShareCardPermission = &builder.shareCardPermission
	  
   }
   if builder.atAllPermissionFlag {
	  req.AtAllPermission = &builder.atAllPermission
	  
   }
   if builder.editPermissionFlag {
	  req.EditPermission = &builder.editPermission
	  
   }
   if builder.ownerIdFlag {
	  req.OwnerId = &builder.ownerId
	  
   }
   if builder.joinMessageVisibilityFlag {
	  req.JoinMessageVisibility = &builder.joinMessageVisibility
	  
   }
   if builder.leaveMessageVisibilityFlag {
	  req.LeaveMessageVisibility = &builder.leaveMessageVisibility
	  
   }
   if builder.membershipApprovalFlag {
	  req.MembershipApproval = &builder.membershipApproval
	  
   }

   return req, nil
}
/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type UpdateChatReqBuilder struct {
	chatId  string
	chatIdFlag  bool
	userIdType  string
	userIdTypeFlag  bool
	body *UpdateChatReqBody
	bodyFlag bool

}

// 生成请求的New构造器
func NewUpdateChatReqBuilder() * UpdateChatReqBuilder{
   builder := &UpdateChatReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * UpdateChatReqBuilder) ChatId(chatId string) *UpdateChatReqBuilder  {
  builder.chatId = chatId
  builder.chatIdFlag = true
  return builder
}
func (builder * UpdateChatReqBuilder) UserIdType(userIdType string) *UpdateChatReqBuilder  {
  builder.userIdType = userIdType
  builder.userIdTypeFlag = true
  return builder
}
func (builder * UpdateChatReqBuilder) Body(body *UpdateChatReqBody) *UpdateChatReqBuilder  {
  builder.body = body
  builder.bodyFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * UpdateChatReqBuilder ) Build() *UpdateChatReq {
   req := &UpdateChatReq{}
   if builder.chatIdFlag {
	  req.ChatId = builder.chatId
   }
   if builder.userIdTypeFlag {
	  req.UserIdType = &builder.userIdType
   }
   if builder.bodyFlag {
	  req.Body = builder.body

   }
   return req
}

type UpdateChatReqBody struct {
	Avatar  *string `json:"avatar,omitempty"`
	Name  *string `json:"name,omitempty"`
	Description  *string `json:"description,omitempty"`
	I18nNames  *I18nNames `json:"i18n_names,omitempty"`
	AddMemberPermission  *string `json:"add_member_permission,omitempty"`
	ShareCardPermission  *string `json:"share_card_permission,omitempty"`
	AtAllPermission  *string `json:"at_all_permission,omitempty"`
	EditPermission  *string `json:"edit_permission,omitempty"`
	OwnerId  *string `json:"owner_id,omitempty"`
	JoinMessageVisibility  *string `json:"join_message_visibility,omitempty"`
	LeaveMessageVisibility  *string `json:"leave_message_visibility,omitempty"`
	MembershipApproval  *string `json:"membership_approval,omitempty"`
	
}

type UpdateChatReq struct {
	ChatId  string `path:"chat_id"`
	UserIdType  *string `query:"user_id_type"`
	Body *UpdateChatReqBody `body:""`

}


type UpdateChatResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}


/*1.4 生成请求的builder结构体*/
type GetChatAnnouncementReqBuilder struct {
	chatId  string
	chatIdFlag  bool
	userIdType  string
	userIdTypeFlag  bool

}

// 生成请求的New构造器
func NewGetChatAnnouncementReqBuilder() * GetChatAnnouncementReqBuilder{
   builder := &GetChatAnnouncementReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * GetChatAnnouncementReqBuilder) ChatId(chatId string) *GetChatAnnouncementReqBuilder  {
  builder.chatId = chatId
  builder.chatIdFlag = true
  return builder
}
func (builder * GetChatAnnouncementReqBuilder) UserIdType(userIdType string) *GetChatAnnouncementReqBuilder  {
  builder.userIdType = userIdType
  builder.userIdTypeFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * GetChatAnnouncementReqBuilder ) Build() *GetChatAnnouncementReq {
   req := &GetChatAnnouncementReq{}
   if builder.chatIdFlag {
	  req.ChatId = builder.chatId
   }
   if builder.userIdTypeFlag {
	  req.UserIdType = &builder.userIdType
   }
   return req
}


type GetChatAnnouncementReq struct {
	ChatId  string `path:"chat_id"`
	UserIdType  *string `query:"user_id_type"`

}

type GetChatAnnouncementRespData struct {
	Content  *string `json:"content,omitempty"`
	Revision  *string `json:"revision,omitempty"`
	CreateTime  *string `json:"create_time,omitempty"`
	UpdateTime  *string `json:"update_time,omitempty"`
	OwnerIdType  *string `json:"owner_id_type,omitempty"`
	OwnerId  *string `json:"owner_id,omitempty"`
	ModifierIdType  *string `json:"modifier_id_type,omitempty"`
	ModifierId  *string `json:"modifier_id,omitempty"`
}

type GetChatAnnouncementResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *GetChatAnnouncementRespData `json:"data"`
}

type PatchChatAnnouncementReqBodyBuilder struct {
	revision  string
	revisionFlag  bool
	requests  []string
	requestsFlag  bool
}

// 生成body的New构造器
func NewPatchChatAnnouncementReqBodyBuilder() * PatchChatAnnouncementReqBodyBuilder{
  builder := &PatchChatAnnouncementReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * PatchChatAnnouncementReqBodyBuilder ) Revision(revision string) *PatchChatAnnouncementReqBodyBuilder {
  builder.revision = revision
  builder.revisionFlag = true
  return builder
}
func (builder * PatchChatAnnouncementReqBodyBuilder ) Requests(requests []string) *PatchChatAnnouncementReqBodyBuilder {
  builder.requests = requests
  builder.requestsFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * PatchChatAnnouncementReqBodyBuilder ) Build() *PatchChatAnnouncementReqBody {
   req := &PatchChatAnnouncementReqBody{}
   if builder.revisionFlag {
	  req.Revision = &builder.revision
	  

   }
   if builder.requestsFlag {
	  req.Requests = builder.requests

   }
   return req
}

/**上传文件path开始**/
type PatchChatAnnouncementPathReqBodyBuilder struct {
	revision  string
	revisionFlag  bool
	requests  []string
	requestsFlag  bool
}

// 生成body的New构造器
func NewPatchChatAnnouncementPathReqBodyBuilder() * PatchChatAnnouncementPathReqBodyBuilder{
  builder := &PatchChatAnnouncementPathReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * PatchChatAnnouncementPathReqBodyBuilder ) Revision(revision string) *PatchChatAnnouncementPathReqBodyBuilder {
  builder.revision = revision
  builder.revisionFlag = true
  return builder
}
func (builder * PatchChatAnnouncementPathReqBodyBuilder ) Requests(requests []string) *PatchChatAnnouncementPathReqBodyBuilder {
  builder.requests = requests
  builder.requestsFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * PatchChatAnnouncementPathReqBodyBuilder ) Build() (*PatchChatAnnouncementReqBody, error) {
   req := &PatchChatAnnouncementReqBody{}
   if builder.revisionFlag {
	  req.Revision = &builder.revision
	  
   }
   if builder.requestsFlag {
	   req.Requests = builder.requests
   }
   return req, nil
}
/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type PatchChatAnnouncementReqBuilder struct {
	chatId  string
	chatIdFlag  bool
	body *PatchChatAnnouncementReqBody
	bodyFlag bool

}

// 生成请求的New构造器
func NewPatchChatAnnouncementReqBuilder() * PatchChatAnnouncementReqBuilder{
   builder := &PatchChatAnnouncementReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * PatchChatAnnouncementReqBuilder) ChatId(chatId string) *PatchChatAnnouncementReqBuilder  {
  builder.chatId = chatId
  builder.chatIdFlag = true
  return builder
}
func (builder * PatchChatAnnouncementReqBuilder) Body(body *PatchChatAnnouncementReqBody) *PatchChatAnnouncementReqBuilder  {
  builder.body = body
  builder.bodyFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * PatchChatAnnouncementReqBuilder ) Build() *PatchChatAnnouncementReq {
   req := &PatchChatAnnouncementReq{}
   if builder.chatIdFlag {
	  req.ChatId = builder.chatId
   }
   if builder.bodyFlag {
	  req.Body = builder.body

   }
   return req
}

type PatchChatAnnouncementReqBody struct {
	Revision  *string `json:"revision,omitempty"`
	Requests  []string `json:"requests,omitempty"`
}

type PatchChatAnnouncementReq struct {
	ChatId  string `path:"chat_id"`
	Body *PatchChatAnnouncementReqBody `body:""`

}


type PatchChatAnnouncementResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

type AddManagersChatManagersReqBodyBuilder struct {
	managerIds  []string
	managerIdsFlag  bool
}

// 生成body的New构造器
func NewAddManagersChatManagersReqBodyBuilder() * AddManagersChatManagersReqBodyBuilder{
  builder := &AddManagersChatManagersReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * AddManagersChatManagersReqBodyBuilder ) ManagerIds(managerIds []string) *AddManagersChatManagersReqBodyBuilder {
  builder.managerIds = managerIds
  builder.managerIdsFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * AddManagersChatManagersReqBodyBuilder ) Build() *AddManagersChatManagersReqBody {
   req := &AddManagersChatManagersReqBody{}
   if builder.managerIdsFlag {
	  req.ManagerIds = builder.managerIds

   }
   return req
}

/**上传文件path开始**/
type AddManagersChatManagersPathReqBodyBuilder struct {
	managerIds  []string
	managerIdsFlag  bool
}

// 生成body的New构造器
func NewAddManagersChatManagersPathReqBodyBuilder() * AddManagersChatManagersPathReqBodyBuilder{
  builder := &AddManagersChatManagersPathReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * AddManagersChatManagersPathReqBodyBuilder ) ManagerIds(managerIds []string) *AddManagersChatManagersPathReqBodyBuilder {
  builder.managerIds = managerIds
  builder.managerIdsFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * AddManagersChatManagersPathReqBodyBuilder ) Build() (*AddManagersChatManagersReqBody, error) {
   req := &AddManagersChatManagersReqBody{}
   if builder.managerIdsFlag {
	   req.ManagerIds = builder.managerIds
   }
   return req, nil
}
/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type AddManagersChatManagersReqBuilder struct {
	chatId  string
	chatIdFlag  bool
	memberIdType  string
	memberIdTypeFlag  bool
	body *AddManagersChatManagersReqBody
	bodyFlag bool

}

// 生成请求的New构造器
func NewAddManagersChatManagersReqBuilder() * AddManagersChatManagersReqBuilder{
   builder := &AddManagersChatManagersReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * AddManagersChatManagersReqBuilder) ChatId(chatId string) *AddManagersChatManagersReqBuilder  {
  builder.chatId = chatId
  builder.chatIdFlag = true
  return builder
}
func (builder * AddManagersChatManagersReqBuilder) MemberIdType(memberIdType string) *AddManagersChatManagersReqBuilder  {
  builder.memberIdType = memberIdType
  builder.memberIdTypeFlag = true
  return builder
}
func (builder * AddManagersChatManagersReqBuilder) Body(body *AddManagersChatManagersReqBody) *AddManagersChatManagersReqBuilder  {
  builder.body = body
  builder.bodyFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * AddManagersChatManagersReqBuilder ) Build() *AddManagersChatManagersReq {
   req := &AddManagersChatManagersReq{}
   if builder.chatIdFlag {
	  req.ChatId = builder.chatId
   }
   if builder.memberIdTypeFlag {
	  req.MemberIdType = &builder.memberIdType
   }
   if builder.bodyFlag {
	  req.Body = builder.body

   }
   return req
}

type AddManagersChatManagersReqBody struct {
	ManagerIds  []string `json:"manager_ids,omitempty"`
}

type AddManagersChatManagersReq struct {
	ChatId  string `path:"chat_id"`
	MemberIdType  *string `query:"member_id_type"`
	Body *AddManagersChatManagersReqBody `body:""`

}

type AddManagersChatManagersRespData struct {
	ChatManagers  []string `json:"chat_managers,omitempty"`
	ChatBotManagers  []string `json:"chat_bot_managers,omitempty"`
}

type AddManagersChatManagersResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *AddManagersChatManagersRespData `json:"data"`
}

type DeleteManagersChatManagersReqBodyBuilder struct {
	managerIds  []string
	managerIdsFlag  bool
}

// 生成body的New构造器
func NewDeleteManagersChatManagersReqBodyBuilder() * DeleteManagersChatManagersReqBodyBuilder{
  builder := &DeleteManagersChatManagersReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * DeleteManagersChatManagersReqBodyBuilder ) ManagerIds(managerIds []string) *DeleteManagersChatManagersReqBodyBuilder {
  builder.managerIds = managerIds
  builder.managerIdsFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * DeleteManagersChatManagersReqBodyBuilder ) Build() *DeleteManagersChatManagersReqBody {
   req := &DeleteManagersChatManagersReqBody{}
   if builder.managerIdsFlag {
	  req.ManagerIds = builder.managerIds

   }
   return req
}

/**上传文件path开始**/
type DeleteManagersChatManagersPathReqBodyBuilder struct {
	managerIds  []string
	managerIdsFlag  bool
}

// 生成body的New构造器
func NewDeleteManagersChatManagersPathReqBodyBuilder() * DeleteManagersChatManagersPathReqBodyBuilder{
  builder := &DeleteManagersChatManagersPathReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * DeleteManagersChatManagersPathReqBodyBuilder ) ManagerIds(managerIds []string) *DeleteManagersChatManagersPathReqBodyBuilder {
  builder.managerIds = managerIds
  builder.managerIdsFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * DeleteManagersChatManagersPathReqBodyBuilder ) Build() (*DeleteManagersChatManagersReqBody, error) {
   req := &DeleteManagersChatManagersReqBody{}
   if builder.managerIdsFlag {
	   req.ManagerIds = builder.managerIds
   }
   return req, nil
}
/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type DeleteManagersChatManagersReqBuilder struct {
	chatId  string
	chatIdFlag  bool
	memberIdType  string
	memberIdTypeFlag  bool
	body *DeleteManagersChatManagersReqBody
	bodyFlag bool

}

// 生成请求的New构造器
func NewDeleteManagersChatManagersReqBuilder() * DeleteManagersChatManagersReqBuilder{
   builder := &DeleteManagersChatManagersReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * DeleteManagersChatManagersReqBuilder) ChatId(chatId string) *DeleteManagersChatManagersReqBuilder  {
  builder.chatId = chatId
  builder.chatIdFlag = true
  return builder
}
func (builder * DeleteManagersChatManagersReqBuilder) MemberIdType(memberIdType string) *DeleteManagersChatManagersReqBuilder  {
  builder.memberIdType = memberIdType
  builder.memberIdTypeFlag = true
  return builder
}
func (builder * DeleteManagersChatManagersReqBuilder) Body(body *DeleteManagersChatManagersReqBody) *DeleteManagersChatManagersReqBuilder  {
  builder.body = body
  builder.bodyFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * DeleteManagersChatManagersReqBuilder ) Build() *DeleteManagersChatManagersReq {
   req := &DeleteManagersChatManagersReq{}
   if builder.chatIdFlag {
	  req.ChatId = builder.chatId
   }
   if builder.memberIdTypeFlag {
	  req.MemberIdType = &builder.memberIdType
   }
   if builder.bodyFlag {
	  req.Body = builder.body

   }
   return req
}

type DeleteManagersChatManagersReqBody struct {
	ManagerIds  []string `json:"manager_ids,omitempty"`
}

type DeleteManagersChatManagersReq struct {
	ChatId  string `path:"chat_id"`
	MemberIdType  *string `query:"member_id_type"`
	Body *DeleteManagersChatManagersReqBody `body:""`

}

type DeleteManagersChatManagersRespData struct {
	ChatManagers  []string `json:"chat_managers,omitempty"`
	ChatBotManagers  []string `json:"chat_bot_managers,omitempty"`
}

type DeleteManagersChatManagersResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *DeleteManagersChatManagersRespData `json:"data"`
}

type CreateChatMembersReqBodyBuilder struct {
	idList  []string
	idListFlag  bool
}

// 生成body的New构造器
func NewCreateChatMembersReqBodyBuilder() * CreateChatMembersReqBodyBuilder{
  builder := &CreateChatMembersReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * CreateChatMembersReqBodyBuilder ) IdList(idList []string) *CreateChatMembersReqBodyBuilder {
  builder.idList = idList
  builder.idListFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * CreateChatMembersReqBodyBuilder ) Build() *CreateChatMembersReqBody {
   req := &CreateChatMembersReqBody{}
   if builder.idListFlag {
	  req.IdList = builder.idList

   }
   return req
}

/**上传文件path开始**/
type CreateChatMembersPathReqBodyBuilder struct {
	idList  []string
	idListFlag  bool
}

// 生成body的New构造器
func NewCreateChatMembersPathReqBodyBuilder() * CreateChatMembersPathReqBodyBuilder{
  builder := &CreateChatMembersPathReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * CreateChatMembersPathReqBodyBuilder ) IdList(idList []string) *CreateChatMembersPathReqBodyBuilder {
  builder.idList = idList
  builder.idListFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * CreateChatMembersPathReqBodyBuilder ) Build() (*CreateChatMembersReqBody, error) {
   req := &CreateChatMembersReqBody{}
   if builder.idListFlag {
	   req.IdList = builder.idList
   }
   return req, nil
}
/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type CreateChatMembersReqBuilder struct {
	chatId  string
	chatIdFlag  bool
	memberIdType  string
	memberIdTypeFlag  bool
	succeedType  int
	succeedTypeFlag  bool
	body *CreateChatMembersReqBody
	bodyFlag bool

}

// 生成请求的New构造器
func NewCreateChatMembersReqBuilder() * CreateChatMembersReqBuilder{
   builder := &CreateChatMembersReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * CreateChatMembersReqBuilder) ChatId(chatId string) *CreateChatMembersReqBuilder  {
  builder.chatId = chatId
  builder.chatIdFlag = true
  return builder
}
func (builder * CreateChatMembersReqBuilder) MemberIdType(memberIdType string) *CreateChatMembersReqBuilder  {
  builder.memberIdType = memberIdType
  builder.memberIdTypeFlag = true
  return builder
}
func (builder * CreateChatMembersReqBuilder) SucceedType(succeedType int) *CreateChatMembersReqBuilder  {
  builder.succeedType = succeedType
  builder.succeedTypeFlag = true
  return builder
}
func (builder * CreateChatMembersReqBuilder) Body(body *CreateChatMembersReqBody) *CreateChatMembersReqBuilder  {
  builder.body = body
  builder.bodyFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * CreateChatMembersReqBuilder ) Build() *CreateChatMembersReq {
   req := &CreateChatMembersReq{}
   if builder.chatIdFlag {
	  req.ChatId = builder.chatId
   }
   if builder.memberIdTypeFlag {
	  req.MemberIdType = &builder.memberIdType
   }
   if builder.succeedTypeFlag {
	  req.SucceedType = &builder.succeedType
   }
   if builder.bodyFlag {
	  req.Body = builder.body

   }
   return req
}

type CreateChatMembersReqBody struct {
	IdList  []string `json:"id_list,omitempty"`
}

type CreateChatMembersReq struct {
	ChatId  string `path:"chat_id"`
	MemberIdType  *string `query:"member_id_type"`
	SucceedType  *int `query:"succeed_type"`
	Body *CreateChatMembersReqBody `body:""`

}

type CreateChatMembersRespData struct {
	InvalidIdList  []string `json:"invalid_id_list,omitempty"`
	NotExistedIdList  []string `json:"not_existed_id_list,omitempty"`
}

type CreateChatMembersResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *CreateChatMembersRespData `json:"data"`
}

type DeleteChatMembersReqBodyBuilder struct {
	idList  []string
	idListFlag  bool
}

// 生成body的New构造器
func NewDeleteChatMembersReqBodyBuilder() * DeleteChatMembersReqBodyBuilder{
  builder := &DeleteChatMembersReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * DeleteChatMembersReqBodyBuilder ) IdList(idList []string) *DeleteChatMembersReqBodyBuilder {
  builder.idList = idList
  builder.idListFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * DeleteChatMembersReqBodyBuilder ) Build() *DeleteChatMembersReqBody {
   req := &DeleteChatMembersReqBody{}
   if builder.idListFlag {
	  req.IdList = builder.idList

   }
   return req
}

/**上传文件path开始**/
type DeleteChatMembersPathReqBodyBuilder struct {
	idList  []string
	idListFlag  bool
}

// 生成body的New构造器
func NewDeleteChatMembersPathReqBodyBuilder() * DeleteChatMembersPathReqBodyBuilder{
  builder := &DeleteChatMembersPathReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * DeleteChatMembersPathReqBodyBuilder ) IdList(idList []string) *DeleteChatMembersPathReqBodyBuilder {
  builder.idList = idList
  builder.idListFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * DeleteChatMembersPathReqBodyBuilder ) Build() (*DeleteChatMembersReqBody, error) {
   req := &DeleteChatMembersReqBody{}
   if builder.idListFlag {
	   req.IdList = builder.idList
   }
   return req, nil
}
/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type DeleteChatMembersReqBuilder struct {
	chatId  string
	chatIdFlag  bool
	memberIdType  string
	memberIdTypeFlag  bool
	body *DeleteChatMembersReqBody
	bodyFlag bool

}

// 生成请求的New构造器
func NewDeleteChatMembersReqBuilder() * DeleteChatMembersReqBuilder{
   builder := &DeleteChatMembersReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * DeleteChatMembersReqBuilder) ChatId(chatId string) *DeleteChatMembersReqBuilder  {
  builder.chatId = chatId
  builder.chatIdFlag = true
  return builder
}
func (builder * DeleteChatMembersReqBuilder) MemberIdType(memberIdType string) *DeleteChatMembersReqBuilder  {
  builder.memberIdType = memberIdType
  builder.memberIdTypeFlag = true
  return builder
}
func (builder * DeleteChatMembersReqBuilder) Body(body *DeleteChatMembersReqBody) *DeleteChatMembersReqBuilder  {
  builder.body = body
  builder.bodyFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * DeleteChatMembersReqBuilder ) Build() *DeleteChatMembersReq {
   req := &DeleteChatMembersReq{}
   if builder.chatIdFlag {
	  req.ChatId = builder.chatId
   }
   if builder.memberIdTypeFlag {
	  req.MemberIdType = &builder.memberIdType
   }
   if builder.bodyFlag {
	  req.Body = builder.body

   }
   return req
}

type DeleteChatMembersReqBody struct {
	IdList  []string `json:"id_list,omitempty"`
}

type DeleteChatMembersReq struct {
	ChatId  string `path:"chat_id"`
	MemberIdType  *string `query:"member_id_type"`
	Body *DeleteChatMembersReqBody `body:""`

}

type DeleteChatMembersRespData struct {
	InvalidIdList  []string `json:"invalid_id_list,omitempty"`
}

type DeleteChatMembersResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *DeleteChatMembersRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type GetChatMembersReqBuilder struct {
	chatId  string
	chatIdFlag  bool
	memberIdType  string
	memberIdTypeFlag  bool
	pageToken  string
	pageTokenFlag  bool
	pageSize  int
	pageSizeFlag  bool
	limit int

}

// 生成请求的New构造器
func NewGetChatMembersReqBuilder() * GetChatMembersReqBuilder{
   builder := &GetChatMembersReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * GetChatMembersReqBuilder) Limit(limit int ) *GetChatMembersReqBuilder  {
  builder.limit = limit
  return builder
}
func (builder * GetChatMembersReqBuilder) ChatId(chatId string) *GetChatMembersReqBuilder  {
  builder.chatId = chatId
  builder.chatIdFlag = true
  return builder
}
func (builder * GetChatMembersReqBuilder) MemberIdType(memberIdType string) *GetChatMembersReqBuilder  {
  builder.memberIdType = memberIdType
  builder.memberIdTypeFlag = true
  return builder
}
func (builder * GetChatMembersReqBuilder) PageToken(pageToken string) *GetChatMembersReqBuilder  {
  builder.pageToken = pageToken
  builder.pageTokenFlag = true
  return builder
}
func (builder * GetChatMembersReqBuilder) PageSize(pageSize int) *GetChatMembersReqBuilder  {
  builder.pageSize = pageSize
  builder.pageSizeFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * GetChatMembersReqBuilder ) Build() *GetChatMembersReq {
   req := &GetChatMembersReq{}
   req.Limit = builder.limit
   if builder.chatIdFlag {
	  req.ChatId = builder.chatId
   }
   if builder.memberIdTypeFlag {
	  req.MemberIdType = &builder.memberIdType
   }
   if builder.pageTokenFlag {
	  req.PageToken = &builder.pageToken
   }
   if builder.pageSizeFlag {
	  req.PageSize = &builder.pageSize
   }
   return req
}


type GetChatMembersReq struct {
	ChatId  string `path:"chat_id"`
	MemberIdType  *string `query:"member_id_type"`
	PageToken  *string `query:"page_token"`
	PageSize  *int `query:"page_size"`
	Limit int

}

type GetChatMembersRespData struct {
	Items  []*ListMember `json:"items,omitempty"`
	PageToken  *string `json:"page_token,omitempty"`
	HasMore  *bool `json:"has_more,omitempty"`
	MemberTotal  *int `json:"member_total,omitempty"`
}

type GetChatMembersResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *GetChatMembersRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type IsInChatChatMembersReqBuilder struct {
	chatId  string
	chatIdFlag  bool

}

// 生成请求的New构造器
func NewIsInChatChatMembersReqBuilder() * IsInChatChatMembersReqBuilder{
   builder := &IsInChatChatMembersReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * IsInChatChatMembersReqBuilder) ChatId(chatId string) *IsInChatChatMembersReqBuilder  {
  builder.chatId = chatId
  builder.chatIdFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * IsInChatChatMembersReqBuilder ) Build() *IsInChatChatMembersReq {
   req := &IsInChatChatMembersReq{}
   if builder.chatIdFlag {
	  req.ChatId = builder.chatId
   }
   return req
}


type IsInChatChatMembersReq struct {
	ChatId  string `path:"chat_id"`

}

type IsInChatChatMembersRespData struct {
	IsInChat  *bool `json:"is_in_chat,omitempty"`
}

type IsInChatChatMembersResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *IsInChatChatMembersRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type MeJoinChatMembersReqBuilder struct {
	chatId  string
	chatIdFlag  bool

}

// 生成请求的New构造器
func NewMeJoinChatMembersReqBuilder() * MeJoinChatMembersReqBuilder{
   builder := &MeJoinChatMembersReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * MeJoinChatMembersReqBuilder) ChatId(chatId string) *MeJoinChatMembersReqBuilder  {
  builder.chatId = chatId
  builder.chatIdFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * MeJoinChatMembersReqBuilder ) Build() *MeJoinChatMembersReq {
   req := &MeJoinChatMembersReq{}
   if builder.chatIdFlag {
	  req.ChatId = builder.chatId
   }
   return req
}


type MeJoinChatMembersReq struct {
	ChatId  string `path:"chat_id"`

}


type MeJoinChatMembersResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}


/*1.4 生成请求的builder结构体*/
type GetChatModerationReqBuilder struct {
	chatId  string
	chatIdFlag  bool
	userIdType  string
	userIdTypeFlag  bool
	pageToken  string
	pageTokenFlag  bool
	pageSize  int
	pageSizeFlag  bool
	limit int

}

// 生成请求的New构造器
func NewGetChatModerationReqBuilder() * GetChatModerationReqBuilder{
   builder := &GetChatModerationReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * GetChatModerationReqBuilder) Limit(limit int ) *GetChatModerationReqBuilder  {
  builder.limit = limit
  return builder
}
func (builder * GetChatModerationReqBuilder) ChatId(chatId string) *GetChatModerationReqBuilder  {
  builder.chatId = chatId
  builder.chatIdFlag = true
  return builder
}
func (builder * GetChatModerationReqBuilder) UserIdType(userIdType string) *GetChatModerationReqBuilder  {
  builder.userIdType = userIdType
  builder.userIdTypeFlag = true
  return builder
}
func (builder * GetChatModerationReqBuilder) PageToken(pageToken string) *GetChatModerationReqBuilder  {
  builder.pageToken = pageToken
  builder.pageTokenFlag = true
  return builder
}
func (builder * GetChatModerationReqBuilder) PageSize(pageSize int) *GetChatModerationReqBuilder  {
  builder.pageSize = pageSize
  builder.pageSizeFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * GetChatModerationReqBuilder ) Build() *GetChatModerationReq {
   req := &GetChatModerationReq{}
   req.Limit = builder.limit
   if builder.chatIdFlag {
	  req.ChatId = builder.chatId
   }
   if builder.userIdTypeFlag {
	  req.UserIdType = &builder.userIdType
   }
   if builder.pageTokenFlag {
	  req.PageToken = &builder.pageToken
   }
   if builder.pageSizeFlag {
	  req.PageSize = &builder.pageSize
   }
   return req
}


type GetChatModerationReq struct {
	ChatId  string `path:"chat_id"`
	UserIdType  *string `query:"user_id_type"`
	PageToken  *string `query:"page_token"`
	PageSize  *int `query:"page_size"`
	Limit int

}

type GetChatModerationRespData struct {
	ModerationSetting  *string `json:"moderation_setting,omitempty"`
	PageToken  *string `json:"page_token,omitempty"`
	HasMore  *bool `json:"has_more,omitempty"`
	Items  []*ListModerator `json:"items,omitempty"`
}

type GetChatModerationResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *GetChatModerationRespData `json:"data"`
}

type UpdateChatModerationReqBodyBuilder struct {
	moderationSetting  string
	moderationSettingFlag  bool
	moderatorAddedList  []string
	moderatorAddedListFlag  bool
	moderatorRemovedList  []string
	moderatorRemovedListFlag  bool
}

// 生成body的New构造器
func NewUpdateChatModerationReqBodyBuilder() * UpdateChatModerationReqBodyBuilder{
  builder := &UpdateChatModerationReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * UpdateChatModerationReqBodyBuilder ) ModerationSetting(moderationSetting string) *UpdateChatModerationReqBodyBuilder {
  builder.moderationSetting = moderationSetting
  builder.moderationSettingFlag = true
  return builder
}
func (builder * UpdateChatModerationReqBodyBuilder ) ModeratorAddedList(moderatorAddedList []string) *UpdateChatModerationReqBodyBuilder {
  builder.moderatorAddedList = moderatorAddedList
  builder.moderatorAddedListFlag = true
  return builder
}
func (builder * UpdateChatModerationReqBodyBuilder ) ModeratorRemovedList(moderatorRemovedList []string) *UpdateChatModerationReqBodyBuilder {
  builder.moderatorRemovedList = moderatorRemovedList
  builder.moderatorRemovedListFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * UpdateChatModerationReqBodyBuilder ) Build() *UpdateChatModerationReqBody {
   req := &UpdateChatModerationReqBody{}
   if builder.moderationSettingFlag {
	  req.ModerationSetting = &builder.moderationSetting
	  

   }
   if builder.moderatorAddedListFlag {
	  req.ModeratorAddedList = builder.moderatorAddedList

   }
   if builder.moderatorRemovedListFlag {
	  req.ModeratorRemovedList = builder.moderatorRemovedList

   }
   return req
}

/**上传文件path开始**/
type UpdateChatModerationPathReqBodyBuilder struct {
	moderationSetting  string
	moderationSettingFlag  bool
	moderatorAddedList  []string
	moderatorAddedListFlag  bool
	moderatorRemovedList  []string
	moderatorRemovedListFlag  bool
}

// 生成body的New构造器
func NewUpdateChatModerationPathReqBodyBuilder() * UpdateChatModerationPathReqBodyBuilder{
  builder := &UpdateChatModerationPathReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * UpdateChatModerationPathReqBodyBuilder ) ModerationSetting(moderationSetting string) *UpdateChatModerationPathReqBodyBuilder {
  builder.moderationSetting = moderationSetting
  builder.moderationSettingFlag = true
  return builder
}
func (builder * UpdateChatModerationPathReqBodyBuilder ) ModeratorAddedList(moderatorAddedList []string) *UpdateChatModerationPathReqBodyBuilder {
  builder.moderatorAddedList = moderatorAddedList
  builder.moderatorAddedListFlag = true
  return builder
}
func (builder * UpdateChatModerationPathReqBodyBuilder ) ModeratorRemovedList(moderatorRemovedList []string) *UpdateChatModerationPathReqBodyBuilder {
  builder.moderatorRemovedList = moderatorRemovedList
  builder.moderatorRemovedListFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * UpdateChatModerationPathReqBodyBuilder ) Build() (*UpdateChatModerationReqBody, error) {
   req := &UpdateChatModerationReqBody{}
   if builder.moderationSettingFlag {
	  req.ModerationSetting = &builder.moderationSetting
	  
   }
   if builder.moderatorAddedListFlag {
	   req.ModeratorAddedList = builder.moderatorAddedList
   }
   if builder.moderatorRemovedListFlag {
	   req.ModeratorRemovedList = builder.moderatorRemovedList
   }
   return req, nil
}
/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type UpdateChatModerationReqBuilder struct {
	chatId  string
	chatIdFlag  bool
	userIdType  string
	userIdTypeFlag  bool
	body *UpdateChatModerationReqBody
	bodyFlag bool

}

// 生成请求的New构造器
func NewUpdateChatModerationReqBuilder() * UpdateChatModerationReqBuilder{
   builder := &UpdateChatModerationReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * UpdateChatModerationReqBuilder) ChatId(chatId string) *UpdateChatModerationReqBuilder  {
  builder.chatId = chatId
  builder.chatIdFlag = true
  return builder
}
func (builder * UpdateChatModerationReqBuilder) UserIdType(userIdType string) *UpdateChatModerationReqBuilder  {
  builder.userIdType = userIdType
  builder.userIdTypeFlag = true
  return builder
}
func (builder * UpdateChatModerationReqBuilder) Body(body *UpdateChatModerationReqBody) *UpdateChatModerationReqBuilder  {
  builder.body = body
  builder.bodyFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * UpdateChatModerationReqBuilder ) Build() *UpdateChatModerationReq {
   req := &UpdateChatModerationReq{}
   if builder.chatIdFlag {
	  req.ChatId = builder.chatId
   }
   if builder.userIdTypeFlag {
	  req.UserIdType = &builder.userIdType
   }
   if builder.bodyFlag {
	  req.Body = builder.body

   }
   return req
}

type UpdateChatModerationReqBody struct {
	ModerationSetting  *string `json:"moderation_setting,omitempty"`
	ModeratorAddedList  []string `json:"moderator_added_list,omitempty"`
	ModeratorRemovedList  []string `json:"moderator_removed_list,omitempty"`
}

type UpdateChatModerationReq struct {
	ChatId  string `path:"chat_id"`
	UserIdType  *string `query:"user_id_type"`
	Body *UpdateChatModerationReqBody `body:""`

}


type UpdateChatModerationResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

type CreateChatTabReqBodyBuilder struct {
	chatTabs  []*ChatTab
	chatTabsFlag  bool
}

// 生成body的New构造器
func NewCreateChatTabReqBodyBuilder() * CreateChatTabReqBodyBuilder{
  builder := &CreateChatTabReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * CreateChatTabReqBodyBuilder ) ChatTabs(chatTabs []*ChatTab) *CreateChatTabReqBodyBuilder {
  builder.chatTabs = chatTabs
  builder.chatTabsFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * CreateChatTabReqBodyBuilder ) Build() *CreateChatTabReqBody {
   req := &CreateChatTabReqBody{}
   if builder.chatTabsFlag {
	  req.ChatTabs = builder.chatTabs

   }
   return req
}

/**上传文件path开始**/
type CreateChatTabPathReqBodyBuilder struct {
	chatTabs  []*ChatTab
	chatTabsFlag  bool
}

// 生成body的New构造器
func NewCreateChatTabPathReqBodyBuilder() * CreateChatTabPathReqBodyBuilder{
  builder := &CreateChatTabPathReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * CreateChatTabPathReqBodyBuilder ) ChatTabs(chatTabs []*ChatTab) *CreateChatTabPathReqBodyBuilder {
  builder.chatTabs = chatTabs
  builder.chatTabsFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * CreateChatTabPathReqBodyBuilder ) Build() (*CreateChatTabReqBody, error) {
   req := &CreateChatTabReqBody{}
   if builder.chatTabsFlag {
	   req.ChatTabs = builder.chatTabs
   }
   return req, nil
}
/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type CreateChatTabReqBuilder struct {
	chatId  string
	chatIdFlag  bool
	body *CreateChatTabReqBody
	bodyFlag bool

}

// 生成请求的New构造器
func NewCreateChatTabReqBuilder() * CreateChatTabReqBuilder{
   builder := &CreateChatTabReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * CreateChatTabReqBuilder) ChatId(chatId string) *CreateChatTabReqBuilder  {
  builder.chatId = chatId
  builder.chatIdFlag = true
  return builder
}
func (builder * CreateChatTabReqBuilder) Body(body *CreateChatTabReqBody) *CreateChatTabReqBuilder  {
  builder.body = body
  builder.bodyFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * CreateChatTabReqBuilder ) Build() *CreateChatTabReq {
   req := &CreateChatTabReq{}
   if builder.chatIdFlag {
	  req.ChatId = builder.chatId
   }
   if builder.bodyFlag {
	  req.Body = builder.body

   }
   return req
}

type CreateChatTabReqBody struct {
	ChatTabs  []*ChatTab `json:"chat_tabs,omitempty"`
}

type CreateChatTabReq struct {
	ChatId  string `path:"chat_id"`
	Body *CreateChatTabReqBody `body:""`

}

type CreateChatTabRespData struct {
	ChatTabs  []*ChatTab `json:"chat_tabs,omitempty"`
}

type CreateChatTabResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *CreateChatTabRespData `json:"data"`
}

type DeleteTabsChatTabReqBodyBuilder struct {
	tabIds  []string
	tabIdsFlag  bool
}

// 生成body的New构造器
func NewDeleteTabsChatTabReqBodyBuilder() * DeleteTabsChatTabReqBodyBuilder{
  builder := &DeleteTabsChatTabReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * DeleteTabsChatTabReqBodyBuilder ) TabIds(tabIds []string) *DeleteTabsChatTabReqBodyBuilder {
  builder.tabIds = tabIds
  builder.tabIdsFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * DeleteTabsChatTabReqBodyBuilder ) Build() *DeleteTabsChatTabReqBody {
   req := &DeleteTabsChatTabReqBody{}
   if builder.tabIdsFlag {
	  req.TabIds = builder.tabIds

   }
   return req
}

/**上传文件path开始**/
type DeleteTabsChatTabPathReqBodyBuilder struct {
	tabIds  []string
	tabIdsFlag  bool
}

// 生成body的New构造器
func NewDeleteTabsChatTabPathReqBodyBuilder() * DeleteTabsChatTabPathReqBodyBuilder{
  builder := &DeleteTabsChatTabPathReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * DeleteTabsChatTabPathReqBodyBuilder ) TabIds(tabIds []string) *DeleteTabsChatTabPathReqBodyBuilder {
  builder.tabIds = tabIds
  builder.tabIdsFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * DeleteTabsChatTabPathReqBodyBuilder ) Build() (*DeleteTabsChatTabReqBody, error) {
   req := &DeleteTabsChatTabReqBody{}
   if builder.tabIdsFlag {
	   req.TabIds = builder.tabIds
   }
   return req, nil
}
/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type DeleteTabsChatTabReqBuilder struct {
	chatId  string
	chatIdFlag  bool
	body *DeleteTabsChatTabReqBody
	bodyFlag bool

}

// 生成请求的New构造器
func NewDeleteTabsChatTabReqBuilder() * DeleteTabsChatTabReqBuilder{
   builder := &DeleteTabsChatTabReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * DeleteTabsChatTabReqBuilder) ChatId(chatId string) *DeleteTabsChatTabReqBuilder  {
  builder.chatId = chatId
  builder.chatIdFlag = true
  return builder
}
func (builder * DeleteTabsChatTabReqBuilder) Body(body *DeleteTabsChatTabReqBody) *DeleteTabsChatTabReqBuilder  {
  builder.body = body
  builder.bodyFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * DeleteTabsChatTabReqBuilder ) Build() *DeleteTabsChatTabReq {
   req := &DeleteTabsChatTabReq{}
   if builder.chatIdFlag {
	  req.ChatId = builder.chatId
   }
   if builder.bodyFlag {
	  req.Body = builder.body

   }
   return req
}

type DeleteTabsChatTabReqBody struct {
	TabIds  []string `json:"tab_ids,omitempty"`
}

type DeleteTabsChatTabReq struct {
	ChatId  string `path:"chat_id"`
	Body *DeleteTabsChatTabReqBody `body:""`

}

type DeleteTabsChatTabRespData struct {
	ChatTabs  []*ChatTab `json:"chat_tabs,omitempty"`
}

type DeleteTabsChatTabResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *DeleteTabsChatTabRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type ListTabsChatTabReqBuilder struct {
	chatId  string
	chatIdFlag  bool

}

// 生成请求的New构造器
func NewListTabsChatTabReqBuilder() * ListTabsChatTabReqBuilder{
   builder := &ListTabsChatTabReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * ListTabsChatTabReqBuilder) ChatId(chatId string) *ListTabsChatTabReqBuilder  {
  builder.chatId = chatId
  builder.chatIdFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * ListTabsChatTabReqBuilder ) Build() *ListTabsChatTabReq {
   req := &ListTabsChatTabReq{}
   if builder.chatIdFlag {
	  req.ChatId = builder.chatId
   }
   return req
}


type ListTabsChatTabReq struct {
	ChatId  string `path:"chat_id"`

}

type ListTabsChatTabRespData struct {
	ChatTabs  []*ChatTab `json:"chat_tabs,omitempty"`
}

type ListTabsChatTabResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *ListTabsChatTabRespData `json:"data"`
}

type SortTabsChatTabReqBodyBuilder struct {
	tabIds  []string
	tabIdsFlag  bool
}

// 生成body的New构造器
func NewSortTabsChatTabReqBodyBuilder() * SortTabsChatTabReqBodyBuilder{
  builder := &SortTabsChatTabReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * SortTabsChatTabReqBodyBuilder ) TabIds(tabIds []string) *SortTabsChatTabReqBodyBuilder {
  builder.tabIds = tabIds
  builder.tabIdsFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * SortTabsChatTabReqBodyBuilder ) Build() *SortTabsChatTabReqBody {
   req := &SortTabsChatTabReqBody{}
   if builder.tabIdsFlag {
	  req.TabIds = builder.tabIds

   }
   return req
}

/**上传文件path开始**/
type SortTabsChatTabPathReqBodyBuilder struct {
	tabIds  []string
	tabIdsFlag  bool
}

// 生成body的New构造器
func NewSortTabsChatTabPathReqBodyBuilder() * SortTabsChatTabPathReqBodyBuilder{
  builder := &SortTabsChatTabPathReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * SortTabsChatTabPathReqBodyBuilder ) TabIds(tabIds []string) *SortTabsChatTabPathReqBodyBuilder {
  builder.tabIds = tabIds
  builder.tabIdsFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * SortTabsChatTabPathReqBodyBuilder ) Build() (*SortTabsChatTabReqBody, error) {
   req := &SortTabsChatTabReqBody{}
   if builder.tabIdsFlag {
	   req.TabIds = builder.tabIds
   }
   return req, nil
}
/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type SortTabsChatTabReqBuilder struct {
	chatId  string
	chatIdFlag  bool
	body *SortTabsChatTabReqBody
	bodyFlag bool

}

// 生成请求的New构造器
func NewSortTabsChatTabReqBuilder() * SortTabsChatTabReqBuilder{
   builder := &SortTabsChatTabReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * SortTabsChatTabReqBuilder) ChatId(chatId string) *SortTabsChatTabReqBuilder  {
  builder.chatId = chatId
  builder.chatIdFlag = true
  return builder
}
func (builder * SortTabsChatTabReqBuilder) Body(body *SortTabsChatTabReqBody) *SortTabsChatTabReqBuilder  {
  builder.body = body
  builder.bodyFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * SortTabsChatTabReqBuilder ) Build() *SortTabsChatTabReq {
   req := &SortTabsChatTabReq{}
   if builder.chatIdFlag {
	  req.ChatId = builder.chatId
   }
   if builder.bodyFlag {
	  req.Body = builder.body

   }
   return req
}

type SortTabsChatTabReqBody struct {
	TabIds  []string `json:"tab_ids,omitempty"`
}

type SortTabsChatTabReq struct {
	ChatId  string `path:"chat_id"`
	Body *SortTabsChatTabReqBody `body:""`

}

type SortTabsChatTabRespData struct {
	ChatTabs  []*ChatTab `json:"chat_tabs,omitempty"`
}

type SortTabsChatTabResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *SortTabsChatTabRespData `json:"data"`
}

type UpdateTabsChatTabReqBodyBuilder struct {
	chatTabs  []*ChatTab
	chatTabsFlag  bool
}

// 生成body的New构造器
func NewUpdateTabsChatTabReqBodyBuilder() * UpdateTabsChatTabReqBodyBuilder{
  builder := &UpdateTabsChatTabReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * UpdateTabsChatTabReqBodyBuilder ) ChatTabs(chatTabs []*ChatTab) *UpdateTabsChatTabReqBodyBuilder {
  builder.chatTabs = chatTabs
  builder.chatTabsFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * UpdateTabsChatTabReqBodyBuilder ) Build() *UpdateTabsChatTabReqBody {
   req := &UpdateTabsChatTabReqBody{}
   if builder.chatTabsFlag {
	  req.ChatTabs = builder.chatTabs

   }
   return req
}

/**上传文件path开始**/
type UpdateTabsChatTabPathReqBodyBuilder struct {
	chatTabs  []*ChatTab
	chatTabsFlag  bool
}

// 生成body的New构造器
func NewUpdateTabsChatTabPathReqBodyBuilder() * UpdateTabsChatTabPathReqBodyBuilder{
  builder := &UpdateTabsChatTabPathReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * UpdateTabsChatTabPathReqBodyBuilder ) ChatTabs(chatTabs []*ChatTab) *UpdateTabsChatTabPathReqBodyBuilder {
  builder.chatTabs = chatTabs
  builder.chatTabsFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * UpdateTabsChatTabPathReqBodyBuilder ) Build() (*UpdateTabsChatTabReqBody, error) {
   req := &UpdateTabsChatTabReqBody{}
   if builder.chatTabsFlag {
	   req.ChatTabs = builder.chatTabs
   }
   return req, nil
}
/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type UpdateTabsChatTabReqBuilder struct {
	chatId  string
	chatIdFlag  bool
	body *UpdateTabsChatTabReqBody
	bodyFlag bool

}

// 生成请求的New构造器
func NewUpdateTabsChatTabReqBuilder() * UpdateTabsChatTabReqBuilder{
   builder := &UpdateTabsChatTabReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * UpdateTabsChatTabReqBuilder) ChatId(chatId string) *UpdateTabsChatTabReqBuilder  {
  builder.chatId = chatId
  builder.chatIdFlag = true
  return builder
}
func (builder * UpdateTabsChatTabReqBuilder) Body(body *UpdateTabsChatTabReqBody) *UpdateTabsChatTabReqBuilder  {
  builder.body = body
  builder.bodyFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * UpdateTabsChatTabReqBuilder ) Build() *UpdateTabsChatTabReq {
   req := &UpdateTabsChatTabReq{}
   if builder.chatIdFlag {
	  req.ChatId = builder.chatId
   }
   if builder.bodyFlag {
	  req.Body = builder.body

   }
   return req
}

type UpdateTabsChatTabReqBody struct {
	ChatTabs  []*ChatTab `json:"chat_tabs,omitempty"`
}

type UpdateTabsChatTabReq struct {
	ChatId  string `path:"chat_id"`
	Body *UpdateTabsChatTabReqBody `body:""`

}

type UpdateTabsChatTabRespData struct {
	ChatTabs  []*ChatTab `json:"chat_tabs,omitempty"`
}

type UpdateTabsChatTabResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *UpdateTabsChatTabRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type DeleteTopNoticeChatTopNoticeReqBuilder struct {
	chatId  string
	chatIdFlag  bool

}

// 生成请求的New构造器
func NewDeleteTopNoticeChatTopNoticeReqBuilder() * DeleteTopNoticeChatTopNoticeReqBuilder{
   builder := &DeleteTopNoticeChatTopNoticeReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * DeleteTopNoticeChatTopNoticeReqBuilder) ChatId(chatId string) *DeleteTopNoticeChatTopNoticeReqBuilder  {
  builder.chatId = chatId
  builder.chatIdFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * DeleteTopNoticeChatTopNoticeReqBuilder ) Build() *DeleteTopNoticeChatTopNoticeReq {
   req := &DeleteTopNoticeChatTopNoticeReq{}
   if builder.chatIdFlag {
	  req.ChatId = builder.chatId
   }
   return req
}


type DeleteTopNoticeChatTopNoticeReq struct {
	ChatId  string `path:"chat_id"`

}


type DeleteTopNoticeChatTopNoticeResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

type PutTopNoticeChatTopNoticeReqBodyBuilder struct {
	chatTopNotice  []*ChatTopNotice
	chatTopNoticeFlag  bool
}

// 生成body的New构造器
func NewPutTopNoticeChatTopNoticeReqBodyBuilder() * PutTopNoticeChatTopNoticeReqBodyBuilder{
  builder := &PutTopNoticeChatTopNoticeReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * PutTopNoticeChatTopNoticeReqBodyBuilder ) ChatTopNotice(chatTopNotice []*ChatTopNotice) *PutTopNoticeChatTopNoticeReqBodyBuilder {
  builder.chatTopNotice = chatTopNotice
  builder.chatTopNoticeFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * PutTopNoticeChatTopNoticeReqBodyBuilder ) Build() *PutTopNoticeChatTopNoticeReqBody {
   req := &PutTopNoticeChatTopNoticeReqBody{}
   if builder.chatTopNoticeFlag {
	  req.ChatTopNotice = builder.chatTopNotice

   }
   return req
}

/**上传文件path开始**/
type PutTopNoticeChatTopNoticePathReqBodyBuilder struct {
	chatTopNotice  []*ChatTopNotice
	chatTopNoticeFlag  bool
}

// 生成body的New构造器
func NewPutTopNoticeChatTopNoticePathReqBodyBuilder() * PutTopNoticeChatTopNoticePathReqBodyBuilder{
  builder := &PutTopNoticeChatTopNoticePathReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * PutTopNoticeChatTopNoticePathReqBodyBuilder ) ChatTopNotice(chatTopNotice []*ChatTopNotice) *PutTopNoticeChatTopNoticePathReqBodyBuilder {
  builder.chatTopNotice = chatTopNotice
  builder.chatTopNoticeFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * PutTopNoticeChatTopNoticePathReqBodyBuilder ) Build() (*PutTopNoticeChatTopNoticeReqBody, error) {
   req := &PutTopNoticeChatTopNoticeReqBody{}
   if builder.chatTopNoticeFlag {
	   req.ChatTopNotice = builder.chatTopNotice
   }
   return req, nil
}
/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type PutTopNoticeChatTopNoticeReqBuilder struct {
	chatId  string
	chatIdFlag  bool
	body *PutTopNoticeChatTopNoticeReqBody
	bodyFlag bool

}

// 生成请求的New构造器
func NewPutTopNoticeChatTopNoticeReqBuilder() * PutTopNoticeChatTopNoticeReqBuilder{
   builder := &PutTopNoticeChatTopNoticeReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * PutTopNoticeChatTopNoticeReqBuilder) ChatId(chatId string) *PutTopNoticeChatTopNoticeReqBuilder  {
  builder.chatId = chatId
  builder.chatIdFlag = true
  return builder
}
func (builder * PutTopNoticeChatTopNoticeReqBuilder) Body(body *PutTopNoticeChatTopNoticeReqBody) *PutTopNoticeChatTopNoticeReqBuilder  {
  builder.body = body
  builder.bodyFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * PutTopNoticeChatTopNoticeReqBuilder ) Build() *PutTopNoticeChatTopNoticeReq {
   req := &PutTopNoticeChatTopNoticeReq{}
   if builder.chatIdFlag {
	  req.ChatId = builder.chatId
   }
   if builder.bodyFlag {
	  req.Body = builder.body

   }
   return req
}

type PutTopNoticeChatTopNoticeReqBody struct {
	ChatTopNotice  []*ChatTopNotice `json:"chat_top_notice,omitempty"`
}

type PutTopNoticeChatTopNoticeReq struct {
	ChatId  string `path:"chat_id"`
	Body *PutTopNoticeChatTopNoticeReqBody `body:""`

}


type PutTopNoticeChatTopNoticeResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

type CreateChatCustomBotReqBodyBuilder struct {
	chatId  int64
	chatIdFlag  bool
	avatarKey  string
	avatarKeyFlag  bool
	name  string
	nameFlag  bool
	description  string
	descriptionFlag  bool
	allowIps  []string
	allowIpsFlag  bool
	keyWords  []string
	keyWordsFlag  bool
	signatureStatus  bool
	signatureStatusFlag  bool
	uuid  int64
	uuidFlag  bool
}

// 生成body的New构造器
func NewCreateChatCustomBotReqBodyBuilder() * CreateChatCustomBotReqBodyBuilder{
  builder := &CreateChatCustomBotReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * CreateChatCustomBotReqBodyBuilder ) ChatId(chatId int64) *CreateChatCustomBotReqBodyBuilder {
  builder.chatId = chatId
  builder.chatIdFlag = true
  return builder
}
func (builder * CreateChatCustomBotReqBodyBuilder ) AvatarKey(avatarKey string) *CreateChatCustomBotReqBodyBuilder {
  builder.avatarKey = avatarKey
  builder.avatarKeyFlag = true
  return builder
}
func (builder * CreateChatCustomBotReqBodyBuilder ) Name(name string) *CreateChatCustomBotReqBodyBuilder {
  builder.name = name
  builder.nameFlag = true
  return builder
}
func (builder * CreateChatCustomBotReqBodyBuilder ) Description(description string) *CreateChatCustomBotReqBodyBuilder {
  builder.description = description
  builder.descriptionFlag = true
  return builder
}
func (builder * CreateChatCustomBotReqBodyBuilder ) AllowIps(allowIps []string) *CreateChatCustomBotReqBodyBuilder {
  builder.allowIps = allowIps
  builder.allowIpsFlag = true
  return builder
}
func (builder * CreateChatCustomBotReqBodyBuilder ) KeyWords(keyWords []string) *CreateChatCustomBotReqBodyBuilder {
  builder.keyWords = keyWords
  builder.keyWordsFlag = true
  return builder
}
func (builder * CreateChatCustomBotReqBodyBuilder ) SignatureStatus(signatureStatus bool) *CreateChatCustomBotReqBodyBuilder {
  builder.signatureStatus = signatureStatus
  builder.signatureStatusFlag = true
  return builder
}
func (builder * CreateChatCustomBotReqBodyBuilder ) Uuid(uuid int64) *CreateChatCustomBotReqBodyBuilder {
  builder.uuid = uuid
  builder.uuidFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * CreateChatCustomBotReqBodyBuilder ) Build() *CreateChatCustomBotReqBody {
   req := &CreateChatCustomBotReqBody{}
   if builder.chatIdFlag {
	  req.ChatId = &builder.chatId
	  

   }
   if builder.avatarKeyFlag {
	  req.AvatarKey = &builder.avatarKey
	  

   }
   if builder.nameFlag {
	  req.Name = &builder.name
	  

   }
   if builder.descriptionFlag {
	  req.Description = &builder.description
	  

   }
   if builder.allowIpsFlag {
	  req.AllowIps = builder.allowIps

   }
   if builder.keyWordsFlag {
	  req.KeyWords = builder.keyWords

   }
   if builder.signatureStatusFlag {
	  req.SignatureStatus = &builder.signatureStatus
	  

   }
   if builder.uuidFlag {
	  req.Uuid = &builder.uuid
	  

   }
   return req
}

/**上传文件path开始**/
type CreateChatCustomBotPathReqBodyBuilder struct {
	chatId  int64
	chatIdFlag  bool
	avatarKey  string
	avatarKeyFlag  bool
	name  string
	nameFlag  bool
	description  string
	descriptionFlag  bool
	allowIps  []string
	allowIpsFlag  bool
	keyWords  []string
	keyWordsFlag  bool
	signatureStatus  bool
	signatureStatusFlag  bool
	uuid  int64
	uuidFlag  bool
}

// 生成body的New构造器
func NewCreateChatCustomBotPathReqBodyBuilder() * CreateChatCustomBotPathReqBodyBuilder{
  builder := &CreateChatCustomBotPathReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * CreateChatCustomBotPathReqBodyBuilder ) ChatId(chatId int64) *CreateChatCustomBotPathReqBodyBuilder {
  builder.chatId = chatId
  builder.chatIdFlag = true
  return builder
}
func (builder * CreateChatCustomBotPathReqBodyBuilder ) AvatarKey(avatarKey string) *CreateChatCustomBotPathReqBodyBuilder {
  builder.avatarKey = avatarKey
  builder.avatarKeyFlag = true
  return builder
}
func (builder * CreateChatCustomBotPathReqBodyBuilder ) Name(name string) *CreateChatCustomBotPathReqBodyBuilder {
  builder.name = name
  builder.nameFlag = true
  return builder
}
func (builder * CreateChatCustomBotPathReqBodyBuilder ) Description(description string) *CreateChatCustomBotPathReqBodyBuilder {
  builder.description = description
  builder.descriptionFlag = true
  return builder
}
func (builder * CreateChatCustomBotPathReqBodyBuilder ) AllowIps(allowIps []string) *CreateChatCustomBotPathReqBodyBuilder {
  builder.allowIps = allowIps
  builder.allowIpsFlag = true
  return builder
}
func (builder * CreateChatCustomBotPathReqBodyBuilder ) KeyWords(keyWords []string) *CreateChatCustomBotPathReqBodyBuilder {
  builder.keyWords = keyWords
  builder.keyWordsFlag = true
  return builder
}
func (builder * CreateChatCustomBotPathReqBodyBuilder ) SignatureStatus(signatureStatus bool) *CreateChatCustomBotPathReqBodyBuilder {
  builder.signatureStatus = signatureStatus
  builder.signatureStatusFlag = true
  return builder
}
func (builder * CreateChatCustomBotPathReqBodyBuilder ) Uuid(uuid int64) *CreateChatCustomBotPathReqBodyBuilder {
  builder.uuid = uuid
  builder.uuidFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * CreateChatCustomBotPathReqBodyBuilder ) Build() (*CreateChatCustomBotReqBody, error) {
   req := &CreateChatCustomBotReqBody{}
   if builder.chatIdFlag {
	  req.ChatId = &builder.chatId
	  
   }
   if builder.avatarKeyFlag {
	  req.AvatarKey = &builder.avatarKey
	  
   }
   if builder.nameFlag {
	  req.Name = &builder.name
	  
   }
   if builder.descriptionFlag {
	  req.Description = &builder.description
	  
   }
   if builder.allowIpsFlag {
	   req.AllowIps = builder.allowIps
   }
   if builder.keyWordsFlag {
	   req.KeyWords = builder.keyWords
   }
   if builder.signatureStatusFlag {
	  req.SignatureStatus = &builder.signatureStatus
	  
   }
   if builder.uuidFlag {
	  req.Uuid = &builder.uuid
	  
   }
   return req, nil
}
/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type CreateChatCustomBotReqBuilder struct {
	body *CreateChatCustomBotReqBody
	bodyFlag bool

}

// 生成请求的New构造器
func NewCreateChatCustomBotReqBuilder() * CreateChatCustomBotReqBuilder{
   builder := &CreateChatCustomBotReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * CreateChatCustomBotReqBuilder) Body(body *CreateChatCustomBotReqBody) *CreateChatCustomBotReqBuilder  {
  builder.body = body
  builder.bodyFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * CreateChatCustomBotReqBuilder ) Build() *CreateChatCustomBotReq {
   req := &CreateChatCustomBotReq{}
   if builder.bodyFlag {
	  req.Body = builder.body

   }
   return req
}

type CreateChatCustomBotReqBody struct {
	ChatId  *int64 `json:"chat_id,omitempty,string"`
	AvatarKey  *string `json:"avatar_key,omitempty"`
	Name  *string `json:"name,omitempty"`
	Description  *string `json:"description,omitempty"`
	AllowIps  []string `json:"allow_ips,omitempty"`
	KeyWords  []string `json:"key_words,omitempty"`
	SignatureStatus  *bool `json:"signature_status,omitempty"`
	Uuid  *int64 `json:"uuid,omitempty,string"`
}

type CreateChatCustomBotReq struct {
	Body *CreateChatCustomBotReqBody `body:""`

}

type CreateChatCustomBotRespData struct {
	BotId  *int64 `json:"bot_id,omitempty,string"`
	ChatId  *int64 `json:"chat_id,omitempty,string"`
	AvatarKey  *string `json:"avatar_key,omitempty"`
	Name  *string `json:"name,omitempty"`
	Description  *string `json:"description,omitempty"`
	I18nNames  *I18nNames `json:"i18n_names,omitempty"`
	I18nDescriptions  *I18nNames `json:"i18n_descriptions,omitempty"`
	Webhook  *string `json:"webhook,omitempty"`
	AllowIps  []string `json:"allow_ips,omitempty"`
	KeyWords  []string `json:"key_words,omitempty"`
	SignatureStatus  *bool `json:"signature_status,omitempty"`
	Signature  *string `json:"signature,omitempty"`
	Enable  *bool `json:"enable,omitempty"`
	InvitorId  *int64 `json:"invitor_id,omitempty,string"`
	InvitorIdType  *string `json:"invitor_id_type,omitempty"`
	Version  *int64 `json:"version,omitempty,string"`
}

type CreateChatCustomBotResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *CreateChatCustomBotRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type DeleteChatCustomBotReqBuilder struct {
	botId  int64
	botIdFlag  bool

}

// 生成请求的New构造器
func NewDeleteChatCustomBotReqBuilder() * DeleteChatCustomBotReqBuilder{
   builder := &DeleteChatCustomBotReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * DeleteChatCustomBotReqBuilder) BotId(botId int64) *DeleteChatCustomBotReqBuilder  {
  builder.botId = botId
  builder.botIdFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * DeleteChatCustomBotReqBuilder ) Build() *DeleteChatCustomBotReq {
   req := &DeleteChatCustomBotReq{}
   if builder.botIdFlag {
	  req.BotId = builder.botId
   }
   return req
}


type DeleteChatCustomBotReq struct {
	BotId  int64 `path:"bot_id"`

}


type DeleteChatCustomBotResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}


/*1.4 生成请求的builder结构体*/
type GetChatCustomBotReqBuilder struct {
	botId  int64
	botIdFlag  bool

}

// 生成请求的New构造器
func NewGetChatCustomBotReqBuilder() * GetChatCustomBotReqBuilder{
   builder := &GetChatCustomBotReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * GetChatCustomBotReqBuilder) BotId(botId int64) *GetChatCustomBotReqBuilder  {
  builder.botId = botId
  builder.botIdFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * GetChatCustomBotReqBuilder ) Build() *GetChatCustomBotReq {
   req := &GetChatCustomBotReq{}
   if builder.botIdFlag {
	  req.BotId = builder.botId
   }
   return req
}


type GetChatCustomBotReq struct {
	BotId  int64 `path:"bot_id"`

}

type GetChatCustomBotRespData struct {
	BotId  *int64 `json:"bot_id,omitempty,string"`
	ChatId  *int64 `json:"chat_id,omitempty,string"`
	AvatarKey  *string `json:"avatar_key,omitempty"`
	Name  *string `json:"name,omitempty"`
	Description  *string `json:"description,omitempty"`
	I18nNames  *I18nNames `json:"i18n_names,omitempty"`
	I18nDescriptions  *I18nNames `json:"i18n_descriptions,omitempty"`
	Webhook  *string `json:"webhook,omitempty"`
	AllowIps  []string `json:"allow_ips,omitempty"`
	KeyWords  []string `json:"key_words,omitempty"`
	SignatureStatus  *bool `json:"signature_status,omitempty"`
	Signature  *string `json:"signature,omitempty"`
	Enable  *bool `json:"enable,omitempty"`
	InvitorId  *int64 `json:"invitor_id,omitempty,string"`
	InvitorIdType  *string `json:"invitor_id_type,omitempty"`
	Version  *int64 `json:"version,omitempty,string"`
}

type GetChatCustomBotResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *GetChatCustomBotRespData `json:"data"`
}

type PatchChatCustomBotReqBodyBuilder struct {
	avatarKey  string
	avatarKeyFlag  bool
	name  string
	nameFlag  bool
	description  string
	descriptionFlag  bool
	allowIps  []string
	allowIpsFlag  bool
	keyWords  []string
	keyWordsFlag  bool
	signatureStatus  bool
	signatureStatusFlag  bool
	changeSignature  bool
	changeSignatureFlag  bool
	enable  bool
	enableFlag  bool
}

// 生成body的New构造器
func NewPatchChatCustomBotReqBodyBuilder() * PatchChatCustomBotReqBodyBuilder{
  builder := &PatchChatCustomBotReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * PatchChatCustomBotReqBodyBuilder ) AvatarKey(avatarKey string) *PatchChatCustomBotReqBodyBuilder {
  builder.avatarKey = avatarKey
  builder.avatarKeyFlag = true
  return builder
}
func (builder * PatchChatCustomBotReqBodyBuilder ) Name(name string) *PatchChatCustomBotReqBodyBuilder {
  builder.name = name
  builder.nameFlag = true
  return builder
}
func (builder * PatchChatCustomBotReqBodyBuilder ) Description(description string) *PatchChatCustomBotReqBodyBuilder {
  builder.description = description
  builder.descriptionFlag = true
  return builder
}
func (builder * PatchChatCustomBotReqBodyBuilder ) AllowIps(allowIps []string) *PatchChatCustomBotReqBodyBuilder {
  builder.allowIps = allowIps
  builder.allowIpsFlag = true
  return builder
}
func (builder * PatchChatCustomBotReqBodyBuilder ) KeyWords(keyWords []string) *PatchChatCustomBotReqBodyBuilder {
  builder.keyWords = keyWords
  builder.keyWordsFlag = true
  return builder
}
func (builder * PatchChatCustomBotReqBodyBuilder ) SignatureStatus(signatureStatus bool) *PatchChatCustomBotReqBodyBuilder {
  builder.signatureStatus = signatureStatus
  builder.signatureStatusFlag = true
  return builder
}
func (builder * PatchChatCustomBotReqBodyBuilder ) ChangeSignature(changeSignature bool) *PatchChatCustomBotReqBodyBuilder {
  builder.changeSignature = changeSignature
  builder.changeSignatureFlag = true
  return builder
}
func (builder * PatchChatCustomBotReqBodyBuilder ) Enable(enable bool) *PatchChatCustomBotReqBodyBuilder {
  builder.enable = enable
  builder.enableFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * PatchChatCustomBotReqBodyBuilder ) Build() *PatchChatCustomBotReqBody {
   req := &PatchChatCustomBotReqBody{}
   if builder.avatarKeyFlag {
	  req.AvatarKey = &builder.avatarKey
	  

   }
   if builder.nameFlag {
	  req.Name = &builder.name
	  

   }
   if builder.descriptionFlag {
	  req.Description = &builder.description
	  

   }
   if builder.allowIpsFlag {
	  req.AllowIps = builder.allowIps

   }
   if builder.keyWordsFlag {
	  req.KeyWords = builder.keyWords

   }
   if builder.signatureStatusFlag {
	  req.SignatureStatus = &builder.signatureStatus
	  

   }
   if builder.changeSignatureFlag {
	  req.ChangeSignature = &builder.changeSignature
	  

   }
   if builder.enableFlag {
	  req.Enable = &builder.enable
	  

   }
   return req
}

/**上传文件path开始**/
type PatchChatCustomBotPathReqBodyBuilder struct {
	avatarKey  string
	avatarKeyFlag  bool
	name  string
	nameFlag  bool
	description  string
	descriptionFlag  bool
	allowIps  []string
	allowIpsFlag  bool
	keyWords  []string
	keyWordsFlag  bool
	signatureStatus  bool
	signatureStatusFlag  bool
	changeSignature  bool
	changeSignatureFlag  bool
	enable  bool
	enableFlag  bool
}

// 生成body的New构造器
func NewPatchChatCustomBotPathReqBodyBuilder() * PatchChatCustomBotPathReqBodyBuilder{
  builder := &PatchChatCustomBotPathReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * PatchChatCustomBotPathReqBodyBuilder ) AvatarKey(avatarKey string) *PatchChatCustomBotPathReqBodyBuilder {
  builder.avatarKey = avatarKey
  builder.avatarKeyFlag = true
  return builder
}
func (builder * PatchChatCustomBotPathReqBodyBuilder ) Name(name string) *PatchChatCustomBotPathReqBodyBuilder {
  builder.name = name
  builder.nameFlag = true
  return builder
}
func (builder * PatchChatCustomBotPathReqBodyBuilder ) Description(description string) *PatchChatCustomBotPathReqBodyBuilder {
  builder.description = description
  builder.descriptionFlag = true
  return builder
}
func (builder * PatchChatCustomBotPathReqBodyBuilder ) AllowIps(allowIps []string) *PatchChatCustomBotPathReqBodyBuilder {
  builder.allowIps = allowIps
  builder.allowIpsFlag = true
  return builder
}
func (builder * PatchChatCustomBotPathReqBodyBuilder ) KeyWords(keyWords []string) *PatchChatCustomBotPathReqBodyBuilder {
  builder.keyWords = keyWords
  builder.keyWordsFlag = true
  return builder
}
func (builder * PatchChatCustomBotPathReqBodyBuilder ) SignatureStatus(signatureStatus bool) *PatchChatCustomBotPathReqBodyBuilder {
  builder.signatureStatus = signatureStatus
  builder.signatureStatusFlag = true
  return builder
}
func (builder * PatchChatCustomBotPathReqBodyBuilder ) ChangeSignature(changeSignature bool) *PatchChatCustomBotPathReqBodyBuilder {
  builder.changeSignature = changeSignature
  builder.changeSignatureFlag = true
  return builder
}
func (builder * PatchChatCustomBotPathReqBodyBuilder ) Enable(enable bool) *PatchChatCustomBotPathReqBodyBuilder {
  builder.enable = enable
  builder.enableFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * PatchChatCustomBotPathReqBodyBuilder ) Build() (*PatchChatCustomBotReqBody, error) {
   req := &PatchChatCustomBotReqBody{}
   if builder.avatarKeyFlag {
	  req.AvatarKey = &builder.avatarKey
	  
   }
   if builder.nameFlag {
	  req.Name = &builder.name
	  
   }
   if builder.descriptionFlag {
	  req.Description = &builder.description
	  
   }
   if builder.allowIpsFlag {
	   req.AllowIps = builder.allowIps
   }
   if builder.keyWordsFlag {
	   req.KeyWords = builder.keyWords
   }
   if builder.signatureStatusFlag {
	  req.SignatureStatus = &builder.signatureStatus
	  
   }
   if builder.changeSignatureFlag {
	  req.ChangeSignature = &builder.changeSignature
	  
   }
   if builder.enableFlag {
	  req.Enable = &builder.enable
	  
   }
   return req, nil
}
/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type PatchChatCustomBotReqBuilder struct {
	botId  int64
	botIdFlag  bool
	body *PatchChatCustomBotReqBody
	bodyFlag bool

}

// 生成请求的New构造器
func NewPatchChatCustomBotReqBuilder() * PatchChatCustomBotReqBuilder{
   builder := &PatchChatCustomBotReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * PatchChatCustomBotReqBuilder) BotId(botId int64) *PatchChatCustomBotReqBuilder  {
  builder.botId = botId
  builder.botIdFlag = true
  return builder
}
func (builder * PatchChatCustomBotReqBuilder) Body(body *PatchChatCustomBotReqBody) *PatchChatCustomBotReqBuilder  {
  builder.body = body
  builder.bodyFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * PatchChatCustomBotReqBuilder ) Build() *PatchChatCustomBotReq {
   req := &PatchChatCustomBotReq{}
   if builder.botIdFlag {
	  req.BotId = builder.botId
   }
   if builder.bodyFlag {
	  req.Body = builder.body

   }
   return req
}

type PatchChatCustomBotReqBody struct {
	AvatarKey  *string `json:"avatar_key,omitempty"`
	Name  *string `json:"name,omitempty"`
	Description  *string `json:"description,omitempty"`
	AllowIps  []string `json:"allow_ips,omitempty"`
	KeyWords  []string `json:"key_words,omitempty"`
	SignatureStatus  *bool `json:"signature_status,omitempty"`
	ChangeSignature  *bool `json:"change_signature,omitempty"`
	Enable  *bool `json:"enable,omitempty"`
}

type PatchChatCustomBotReq struct {
	BotId  int64 `path:"bot_id"`
	Body *PatchChatCustomBotReqBody `body:""`

}


type PatchChatCustomBotResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

type CreateFileReqBodyBuilder struct {
	fileType  string
	fileTypeFlag  bool
	fileName  string
	fileNameFlag  bool
	duration  int
	durationFlag  bool
	file  io.Reader
	fileFlag  bool
}

// 生成body的New构造器
func NewCreateFileReqBodyBuilder() * CreateFileReqBodyBuilder{
  builder := &CreateFileReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * CreateFileReqBodyBuilder ) FileType(fileType string) *CreateFileReqBodyBuilder {
  builder.fileType = fileType
  builder.fileTypeFlag = true
  return builder
}
func (builder * CreateFileReqBodyBuilder ) FileName(fileName string) *CreateFileReqBodyBuilder {
  builder.fileName = fileName
  builder.fileNameFlag = true
  return builder
}
func (builder * CreateFileReqBodyBuilder ) Duration(duration int) *CreateFileReqBodyBuilder {
  builder.duration = duration
  builder.durationFlag = true
  return builder
}
func (builder * CreateFileReqBodyBuilder ) File(file io.Reader) *CreateFileReqBodyBuilder {
  builder.file = file
  builder.fileFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * CreateFileReqBodyBuilder ) Build() *CreateFileReqBody {
   req := &CreateFileReqBody{}
   if builder.fileTypeFlag {
	  req.FileType = &builder.fileType
	  

   }
   if builder.fileNameFlag {
	  req.FileName = &builder.fileName
	  

   }
   if builder.durationFlag {
	  req.Duration = &builder.duration
	  

   }
   if builder.fileFlag {
	  req.File = builder.file

   }
   return req
}

/**上传文件path开始**/
type CreateFilePathReqBodyBuilder struct {
	fileType  string
	fileTypeFlag  bool
	fileName  string
	fileNameFlag  bool
	duration  int
	durationFlag  bool
	filePath  string
	filePathFlag  bool
}

// 生成body的New构造器
func NewCreateFilePathReqBodyBuilder() * CreateFilePathReqBodyBuilder{
  builder := &CreateFilePathReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * CreateFilePathReqBodyBuilder ) FileType(fileType string) *CreateFilePathReqBodyBuilder {
  builder.fileType = fileType
  builder.fileTypeFlag = true
  return builder
}
func (builder * CreateFilePathReqBodyBuilder ) FileName(fileName string) *CreateFilePathReqBodyBuilder {
  builder.fileName = fileName
  builder.fileNameFlag = true
  return builder
}
func (builder * CreateFilePathReqBodyBuilder ) Duration(duration int) *CreateFilePathReqBodyBuilder {
  builder.duration = duration
  builder.durationFlag = true
  return builder
}
func (builder * CreateFilePathReqBodyBuilder ) FilePath(filePath string) *CreateFilePathReqBodyBuilder {
  builder.filePath = filePath
  builder.filePathFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * CreateFilePathReqBodyBuilder ) Build() (*CreateFileReqBody, error) {
   req := &CreateFileReqBody{}
   if builder.fileTypeFlag {
	  req.FileType = &builder.fileType
	  
   }
   if builder.fileNameFlag {
	  req.FileName = &builder.fileName
	  
   }
   if builder.durationFlag {
	  req.Duration = &builder.duration
	  
   }
   if builder.filePathFlag {
	  data, err := core.File2Bytes(builder.filePath)
	  if err != nil {
		return nil, err
	  }
	  req.File = bytes.NewBuffer(data)
   }
   return req, nil
}
/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type CreateFileReqBuilder struct {
	body *CreateFileReqBody
	bodyFlag bool

}

// 生成请求的New构造器
func NewCreateFileReqBuilder() * CreateFileReqBuilder{
   builder := &CreateFileReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * CreateFileReqBuilder) Body(body *CreateFileReqBody) *CreateFileReqBuilder  {
  builder.body = body
  builder.bodyFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * CreateFileReqBuilder ) Build() *CreateFileReq {
   req := &CreateFileReq{}
   if builder.bodyFlag {
	  req.Body = builder.body

   }
   return req
}

type CreateFileReqBody struct {
	FileType  *string `json:"file_type,omitempty"`
	FileName  *string `json:"file_name,omitempty"`
	Duration  *int `json:"duration,omitempty"`
	File  io.Reader `json:"file,omitempty"`
}

type CreateFileReq struct {
	Body *CreateFileReqBody `body:""`

}

type CreateFileRespData struct {
	FileKey  *string `json:"file_key,omitempty"`
}

type CreateFileResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *CreateFileRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type GetFileReqBuilder struct {
	fileKey  string
	fileKeyFlag  bool

}

// 生成请求的New构造器
func NewGetFileReqBuilder() * GetFileReqBuilder{
   builder := &GetFileReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * GetFileReqBuilder) FileKey(fileKey string) *GetFileReqBuilder  {
  builder.fileKey = fileKey
  builder.fileKeyFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * GetFileReqBuilder ) Build() *GetFileReq {
   req := &GetFileReq{}
   if builder.fileKeyFlag {
	  req.FileKey = builder.fileKey
   }
   return req
}


type GetFileReq struct {
	FileKey  string `path:"file_key"`

}


type GetFileResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	File	 io.Reader `json:"-"`
	FileName string	`json:"-"`
}
/**下载api,生成WriteFile方法**/
func (resp * GetFileResp) WriteFile(fileName string ) error {
	bs, err := ioutil.ReadAll(resp.File)
	if err != nil {
		return err
	}

	err = ioutil.WriteFile(fileName, bs, 0666)
	if err != nil {
		return err
	}

	return nil
}


/*1.4 生成请求的builder结构体*/
type ImDepthDataImUsageDataReqBuilder struct {
	pDate  string
	pDateFlag  bool
	departmentId  string
	departmentIdFlag  bool

}

// 生成请求的New构造器
func NewImDepthDataImUsageDataReqBuilder() * ImDepthDataImUsageDataReqBuilder{
   builder := &ImDepthDataImUsageDataReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * ImDepthDataImUsageDataReqBuilder) PDate(pDate string) *ImDepthDataImUsageDataReqBuilder  {
  builder.pDate = pDate
  builder.pDateFlag = true
  return builder
}
func (builder * ImDepthDataImUsageDataReqBuilder) DepartmentId(departmentId string) *ImDepthDataImUsageDataReqBuilder  {
  builder.departmentId = departmentId
  builder.departmentIdFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * ImDepthDataImUsageDataReqBuilder ) Build() *ImDepthDataImUsageDataReq {
   req := &ImDepthDataImUsageDataReq{}
   if builder.pDateFlag {
	  req.PDate = &builder.pDate
   }
   if builder.departmentIdFlag {
	  req.DepartmentId = &builder.departmentId
   }
   return req
}


type ImDepthDataImUsageDataReq struct {
	PDate  *string `query:"p_date"`
	DepartmentId  *string `query:"department_id"`

}

type ImDepthDataImUsageDataRespData struct {
	Items  []*ImDepthData `json:"items,omitempty"`
}

type ImDepthDataImUsageDataResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *ImDepthDataImUsageDataRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type MsgProcessDataImUsageDataReqBuilder struct {
	pDate  string
	pDateFlag  bool
	departmentId  string
	departmentIdFlag  bool

}

// 生成请求的New构造器
func NewMsgProcessDataImUsageDataReqBuilder() * MsgProcessDataImUsageDataReqBuilder{
   builder := &MsgProcessDataImUsageDataReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * MsgProcessDataImUsageDataReqBuilder) PDate(pDate string) *MsgProcessDataImUsageDataReqBuilder  {
  builder.pDate = pDate
  builder.pDateFlag = true
  return builder
}
func (builder * MsgProcessDataImUsageDataReqBuilder) DepartmentId(departmentId string) *MsgProcessDataImUsageDataReqBuilder  {
  builder.departmentId = departmentId
  builder.departmentIdFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * MsgProcessDataImUsageDataReqBuilder ) Build() *MsgProcessDataImUsageDataReq {
   req := &MsgProcessDataImUsageDataReq{}
   if builder.pDateFlag {
	  req.PDate = &builder.pDate
   }
   if builder.departmentIdFlag {
	  req.DepartmentId = &builder.departmentId
   }
   return req
}


type MsgProcessDataImUsageDataReq struct {
	PDate  *string `query:"p_date"`
	DepartmentId  *string `query:"department_id"`

}

type MsgProcessDataImUsageDataRespData struct {
	Items  []*MsgProcessData `json:"items,omitempty"`
}

type MsgProcessDataImUsageDataResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *MsgProcessDataImUsageDataRespData `json:"data"`
}

type CreateImageReqBodyBuilder struct {
	imageType  string
	imageTypeFlag  bool
	image  io.Reader
	imageFlag  bool
}

// 生成body的New构造器
func NewCreateImageReqBodyBuilder() * CreateImageReqBodyBuilder{
  builder := &CreateImageReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * CreateImageReqBodyBuilder ) ImageType(imageType string) *CreateImageReqBodyBuilder {
  builder.imageType = imageType
  builder.imageTypeFlag = true
  return builder
}
func (builder * CreateImageReqBodyBuilder ) Image(image io.Reader) *CreateImageReqBodyBuilder {
  builder.image = image
  builder.imageFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * CreateImageReqBodyBuilder ) Build() *CreateImageReqBody {
   req := &CreateImageReqBody{}
   if builder.imageTypeFlag {
	  req.ImageType = &builder.imageType
	  

   }
   if builder.imageFlag {
	  req.Image = builder.image

   }
   return req
}

/**上传文件path开始**/
type CreateImagePathReqBodyBuilder struct {
	imageType  string
	imageTypeFlag  bool
	imagePath  string
	imagePathFlag  bool
}

// 生成body的New构造器
func NewCreateImagePathReqBodyBuilder() * CreateImagePathReqBodyBuilder{
  builder := &CreateImagePathReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * CreateImagePathReqBodyBuilder ) ImageType(imageType string) *CreateImagePathReqBodyBuilder {
  builder.imageType = imageType
  builder.imageTypeFlag = true
  return builder
}
func (builder * CreateImagePathReqBodyBuilder ) ImagePath(imagePath string) *CreateImagePathReqBodyBuilder {
  builder.imagePath = imagePath
  builder.imagePathFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * CreateImagePathReqBodyBuilder ) Build() (*CreateImageReqBody, error) {
   req := &CreateImageReqBody{}
   if builder.imageTypeFlag {
	  req.ImageType = &builder.imageType
	  
   }
   if builder.imagePathFlag {
	  data, err := core.File2Bytes(builder.imagePath)
	  if err != nil {
		return nil, err
	  }
	  req.Image = bytes.NewBuffer(data)
   }
   return req, nil
}
/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type CreateImageReqBuilder struct {
	body *CreateImageReqBody
	bodyFlag bool

}

// 生成请求的New构造器
func NewCreateImageReqBuilder() * CreateImageReqBuilder{
   builder := &CreateImageReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * CreateImageReqBuilder) Body(body *CreateImageReqBody) *CreateImageReqBuilder  {
  builder.body = body
  builder.bodyFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * CreateImageReqBuilder ) Build() *CreateImageReq {
   req := &CreateImageReq{}
   if builder.bodyFlag {
	  req.Body = builder.body

   }
   return req
}

type CreateImageReqBody struct {
	ImageType  *string `json:"image_type,omitempty"`
	Image  io.Reader `json:"image,omitempty"`
}

type CreateImageReq struct {
	Body *CreateImageReqBody `body:""`

}

type CreateImageRespData struct {
	ImageKey  *string `json:"image_key,omitempty"`
}

type CreateImageResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *CreateImageRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type GetImageReqBuilder struct {
	imageKey  string
	imageKeyFlag  bool

}

// 生成请求的New构造器
func NewGetImageReqBuilder() * GetImageReqBuilder{
   builder := &GetImageReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * GetImageReqBuilder) ImageKey(imageKey string) *GetImageReqBuilder  {
  builder.imageKey = imageKey
  builder.imageKeyFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * GetImageReqBuilder ) Build() *GetImageReq {
   req := &GetImageReq{}
   if builder.imageKeyFlag {
	  req.ImageKey = builder.imageKey
   }
   return req
}


type GetImageReq struct {
	ImageKey  string `path:"image_key"`

}


type GetImageResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	File	 io.Reader `json:"-"`
	FileName string	`json:"-"`
}
/**下载api,生成WriteFile方法**/
func (resp * GetImageResp) WriteFile(fileName string ) error {
	bs, err := ioutil.ReadAll(resp.File)
	if err != nil {
		return err
	}

	err = ioutil.WriteFile(fileName, bs, 0666)
	if err != nil {
		return err
	}

	return nil
}

type CreateMessageReqBodyBuilder struct {
	receiveId  string
	receiveIdFlag  bool
	content  string
	contentFlag  bool
	msgType  string
	msgTypeFlag  bool
}

// 生成body的New构造器
func NewCreateMessageReqBodyBuilder() * CreateMessageReqBodyBuilder{
  builder := &CreateMessageReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * CreateMessageReqBodyBuilder ) ReceiveId(receiveId string) *CreateMessageReqBodyBuilder {
  builder.receiveId = receiveId
  builder.receiveIdFlag = true
  return builder
}
func (builder * CreateMessageReqBodyBuilder ) Content(content string) *CreateMessageReqBodyBuilder {
  builder.content = content
  builder.contentFlag = true
  return builder
}
func (builder * CreateMessageReqBodyBuilder ) MsgType(msgType string) *CreateMessageReqBodyBuilder {
  builder.msgType = msgType
  builder.msgTypeFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * CreateMessageReqBodyBuilder ) Build() *CreateMessageReqBody {
   req := &CreateMessageReqBody{}
   if builder.receiveIdFlag {
	  req.ReceiveId = &builder.receiveId
	  

   }
   if builder.contentFlag {
	  req.Content = &builder.content
	  

   }
   if builder.msgTypeFlag {
	  req.MsgType = &builder.msgType
	  

   }
   return req
}

/**上传文件path开始**/
type CreateMessagePathReqBodyBuilder struct {
	receiveId  string
	receiveIdFlag  bool
	content  string
	contentFlag  bool
	msgType  string
	msgTypeFlag  bool
}

// 生成body的New构造器
func NewCreateMessagePathReqBodyBuilder() * CreateMessagePathReqBodyBuilder{
  builder := &CreateMessagePathReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * CreateMessagePathReqBodyBuilder ) ReceiveId(receiveId string) *CreateMessagePathReqBodyBuilder {
  builder.receiveId = receiveId
  builder.receiveIdFlag = true
  return builder
}
func (builder * CreateMessagePathReqBodyBuilder ) Content(content string) *CreateMessagePathReqBodyBuilder {
  builder.content = content
  builder.contentFlag = true
  return builder
}
func (builder * CreateMessagePathReqBodyBuilder ) MsgType(msgType string) *CreateMessagePathReqBodyBuilder {
  builder.msgType = msgType
  builder.msgTypeFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * CreateMessagePathReqBodyBuilder ) Build() (*CreateMessageReqBody, error) {
   req := &CreateMessageReqBody{}
   if builder.receiveIdFlag {
	  req.ReceiveId = &builder.receiveId
	  
   }
   if builder.contentFlag {
	  req.Content = &builder.content
	  
   }
   if builder.msgTypeFlag {
	  req.MsgType = &builder.msgType
	  
   }
   return req, nil
}
/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type CreateMessageReqBuilder struct {
	receiveIdType  string
	receiveIdTypeFlag  bool
	body *CreateMessageReqBody
	bodyFlag bool

}

// 生成请求的New构造器
func NewCreateMessageReqBuilder() * CreateMessageReqBuilder{
   builder := &CreateMessageReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * CreateMessageReqBuilder) ReceiveIdType(receiveIdType string) *CreateMessageReqBuilder  {
  builder.receiveIdType = receiveIdType
  builder.receiveIdTypeFlag = true
  return builder
}
func (builder * CreateMessageReqBuilder) Body(body *CreateMessageReqBody) *CreateMessageReqBuilder  {
  builder.body = body
  builder.bodyFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * CreateMessageReqBuilder ) Build() *CreateMessageReq {
   req := &CreateMessageReq{}
   if builder.receiveIdTypeFlag {
	  req.ReceiveIdType = &builder.receiveIdType
   }
   if builder.bodyFlag {
	  req.Body = builder.body

   }
   return req
}

type CreateMessageReqBody struct {
	ReceiveId  *string `json:"receive_id,omitempty"`
	Content  *string `json:"content,omitempty"`
	MsgType  *string `json:"msg_type,omitempty"`
}

type CreateMessageReq struct {
	ReceiveIdType  *string `query:"receive_id_type"`
	Body *CreateMessageReqBody `body:""`

}

type CreateMessageRespData struct {
	MessageId  *string `json:"message_id,omitempty"`
	RootId  *string `json:"root_id,omitempty"`
	ParentId  *string `json:"parent_id,omitempty"`
	MsgType  *string `json:"msg_type,omitempty"`
	CreateTime  *int64 `json:"create_time,omitempty,string"`
	UpdateTime  *int64 `json:"update_time,omitempty,string"`
	Deleted  *bool `json:"deleted,omitempty"`
	Updated  *bool `json:"updated,omitempty"`
	ChatId  *string `json:"chat_id,omitempty"`
	Sender  *Sender `json:"sender,omitempty"`
	Body  *MessageBody `json:"body,omitempty"`
	Mentions  []*Mention `json:"mentions,omitempty"`
	UpperMessageId  *string `json:"upper_message_id,omitempty"`
}

type CreateMessageResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *CreateMessageRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type DeleteMessageReqBuilder struct {
	messageId  string
	messageIdFlag  bool

}

// 生成请求的New构造器
func NewDeleteMessageReqBuilder() * DeleteMessageReqBuilder{
   builder := &DeleteMessageReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * DeleteMessageReqBuilder) MessageId(messageId string) *DeleteMessageReqBuilder  {
  builder.messageId = messageId
  builder.messageIdFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * DeleteMessageReqBuilder ) Build() *DeleteMessageReq {
   req := &DeleteMessageReq{}
   if builder.messageIdFlag {
	  req.MessageId = builder.messageId
   }
   return req
}


type DeleteMessageReq struct {
	MessageId  string `path:"message_id"`

}


type DeleteMessageResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}


/*1.4 生成请求的builder结构体*/
type GetMessageReqBuilder struct {
	messageId  string
	messageIdFlag  bool

}

// 生成请求的New构造器
func NewGetMessageReqBuilder() * GetMessageReqBuilder{
   builder := &GetMessageReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * GetMessageReqBuilder) MessageId(messageId string) *GetMessageReqBuilder  {
  builder.messageId = messageId
  builder.messageIdFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * GetMessageReqBuilder ) Build() *GetMessageReq {
   req := &GetMessageReq{}
   if builder.messageIdFlag {
	  req.MessageId = builder.messageId
   }
   return req
}


type GetMessageReq struct {
	MessageId  string `path:"message_id"`

}

type GetMessageRespData struct {
	Items  []*Message `json:"items,omitempty"`
}

type GetMessageResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *GetMessageRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type ListMessageReqBuilder struct {
	containerIdType  string
	containerIdTypeFlag  bool
	containerId  string
	containerIdFlag  bool
	startTime  string
	startTimeFlag  bool
	endTime  string
	endTimeFlag  bool
	pageToken  string
	pageTokenFlag  bool
	pageSize  int
	pageSizeFlag  bool
	limit int

}

// 生成请求的New构造器
func NewListMessageReqBuilder() * ListMessageReqBuilder{
   builder := &ListMessageReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * ListMessageReqBuilder) Limit(limit int ) *ListMessageReqBuilder  {
  builder.limit = limit
  return builder
}
func (builder * ListMessageReqBuilder) ContainerIdType(containerIdType string) *ListMessageReqBuilder  {
  builder.containerIdType = containerIdType
  builder.containerIdTypeFlag = true
  return builder
}
func (builder * ListMessageReqBuilder) ContainerId(containerId string) *ListMessageReqBuilder  {
  builder.containerId = containerId
  builder.containerIdFlag = true
  return builder
}
func (builder * ListMessageReqBuilder) StartTime(startTime string) *ListMessageReqBuilder  {
  builder.startTime = startTime
  builder.startTimeFlag = true
  return builder
}
func (builder * ListMessageReqBuilder) EndTime(endTime string) *ListMessageReqBuilder  {
  builder.endTime = endTime
  builder.endTimeFlag = true
  return builder
}
func (builder * ListMessageReqBuilder) PageToken(pageToken string) *ListMessageReqBuilder  {
  builder.pageToken = pageToken
  builder.pageTokenFlag = true
  return builder
}
func (builder * ListMessageReqBuilder) PageSize(pageSize int) *ListMessageReqBuilder  {
  builder.pageSize = pageSize
  builder.pageSizeFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * ListMessageReqBuilder ) Build() *ListMessageReq {
   req := &ListMessageReq{}
   req.Limit = builder.limit
   if builder.containerIdTypeFlag {
	  req.ContainerIdType = &builder.containerIdType
   }
   if builder.containerIdFlag {
	  req.ContainerId = &builder.containerId
   }
   if builder.startTimeFlag {
	  req.StartTime = &builder.startTime
   }
   if builder.endTimeFlag {
	  req.EndTime = &builder.endTime
   }
   if builder.pageTokenFlag {
	  req.PageToken = &builder.pageToken
   }
   if builder.pageSizeFlag {
	  req.PageSize = &builder.pageSize
   }
   return req
}


type ListMessageReq struct {
	ContainerIdType  *string `query:"container_id_type"`
	ContainerId  *string `query:"container_id"`
	StartTime  *string `query:"start_time"`
	EndTime  *string `query:"end_time"`
	PageToken  *string `query:"page_token"`
	PageSize  *int `query:"page_size"`
	Limit int

}

type ListMessageRespData struct {
	HasMore  *bool `json:"has_more,omitempty"`
	PageToken  *string `json:"page_token,omitempty"`
	Items  []*Message `json:"items,omitempty"`
}

type ListMessageResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *ListMessageRespData `json:"data"`
}

type PatchMessageReqBodyBuilder struct {
	content  string
	contentFlag  bool
}

// 生成body的New构造器
func NewPatchMessageReqBodyBuilder() * PatchMessageReqBodyBuilder{
  builder := &PatchMessageReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * PatchMessageReqBodyBuilder ) Content(content string) *PatchMessageReqBodyBuilder {
  builder.content = content
  builder.contentFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * PatchMessageReqBodyBuilder ) Build() *PatchMessageReqBody {
   req := &PatchMessageReqBody{}
   if builder.contentFlag {
	  req.Content = &builder.content
	  

   }
   return req
}

/**上传文件path开始**/
type PatchMessagePathReqBodyBuilder struct {
	content  string
	contentFlag  bool
}

// 生成body的New构造器
func NewPatchMessagePathReqBodyBuilder() * PatchMessagePathReqBodyBuilder{
  builder := &PatchMessagePathReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * PatchMessagePathReqBodyBuilder ) Content(content string) *PatchMessagePathReqBodyBuilder {
  builder.content = content
  builder.contentFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * PatchMessagePathReqBodyBuilder ) Build() (*PatchMessageReqBody, error) {
   req := &PatchMessageReqBody{}
   if builder.contentFlag {
	  req.Content = &builder.content
	  
   }
   return req, nil
}
/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type PatchMessageReqBuilder struct {
	messageId  string
	messageIdFlag  bool
	body *PatchMessageReqBody
	bodyFlag bool

}

// 生成请求的New构造器
func NewPatchMessageReqBuilder() * PatchMessageReqBuilder{
   builder := &PatchMessageReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * PatchMessageReqBuilder) MessageId(messageId string) *PatchMessageReqBuilder  {
  builder.messageId = messageId
  builder.messageIdFlag = true
  return builder
}
func (builder * PatchMessageReqBuilder) Body(body *PatchMessageReqBody) *PatchMessageReqBuilder  {
  builder.body = body
  builder.bodyFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * PatchMessageReqBuilder ) Build() *PatchMessageReq {
   req := &PatchMessageReq{}
   if builder.messageIdFlag {
	  req.MessageId = builder.messageId
   }
   if builder.bodyFlag {
	  req.Body = builder.body

   }
   return req
}

type PatchMessageReqBody struct {
	Content  *string `json:"content,omitempty"`
}

type PatchMessageReq struct {
	MessageId  string `path:"message_id"`
	Body *PatchMessageReqBody `body:""`

}


type PatchMessageResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}


/*1.4 生成请求的builder结构体*/
type ReadUsersMessageReqBuilder struct {
	messageId  string
	messageIdFlag  bool
	userIdType  string
	userIdTypeFlag  bool
	pageSize  int
	pageSizeFlag  bool
	pageToken  string
	pageTokenFlag  bool

}

// 生成请求的New构造器
func NewReadUsersMessageReqBuilder() * ReadUsersMessageReqBuilder{
   builder := &ReadUsersMessageReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * ReadUsersMessageReqBuilder) MessageId(messageId string) *ReadUsersMessageReqBuilder  {
  builder.messageId = messageId
  builder.messageIdFlag = true
  return builder
}
func (builder * ReadUsersMessageReqBuilder) UserIdType(userIdType string) *ReadUsersMessageReqBuilder  {
  builder.userIdType = userIdType
  builder.userIdTypeFlag = true
  return builder
}
func (builder * ReadUsersMessageReqBuilder) PageSize(pageSize int) *ReadUsersMessageReqBuilder  {
  builder.pageSize = pageSize
  builder.pageSizeFlag = true
  return builder
}
func (builder * ReadUsersMessageReqBuilder) PageToken(pageToken string) *ReadUsersMessageReqBuilder  {
  builder.pageToken = pageToken
  builder.pageTokenFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * ReadUsersMessageReqBuilder ) Build() *ReadUsersMessageReq {
   req := &ReadUsersMessageReq{}
   if builder.messageIdFlag {
	  req.MessageId = builder.messageId
   }
   if builder.userIdTypeFlag {
	  req.UserIdType = &builder.userIdType
   }
   if builder.pageSizeFlag {
	  req.PageSize = &builder.pageSize
   }
   if builder.pageTokenFlag {
	  req.PageToken = &builder.pageToken
   }
   return req
}


type ReadUsersMessageReq struct {
	MessageId  string `path:"message_id"`
	UserIdType  *string `query:"user_id_type"`
	PageSize  *int `query:"page_size"`
	PageToken  *string `query:"page_token"`

}

type ReadUsersMessageRespData struct {
	Items  []*ReadUser `json:"items,omitempty"`
	HasMore  *bool `json:"has_more,omitempty"`
	PageToken  *string `json:"page_token,omitempty"`
}

type ReadUsersMessageResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *ReadUsersMessageRespData `json:"data"`
}

type ReplyMessageReqBodyBuilder struct {
	content  string
	contentFlag  bool
	msgType  string
	msgTypeFlag  bool
}

// 生成body的New构造器
func NewReplyMessageReqBodyBuilder() * ReplyMessageReqBodyBuilder{
  builder := &ReplyMessageReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * ReplyMessageReqBodyBuilder ) Content(content string) *ReplyMessageReqBodyBuilder {
  builder.content = content
  builder.contentFlag = true
  return builder
}
func (builder * ReplyMessageReqBodyBuilder ) MsgType(msgType string) *ReplyMessageReqBodyBuilder {
  builder.msgType = msgType
  builder.msgTypeFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * ReplyMessageReqBodyBuilder ) Build() *ReplyMessageReqBody {
   req := &ReplyMessageReqBody{}
   if builder.contentFlag {
	  req.Content = &builder.content
	  

   }
   if builder.msgTypeFlag {
	  req.MsgType = &builder.msgType
	  

   }
   return req
}

/**上传文件path开始**/
type ReplyMessagePathReqBodyBuilder struct {
	content  string
	contentFlag  bool
	msgType  string
	msgTypeFlag  bool
}

// 生成body的New构造器
func NewReplyMessagePathReqBodyBuilder() * ReplyMessagePathReqBodyBuilder{
  builder := &ReplyMessagePathReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * ReplyMessagePathReqBodyBuilder ) Content(content string) *ReplyMessagePathReqBodyBuilder {
  builder.content = content
  builder.contentFlag = true
  return builder
}
func (builder * ReplyMessagePathReqBodyBuilder ) MsgType(msgType string) *ReplyMessagePathReqBodyBuilder {
  builder.msgType = msgType
  builder.msgTypeFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * ReplyMessagePathReqBodyBuilder ) Build() (*ReplyMessageReqBody, error) {
   req := &ReplyMessageReqBody{}
   if builder.contentFlag {
	  req.Content = &builder.content
	  
   }
   if builder.msgTypeFlag {
	  req.MsgType = &builder.msgType
	  
   }
   return req, nil
}
/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type ReplyMessageReqBuilder struct {
	messageId  string
	messageIdFlag  bool
	body *ReplyMessageReqBody
	bodyFlag bool

}

// 生成请求的New构造器
func NewReplyMessageReqBuilder() * ReplyMessageReqBuilder{
   builder := &ReplyMessageReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * ReplyMessageReqBuilder) MessageId(messageId string) *ReplyMessageReqBuilder  {
  builder.messageId = messageId
  builder.messageIdFlag = true
  return builder
}
func (builder * ReplyMessageReqBuilder) Body(body *ReplyMessageReqBody) *ReplyMessageReqBuilder  {
  builder.body = body
  builder.bodyFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * ReplyMessageReqBuilder ) Build() *ReplyMessageReq {
   req := &ReplyMessageReq{}
   if builder.messageIdFlag {
	  req.MessageId = builder.messageId
   }
   if builder.bodyFlag {
	  req.Body = builder.body

   }
   return req
}

type ReplyMessageReqBody struct {
	Content  *string `json:"content,omitempty"`
	MsgType  *string `json:"msg_type,omitempty"`
}

type ReplyMessageReq struct {
	MessageId  string `path:"message_id"`
	Body *ReplyMessageReqBody `body:""`

}

type ReplyMessageRespData struct {
	MessageId  *string `json:"message_id,omitempty"`
	RootId  *string `json:"root_id,omitempty"`
	ParentId  *string `json:"parent_id,omitempty"`
	MsgType  *string `json:"msg_type,omitempty"`
	CreateTime  *int64 `json:"create_time,omitempty,string"`
	UpdateTime  *int64 `json:"update_time,omitempty,string"`
	Deleted  *bool `json:"deleted,omitempty"`
	Updated  *bool `json:"updated,omitempty"`
	ChatId  *string `json:"chat_id,omitempty"`
	Sender  *Sender `json:"sender,omitempty"`
	Body  *MessageBody `json:"body,omitempty"`
	Mentions  []*Mention `json:"mentions,omitempty"`
	UpperMessageId  *string `json:"upper_message_id,omitempty"`
}

type ReplyMessageResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *ReplyMessageRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type UrgentAppMessageReqBuilder struct {
	messageId  string
	messageIdFlag  bool
	userIdType  string
	userIdTypeFlag  bool
	urgentReceivers *UrgentReceivers
	urgentReceiversFlag bool

}

// 生成请求的New构造器
func NewUrgentAppMessageReqBuilder() * UrgentAppMessageReqBuilder{
   builder := &UrgentAppMessageReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * UrgentAppMessageReqBuilder) MessageId(messageId string) *UrgentAppMessageReqBuilder  {
  builder.messageId = messageId
  builder.messageIdFlag = true
  return builder
}
func (builder * UrgentAppMessageReqBuilder) UserIdType(userIdType string) *UrgentAppMessageReqBuilder  {
  builder.userIdType = userIdType
  builder.userIdTypeFlag = true
  return builder
}
func (builder * UrgentAppMessageReqBuilder) UrgentReceivers(urgentReceivers *UrgentReceivers) *UrgentAppMessageReqBuilder  {
  builder.urgentReceivers = urgentReceivers
  builder.urgentReceiversFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * UrgentAppMessageReqBuilder ) Build() *UrgentAppMessageReq {
   req := &UrgentAppMessageReq{}
   if builder.messageIdFlag {
	  req.MessageId = builder.messageId
   }
   if builder.userIdTypeFlag {
	  req.UserIdType = &builder.userIdType
   }
   return req
}


type UrgentAppMessageReq struct {
	MessageId  string `path:"message_id"`
	UserIdType  *string `query:"user_id_type"`
	UrgentReceivers *UrgentReceivers `body:""`

}

type UrgentAppMessageRespData struct {
	InvalidUserIdList  []string `json:"invalid_user_id_list,omitempty"`
}

type UrgentAppMessageResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *UrgentAppMessageRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type UrgentPhoneMessageReqBuilder struct {
	messageId  string
	messageIdFlag  bool
	userIdType  string
	userIdTypeFlag  bool
	urgentReceivers *UrgentReceivers
	urgentReceiversFlag bool

}

// 生成请求的New构造器
func NewUrgentPhoneMessageReqBuilder() * UrgentPhoneMessageReqBuilder{
   builder := &UrgentPhoneMessageReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * UrgentPhoneMessageReqBuilder) MessageId(messageId string) *UrgentPhoneMessageReqBuilder  {
  builder.messageId = messageId
  builder.messageIdFlag = true
  return builder
}
func (builder * UrgentPhoneMessageReqBuilder) UserIdType(userIdType string) *UrgentPhoneMessageReqBuilder  {
  builder.userIdType = userIdType
  builder.userIdTypeFlag = true
  return builder
}
func (builder * UrgentPhoneMessageReqBuilder) UrgentReceivers(urgentReceivers *UrgentReceivers) *UrgentPhoneMessageReqBuilder  {
  builder.urgentReceivers = urgentReceivers
  builder.urgentReceiversFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * UrgentPhoneMessageReqBuilder ) Build() *UrgentPhoneMessageReq {
   req := &UrgentPhoneMessageReq{}
   if builder.messageIdFlag {
	  req.MessageId = builder.messageId
   }
   if builder.userIdTypeFlag {
	  req.UserIdType = &builder.userIdType
   }
   return req
}


type UrgentPhoneMessageReq struct {
	MessageId  string `path:"message_id"`
	UserIdType  *string `query:"user_id_type"`
	UrgentReceivers *UrgentReceivers `body:""`

}

type UrgentPhoneMessageRespData struct {
	InvalidUserIdList  []string `json:"invalid_user_id_list,omitempty"`
}

type UrgentPhoneMessageResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *UrgentPhoneMessageRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type UrgentReadUsersMessageReqBuilder struct {
	messageId  string
	messageIdFlag  bool
	userIdType  string
	userIdTypeFlag  bool
	pageSize  int
	pageSizeFlag  bool
	pageToken  string
	pageTokenFlag  bool

}

// 生成请求的New构造器
func NewUrgentReadUsersMessageReqBuilder() * UrgentReadUsersMessageReqBuilder{
   builder := &UrgentReadUsersMessageReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * UrgentReadUsersMessageReqBuilder) MessageId(messageId string) *UrgentReadUsersMessageReqBuilder  {
  builder.messageId = messageId
  builder.messageIdFlag = true
  return builder
}
func (builder * UrgentReadUsersMessageReqBuilder) UserIdType(userIdType string) *UrgentReadUsersMessageReqBuilder  {
  builder.userIdType = userIdType
  builder.userIdTypeFlag = true
  return builder
}
func (builder * UrgentReadUsersMessageReqBuilder) PageSize(pageSize int) *UrgentReadUsersMessageReqBuilder  {
  builder.pageSize = pageSize
  builder.pageSizeFlag = true
  return builder
}
func (builder * UrgentReadUsersMessageReqBuilder) PageToken(pageToken string) *UrgentReadUsersMessageReqBuilder  {
  builder.pageToken = pageToken
  builder.pageTokenFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * UrgentReadUsersMessageReqBuilder ) Build() *UrgentReadUsersMessageReq {
   req := &UrgentReadUsersMessageReq{}
   if builder.messageIdFlag {
	  req.MessageId = builder.messageId
   }
   if builder.userIdTypeFlag {
	  req.UserIdType = &builder.userIdType
   }
   if builder.pageSizeFlag {
	  req.PageSize = &builder.pageSize
   }
   if builder.pageTokenFlag {
	  req.PageToken = &builder.pageToken
   }
   return req
}


type UrgentReadUsersMessageReq struct {
	MessageId  string `path:"message_id"`
	UserIdType  *string `query:"user_id_type"`
	PageSize  *int `query:"page_size"`
	PageToken  *string `query:"page_token"`

}

type UrgentReadUsersMessageRespData struct {
	Items  []*ReadUser `json:"items,omitempty"`
	HasMore  *bool `json:"has_more,omitempty"`
	PageToken  *string `json:"page_token,omitempty"`
}

type UrgentReadUsersMessageResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *UrgentReadUsersMessageRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type UrgentSmsMessageReqBuilder struct {
	messageId  string
	messageIdFlag  bool
	userIdType  string
	userIdTypeFlag  bool
	urgentReceivers *UrgentReceivers
	urgentReceiversFlag bool

}

// 生成请求的New构造器
func NewUrgentSmsMessageReqBuilder() * UrgentSmsMessageReqBuilder{
   builder := &UrgentSmsMessageReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * UrgentSmsMessageReqBuilder) MessageId(messageId string) *UrgentSmsMessageReqBuilder  {
  builder.messageId = messageId
  builder.messageIdFlag = true
  return builder
}
func (builder * UrgentSmsMessageReqBuilder) UserIdType(userIdType string) *UrgentSmsMessageReqBuilder  {
  builder.userIdType = userIdType
  builder.userIdTypeFlag = true
  return builder
}
func (builder * UrgentSmsMessageReqBuilder) UrgentReceivers(urgentReceivers *UrgentReceivers) *UrgentSmsMessageReqBuilder  {
  builder.urgentReceivers = urgentReceivers
  builder.urgentReceiversFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * UrgentSmsMessageReqBuilder ) Build() *UrgentSmsMessageReq {
   req := &UrgentSmsMessageReq{}
   if builder.messageIdFlag {
	  req.MessageId = builder.messageId
   }
   if builder.userIdTypeFlag {
	  req.UserIdType = &builder.userIdType
   }
   return req
}


type UrgentSmsMessageReq struct {
	MessageId  string `path:"message_id"`
	UserIdType  *string `query:"user_id_type"`
	UrgentReceivers *UrgentReceivers `body:""`

}

type UrgentSmsMessageRespData struct {
	InvalidUserIdList  []string `json:"invalid_user_id_list,omitempty"`
}

type UrgentSmsMessageResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *UrgentSmsMessageRespData `json:"data"`
}

type CreateMessageReactionReqBodyBuilder struct {
	reactionType  *Emoji
	reactionTypeFlag  bool
}

// 生成body的New构造器
func NewCreateMessageReactionReqBodyBuilder() * CreateMessageReactionReqBodyBuilder{
  builder := &CreateMessageReactionReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * CreateMessageReactionReqBodyBuilder ) ReactionType(reactionType *Emoji) *CreateMessageReactionReqBodyBuilder {
  builder.reactionType = reactionType
  builder.reactionTypeFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * CreateMessageReactionReqBodyBuilder ) Build() *CreateMessageReactionReqBody {
   req := &CreateMessageReactionReqBody{}
   if builder.reactionTypeFlag {
	  req.ReactionType = builder.reactionType

   }
   return req
}

/**上传文件path开始**/
type CreateMessageReactionPathReqBodyBuilder struct {
	reactionType  *Emoji
	reactionTypeFlag  bool
}

// 生成body的New构造器
func NewCreateMessageReactionPathReqBodyBuilder() * CreateMessageReactionPathReqBodyBuilder{
  builder := &CreateMessageReactionPathReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * CreateMessageReactionPathReqBodyBuilder ) ReactionType(reactionType *Emoji) *CreateMessageReactionPathReqBodyBuilder {
  builder.reactionType = reactionType
  builder.reactionTypeFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * CreateMessageReactionPathReqBodyBuilder ) Build() (*CreateMessageReactionReqBody, error) {
   req := &CreateMessageReactionReqBody{}
   if builder.reactionTypeFlag {
	   req.ReactionType = builder.reactionType
   }
   return req, nil
}
/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type CreateMessageReactionReqBuilder struct {
	messageId  string
	messageIdFlag  bool
	body *CreateMessageReactionReqBody
	bodyFlag bool

}

// 生成请求的New构造器
func NewCreateMessageReactionReqBuilder() * CreateMessageReactionReqBuilder{
   builder := &CreateMessageReactionReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * CreateMessageReactionReqBuilder) MessageId(messageId string) *CreateMessageReactionReqBuilder  {
  builder.messageId = messageId
  builder.messageIdFlag = true
  return builder
}
func (builder * CreateMessageReactionReqBuilder) Body(body *CreateMessageReactionReqBody) *CreateMessageReactionReqBuilder  {
  builder.body = body
  builder.bodyFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * CreateMessageReactionReqBuilder ) Build() *CreateMessageReactionReq {
   req := &CreateMessageReactionReq{}
   if builder.messageIdFlag {
	  req.MessageId = builder.messageId
   }
   if builder.bodyFlag {
	  req.Body = builder.body

   }
   return req
}

type CreateMessageReactionReqBody struct {
	ReactionType  *Emoji `json:"reaction_type,omitempty"`
}

type CreateMessageReactionReq struct {
	MessageId  string `path:"message_id"`
	Body *CreateMessageReactionReqBody `body:""`

}

type CreateMessageReactionRespData struct {
	ReactionId  *string `json:"reaction_id,omitempty"`
	Operator  *Operator `json:"operator,omitempty"`
	ActionTime  *int64 `json:"action_time,omitempty,string"`
	ReactionType  *Emoji `json:"reaction_type,omitempty"`
}

type CreateMessageReactionResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *CreateMessageReactionRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type DeleteMessageReactionReqBuilder struct {
	messageId  string
	messageIdFlag  bool
	reactionId  string
	reactionIdFlag  bool

}

// 生成请求的New构造器
func NewDeleteMessageReactionReqBuilder() * DeleteMessageReactionReqBuilder{
   builder := &DeleteMessageReactionReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * DeleteMessageReactionReqBuilder) MessageId(messageId string) *DeleteMessageReactionReqBuilder  {
  builder.messageId = messageId
  builder.messageIdFlag = true
  return builder
}
func (builder * DeleteMessageReactionReqBuilder) ReactionId(reactionId string) *DeleteMessageReactionReqBuilder  {
  builder.reactionId = reactionId
  builder.reactionIdFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * DeleteMessageReactionReqBuilder ) Build() *DeleteMessageReactionReq {
   req := &DeleteMessageReactionReq{}
   if builder.messageIdFlag {
	  req.MessageId = builder.messageId
   }
   if builder.reactionIdFlag {
	  req.ReactionId = builder.reactionId
   }
   return req
}


type DeleteMessageReactionReq struct {
	MessageId  string `path:"message_id"`
	ReactionId  string `path:"reaction_id"`

}

type DeleteMessageReactionRespData struct {
	ReactionId  *string `json:"reaction_id,omitempty"`
	Operator  *Operator `json:"operator,omitempty"`
	ActionTime  *int64 `json:"action_time,omitempty,string"`
	ReactionType  *Emoji `json:"reaction_type,omitempty"`
}

type DeleteMessageReactionResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *DeleteMessageReactionRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type ListMessageReactionReqBuilder struct {
	messageId  string
	messageIdFlag  bool
	reactionType  string
	reactionTypeFlag  bool
	pageToken  string
	pageTokenFlag  bool
	pageSize  int
	pageSizeFlag  bool
	userIdType  string
	userIdTypeFlag  bool
	limit int

}

// 生成请求的New构造器
func NewListMessageReactionReqBuilder() * ListMessageReactionReqBuilder{
   builder := &ListMessageReactionReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * ListMessageReactionReqBuilder) Limit(limit int ) *ListMessageReactionReqBuilder  {
  builder.limit = limit
  return builder
}
func (builder * ListMessageReactionReqBuilder) MessageId(messageId string) *ListMessageReactionReqBuilder  {
  builder.messageId = messageId
  builder.messageIdFlag = true
  return builder
}
func (builder * ListMessageReactionReqBuilder) ReactionType(reactionType string) *ListMessageReactionReqBuilder  {
  builder.reactionType = reactionType
  builder.reactionTypeFlag = true
  return builder
}
func (builder * ListMessageReactionReqBuilder) PageToken(pageToken string) *ListMessageReactionReqBuilder  {
  builder.pageToken = pageToken
  builder.pageTokenFlag = true
  return builder
}
func (builder * ListMessageReactionReqBuilder) PageSize(pageSize int) *ListMessageReactionReqBuilder  {
  builder.pageSize = pageSize
  builder.pageSizeFlag = true
  return builder
}
func (builder * ListMessageReactionReqBuilder) UserIdType(userIdType string) *ListMessageReactionReqBuilder  {
  builder.userIdType = userIdType
  builder.userIdTypeFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * ListMessageReactionReqBuilder ) Build() *ListMessageReactionReq {
   req := &ListMessageReactionReq{}
   req.Limit = builder.limit
   if builder.messageIdFlag {
	  req.MessageId = builder.messageId
   }
   if builder.reactionTypeFlag {
	  req.ReactionType = &builder.reactionType
   }
   if builder.pageTokenFlag {
	  req.PageToken = &builder.pageToken
   }
   if builder.pageSizeFlag {
	  req.PageSize = &builder.pageSize
   }
   if builder.userIdTypeFlag {
	  req.UserIdType = &builder.userIdType
   }
   return req
}


type ListMessageReactionReq struct {
	MessageId  string `path:"message_id"`
	ReactionType  *string `query:"reaction_type"`
	PageToken  *string `query:"page_token"`
	PageSize  *int `query:"page_size"`
	UserIdType  *string `query:"user_id_type"`
	Limit int

}

type ListMessageReactionRespData struct {
	Items  []*MessageReaction `json:"items,omitempty"`
	HasMore  *bool `json:"has_more,omitempty"`
	PageToken  *string `json:"page_token,omitempty"`
}

type ListMessageReactionResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *ListMessageReactionRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type GetMessageResourceReqBuilder struct {
	messageId  string
	messageIdFlag  bool
	fileKey  string
	fileKeyFlag  bool
	type_  string
	typeFlag  bool

}

// 生成请求的New构造器
func NewGetMessageResourceReqBuilder() * GetMessageResourceReqBuilder{
   builder := &GetMessageResourceReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * GetMessageResourceReqBuilder) MessageId(messageId string) *GetMessageResourceReqBuilder  {
  builder.messageId = messageId
  builder.messageIdFlag = true
  return builder
}
func (builder * GetMessageResourceReqBuilder) FileKey(fileKey string) *GetMessageResourceReqBuilder  {
  builder.fileKey = fileKey
  builder.fileKeyFlag = true
  return builder
}
func (builder * GetMessageResourceReqBuilder) Type(type_ string) *GetMessageResourceReqBuilder  {
  builder.type_ = type_
  builder.typeFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * GetMessageResourceReqBuilder ) Build() *GetMessageResourceReq {
   req := &GetMessageResourceReq{}
   if builder.messageIdFlag {
	  req.MessageId = builder.messageId
   }
   if builder.fileKeyFlag {
	  req.FileKey = builder.fileKey
   }
   if builder.typeFlag {
	  req.Type = &builder.type_
   }
   return req
}


type GetMessageResourceReq struct {
	MessageId  string `path:"message_id"`
	FileKey  string `path:"file_key"`
	Type  *string `query:"type"`

}


type GetMessageResourceResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	File	 io.Reader `json:"-"`
	FileName string	`json:"-"`
}
/**下载api,生成WriteFile方法**/
func (resp * GetMessageResourceResp) WriteFile(fileName string ) error {
	bs, err := ioutil.ReadAll(resp.File)
	if err != nil {
		return err
	}

	err = ioutil.WriteFile(fileName, bs, 0666)
	if err != nil {
		return err
	}

	return nil
}


/*1.4 生成请求的builder结构体*/
type ListSpecialFocusReqBuilder struct {
	memberIdType  string
	memberIdTypeFlag  bool
	pageSize  int
	pageSizeFlag  bool
	pageToken  string
	pageTokenFlag  bool
	limit int

}

// 生成请求的New构造器
func NewListSpecialFocusReqBuilder() * ListSpecialFocusReqBuilder{
   builder := &ListSpecialFocusReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * ListSpecialFocusReqBuilder) Limit(limit int ) *ListSpecialFocusReqBuilder  {
  builder.limit = limit
  return builder
}
func (builder * ListSpecialFocusReqBuilder) MemberIdType(memberIdType string) *ListSpecialFocusReqBuilder  {
  builder.memberIdType = memberIdType
  builder.memberIdTypeFlag = true
  return builder
}
func (builder * ListSpecialFocusReqBuilder) PageSize(pageSize int) *ListSpecialFocusReqBuilder  {
  builder.pageSize = pageSize
  builder.pageSizeFlag = true
  return builder
}
func (builder * ListSpecialFocusReqBuilder) PageToken(pageToken string) *ListSpecialFocusReqBuilder  {
  builder.pageToken = pageToken
  builder.pageTokenFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * ListSpecialFocusReqBuilder ) Build() *ListSpecialFocusReq {
   req := &ListSpecialFocusReq{}
   req.Limit = builder.limit
   if builder.memberIdTypeFlag {
	  req.MemberIdType = &builder.memberIdType
   }
   if builder.pageSizeFlag {
	  req.PageSize = &builder.pageSize
   }
   if builder.pageTokenFlag {
	  req.PageToken = &builder.pageToken
   }
   return req
}


type ListSpecialFocusReq struct {
	MemberIdType  *string `query:"member_id_type"`
	PageSize  *int `query:"page_size"`
	PageToken  *string `query:"page_token"`
	Limit int

}

type ListSpecialFocusRespData struct {
	Items  []*SpecialFocus `json:"items,omitempty"`
	PageToken  *string `json:"page_token,omitempty"`
	HasMore  *bool `json:"has_more,omitempty"`
}

type ListSpecialFocusResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *ListSpecialFocusRespData `json:"data"`
}

type UnreadSpecialFocusReqBodyBuilder struct {
	idList  []string
	idListFlag  bool
	chatMode  string
	chatModeFlag  bool
}

// 生成body的New构造器
func NewUnreadSpecialFocusReqBodyBuilder() * UnreadSpecialFocusReqBodyBuilder{
  builder := &UnreadSpecialFocusReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * UnreadSpecialFocusReqBodyBuilder ) IdList(idList []string) *UnreadSpecialFocusReqBodyBuilder {
  builder.idList = idList
  builder.idListFlag = true
  return builder
}
func (builder * UnreadSpecialFocusReqBodyBuilder ) ChatMode(chatMode string) *UnreadSpecialFocusReqBodyBuilder {
  builder.chatMode = chatMode
  builder.chatModeFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * UnreadSpecialFocusReqBodyBuilder ) Build() *UnreadSpecialFocusReqBody {
   req := &UnreadSpecialFocusReqBody{}
   if builder.idListFlag {
	  req.IdList = builder.idList

   }
   if builder.chatModeFlag {
	  req.ChatMode = &builder.chatMode
	  

   }
   return req
}

/**上传文件path开始**/
type UnreadSpecialFocusPathReqBodyBuilder struct {
	idList  []string
	idListFlag  bool
	chatMode  string
	chatModeFlag  bool
}

// 生成body的New构造器
func NewUnreadSpecialFocusPathReqBodyBuilder() * UnreadSpecialFocusPathReqBodyBuilder{
  builder := &UnreadSpecialFocusPathReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * UnreadSpecialFocusPathReqBodyBuilder ) IdList(idList []string) *UnreadSpecialFocusPathReqBodyBuilder {
  builder.idList = idList
  builder.idListFlag = true
  return builder
}
func (builder * UnreadSpecialFocusPathReqBodyBuilder ) ChatMode(chatMode string) *UnreadSpecialFocusPathReqBodyBuilder {
  builder.chatMode = chatMode
  builder.chatModeFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * UnreadSpecialFocusPathReqBodyBuilder ) Build() (*UnreadSpecialFocusReqBody, error) {
   req := &UnreadSpecialFocusReqBody{}
   if builder.idListFlag {
	   req.IdList = builder.idList
   }
   if builder.chatModeFlag {
	  req.ChatMode = &builder.chatMode
	  
   }
   return req, nil
}
/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type UnreadSpecialFocusReqBuilder struct {
	memberIdType  string
	memberIdTypeFlag  bool
	body *UnreadSpecialFocusReqBody
	bodyFlag bool

}

// 生成请求的New构造器
func NewUnreadSpecialFocusReqBuilder() * UnreadSpecialFocusReqBuilder{
   builder := &UnreadSpecialFocusReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * UnreadSpecialFocusReqBuilder) MemberIdType(memberIdType string) *UnreadSpecialFocusReqBuilder  {
  builder.memberIdType = memberIdType
  builder.memberIdTypeFlag = true
  return builder
}
func (builder * UnreadSpecialFocusReqBuilder) Body(body *UnreadSpecialFocusReqBody) *UnreadSpecialFocusReqBuilder  {
  builder.body = body
  builder.bodyFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * UnreadSpecialFocusReqBuilder ) Build() *UnreadSpecialFocusReq {
   req := &UnreadSpecialFocusReq{}
   if builder.memberIdTypeFlag {
	  req.MemberIdType = &builder.memberIdType
   }
   if builder.bodyFlag {
	  req.Body = builder.body

   }
   return req
}

type UnreadSpecialFocusReqBody struct {
	IdList  []string `json:"id_list,omitempty"`
	ChatMode  *string `json:"chat_mode,omitempty"`
}

type UnreadSpecialFocusReq struct {
	MemberIdType  *string `query:"member_id_type"`
	Body *UnreadSpecialFocusReqBody `body:""`

}

type UnreadSpecialFocusRespData struct {
	SpecialFocusUnread  []*SpecialFocusUnread `json:"special_focus_unread,omitempty"`
}

type UnreadSpecialFocusResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *UnreadSpecialFocusRespData `json:"data"`
}

type BatchUpdateUrlPreviewReqBodyBuilder struct {
	previewTokens  []string
	previewTokensFlag  bool
	version  string
	versionFlag  bool
}

// 生成body的New构造器
func NewBatchUpdateUrlPreviewReqBodyBuilder() * BatchUpdateUrlPreviewReqBodyBuilder{
  builder := &BatchUpdateUrlPreviewReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * BatchUpdateUrlPreviewReqBodyBuilder ) PreviewTokens(previewTokens []string) *BatchUpdateUrlPreviewReqBodyBuilder {
  builder.previewTokens = previewTokens
  builder.previewTokensFlag = true
  return builder
}
func (builder * BatchUpdateUrlPreviewReqBodyBuilder ) Version(version string) *BatchUpdateUrlPreviewReqBodyBuilder {
  builder.version = version
  builder.versionFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * BatchUpdateUrlPreviewReqBodyBuilder ) Build() *BatchUpdateUrlPreviewReqBody {
   req := &BatchUpdateUrlPreviewReqBody{}
   if builder.previewTokensFlag {
	  req.PreviewTokens = builder.previewTokens

   }
   if builder.versionFlag {
	  req.Version = &builder.version
	  

   }
   return req
}

/**上传文件path开始**/
type BatchUpdateUrlPreviewPathReqBodyBuilder struct {
	previewTokens  []string
	previewTokensFlag  bool
	version  string
	versionFlag  bool
}

// 生成body的New构造器
func NewBatchUpdateUrlPreviewPathReqBodyBuilder() * BatchUpdateUrlPreviewPathReqBodyBuilder{
  builder := &BatchUpdateUrlPreviewPathReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * BatchUpdateUrlPreviewPathReqBodyBuilder ) PreviewTokens(previewTokens []string) *BatchUpdateUrlPreviewPathReqBodyBuilder {
  builder.previewTokens = previewTokens
  builder.previewTokensFlag = true
  return builder
}
func (builder * BatchUpdateUrlPreviewPathReqBodyBuilder ) Version(version string) *BatchUpdateUrlPreviewPathReqBodyBuilder {
  builder.version = version
  builder.versionFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * BatchUpdateUrlPreviewPathReqBodyBuilder ) Build() (*BatchUpdateUrlPreviewReqBody, error) {
   req := &BatchUpdateUrlPreviewReqBody{}
   if builder.previewTokensFlag {
	   req.PreviewTokens = builder.previewTokens
   }
   if builder.versionFlag {
	  req.Version = &builder.version
	  
   }
   return req, nil
}
/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type BatchUpdateUrlPreviewReqBuilder struct {
	body *BatchUpdateUrlPreviewReqBody
	bodyFlag bool

}

// 生成请求的New构造器
func NewBatchUpdateUrlPreviewReqBuilder() * BatchUpdateUrlPreviewReqBuilder{
   builder := &BatchUpdateUrlPreviewReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * BatchUpdateUrlPreviewReqBuilder) Body(body *BatchUpdateUrlPreviewReqBody) *BatchUpdateUrlPreviewReqBuilder  {
  builder.body = body
  builder.bodyFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * BatchUpdateUrlPreviewReqBuilder ) Build() *BatchUpdateUrlPreviewReq {
   req := &BatchUpdateUrlPreviewReq{}
   if builder.bodyFlag {
	  req.Body = builder.body

   }
   return req
}

type BatchUpdateUrlPreviewReqBody struct {
	PreviewTokens  []string `json:"preview_tokens,omitempty"`
	Version  *string `json:"version,omitempty"`
}

type BatchUpdateUrlPreviewReq struct {
	Body *BatchUpdateUrlPreviewReqBody `body:""`

}


type BatchUpdateUrlPreviewResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

/**生成消息事件结构体 **/

type ChatDisbandedEventData struct {
	ChatId  *string `json:"chat_id,omitempty"`
	OperatorId  *UserId `json:"operator_id,omitempty"`
	External  *bool `json:"external,omitempty"`
	OperatorTenantKey  *string `json:"operator_tenant_key,omitempty"`
}

type ChatDisbandedEvent struct {
	*event.EventV2Base
	Event *ChatDisbandedEventData `json:"event"`
}

type ChatUpdatedEventData struct {
	ChatId  *string `json:"chat_id,omitempty"`
	OperatorId  *UserId `json:"operator_id,omitempty"`
	External  *bool `json:"external,omitempty"`
	OperatorTenantKey  *string `json:"operator_tenant_key,omitempty"`
	AfterChange  *ChatChange `json:"after_change,omitempty"`
	BeforeChange  *ChatChange `json:"before_change,omitempty"`
	ModeratorList  *ModeratorList `json:"moderator_list,omitempty"`
}

type ChatUpdatedEvent struct {
	*event.EventV2Base
	Event *ChatUpdatedEventData `json:"event"`
}

type ChatMemberBotAddedEventData struct {
	ChatId  *string `json:"chat_id,omitempty"`
	OperatorId  *UserId `json:"operator_id,omitempty"`
	External  *bool `json:"external,omitempty"`
	OperatorTenantKey  *string `json:"operator_tenant_key,omitempty"`
}

type ChatMemberBotAddedEvent struct {
	*event.EventV2Base
	Event *ChatMemberBotAddedEventData `json:"event"`
}

type ChatMemberBotDeletedEventData struct {
	ChatId  *string `json:"chat_id,omitempty"`
	OperatorId  *UserId `json:"operator_id,omitempty"`
	External  *bool `json:"external,omitempty"`
	OperatorTenantKey  *string `json:"operator_tenant_key,omitempty"`
}

type ChatMemberBotDeletedEvent struct {
	*event.EventV2Base
	Event *ChatMemberBotDeletedEventData `json:"event"`
}

type ChatMemberUserAddedEventData struct {
	ChatId  *string `json:"chat_id,omitempty"`
	OperatorId  *UserId `json:"operator_id,omitempty"`
	External  *bool `json:"external,omitempty"`
	OperatorTenantKey  *string `json:"operator_tenant_key,omitempty"`
	Users  []*ChatMemberUser `json:"users,omitempty"`
}

type ChatMemberUserAddedEvent struct {
	*event.EventV2Base
	Event *ChatMemberUserAddedEventData `json:"event"`
}

type ChatMemberUserDeletedEventData struct {
	ChatId  *string `json:"chat_id,omitempty"`
	OperatorId  *UserId `json:"operator_id,omitempty"`
	External  *bool `json:"external,omitempty"`
	OperatorTenantKey  *string `json:"operator_tenant_key,omitempty"`
	Users  []*ChatMemberUser `json:"users,omitempty"`
}

type ChatMemberUserDeletedEvent struct {
	*event.EventV2Base
	Event *ChatMemberUserDeletedEventData `json:"event"`
}

type ChatMemberUserWithdrawnEventData struct {
	ChatId  *string `json:"chat_id,omitempty"`
	OperatorId  *UserId `json:"operator_id,omitempty"`
	External  *bool `json:"external,omitempty"`
	OperatorTenantKey  *string `json:"operator_tenant_key,omitempty"`
	Users  []*ChatMemberUser `json:"users,omitempty"`
}

type ChatMemberUserWithdrawnEvent struct {
	*event.EventV2Base
	Event *ChatMemberUserWithdrawnEventData `json:"event"`
}

type MessageAtMessageReadEventData struct {
	Reader  *EventMessageReader `json:"reader,omitempty"`
	MessageIdList  []string `json:"message_id_list,omitempty"`
}

type MessageAtMessageReadEvent struct {
	*event.EventV2Base
	Event *MessageAtMessageReadEventData `json:"event"`
}

type MessageMessageReadEventData struct {
	Reader  *EventMessageReader `json:"reader,omitempty"`
	MessageIdList  []string `json:"message_id_list,omitempty"`
}

type MessageMessageReadEvent struct {
	*event.EventV2Base
	Event *MessageMessageReadEventData `json:"event"`
}

type MessageReceiveEventData struct {
	Sender  *EventSender `json:"sender,omitempty"`
	Message  *EventMessage `json:"message,omitempty"`
}

type MessageReceiveEvent struct {
	*event.EventV2Base
	Event *MessageReceiveEventData `json:"event"`
}

type MessageUrgentMessageReadEventData struct {
	Reader  *EventMessageReader `json:"reader,omitempty"`
	MessageId  *string `json:"message_id,omitempty"`
}

type MessageUrgentMessageReadEvent struct {
	*event.EventV2Base
	Event *MessageUrgentMessageReadEventData `json:"event"`
}

type MessageReactionCreatedEventData struct {
	MessageId  *string `json:"message_id,omitempty"`
	ReactionType  *Emoji `json:"reaction_type,omitempty"`
	OperatorType  *string `json:"operator_type,omitempty"`
	UserId  *UserId `json:"user_id,omitempty"`
	AppId  *string `json:"app_id,omitempty"`
	ActionTime  *string `json:"action_time,omitempty"`
}

type MessageReactionCreatedEvent struct {
	*event.EventV2Base
	Event *MessageReactionCreatedEventData `json:"event"`
}

type MessageReactionDeletedEventData struct {
	MessageId  *string `json:"message_id,omitempty"`
	ReactionType  *Emoji `json:"reaction_type,omitempty"`
	OperatorType  *string `json:"operator_type,omitempty"`
	UserId  *UserId `json:"user_id,omitempty"`
	AppId  *string `json:"app_id,omitempty"`
	ActionTime  *string `json:"action_time,omitempty"`
}

type MessageReactionDeletedEvent struct {
	*event.EventV2Base
	Event *MessageReactionDeletedEventData `json:"event"`
}


/* 生成请求的builder构造器*/
/*1.1 生成body的builder结构体*/
/**如果是分页查询，则添加迭代器定义**/
   type ListChatIterator struct{
	 nextPageToken *string
	 items	 []*ListChat
	 index	 int
	 limit	 int
	 ctx	   context.Context
	 req	   *ListChatReq
	 listFunc  func (ctx context.Context, req *ListChatReq, options ...core.RequestOptionFunc) (*ListChatResp, error)
	 options   []core.RequestOptionFunc
   	 curlNum	   int
   }

   func (iterator *ListChatIterator) Next() (bool, *ListChat, error) {
		// 达到最大量，则返回
		if iterator.curlNum > iterator.limit {
			return false, nil, nil
		}

		// 为0则拉取数据
		if iterator.index == 0 || iterator.index >= len(iterator.items) {
			if iterator.index != 0 && iterator.nextPageToken == nil {
				return false, nil, nil
			}
			if iterator.nextPageToken != nil {
				iterator.req.PageToken = iterator.nextPageToken
			}
			resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
			if err != nil {
				return false, nil, err
			}

			if resp.Code != 0 {
				return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
			}

			if len(resp.Data.Items) == 0 {
				return false, nil, nil
			}

			iterator.nextPageToken = resp.Data.PageToken
			iterator.items = resp.Data.Items
			iterator.index = 0
		}

		block := iterator.items[iterator.index]
		iterator.index++
		iterator.curlNum++
		return true, block, nil
   }

   func (iterator *ListChatIterator) NextPageToken() *string {
	  return iterator.nextPageToken
   }
/**如果是分页查询，则添加迭代器定义**/
   type SearchChatIterator struct{
	 nextPageToken *string
	 items	 []*ListChat
	 index	 int
	 limit	 int
	 ctx	   context.Context
	 req	   *SearchChatReq
	 listFunc  func (ctx context.Context, req *SearchChatReq, options ...core.RequestOptionFunc) (*SearchChatResp, error)
	 options   []core.RequestOptionFunc
   	 curlNum	   int
   }

   func (iterator *SearchChatIterator) Next() (bool, *ListChat, error) {
		// 达到最大量，则返回
		if iterator.curlNum > iterator.limit {
			return false, nil, nil
		}

		// 为0则拉取数据
		if iterator.index == 0 || iterator.index >= len(iterator.items) {
			if iterator.index != 0 && iterator.nextPageToken == nil {
				return false, nil, nil
			}
			if iterator.nextPageToken != nil {
				iterator.req.PageToken = iterator.nextPageToken
			}
			resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
			if err != nil {
				return false, nil, err
			}

			if resp.Code != 0 {
				return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
			}

			if len(resp.Data.Items) == 0 {
				return false, nil, nil
			}

			iterator.nextPageToken = resp.Data.PageToken
			iterator.items = resp.Data.Items
			iterator.index = 0
		}

		block := iterator.items[iterator.index]
		iterator.index++
		iterator.curlNum++
		return true, block, nil
   }

   func (iterator *SearchChatIterator) NextPageToken() *string {
	  return iterator.nextPageToken
   }
/**如果是分页查询，则添加迭代器定义**/
   type GetChatMembersIterator struct{
	 nextPageToken *string
	 items	 []*ListMember
	 index	 int
	 limit	 int
	 ctx	   context.Context
	 req	   *GetChatMembersReq
	 listFunc  func (ctx context.Context, req *GetChatMembersReq, options ...core.RequestOptionFunc) (*GetChatMembersResp, error)
	 options   []core.RequestOptionFunc
   	 curlNum	   int
   }

   func (iterator *GetChatMembersIterator) Next() (bool, *ListMember, error) {
		// 达到最大量，则返回
		if iterator.curlNum > iterator.limit {
			return false, nil, nil
		}

		// 为0则拉取数据
		if iterator.index == 0 || iterator.index >= len(iterator.items) {
			if iterator.index != 0 && iterator.nextPageToken == nil {
				return false, nil, nil
			}
			if iterator.nextPageToken != nil {
				iterator.req.PageToken = iterator.nextPageToken
			}
			resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
			if err != nil {
				return false, nil, err
			}

			if resp.Code != 0 {
				return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
			}

			if len(resp.Data.Items) == 0 {
				return false, nil, nil
			}

			iterator.nextPageToken = resp.Data.PageToken
			iterator.items = resp.Data.Items
			iterator.index = 0
		}

		block := iterator.items[iterator.index]
		iterator.index++
		iterator.curlNum++
		return true, block, nil
   }

   func (iterator *GetChatMembersIterator) NextPageToken() *string {
	  return iterator.nextPageToken
   }
/**如果是分页查询，则添加迭代器定义**/
   type GetChatModerationIterator struct{
	 nextPageToken *string
	 items	 []*ListModerator
	 index	 int
	 limit	 int
	 ctx	   context.Context
	 req	   *GetChatModerationReq
	 listFunc  func (ctx context.Context, req *GetChatModerationReq, options ...core.RequestOptionFunc) (*GetChatModerationResp, error)
	 options   []core.RequestOptionFunc
   	 curlNum	   int
   }

   func (iterator *GetChatModerationIterator) Next() (bool, *ListModerator, error) {
		// 达到最大量，则返回
		if iterator.curlNum > iterator.limit {
			return false, nil, nil
		}

		// 为0则拉取数据
		if iterator.index == 0 || iterator.index >= len(iterator.items) {
			if iterator.index != 0 && iterator.nextPageToken == nil {
				return false, nil, nil
			}
			if iterator.nextPageToken != nil {
				iterator.req.PageToken = iterator.nextPageToken
			}
			resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
			if err != nil {
				return false, nil, err
			}

			if resp.Code != 0 {
				return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
			}

			if len(resp.Data.Items) == 0 {
				return false, nil, nil
			}

			iterator.nextPageToken = resp.Data.PageToken
			iterator.items = resp.Data.Items
			iterator.index = 0
		}

		block := iterator.items[iterator.index]
		iterator.index++
		iterator.curlNum++
		return true, block, nil
   }

   func (iterator *GetChatModerationIterator) NextPageToken() *string {
	  return iterator.nextPageToken
   }
/**如果是分页查询，则添加迭代器定义**/
   type ListMessageIterator struct{
	 nextPageToken *string
	 items	 []*Message
	 index	 int
	 limit	 int
	 ctx	   context.Context
	 req	   *ListMessageReq
	 listFunc  func (ctx context.Context, req *ListMessageReq, options ...core.RequestOptionFunc) (*ListMessageResp, error)
	 options   []core.RequestOptionFunc
   	 curlNum	   int
   }

   func (iterator *ListMessageIterator) Next() (bool, *Message, error) {
		// 达到最大量，则返回
		if iterator.curlNum > iterator.limit {
			return false, nil, nil
		}

		// 为0则拉取数据
		if iterator.index == 0 || iterator.index >= len(iterator.items) {
			if iterator.index != 0 && iterator.nextPageToken == nil {
				return false, nil, nil
			}
			if iterator.nextPageToken != nil {
				iterator.req.PageToken = iterator.nextPageToken
			}
			resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
			if err != nil {
				return false, nil, err
			}

			if resp.Code != 0 {
				return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
			}

			if len(resp.Data.Items) == 0 {
				return false, nil, nil
			}

			iterator.nextPageToken = resp.Data.PageToken
			iterator.items = resp.Data.Items
			iterator.index = 0
		}

		block := iterator.items[iterator.index]
		iterator.index++
		iterator.curlNum++
		return true, block, nil
   }

   func (iterator *ListMessageIterator) NextPageToken() *string {
	  return iterator.nextPageToken
   }
/**如果是分页查询，则添加迭代器定义**/
   type ListMessageReactionIterator struct{
	 nextPageToken *string
	 items	 []*MessageReaction
	 index	 int
	 limit	 int
	 ctx	   context.Context
	 req	   *ListMessageReactionReq
	 listFunc  func (ctx context.Context, req *ListMessageReactionReq, options ...core.RequestOptionFunc) (*ListMessageReactionResp, error)
	 options   []core.RequestOptionFunc
   	 curlNum	   int
   }

   func (iterator *ListMessageReactionIterator) Next() (bool, *MessageReaction, error) {
		// 达到最大量，则返回
		if iterator.curlNum > iterator.limit {
			return false, nil, nil
		}

		// 为0则拉取数据
		if iterator.index == 0 || iterator.index >= len(iterator.items) {
			if iterator.index != 0 && iterator.nextPageToken == nil {
				return false, nil, nil
			}
			if iterator.nextPageToken != nil {
				iterator.req.PageToken = iterator.nextPageToken
			}
			resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
			if err != nil {
				return false, nil, err
			}

			if resp.Code != 0 {
				return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
			}

			if len(resp.Data.Items) == 0 {
				return false, nil, nil
			}

			iterator.nextPageToken = resp.Data.PageToken
			iterator.items = resp.Data.Items
			iterator.index = 0
		}

		block := iterator.items[iterator.index]
		iterator.index++
		iterator.curlNum++
		return true, block, nil
   }

   func (iterator *ListMessageReactionIterator) NextPageToken() *string {
	  return iterator.nextPageToken
   }
/**如果是分页查询，则添加迭代器定义**/
   type ListSpecialFocusIterator struct{
	 nextPageToken *string
	 items	 []*SpecialFocus
	 index	 int
	 limit	 int
	 ctx	   context.Context
	 req	   *ListSpecialFocusReq
	 listFunc  func (ctx context.Context, req *ListSpecialFocusReq, options ...core.RequestOptionFunc) (*ListSpecialFocusResp, error)
	 options   []core.RequestOptionFunc
   	 curlNum	   int
   }

   func (iterator *ListSpecialFocusIterator) Next() (bool, *SpecialFocus, error) {
		// 达到最大量，则返回
		if iterator.curlNum > iterator.limit {
			return false, nil, nil
		}

		// 为0则拉取数据
		if iterator.index == 0 || iterator.index >= len(iterator.items) {
			if iterator.index != 0 && iterator.nextPageToken == nil {
				return false, nil, nil
			}
			if iterator.nextPageToken != nil {
				iterator.req.PageToken = iterator.nextPageToken
			}
			resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
			if err != nil {
				return false, nil, err
			}

			if resp.Code != 0 {
				return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
			}

			if len(resp.Data.Items) == 0 {
				return false, nil, nil
			}

			iterator.nextPageToken = resp.Data.PageToken
			iterator.items = resp.Data.Items
			iterator.index = 0
		}

		block := iterator.items[iterator.index]
		iterator.index++
		iterator.curlNum++
		return true, block, nil
   }

   func (iterator *ListSpecialFocusIterator) NextPageToken() *string {
	  return iterator.nextPageToken
   }


