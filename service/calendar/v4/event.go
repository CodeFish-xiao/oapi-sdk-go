// Package calendar code generated by oapi sdk gen
package larkcalendar
import (
	"context"
)


// 消息处理器定义
type P2CalendarChangedV4Handler struct {
	handler func(context.Context, *P2CalendarChangedV4) error
}

func NewP2CalendarChangedV4Handler(handler func(context.Context, *P2CalendarChangedV4) error) *P2CalendarChangedV4Handler{
   h := &P2CalendarChangedV4Handler{handler: handler}
   return h
}

// 返回事件的消息体的实例，用于反序列化用
func (h *P2CalendarChangedV4Handler) Event() interface{} {
	return &P2CalendarChangedV4{}
}

// 回调开发者注册的handle
func (h *P2CalendarChangedV4Handler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*P2CalendarChangedV4))
}


// 消息处理器定义
type P2CalendarAclCreatedV4Handler struct {
	handler func(context.Context, *P2CalendarAclCreatedV4) error
}

func NewP2CalendarAclCreatedV4Handler(handler func(context.Context, *P2CalendarAclCreatedV4) error) *P2CalendarAclCreatedV4Handler{
   h := &P2CalendarAclCreatedV4Handler{handler: handler}
   return h
}

// 返回事件的消息体的实例，用于反序列化用
func (h *P2CalendarAclCreatedV4Handler) Event() interface{} {
	return &P2CalendarAclCreatedV4{}
}

// 回调开发者注册的handle
func (h *P2CalendarAclCreatedV4Handler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*P2CalendarAclCreatedV4))
}


// 消息处理器定义
type P2CalendarAclDeletedV4Handler struct {
	handler func(context.Context, *P2CalendarAclDeletedV4) error
}

func NewP2CalendarAclDeletedV4Handler(handler func(context.Context, *P2CalendarAclDeletedV4) error) *P2CalendarAclDeletedV4Handler{
   h := &P2CalendarAclDeletedV4Handler{handler: handler}
   return h
}

// 返回事件的消息体的实例，用于反序列化用
func (h *P2CalendarAclDeletedV4Handler) Event() interface{} {
	return &P2CalendarAclDeletedV4{}
}

// 回调开发者注册的handle
func (h *P2CalendarAclDeletedV4Handler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*P2CalendarAclDeletedV4))
}


// 消息处理器定义
type P2CalendarEventChangedV4Handler struct {
	handler func(context.Context, *P2CalendarEventChangedV4) error
}

func NewP2CalendarEventChangedV4Handler(handler func(context.Context, *P2CalendarEventChangedV4) error) *P2CalendarEventChangedV4Handler{
   h := &P2CalendarEventChangedV4Handler{handler: handler}
   return h
}

// 返回事件的消息体的实例，用于反序列化用
func (h *P2CalendarEventChangedV4Handler) Event() interface{} {
	return &P2CalendarEventChangedV4{}
}

// 回调开发者注册的handle
func (h *P2CalendarEventChangedV4Handler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*P2CalendarEventChangedV4))
}