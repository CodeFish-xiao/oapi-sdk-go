// Package calendar code generated by oapi sdk gen
package calendar
import (
	"context"
)

/**
消息处理器定义
**/
type CalendarChangedEventHandler struct {
	handler func(context.Context, *CalendarChangedEvent) error
}

func NewCalendarChangedEventHandler(handler func(context.Context, *CalendarChangedEvent) error) *CalendarChangedEventHandler{
   h := &CalendarChangedEventHandler{handler: handler}
   return h
}
/**
返回事件的消息体的实例，用于反序列化用
**/
func (h *CalendarChangedEventHandler) Event() interface{} {
	return &CalendarChangedEvent{}
}

/**
 回调开发者注册的handle
 r**/
func (h *CalendarChangedEventHandler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*CalendarChangedEvent))
}

/**
消息处理器定义
**/
type CalendarAclCreatedEventHandler struct {
	handler func(context.Context, *CalendarAclCreatedEvent) error
}

func NewCalendarAclCreatedEventHandler(handler func(context.Context, *CalendarAclCreatedEvent) error) *CalendarAclCreatedEventHandler{
   h := &CalendarAclCreatedEventHandler{handler: handler}
   return h
}
/**
返回事件的消息体的实例，用于反序列化用
**/
func (h *CalendarAclCreatedEventHandler) Event() interface{} {
	return &CalendarAclCreatedEvent{}
}

/**
 回调开发者注册的handle
 r**/
func (h *CalendarAclCreatedEventHandler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*CalendarAclCreatedEvent))
}

/**
消息处理器定义
**/
type CalendarAclDeletedEventHandler struct {
	handler func(context.Context, *CalendarAclDeletedEvent) error
}

func NewCalendarAclDeletedEventHandler(handler func(context.Context, *CalendarAclDeletedEvent) error) *CalendarAclDeletedEventHandler{
   h := &CalendarAclDeletedEventHandler{handler: handler}
   return h
}
/**
返回事件的消息体的实例，用于反序列化用
**/
func (h *CalendarAclDeletedEventHandler) Event() interface{} {
	return &CalendarAclDeletedEvent{}
}

/**
 回调开发者注册的handle
 r**/
func (h *CalendarAclDeletedEventHandler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*CalendarAclDeletedEvent))
}

/**
消息处理器定义
**/
type CalendarEventChangedEventHandler struct {
	handler func(context.Context, *CalendarEventChangedEvent) error
}

func NewCalendarEventChangedEventHandler(handler func(context.Context, *CalendarEventChangedEvent) error) *CalendarEventChangedEventHandler{
   h := &CalendarEventChangedEventHandler{handler: handler}
   return h
}
/**
返回事件的消息体的实例，用于反序列化用
**/
func (h *CalendarEventChangedEventHandler) Event() interface{} {
	return &CalendarEventChangedEvent{}
}

/**
 回调开发者注册的handle
 r**/
func (h *CalendarEventChangedEventHandler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*CalendarEventChangedEvent))
}