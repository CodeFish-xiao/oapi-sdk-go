// Package gray_test_open_sg code generated by oapi sdk gen
package larkgray_test_open_sg

import (
	"context"
	"net/http"

	"github.com/larksuite/oapi-sdk-go/core"
)

// 构建业务域服务实例
func NewService(httpClient *http.Client, config *core.Config) *GrayTestOpenSgService {
	g := &GrayTestOpenSgService{httpClient: httpClient, config: config}
	g.Moto = &moto{service: g}
	return g
}

// 业务域服务定义
type GrayTestOpenSgService struct {
	httpClient *http.Client
	config     *core.Config
	Moto       *moto
}

// 资源服务定义
type moto struct {
	service *GrayTestOpenSgService
}

// 资源服务方法定义
func (m *moto) Create(ctx context.Context, req *CreateMotoReq, options ...core.RequestOptionFunc) (*CreateMotoResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, m.service.config, http.MethodPost,
		"/open-apis/gray_test_open_sg/v1/motos", []core.AccessTokenType{core.AccessTokenTypeTenant, core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &CreateMotoResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *moto) Get(ctx context.Context, req *GetMotoReq, options ...core.RequestOptionFunc) (*GetMotoResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, m.service.config, http.MethodGet,
		"/open-apis/gray_test_open_sg/v1/motos/:moto_id", []core.AccessTokenType{core.AccessTokenTypeTenant, core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &GetMotoResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *moto) List(ctx context.Context, req *ListMotoReq, options ...core.RequestOptionFunc) (*ListMotoResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, m.service.config, http.MethodGet,
		"/open-apis/gray_test_open_sg/v1/motos", []core.AccessTokenType{core.AccessTokenTypeTenant, core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &ListMotoResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *moto) ListMoto(ctx context.Context, req *ListMotoReq, options ...core.RequestOptionFunc) (*ListMotoIterator, error) {
	return &ListMotoIterator{
		ctx:      ctx,
		req:      req,
		listFunc: m.List,
		options:  options,
		limit:    req.Limit}, nil
}
