// Package approval code generated by oapi sdk gen
package approval

import (
	"io"
	
	"bytes"
	
	"context"
	"errors"
	"fmt"
	
	"github.com/feishu/oapi-sdk-go/event"
	
	"github.com/feishu/oapi-sdk-go/core"

)

/**生成枚举值 **/

const (
	  DEPARTMENT_ID_TYPE_DEPARTMENTID string  = "department_id"
	  DEPARTMENT_ID_TYPE_OPENDEPARTMENTID string  = "open_department_id"
)

const (
	  USER_ID_TYPE_USER_ID string  = "user_id"
	  USER_ID_TYPE_UNION_ID string  = "union_id"
	  USER_ID_TYPE_OPEN_ID string  = "open_id"
)

const (
	  LOCALE_ZHCN string  = "zh-CN"
	  LOCALE_ENUS string  = "en-US"
	  LOCALE_JAJP string  = "ja-JP"
)

const (
	  STATUS_ACTIVE string  = "ACTIVE"
	  STATUS_INACTIVE string  = "INACTIVE"
	  STATUS_DELETED string  = "DELETED"
	  STATUS_UNKNOWN string  = "UNKNOWN"
)

const (
	  DISPLAY_METHOD_BROWSER string  = "BROWSER"
	  DISPLAY_METHOD_SIDEBAR string  = "SIDEBAR"
	  DISPLAY_METHOD_NORMAL string  = "NORMAL"
)

const (
	  UPDATE_MODE_REPLACE string  = "REPLACE"
	  UPDATE_MODE_UPDATE string  = "UPDATE"
)

const (
	  TYPE_ATTACHMENT string  = "attachment"
	  TYPE_IMAGE string  = "image"
)

const (
	  ADD_SIGN_ENUM_ADD_SIGN_PRE string  = "1"
	  ADD_SIGN_ENUM_ADD_SIGN_POST string  = "2"
	  ADD_SIGN_ENUM_ADD_SIGN_PARALLEL string  = "3"
)

const (
	  APPROVAL_METHOD_ENUM_OR_SIGN string  = "1"
	  APPROVAL_METHOD_ENUM_ADD_SIGN string  = "2"
)

const (
	  INSTANCE_STATUS_PENDING string  = "PENDING"
	  INSTANCE_STATUS_RECALL string  = "RECALL"
	  INSTANCE_STATUS_REJECT string  = "REJECT"
	  INSTANCE_STATUS_DELETED string  = "DELETED"
	  INSTANCE_STATUS_APPROVERD string  = "APPROVED"
)

const (
	  READ_STATUS_READ string  = "READ"
	  READ_STATUS_UNREAD string  = "UNREAD"
)

const (
	  TOPIC_TODOAPPROVAL string  = "1"
	  TOPIC_DONEAPPROVAL string  = "2"
	  TOPIC_INITIATEDAPPROVAL string  = "3"
	  TOPIC_UNREADNOTICE string  = "17"
	  TOPIC_READNOTICE string  = "18"
)

const (
	  TASK_STATUS_PENDING string  = "PENDING"
	  TASK_STATUS_REJECT string  = "REJECTED"
	  TASK_STATUS_APPROVERD string  = "APPROVED"
	  TASK_STATUS_TRANSFERRED string  = "TRANSFERRED"
	  TASK_STATUS_DONE string  = "DONE"
	  TASK_STATUS_RM_REPEAT string  = "RM_REPEAT"
	  TASK_STATUS_PROCESSED string  = "PROCESSED"
)



/**生成数据类型 **/

type ActionConfig struct {
	ActionType  *string `json:"action_type,omitempty"`
	ActionName  *string `json:"action_name,omitempty"`
	IsNeedReason  *bool `json:"is_need_reason,omitempty"`
	IsReasonRequired  *bool `json:"is_reason_required,omitempty"`
	IsNeedAttachment  *bool `json:"is_need_attachment,omitempty"`
}

type Approval struct {
	ApprovalCode  *string `json:"approval_code,omitempty"`
	ApprovalName  *string `json:"approval_name,omitempty"`
}

type ApprovalApproverCcer struct {
	Type  *string `json:"type,omitempty"`
	UserId  *string `json:"user_id,omitempty"`
	Level  *string `json:"level,omitempty"`
}

type ApprovalConfig struct {
	CanUpdateViewer  *bool `json:"can_update_viewer,omitempty"`
	CanUpdateForm  *bool `json:"can_update_form,omitempty"`
	CanUpdateProcess  *bool `json:"can_update_process,omitempty"`
	CanUpdateRevert  *bool `json:"can_update_revert,omitempty"`
	HelpUrl  *string `json:"help_url,omitempty"`
}

type ApprovalCreate struct {
	ApprovalName  *string `json:"approval_name,omitempty"`
	ApprovalCode  *string `json:"approval_code,omitempty"`
	Description  *string `json:"description,omitempty"`
	Viewers  []*ApprovalCreateViewers `json:"viewers,omitempty"`
	Form  *ApprovalForm `json:"form,omitempty"`
	NodeList  []*ApprovalNode `json:"node_list,omitempty"`
	Settings  *ApprovalSetting `json:"settings,omitempty"`
	Config  *ApprovalConfig `json:"config,omitempty"`
	Icon  *int `json:"icon,omitempty"`
	I18nResources  []*I18nResource `json:"i18n_resources,omitempty"`
}

type ApprovalCreateExternal struct {
	BizName  *string `json:"biz_name,omitempty"`
	BizType  *string `json:"biz_type,omitempty"`
	CreateLinkMobile  *string `json:"create_link_mobile,omitempty"`
	CreateLinkPc  *string `json:"create_link_pc,omitempty"`
	SupportPc  *bool `json:"support_pc,omitempty"`
	SupportMobile  *bool `json:"support_mobile,omitempty"`
	SupportBatchRead  *bool `json:"support_batch_read,omitempty"`
	EnableMarkReaded  *bool `json:"enable_mark_readed,omitempty"`
	EnableQuickOperate  *bool `json:"enable_quick_operate,omitempty"`
	ActionCallbackUrl  *string `json:"action_callback_url,omitempty"`
	ActionCallbackToken  *string `json:"action_callback_token,omitempty"`
	ActionCallbackKey  *string `json:"action_callback_key,omitempty"`
}

type ApprovalCreateViewers struct {
	ViewerType  *string `json:"viewer_type,omitempty"`
	ViewerUserId  *string `json:"viewer_user_id,omitempty"`
	ViewerDepartmentId  *string `json:"viewer_department_id,omitempty"`
}

type ApprovalEvent struct {
	ApprovalId  *string `json:"approval_id,omitempty"`
	ApprovalCode  *string `json:"approval_code,omitempty"`
	VersionId  *string `json:"version_id,omitempty"`
	WidgetGroupType  *int `json:"widget_group_type,omitempty"`
	FormDefinitionId  *string `json:"form_definition_id,omitempty"`
	ProcessObj  *string `json:"process_obj,omitempty"`
	Timestamp  *string `json:"timestamp,omitempty"`
	Extra  *string `json:"extra,omitempty"`
}

type ApprovalForm struct {
	FormContent  *string `json:"form_content,omitempty"`
}

type ApprovalNode struct {
	Id  *string `json:"id,omitempty"`
	Name  *string `json:"name,omitempty"`
	NodeType  *string `json:"node_type,omitempty"`
	Approver  []*ApprovalApproverCcer `json:"approver,omitempty"`
	Ccer  []*ApprovalApproverCcer `json:"ccer,omitempty"`
}

type ApprovalNodeInfo struct {
	Name  *string `json:"name,omitempty"`
	NeedApprover  *bool `json:"need_approver,omitempty"`
	NodeId  *string `json:"node_id,omitempty"`
	CustomNodeId  *string `json:"custom_node_id,omitempty"`
	NodeType  *string `json:"node_type,omitempty"`
}

type ApprovalSetting struct {
	RevertInterval  *int `json:"revert_interval,omitempty"`
	RevertOption  *int `json:"revert_option,omitempty"`
}

type ApprovalViewer struct {
	Type  *string `json:"type,omitempty"`
	OpenId  *string `json:"open_id,omitempty"`
	UserId  *string `json:"user_id,omitempty"`
	UnionId  *string `json:"union_id,omitempty"`
}

type ApprovalViewerInfo struct {
	Type  *string `json:"type,omitempty"`
	Id  *string `json:"id,omitempty"`
	UserId  *string `json:"user_id,omitempty"`
}

type CcNode struct {
	CcId  *string `json:"cc_id,omitempty"`
	UserId  *string `json:"user_id,omitempty"`
	OpenId  *string `json:"open_id,omitempty"`
	Links  *ExternalInstanceLink `json:"links,omitempty"`
	ReadStatus  *string `json:"read_status,omitempty"`
	Extra  *string `json:"extra,omitempty"`
	Title  *string `json:"title,omitempty"`
	CreateTime  *int64 `json:"create_time,omitempty,string"`
	UpdateTime  *int64 `json:"update_time,omitempty,string"`
	DisplayMethod  *string `json:"display_method,omitempty"`
}

type CcSearch struct {
	UserId  *string `json:"user_id,omitempty"`
	ApprovalCode  *string `json:"approval_code,omitempty"`
	InstanceCode  *string `json:"instance_code,omitempty"`
	InstanceExternalId  *string `json:"instance_external_id,omitempty"`
	GroupExternalId  *string `json:"group_external_id,omitempty"`
	CcTitle  *string `json:"cc_title,omitempty"`
	ReadStatus  *string `json:"read_status,omitempty"`
	CcCreateTimeFrom  *int64 `json:"cc_create_time_from,omitempty,string"`
	CcCreateTimeTo  *int64 `json:"cc_create_time_to,omitempty,string"`
	Locale  *string `json:"locale,omitempty"`
}

type CcSearchItem struct {
	Approval  *InstanceSearchApproval `json:"approval,omitempty"`
	Group  *InstanceSearchGroup `json:"group,omitempty"`
	Instance  *InstanceSearchNode `json:"instance,omitempty"`
	Cc  *CcSearchNode `json:"cc,omitempty"`
}

type CcSearchNode struct {
	UserId  *string `json:"user_id,omitempty"`
	CreateTime  *int64 `json:"create_time,omitempty,string"`
	ReadStatus  *string `json:"read_status,omitempty"`
	Title  *string `json:"title,omitempty"`
	Extra  *string `json:"extra,omitempty"`
	Link  *InstanceSearchLink `json:"link,omitempty"`
}

type Comment struct {
	Id  *int64 `json:"id,omitempty,string"`
	Content  *string `json:"content,omitempty"`
	CreateTime  *int64 `json:"create_time,omitempty,string"`
	UpdateTime  *int64 `json:"update_time,omitempty,string"`
	IsDelete  *int `json:"is_delete,omitempty"`
	Replies  []*CommentReply `json:"replies,omitempty"`
	AtInfoList  []*CommentAtInfo `json:"at_info_list,omitempty"`
	Commentator  *string `json:"commentator,omitempty"`
	Extra  *string `json:"extra,omitempty"`
}

type CommentAtInfo struct {
	UserId  *int64 `json:"user_id,omitempty,string"`
	Name  *string `json:"name,omitempty"`
	Offset  *int64 `json:"offset,omitempty,string"`
}

type CommentReply struct {
	Id  *int64 `json:"id,omitempty,string"`
	Content  *string `json:"content,omitempty"`
	CreateTime  *int64 `json:"create_time,omitempty,string"`
	UpdateTime  *int64 `json:"update_time,omitempty,string"`
	IsDelete  *int `json:"is_delete,omitempty"`
	AtInfoList  []*CommentAtInfo `json:"at_info_list,omitempty"`
	Commentator  *string `json:"commentator,omitempty"`
	Extra  *string `json:"extra,omitempty"`
}

type CommentRequest struct {
	Content  *string `json:"content,omitempty"`
	AtInfoList  []*CommentAtInfo `json:"at_info_list,omitempty"`
	ParentCommentId  *int64 `json:"parent_comment_id,omitempty,string"`
	CommentId  *int64 `json:"comment_id,omitempty,string"`
	DisableBot  *bool `json:"disable_bot,omitempty"`
	Extra  *string `json:"extra,omitempty"`
}

type Count struct {
	Total  *int `json:"total,omitempty"`
	HasMore  *bool `json:"has_more,omitempty"`
}

type ExteranlInstanceCheck struct {
	InstanceId  *string `json:"instance_id,omitempty"`
	UpdateTime  *int64 `json:"update_time,omitempty,string"`
	Tasks  []*ExternalInstanceTask `json:"tasks,omitempty"`
}

type ExteranlInstanceCheckResponse struct {
	InstanceId  *string `json:"instance_id,omitempty"`
	UpdateTime  *int64 `json:"update_time,omitempty,string"`
	Tasks  []*ExternalInstanceTask `json:"tasks,omitempty"`
}

type ExternalApproval struct {
	ApprovalName  *string `json:"approval_name,omitempty"`
	ApprovalCode  *string `json:"approval_code,omitempty"`
	GroupCode  *string `json:"group_code,omitempty"`
	GroupName  *string `json:"group_name,omitempty"`
	Description  *string `json:"description,omitempty"`
	External  *ApprovalCreateExternal `json:"external,omitempty"`
	Viewers  []*ApprovalCreateViewers `json:"viewers,omitempty"`
	I18nResources  []*I18nResource `json:"i18n_resources,omitempty"`
}

type ExternalInstance struct {
	ApprovalCode  *string `json:"approval_code,omitempty"`
	Status  *string `json:"status,omitempty"`
	Extra  *string `json:"extra,omitempty"`
	InstanceId  *string `json:"instance_id,omitempty"`
	Links  *ExternalInstanceLink `json:"links,omitempty"`
	Title  *string `json:"title,omitempty"`
	Form  []*ExternalInstanceForm `json:"form,omitempty"`
	UserId  *string `json:"user_id,omitempty"`
	UserName  *string `json:"user_name,omitempty"`
	OpenId  *string `json:"open_id,omitempty"`
	DepartmentId  *string `json:"department_id,omitempty"`
	DepartmentName  *string `json:"department_name,omitempty"`
	StartTime  *int64 `json:"start_time,omitempty,string"`
	EndTime  *int64 `json:"end_time,omitempty,string"`
	UpdateTime  *int64 `json:"update_time,omitempty,string"`
	DisplayMethod  *string `json:"display_method,omitempty"`
	UpdateMode  *string `json:"update_mode,omitempty"`
	TaskList  []*ExternalInstanceTaskNode `json:"task_list,omitempty"`
	CcList  []*CcNode `json:"cc_list,omitempty"`
	I18nResources  []*I18nResource `json:"i18n_resources,omitempty"`
}

type ExternalInstanceForm struct {
	Name  *string `json:"name,omitempty"`
	Value  *string `json:"value,omitempty"`
}

type ExternalInstanceLink struct {
	PcLink  *string `json:"pc_link,omitempty"`
	MobileLink  *string `json:"mobile_link,omitempty"`
}

type ExternalInstanceTask struct {
	TaskId  *string `json:"task_id,omitempty"`
	UpdateTime  *int64 `json:"update_time,omitempty,string"`
}

type ExternalInstanceTaskNode struct {
	TaskId  *string `json:"task_id,omitempty"`
	UserId  *string `json:"user_id,omitempty"`
	OpenId  *string `json:"open_id,omitempty"`
	Title  *string `json:"title,omitempty"`
	Links  *ExternalInstanceLink `json:"links,omitempty"`
	Status  *string `json:"status,omitempty"`
	Extra  *string `json:"extra,omitempty"`
	CreateTime  *int64 `json:"create_time,omitempty,string"`
	EndTime  *int64 `json:"end_time,omitempty,string"`
	UpdateTime  *int64 `json:"update_time,omitempty,string"`
	ActionContext  *string `json:"action_context,omitempty"`
	ActionConfigs  []*ActionConfig `json:"action_configs,omitempty"`
	DisplayMethod  *string `json:"display_method,omitempty"`
}

type ExternalTaskItem struct {
	Id  *string `json:"id,omitempty"`
	Status  *string `json:"status,omitempty"`
	UpdateTime  *int64 `json:"update_time,omitempty,string"`
}

type ExternalTaskList struct {
	InstanceId  *string `json:"instance_id,omitempty"`
	ApprovalId  *string `json:"approval_id,omitempty"`
	ApprovalCode  *string `json:"approval_code,omitempty"`
	Status  *string `json:"status,omitempty"`
	UpdateTime  *int64 `json:"update_time,omitempty,string"`
	Tasks  []*ExternalTaskItem `json:"tasks,omitempty"`
}

type File struct {
	Url  *string `json:"url,omitempty"`
	FileSize  *int `json:"file_size,omitempty"`
	Title  *string `json:"title,omitempty"`
	Type  *string `json:"type,omitempty"`
}

type I18nResource struct {
	Locale  *string `json:"locale,omitempty"`
	Texts  []*I18nResourceText `json:"texts,omitempty"`
	IsDefault  *bool `json:"is_default,omitempty"`
}

type I18nResourceText struct {
	Key  *string `json:"key,omitempty"`
	Value  *string `json:"value,omitempty"`
}

type Instance struct {
	InstanceCode  *string `json:"instance_code,omitempty"`
	ApprovalName  *string `json:"approval_name,omitempty"`
	StartTime  *int64 `json:"start_time,omitempty,string"`
	EndTime  *int64 `json:"end_time,omitempty,string"`
	UserId  *string `json:"user_id,omitempty"`
	SerialId  *string `json:"serial_id,omitempty"`
}

type InstanceCancel struct {
	ApprovalCode  *string `json:"approval_code,omitempty"`
	InstanceCode  *string `json:"instance_code,omitempty"`
	UserId  *string `json:"user_id,omitempty"`
	NotifyStarter  *bool `json:"notify_starter,omitempty"`
}

type InstanceCc struct {
	ApprovalCode  *string `json:"approval_code,omitempty"`
	InstanceCode  *string `json:"instance_code,omitempty"`
	UserId  *string `json:"user_id,omitempty"`
	CcUserIds  []string `json:"cc_user_ids,omitempty"`
	Comment  *string `json:"comment,omitempty"`
}

type InstanceCcUser struct {
	UserId  *string `json:"user_id,omitempty"`
	CcId  *string `json:"cc_id,omitempty"`
	OpenId  *string `json:"open_id,omitempty"`
}

type InstanceComment struct {
	Id  *string `json:"id,omitempty"`
	UserId  *string `json:"user_id,omitempty"`
	OpenId  *string `json:"open_id,omitempty"`
	Comment  *string `json:"comment,omitempty"`
	CreateTime  *int64 `json:"create_time,omitempty,string"`
}

type InstanceCreate struct {
	ApprovalCode  *string `json:"approval_code,omitempty"`
	UserId  *string `json:"user_id,omitempty"`
	OpenId  *string `json:"open_id,omitempty"`
	DepartmentId  *string `json:"department_id,omitempty"`
	Form  *string `json:"form,omitempty"`
	NodeApproverUserIdList  []*NodeApprover `json:"node_approver_user_id_list,omitempty"`
	NodeApproverOpenIdList  []*NodeApprover `json:"node_approver_open_id_list,omitempty"`
	NodeCcUserIdList  []*NodeCc `json:"node_cc_user_id_list,omitempty"`
	NodeCcOpenIdList  []*NodeCc `json:"node_cc_open_id_list,omitempty"`
	Uuid  *string `json:"uuid,omitempty"`
}

type InstanceInfo struct {
	ApprovalCode  *string `json:"approval_code,omitempty"`
	ApprovalName  *string `json:"approval_name,omitempty"`
	StartTime  *int64 `json:"start_time,omitempty,string"`
	EndTime  *int64 `json:"end_time,omitempty,string"`
	UserId  *string `json:"user_id,omitempty"`
	OpenId  *string `json:"open_id,omitempty"`
	SerialNumber  *string `json:"serial_number,omitempty"`
	DepartmentId  *string `json:"department_id,omitempty"`
	Status  *string `json:"status,omitempty"`
	Uuid  *string `json:"uuid,omitempty"`
	Form  *string `json:"form,omitempty"`
	TaskList  []*InstanceTask `json:"task_list,omitempty"`
	CommentList  []*InstanceComment `json:"comment_list,omitempty"`
	Timeline  []*InstanceTimeline `json:"timeline,omitempty"`
}

type InstanceSearch struct {
	UserId  *string `json:"user_id,omitempty"`
	ApprovalCode  *string `json:"approval_code,omitempty"`
	InstanceCode  *string `json:"instance_code,omitempty"`
	InstanceExternalId  *string `json:"instance_external_id,omitempty"`
	GroupExternalId  *string `json:"group_external_id,omitempty"`
	InstanceTitle  *string `json:"instance_title,omitempty"`
	InstanceStatus  *string `json:"instance_status,omitempty"`
	InstanceStartTimeFrom  *int64 `json:"instance_start_time_from,omitempty,string"`
	InstanceStartTimeTo  *int64 `json:"instance_start_time_to,omitempty,string"`
	Locale  *string `json:"locale,omitempty"`
}

type InstanceSearchApproval struct {
	Code  *string `json:"code,omitempty"`
	Name  *string `json:"name,omitempty"`
	IsExternal  *bool `json:"is_external,omitempty"`
	External  *InstanceSearchApprovalExternal `json:"external,omitempty"`
}

type InstanceSearchApprovalExternal struct {
	BatchCcRead  *bool `json:"batch_cc_read,omitempty"`
}

type InstanceSearchGroup struct {
	ExternalId  *string `json:"external_id,omitempty"`
	Name  *string `json:"name,omitempty"`
}

type InstanceSearchItem struct {
	Approval  *InstanceSearchApproval `json:"approval,omitempty"`
	Group  *InstanceSearchGroup `json:"group,omitempty"`
	Instance  *InstanceSearchNode `json:"instance,omitempty"`
}

type InstanceSearchLink struct {
	PcLink  *string `json:"pc_link,omitempty"`
	MobileLink  *string `json:"mobile_link,omitempty"`
}

type InstanceSearchNode struct {
	Code  *string `json:"code,omitempty"`
	ExternalId  *string `json:"external_id,omitempty"`
	UserId  *string `json:"user_id,omitempty"`
	StartTime  *int64 `json:"start_time,omitempty,string"`
	EndTime  *int64 `json:"end_time,omitempty,string"`
	Status  *string `json:"status,omitempty"`
	Title  *string `json:"title,omitempty"`
	Extra  *string `json:"extra,omitempty"`
	SerialId  *string `json:"serial_id,omitempty"`
	Link  *InstanceSearchLink `json:"link,omitempty"`
}

type InstanceTask struct {
	Id  *string `json:"id,omitempty"`
	UserId  *string `json:"user_id,omitempty"`
	OpenId  *string `json:"open_id,omitempty"`
	Status  *string `json:"status,omitempty"`
	NodeId  *string `json:"node_id,omitempty"`
	NodeName  *string `json:"node_name,omitempty"`
	CustomNodeId  *string `json:"custom_node_id,omitempty"`
	Type  *string `json:"type,omitempty"`
	StartTime  *int64 `json:"start_time,omitempty,string"`
	EndTime  *int64 `json:"end_time,omitempty,string"`
}

type InstanceTimeline struct {
	Type  *string `json:"type,omitempty"`
	CreateTime  *int64 `json:"create_time,omitempty,string"`
	UserId  *string `json:"user_id,omitempty"`
	OpenId  *string `json:"open_id,omitempty"`
	UserIdList  []string `json:"user_id_list,omitempty"`
	OpenIdList  []string `json:"open_id_list,omitempty"`
	TaskId  *string `json:"task_id,omitempty"`
	Comment  *string `json:"comment,omitempty"`
	CcUserList  []*InstanceCcUser `json:"cc_user_list,omitempty"`
	Ext  *string `json:"ext,omitempty"`
	NodeKey  *string `json:"node_key,omitempty"`
}

type Message struct {
	Id  *string `json:"id,omitempty"`
	ReceiveId  *string `json:"receive_id,omitempty"`
	Content  *string `json:"content,omitempty"`
	MsgType  *string `json:"msg_type,omitempty"`
	Config  *string `json:"config,omitempty"`
	Extra  *string `json:"extra,omitempty"`
	Uuid  *string `json:"uuid,omitempty"`
}

type NodeApprover struct {
	Key  *string `json:"key,omitempty"`
	Value  []string `json:"value,omitempty"`
}

type NodeCc struct {
	Key  *string `json:"key,omitempty"`
	Value  []string `json:"value,omitempty"`
}

type PreviewNode struct {
	NodeId  *string `json:"node_id,omitempty"`
	NodeName  *string `json:"node_name,omitempty"`
	NodeType  *string `json:"node_type,omitempty"`
	Comments  []string `json:"comments,omitempty"`
	CustomNodeId  *string `json:"custom_node_id,omitempty"`
	UserIdList  []string `json:"user_id_list,omitempty"`
	EndCcIdList  []string `json:"end_cc_id_list,omitempty"`
	IsEmptyLogic  *bool `json:"is_empty_logic,omitempty"`
	IsApproverTypeFree  *bool `json:"is_approver_type_free,omitempty"`
	HasCcTypeFree  *bool `json:"has_cc_type_free,omitempty"`
}

type Reason struct {
	Text  *string `json:"text,omitempty"`
	Files  []*File `json:"files,omitempty"`
}

type RemedyGroup struct {
	Type  *string `json:"type,omitempty"`
	InstanceCode  *string `json:"instance_code,omitempty"`
	EmployeeId  *string `json:"employee_id,omitempty"`
	StartTime  *int `json:"start_time,omitempty"`
	EndTime  *int `json:"end_time,omitempty"`
	RemedyTime  *int `json:"remedy_time,omitempty"`
	RemedyReason  *string `json:"remedy_reason,omitempty"`
	Status  *string `json:"status,omitempty"`
}

type SignGroup struct {
	InstanceCode  *string `json:"instance_code,omitempty"`
	UserId  *UserId `json:"user_id,omitempty"`
	AccountCode  *string `json:"account_code,omitempty"`
	BoilerplateUniqueCode  *string `json:"boilerplate_unique_code,omitempty"`
	StartTime  *int `json:"start_time,omitempty"`
	EndTime  *int `json:"end_time,omitempty"`
	Type  *string `json:"type,omitempty"`
}

type SpecifiedRollback struct {
	UserId  *string `json:"user_id,omitempty"`
	TaskId  *int64 `json:"task_id,omitempty,string"`
	Reason  *string `json:"reason,omitempty"`
	Extra  *string `json:"extra,omitempty"`
	TaskDefKeyList  []string `json:"task_def_key_list,omitempty"`
}

type Task struct {
	Topic  *int64 `json:"topic,omitempty,string"`
	UserId  *int64 `json:"user_id,omitempty,string"`
	Title  *string `json:"title,omitempty"`
	Urls  *TaskUrls `json:"urls,omitempty"`
	ProcessExternalId  *string `json:"process_external_id,omitempty"`
	TaskExternalId  *string `json:"task_external_id,omitempty"`
	Status  *string `json:"status,omitempty"`
	ProcessStatus  *string `json:"process_status,omitempty"`
	DefinitionCode  *string `json:"definition_code,omitempty"`
	Initiators  []string `json:"initiators,omitempty"`
	InitiatorNames  []string `json:"initiator_names,omitempty"`
	TaskId  *int64 `json:"task_id,omitempty,string"`
	ProcessId  *int64 `json:"process_id,omitempty,string"`
	ProcessCode  *string `json:"process_code,omitempty"`
	DefinitionGroupId  *int64 `json:"definition_group_id,omitempty,string"`
	DefinitionGroupName  *string `json:"definition_group_name,omitempty"`
	DefinitionId  *int64 `json:"definition_id,omitempty,string"`
	DefinitionName  *string `json:"definition_name,omitempty"`
}

type TaskApprove struct {
	ApprovalCode  *string `json:"approval_code,omitempty"`
	InstanceCode  *string `json:"instance_code,omitempty"`
	UserId  *string `json:"user_id,omitempty"`
	Comment  *string `json:"comment,omitempty"`
	TaskId  *string `json:"task_id,omitempty"`
}

type TaskSearch struct {
	UserId  *string `json:"user_id,omitempty"`
	ApprovalCode  *string `json:"approval_code,omitempty"`
	InstanceCode  *string `json:"instance_code,omitempty"`
	InstanceExternalId  *string `json:"instance_external_id,omitempty"`
	GroupExternalId  *string `json:"group_external_id,omitempty"`
	TaskTitle  *string `json:"task_title,omitempty"`
	TaskStatus  *string `json:"task_status,omitempty"`
	InstanceStartTimeFrom  *int64 `json:"instance_start_time_from,omitempty,string"`
	InstanceStartTimeTo  *int64 `json:"instance_start_time_to,omitempty,string"`
	Locale  *string `json:"locale,omitempty"`
}

type TaskSearchItem struct {
	Approval  *InstanceSearchApproval `json:"approval,omitempty"`
	Group  *InstanceSearchGroup `json:"group,omitempty"`
	Instance  *InstanceSearchNode `json:"instance,omitempty"`
	Task  *TaskSearchNode `json:"task,omitempty"`
}

type TaskSearchNode struct {
	UserId  *string `json:"user_id,omitempty"`
	StartTime  *int64 `json:"start_time,omitempty,string"`
	EndTime  *int64 `json:"end_time,omitempty,string"`
	Status  *string `json:"status,omitempty"`
	Title  *string `json:"title,omitempty"`
	Extra  *string `json:"extra,omitempty"`
	Link  *InstanceSearchLink `json:"link,omitempty"`
}

type TaskTransfer struct {
	ApprovalCode  *string `json:"approval_code,omitempty"`
	InstanceCode  *string `json:"instance_code,omitempty"`
	UserId  *string `json:"user_id,omitempty"`
	Comment  *string `json:"comment,omitempty"`
	TransferUserId  *string `json:"transfer_user_id,omitempty"`
	TaskId  *string `json:"task_id,omitempty"`
}

type TaskUrls struct {
	Helpdesk  *string `json:"helpdesk,omitempty"`
	Mobile  *string `json:"mobile,omitempty"`
	Pc  *string `json:"pc,omitempty"`
}

type TripGroup struct {
	Type  *string `json:"type,omitempty"`
	InstanceCode  *string `json:"instance_code,omitempty"`
	StartUser  *User `json:"start_user,omitempty"`
	StartTime  *string `json:"start_time,omitempty"`
	EndTime  *string `json:"end_time,omitempty"`
	TripInterval  *string `json:"trip_interval,omitempty"`
	TripReason  *string `json:"trip_reason,omitempty"`
	Schedules  []*TripGroupSchedule `json:"schedules,omitempty"`
	TripPeers  []*User `json:"trip_peers,omitempty"`
}

type TripGroupSchedule struct {
	TripStartTime  *string `json:"trip_start_time,omitempty"`
	TripEndTime  *string `json:"trip_end_time,omitempty"`
	TripInterval  *string `json:"trip_interval,omitempty"`
	Departure  *string `json:"departure,omitempty"`
	Destination  *string `json:"destination,omitempty"`
	Transportation  *string `json:"transportation,omitempty"`
	TripType  *string `json:"trip_type,omitempty"`
	Remark  *string `json:"remark,omitempty"`
}

type User struct {
	Id  *UserId `json:"id,omitempty"`
	Name  *string `json:"name,omitempty"`
}

type UserId struct {
	UserId  *string `json:"user_id,omitempty"`
	OpenId  *string `json:"open_id,omitempty"`
	UnionId  *string `json:"union_id,omitempty"`
}


/**生成请求和响应结果类型，以及请求对象的Builder构造器 **/


/*1.4 生成请求的builder结构体*/
type CreateApprovalReqBuilder struct {
	departmentIdType  string
	departmentIdTypeFlag  bool
	userIdType  string
	userIdTypeFlag  bool
	approvalCreate *ApprovalCreate
	approvalCreateFlag bool

}

// 生成请求的New构造器
func NewCreateApprovalReqBuilder() * CreateApprovalReqBuilder{
   builder := &CreateApprovalReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * CreateApprovalReqBuilder) DepartmentIdType(departmentIdType string) *CreateApprovalReqBuilder  {
  builder.departmentIdType = departmentIdType
  builder.departmentIdTypeFlag = true
  return builder
}
func (builder * CreateApprovalReqBuilder) UserIdType(userIdType string) *CreateApprovalReqBuilder  {
  builder.userIdType = userIdType
  builder.userIdTypeFlag = true
  return builder
}
func (builder * CreateApprovalReqBuilder) ApprovalCreate(approvalCreate *ApprovalCreate) *CreateApprovalReqBuilder  {
  builder.approvalCreate = approvalCreate
  builder.approvalCreateFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * CreateApprovalReqBuilder ) Build() *CreateApprovalReq {
   req := &CreateApprovalReq{}
   if builder.departmentIdTypeFlag {
	  req.DepartmentIdType = &builder.departmentIdType
   }
   if builder.userIdTypeFlag {
	  req.UserIdType = &builder.userIdType
   }
   return req
}


type CreateApprovalReq struct {
	DepartmentIdType  *string `query:"department_id_type"`
	UserIdType  *string `query:"user_id_type"`
	ApprovalCreate *ApprovalCreate `body:""`

}

type CreateApprovalRespData struct {
	ApprovalCode  *string `json:"approval_code,omitempty"`
	ApprovalId  *int64 `json:"approval_id,omitempty,string"`
}

type CreateApprovalResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *CreateApprovalRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type GetApprovalReqBuilder struct {
	approvalCode  string
	approvalCodeFlag  bool
	locale  string
	localeFlag  bool

}

// 生成请求的New构造器
func NewGetApprovalReqBuilder() * GetApprovalReqBuilder{
   builder := &GetApprovalReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * GetApprovalReqBuilder) ApprovalCode(approvalCode string) *GetApprovalReqBuilder  {
  builder.approvalCode = approvalCode
  builder.approvalCodeFlag = true
  return builder
}
func (builder * GetApprovalReqBuilder) Locale(locale string) *GetApprovalReqBuilder  {
  builder.locale = locale
  builder.localeFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * GetApprovalReqBuilder ) Build() *GetApprovalReq {
   req := &GetApprovalReq{}
   if builder.approvalCodeFlag {
	  req.ApprovalCode = builder.approvalCode
   }
   if builder.localeFlag {
	  req.Locale = &builder.locale
   }
   return req
}


type GetApprovalReq struct {
	ApprovalCode  string `path:"approval_code"`
	Locale  *string `query:"locale"`

}

type GetApprovalRespData struct {
	ApprovalName  *string `json:"approval_name,omitempty"`
	Status  *string `json:"status,omitempty"`
	Form  *string `json:"form,omitempty"`
	NodeList  []*ApprovalNodeInfo `json:"node_list,omitempty"`
	Viewers  []*ApprovalViewerInfo `json:"viewers,omitempty"`
}

type GetApprovalResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *GetApprovalRespData `json:"data"`
}

type SearchApprovalReqBodyBuilder struct {
	userId  string
	userIdFlag  bool
	locale  string
	localeFlag  bool
}

// 生成body的New构造器
func NewSearchApprovalReqBodyBuilder() * SearchApprovalReqBodyBuilder{
  builder := &SearchApprovalReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * SearchApprovalReqBodyBuilder ) UserId(userId string) *SearchApprovalReqBodyBuilder {
  builder.userId = userId
  builder.userIdFlag = true
  return builder
}
func (builder * SearchApprovalReqBodyBuilder ) Locale(locale string) *SearchApprovalReqBodyBuilder {
  builder.locale = locale
  builder.localeFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * SearchApprovalReqBodyBuilder ) Build() *SearchApprovalReqBody {
   req := &SearchApprovalReqBody{}
   if builder.userIdFlag {
	  req.UserId = &builder.userId
	  

   }
   if builder.localeFlag {
	  req.Locale = &builder.locale
	  

   }
   return req
}

/**上传文件path开始**/
type SearchApprovalPathReqBodyBuilder struct {
	userId  string
	userIdFlag  bool
	locale  string
	localeFlag  bool
}

// 生成body的New构造器
func NewSearchApprovalPathReqBodyBuilder() * SearchApprovalPathReqBodyBuilder{
  builder := &SearchApprovalPathReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * SearchApprovalPathReqBodyBuilder ) UserId(userId string) *SearchApprovalPathReqBodyBuilder {
  builder.userId = userId
  builder.userIdFlag = true
  return builder
}
func (builder * SearchApprovalPathReqBodyBuilder ) Locale(locale string) *SearchApprovalPathReqBodyBuilder {
  builder.locale = locale
  builder.localeFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * SearchApprovalPathReqBodyBuilder ) Build() (*SearchApprovalReqBody, error) {
   req := &SearchApprovalReqBody{}
   if builder.userIdFlag {
	  req.UserId = &builder.userId
	  
   }
   if builder.localeFlag {
	  req.Locale = &builder.locale
	  
   }
   return req, nil
}
/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type SearchApprovalReqBuilder struct {
	userIdType  string
	userIdTypeFlag  bool
	body *SearchApprovalReqBody
	bodyFlag bool

}

// 生成请求的New构造器
func NewSearchApprovalReqBuilder() * SearchApprovalReqBuilder{
   builder := &SearchApprovalReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * SearchApprovalReqBuilder) UserIdType(userIdType string) *SearchApprovalReqBuilder  {
  builder.userIdType = userIdType
  builder.userIdTypeFlag = true
  return builder
}
func (builder * SearchApprovalReqBuilder) Body(body *SearchApprovalReqBody) *SearchApprovalReqBuilder  {
  builder.body = body
  builder.bodyFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * SearchApprovalReqBuilder ) Build() *SearchApprovalReq {
   req := &SearchApprovalReq{}
   if builder.userIdTypeFlag {
	  req.UserIdType = &builder.userIdType
   }
   if builder.bodyFlag {
	  req.Body = builder.body

   }
   return req
}

type SearchApprovalReqBody struct {
	UserId  *string `json:"user_id,omitempty"`
	Locale  *string `json:"locale,omitempty"`
}

type SearchApprovalReq struct {
	UserIdType  *string `query:"user_id_type"`
	Body *SearchApprovalReqBody `body:""`

}

type SearchApprovalRespData struct {
	ApprovalList  []*Approval `json:"approval_list,omitempty"`
}

type SearchApprovalResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *SearchApprovalRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type SubscribeApprovalReqBuilder struct {
	approvalCode  string
	approvalCodeFlag  bool

}

// 生成请求的New构造器
func NewSubscribeApprovalReqBuilder() * SubscribeApprovalReqBuilder{
   builder := &SubscribeApprovalReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * SubscribeApprovalReqBuilder) ApprovalCode(approvalCode string) *SubscribeApprovalReqBuilder  {
  builder.approvalCode = approvalCode
  builder.approvalCodeFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * SubscribeApprovalReqBuilder ) Build() *SubscribeApprovalReq {
   req := &SubscribeApprovalReq{}
   if builder.approvalCodeFlag {
	  req.ApprovalCode = builder.approvalCode
   }
   return req
}


type SubscribeApprovalReq struct {
	ApprovalCode  string `path:"approval_code"`

}


type SubscribeApprovalResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}


/*1.4 生成请求的builder结构体*/
type UnsubscribeApprovalReqBuilder struct {
	approvalCode  string
	approvalCodeFlag  bool

}

// 生成请求的New构造器
func NewUnsubscribeApprovalReqBuilder() * UnsubscribeApprovalReqBuilder{
   builder := &UnsubscribeApprovalReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * UnsubscribeApprovalReqBuilder) ApprovalCode(approvalCode string) *UnsubscribeApprovalReqBuilder  {
  builder.approvalCode = approvalCode
  builder.approvalCodeFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * UnsubscribeApprovalReqBuilder ) Build() *UnsubscribeApprovalReq {
   req := &UnsubscribeApprovalReq{}
   if builder.approvalCodeFlag {
	  req.ApprovalCode = builder.approvalCode
   }
   return req
}


type UnsubscribeApprovalReq struct {
	ApprovalCode  string `path:"approval_code"`

}


type UnsubscribeApprovalResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}


/*1.4 生成请求的builder结构体*/
type CreateExternalApprovalReqBuilder struct {
	departmentIdType  string
	departmentIdTypeFlag  bool
	userIdType  string
	userIdTypeFlag  bool
	externalApproval *ExternalApproval
	externalApprovalFlag bool

}

// 生成请求的New构造器
func NewCreateExternalApprovalReqBuilder() * CreateExternalApprovalReqBuilder{
   builder := &CreateExternalApprovalReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * CreateExternalApprovalReqBuilder) DepartmentIdType(departmentIdType string) *CreateExternalApprovalReqBuilder  {
  builder.departmentIdType = departmentIdType
  builder.departmentIdTypeFlag = true
  return builder
}
func (builder * CreateExternalApprovalReqBuilder) UserIdType(userIdType string) *CreateExternalApprovalReqBuilder  {
  builder.userIdType = userIdType
  builder.userIdTypeFlag = true
  return builder
}
func (builder * CreateExternalApprovalReqBuilder) ExternalApproval(externalApproval *ExternalApproval) *CreateExternalApprovalReqBuilder  {
  builder.externalApproval = externalApproval
  builder.externalApprovalFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * CreateExternalApprovalReqBuilder ) Build() *CreateExternalApprovalReq {
   req := &CreateExternalApprovalReq{}
   if builder.departmentIdTypeFlag {
	  req.DepartmentIdType = &builder.departmentIdType
   }
   if builder.userIdTypeFlag {
	  req.UserIdType = &builder.userIdType
   }
   return req
}


type CreateExternalApprovalReq struct {
	DepartmentIdType  *string `query:"department_id_type"`
	UserIdType  *string `query:"user_id_type"`
	ExternalApproval *ExternalApproval `body:""`

}

type CreateExternalApprovalRespData struct {
	ApprovalCode  *string `json:"approval_code,omitempty"`
}

type CreateExternalApprovalResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *CreateExternalApprovalRespData `json:"data"`
}

type CheckExternalInstanceReqBodyBuilder struct {
	instances  []*ExteranlInstanceCheck
	instancesFlag  bool
}

// 生成body的New构造器
func NewCheckExternalInstanceReqBodyBuilder() * CheckExternalInstanceReqBodyBuilder{
  builder := &CheckExternalInstanceReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * CheckExternalInstanceReqBodyBuilder ) Instances(instances []*ExteranlInstanceCheck) *CheckExternalInstanceReqBodyBuilder {
  builder.instances = instances
  builder.instancesFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * CheckExternalInstanceReqBodyBuilder ) Build() *CheckExternalInstanceReqBody {
   req := &CheckExternalInstanceReqBody{}
   if builder.instancesFlag {
	  req.Instances = builder.instances

   }
   return req
}

/**上传文件path开始**/
type CheckExternalInstancePathReqBodyBuilder struct {
	instances  []*ExteranlInstanceCheck
	instancesFlag  bool
}

// 生成body的New构造器
func NewCheckExternalInstancePathReqBodyBuilder() * CheckExternalInstancePathReqBodyBuilder{
  builder := &CheckExternalInstancePathReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * CheckExternalInstancePathReqBodyBuilder ) Instances(instances []*ExteranlInstanceCheck) *CheckExternalInstancePathReqBodyBuilder {
  builder.instances = instances
  builder.instancesFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * CheckExternalInstancePathReqBodyBuilder ) Build() (*CheckExternalInstanceReqBody, error) {
   req := &CheckExternalInstanceReqBody{}
   if builder.instancesFlag {
	   req.Instances = builder.instances
   }
   return req, nil
}
/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type CheckExternalInstanceReqBuilder struct {
	body *CheckExternalInstanceReqBody
	bodyFlag bool

}

// 生成请求的New构造器
func NewCheckExternalInstanceReqBuilder() * CheckExternalInstanceReqBuilder{
   builder := &CheckExternalInstanceReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * CheckExternalInstanceReqBuilder) Body(body *CheckExternalInstanceReqBody) *CheckExternalInstanceReqBuilder  {
  builder.body = body
  builder.bodyFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * CheckExternalInstanceReqBuilder ) Build() *CheckExternalInstanceReq {
   req := &CheckExternalInstanceReq{}
   if builder.bodyFlag {
	  req.Body = builder.body

   }
   return req
}

type CheckExternalInstanceReqBody struct {
	Instances  []*ExteranlInstanceCheck `json:"instances,omitempty"`
}

type CheckExternalInstanceReq struct {
	Body *CheckExternalInstanceReqBody `body:""`

}

type CheckExternalInstanceRespData struct {
	DiffInstances  []*ExteranlInstanceCheckResponse `json:"diff_instances,omitempty"`
}

type CheckExternalInstanceResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *CheckExternalInstanceRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type CreateExternalInstanceReqBuilder struct {
	externalInstance *ExternalInstance
	externalInstanceFlag bool

}

// 生成请求的New构造器
func NewCreateExternalInstanceReqBuilder() * CreateExternalInstanceReqBuilder{
   builder := &CreateExternalInstanceReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * CreateExternalInstanceReqBuilder) ExternalInstance(externalInstance *ExternalInstance) *CreateExternalInstanceReqBuilder  {
  builder.externalInstance = externalInstance
  builder.externalInstanceFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * CreateExternalInstanceReqBuilder ) Build() *CreateExternalInstanceReq {
   req := &CreateExternalInstanceReq{}
   return req
}


type CreateExternalInstanceReq struct {
	ExternalInstance *ExternalInstance `body:""`

}

type CreateExternalInstanceRespData struct {
	Data  *ExternalInstance `json:"data,omitempty"`
}

type CreateExternalInstanceResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *CreateExternalInstanceRespData `json:"data"`
}

type ListExternalTaskReqBodyBuilder struct {
	approvalCodes  []string
	approvalCodesFlag  bool
	instanceIds  []string
	instanceIdsFlag  bool
	userIds  []string
	userIdsFlag  bool
	status  string
	statusFlag  bool
}

// 生成body的New构造器
func NewListExternalTaskReqBodyBuilder() * ListExternalTaskReqBodyBuilder{
  builder := &ListExternalTaskReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * ListExternalTaskReqBodyBuilder ) ApprovalCodes(approvalCodes []string) *ListExternalTaskReqBodyBuilder {
  builder.approvalCodes = approvalCodes
  builder.approvalCodesFlag = true
  return builder
}
func (builder * ListExternalTaskReqBodyBuilder ) InstanceIds(instanceIds []string) *ListExternalTaskReqBodyBuilder {
  builder.instanceIds = instanceIds
  builder.instanceIdsFlag = true
  return builder
}
func (builder * ListExternalTaskReqBodyBuilder ) UserIds(userIds []string) *ListExternalTaskReqBodyBuilder {
  builder.userIds = userIds
  builder.userIdsFlag = true
  return builder
}
func (builder * ListExternalTaskReqBodyBuilder ) Status(status string) *ListExternalTaskReqBodyBuilder {
  builder.status = status
  builder.statusFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * ListExternalTaskReqBodyBuilder ) Build() *ListExternalTaskReqBody {
   req := &ListExternalTaskReqBody{}
   if builder.approvalCodesFlag {
	  req.ApprovalCodes = builder.approvalCodes

   }
   if builder.instanceIdsFlag {
	  req.InstanceIds = builder.instanceIds

   }
   if builder.userIdsFlag {
	  req.UserIds = builder.userIds

   }
   if builder.statusFlag {
	  req.Status = &builder.status
	  

   }
   return req
}

/**上传文件path开始**/
type ListExternalTaskPathReqBodyBuilder struct {
	approvalCodes  []string
	approvalCodesFlag  bool
	instanceIds  []string
	instanceIdsFlag  bool
	userIds  []string
	userIdsFlag  bool
	status  string
	statusFlag  bool
}

// 生成body的New构造器
func NewListExternalTaskPathReqBodyBuilder() * ListExternalTaskPathReqBodyBuilder{
  builder := &ListExternalTaskPathReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * ListExternalTaskPathReqBodyBuilder ) ApprovalCodes(approvalCodes []string) *ListExternalTaskPathReqBodyBuilder {
  builder.approvalCodes = approvalCodes
  builder.approvalCodesFlag = true
  return builder
}
func (builder * ListExternalTaskPathReqBodyBuilder ) InstanceIds(instanceIds []string) *ListExternalTaskPathReqBodyBuilder {
  builder.instanceIds = instanceIds
  builder.instanceIdsFlag = true
  return builder
}
func (builder * ListExternalTaskPathReqBodyBuilder ) UserIds(userIds []string) *ListExternalTaskPathReqBodyBuilder {
  builder.userIds = userIds
  builder.userIdsFlag = true
  return builder
}
func (builder * ListExternalTaskPathReqBodyBuilder ) Status(status string) *ListExternalTaskPathReqBodyBuilder {
  builder.status = status
  builder.statusFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * ListExternalTaskPathReqBodyBuilder ) Build() (*ListExternalTaskReqBody, error) {
   req := &ListExternalTaskReqBody{}
   if builder.approvalCodesFlag {
	   req.ApprovalCodes = builder.approvalCodes
   }
   if builder.instanceIdsFlag {
	   req.InstanceIds = builder.instanceIds
   }
   if builder.userIdsFlag {
	   req.UserIds = builder.userIds
   }
   if builder.statusFlag {
	  req.Status = &builder.status
	  
   }
   return req, nil
}
/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type ListExternalTaskReqBuilder struct {
	pageSize  int
	pageSizeFlag  bool
	pageToken  string
	pageTokenFlag  bool
	body *ListExternalTaskReqBody
	bodyFlag bool
	limit int

}

// 生成请求的New构造器
func NewListExternalTaskReqBuilder() * ListExternalTaskReqBuilder{
   builder := &ListExternalTaskReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * ListExternalTaskReqBuilder) Limit(limit int ) *ListExternalTaskReqBuilder  {
  builder.limit = limit
  return builder
}
func (builder * ListExternalTaskReqBuilder) PageSize(pageSize int) *ListExternalTaskReqBuilder  {
  builder.pageSize = pageSize
  builder.pageSizeFlag = true
  return builder
}
func (builder * ListExternalTaskReqBuilder) PageToken(pageToken string) *ListExternalTaskReqBuilder  {
  builder.pageToken = pageToken
  builder.pageTokenFlag = true
  return builder
}
func (builder * ListExternalTaskReqBuilder) Body(body *ListExternalTaskReqBody) *ListExternalTaskReqBuilder  {
  builder.body = body
  builder.bodyFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * ListExternalTaskReqBuilder ) Build() *ListExternalTaskReq {
   req := &ListExternalTaskReq{}
   req.Limit = builder.limit
   if builder.pageSizeFlag {
	  req.PageSize = &builder.pageSize
   }
   if builder.pageTokenFlag {
	  req.PageToken = &builder.pageToken
   }
   if builder.bodyFlag {
	  req.Body = builder.body

   }
   return req
}

type ListExternalTaskReqBody struct {
	ApprovalCodes  []string `json:"approval_codes,omitempty"`
	InstanceIds  []string `json:"instance_ids,omitempty"`
	UserIds  []string `json:"user_ids,omitempty"`
	Status  *string `json:"status,omitempty"`
}

type ListExternalTaskReq struct {
	PageSize  *int `query:"page_size"`
	PageToken  *string `query:"page_token"`
	Body *ListExternalTaskReqBody `body:""`
	Limit int

}

type ListExternalTaskRespData struct {
	Data  []*ExternalTaskList `json:"data,omitempty"`
	PageToken  *string `json:"page_token,omitempty"`
	HasMore  *bool `json:"has_more,omitempty"`
}

type ListExternalTaskResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *ListExternalTaskRespData `json:"data"`
}

type UploadFileReqBodyBuilder struct {
	name  string
	nameFlag  bool
	type_  string
	typeFlag  bool
	content  io.Reader
	contentFlag  bool
}

// 生成body的New构造器
func NewUploadFileReqBodyBuilder() * UploadFileReqBodyBuilder{
  builder := &UploadFileReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * UploadFileReqBodyBuilder ) Name(name string) *UploadFileReqBodyBuilder {
  builder.name = name
  builder.nameFlag = true
  return builder
}
func (builder * UploadFileReqBodyBuilder ) Type(type_ string) *UploadFileReqBodyBuilder {
  builder.type_ = type_
  builder.typeFlag = true
  return builder
}
func (builder * UploadFileReqBodyBuilder ) Content(content io.Reader) *UploadFileReqBodyBuilder {
  builder.content = content
  builder.contentFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * UploadFileReqBodyBuilder ) Build() *UploadFileReqBody {
   req := &UploadFileReqBody{}
   if builder.nameFlag {
	  req.Name = &builder.name
	  

   }
   if builder.typeFlag {
	  req.Type = &builder.type_
	  

   }
   if builder.contentFlag {
	  req.Content = builder.content

   }
   return req
}

/**上传文件path开始**/
type UploadFilePathReqBodyBuilder struct {
	name  string
	nameFlag  bool
	type_  string
	typeFlag  bool
	contentPath  string
	contentPathFlag  bool
}

// 生成body的New构造器
func NewUploadFilePathReqBodyBuilder() * UploadFilePathReqBodyBuilder{
  builder := &UploadFilePathReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * UploadFilePathReqBodyBuilder ) Name(name string) *UploadFilePathReqBodyBuilder {
  builder.name = name
  builder.nameFlag = true
  return builder
}
func (builder * UploadFilePathReqBodyBuilder ) Type(type_ string) *UploadFilePathReqBodyBuilder {
  builder.type_ = type_
  builder.typeFlag = true
  return builder
}
func (builder * UploadFilePathReqBodyBuilder ) ContentPath(contentPath string) *UploadFilePathReqBodyBuilder {
  builder.contentPath = contentPath
  builder.contentPathFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * UploadFilePathReqBodyBuilder ) Build() (*UploadFileReqBody, error) {
   req := &UploadFileReqBody{}
   if builder.nameFlag {
	  req.Name = &builder.name
	  
   }
   if builder.typeFlag {
	  req.Type = &builder.type_
	  
   }
   if builder.contentPathFlag {
	  data, err := core.File2Bytes(builder.contentPath)
	  if err != nil {
		return nil, err
	  }
	  req.Content = bytes.NewBuffer(data)
   }
   return req, nil
}
/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type UploadFileReqBuilder struct {
	body *UploadFileReqBody
	bodyFlag bool

}

// 生成请求的New构造器
func NewUploadFileReqBuilder() * UploadFileReqBuilder{
   builder := &UploadFileReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * UploadFileReqBuilder) Body(body *UploadFileReqBody) *UploadFileReqBuilder  {
  builder.body = body
  builder.bodyFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * UploadFileReqBuilder ) Build() *UploadFileReq {
   req := &UploadFileReq{}
   if builder.bodyFlag {
	  req.Body = builder.body

   }
   return req
}

type UploadFileReqBody struct {
	Name  *string `json:"name,omitempty"`
	Type  *string `json:"type,omitempty"`
	Content  io.Reader `json:"content,omitempty"`
}

type UploadFileReq struct {
	Body *UploadFileReqBody `body:""`

}

type UploadFileRespData struct {
	Code  *string `json:"code,omitempty"`
	Url  *string `json:"url,omitempty"`
}

type UploadFileResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *UploadFileRespData `json:"data"`
}

type AddSignInstanceReqBodyBuilder struct {
	userId  string
	userIdFlag  bool
	approvalCode  string
	approvalCodeFlag  bool
	instanceCode  string
	instanceCodeFlag  bool
	taskId  string
	taskIdFlag  bool
	comment  string
	commentFlag  bool
	addSignUserIds  []string
	addSignUserIdsFlag  bool
	addSignType  int
	addSignTypeFlag  bool
	approvalMethod  int
	approvalMethodFlag  bool
}

// 生成body的New构造器
func NewAddSignInstanceReqBodyBuilder() * AddSignInstanceReqBodyBuilder{
  builder := &AddSignInstanceReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * AddSignInstanceReqBodyBuilder ) UserId(userId string) *AddSignInstanceReqBodyBuilder {
  builder.userId = userId
  builder.userIdFlag = true
  return builder
}
func (builder * AddSignInstanceReqBodyBuilder ) ApprovalCode(approvalCode string) *AddSignInstanceReqBodyBuilder {
  builder.approvalCode = approvalCode
  builder.approvalCodeFlag = true
  return builder
}
func (builder * AddSignInstanceReqBodyBuilder ) InstanceCode(instanceCode string) *AddSignInstanceReqBodyBuilder {
  builder.instanceCode = instanceCode
  builder.instanceCodeFlag = true
  return builder
}
func (builder * AddSignInstanceReqBodyBuilder ) TaskId(taskId string) *AddSignInstanceReqBodyBuilder {
  builder.taskId = taskId
  builder.taskIdFlag = true
  return builder
}
func (builder * AddSignInstanceReqBodyBuilder ) Comment(comment string) *AddSignInstanceReqBodyBuilder {
  builder.comment = comment
  builder.commentFlag = true
  return builder
}
func (builder * AddSignInstanceReqBodyBuilder ) AddSignUserIds(addSignUserIds []string) *AddSignInstanceReqBodyBuilder {
  builder.addSignUserIds = addSignUserIds
  builder.addSignUserIdsFlag = true
  return builder
}
func (builder * AddSignInstanceReqBodyBuilder ) AddSignType(addSignType int) *AddSignInstanceReqBodyBuilder {
  builder.addSignType = addSignType
  builder.addSignTypeFlag = true
  return builder
}
func (builder * AddSignInstanceReqBodyBuilder ) ApprovalMethod(approvalMethod int) *AddSignInstanceReqBodyBuilder {
  builder.approvalMethod = approvalMethod
  builder.approvalMethodFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * AddSignInstanceReqBodyBuilder ) Build() *AddSignInstanceReqBody {
   req := &AddSignInstanceReqBody{}
   if builder.userIdFlag {
	  req.UserId = &builder.userId
	  

   }
   if builder.approvalCodeFlag {
	  req.ApprovalCode = &builder.approvalCode
	  

   }
   if builder.instanceCodeFlag {
	  req.InstanceCode = &builder.instanceCode
	  

   }
   if builder.taskIdFlag {
	  req.TaskId = &builder.taskId
	  

   }
   if builder.commentFlag {
	  req.Comment = &builder.comment
	  

   }
   if builder.addSignUserIdsFlag {
	  req.AddSignUserIds = builder.addSignUserIds

   }
   if builder.addSignTypeFlag {
	  req.AddSignType = &builder.addSignType
	  

   }
   if builder.approvalMethodFlag {
	  req.ApprovalMethod = &builder.approvalMethod
	  

   }
   return req
}

/**上传文件path开始**/
type AddSignInstancePathReqBodyBuilder struct {
	userId  string
	userIdFlag  bool
	approvalCode  string
	approvalCodeFlag  bool
	instanceCode  string
	instanceCodeFlag  bool
	taskId  string
	taskIdFlag  bool
	comment  string
	commentFlag  bool
	addSignUserIds  []string
	addSignUserIdsFlag  bool
	addSignType  int
	addSignTypeFlag  bool
	approvalMethod  int
	approvalMethodFlag  bool
}

// 生成body的New构造器
func NewAddSignInstancePathReqBodyBuilder() * AddSignInstancePathReqBodyBuilder{
  builder := &AddSignInstancePathReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * AddSignInstancePathReqBodyBuilder ) UserId(userId string) *AddSignInstancePathReqBodyBuilder {
  builder.userId = userId
  builder.userIdFlag = true
  return builder
}
func (builder * AddSignInstancePathReqBodyBuilder ) ApprovalCode(approvalCode string) *AddSignInstancePathReqBodyBuilder {
  builder.approvalCode = approvalCode
  builder.approvalCodeFlag = true
  return builder
}
func (builder * AddSignInstancePathReqBodyBuilder ) InstanceCode(instanceCode string) *AddSignInstancePathReqBodyBuilder {
  builder.instanceCode = instanceCode
  builder.instanceCodeFlag = true
  return builder
}
func (builder * AddSignInstancePathReqBodyBuilder ) TaskId(taskId string) *AddSignInstancePathReqBodyBuilder {
  builder.taskId = taskId
  builder.taskIdFlag = true
  return builder
}
func (builder * AddSignInstancePathReqBodyBuilder ) Comment(comment string) *AddSignInstancePathReqBodyBuilder {
  builder.comment = comment
  builder.commentFlag = true
  return builder
}
func (builder * AddSignInstancePathReqBodyBuilder ) AddSignUserIds(addSignUserIds []string) *AddSignInstancePathReqBodyBuilder {
  builder.addSignUserIds = addSignUserIds
  builder.addSignUserIdsFlag = true
  return builder
}
func (builder * AddSignInstancePathReqBodyBuilder ) AddSignType(addSignType int) *AddSignInstancePathReqBodyBuilder {
  builder.addSignType = addSignType
  builder.addSignTypeFlag = true
  return builder
}
func (builder * AddSignInstancePathReqBodyBuilder ) ApprovalMethod(approvalMethod int) *AddSignInstancePathReqBodyBuilder {
  builder.approvalMethod = approvalMethod
  builder.approvalMethodFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * AddSignInstancePathReqBodyBuilder ) Build() (*AddSignInstanceReqBody, error) {
   req := &AddSignInstanceReqBody{}
   if builder.userIdFlag {
	  req.UserId = &builder.userId
	  
   }
   if builder.approvalCodeFlag {
	  req.ApprovalCode = &builder.approvalCode
	  
   }
   if builder.instanceCodeFlag {
	  req.InstanceCode = &builder.instanceCode
	  
   }
   if builder.taskIdFlag {
	  req.TaskId = &builder.taskId
	  
   }
   if builder.commentFlag {
	  req.Comment = &builder.comment
	  
   }
   if builder.addSignUserIdsFlag {
	   req.AddSignUserIds = builder.addSignUserIds
   }
   if builder.addSignTypeFlag {
	  req.AddSignType = &builder.addSignType
	  
   }
   if builder.approvalMethodFlag {
	  req.ApprovalMethod = &builder.approvalMethod
	  
   }
   return req, nil
}
/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type AddSignInstanceReqBuilder struct {
	body *AddSignInstanceReqBody
	bodyFlag bool

}

// 生成请求的New构造器
func NewAddSignInstanceReqBuilder() * AddSignInstanceReqBuilder{
   builder := &AddSignInstanceReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * AddSignInstanceReqBuilder) Body(body *AddSignInstanceReqBody) *AddSignInstanceReqBuilder  {
  builder.body = body
  builder.bodyFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * AddSignInstanceReqBuilder ) Build() *AddSignInstanceReq {
   req := &AddSignInstanceReq{}
   if builder.bodyFlag {
	  req.Body = builder.body

   }
   return req
}

type AddSignInstanceReqBody struct {
	UserId  *string `json:"user_id,omitempty"`
	ApprovalCode  *string `json:"approval_code,omitempty"`
	InstanceCode  *string `json:"instance_code,omitempty"`
	TaskId  *string `json:"task_id,omitempty"`
	Comment  *string `json:"comment,omitempty"`
	AddSignUserIds  []string `json:"add_sign_user_ids,omitempty"`
	AddSignType  *int `json:"add_sign_type,omitempty"`
	ApprovalMethod  *int `json:"approval_method,omitempty"`
}

type AddSignInstanceReq struct {
	Body *AddSignInstanceReqBody `body:""`

}


type AddSignInstanceResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}


/*1.4 生成请求的builder结构体*/
type CancelInstanceReqBuilder struct {
	userIdType  string
	userIdTypeFlag  bool
	instanceCancel *InstanceCancel
	instanceCancelFlag bool

}

// 生成请求的New构造器
func NewCancelInstanceReqBuilder() * CancelInstanceReqBuilder{
   builder := &CancelInstanceReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * CancelInstanceReqBuilder) UserIdType(userIdType string) *CancelInstanceReqBuilder  {
  builder.userIdType = userIdType
  builder.userIdTypeFlag = true
  return builder
}
func (builder * CancelInstanceReqBuilder) InstanceCancel(instanceCancel *InstanceCancel) *CancelInstanceReqBuilder  {
  builder.instanceCancel = instanceCancel
  builder.instanceCancelFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * CancelInstanceReqBuilder ) Build() *CancelInstanceReq {
   req := &CancelInstanceReq{}
   if builder.userIdTypeFlag {
	  req.UserIdType = &builder.userIdType
   }
   return req
}


type CancelInstanceReq struct {
	UserIdType  *string `query:"user_id_type"`
	InstanceCancel *InstanceCancel `body:""`

}


type CancelInstanceResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

type CarbonCopyInstanceReqBodyBuilder struct {
	instanceCode  string
	instanceCodeFlag  bool
	reason  string
	reasonFlag  bool
	reasonVersion  int
	reasonVersionFlag  bool
	targetUserIds  []string
	targetUserIdsFlag  bool
	userId  string
	userIdFlag  bool
}

// 生成body的New构造器
func NewCarbonCopyInstanceReqBodyBuilder() * CarbonCopyInstanceReqBodyBuilder{
  builder := &CarbonCopyInstanceReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * CarbonCopyInstanceReqBodyBuilder ) InstanceCode(instanceCode string) *CarbonCopyInstanceReqBodyBuilder {
  builder.instanceCode = instanceCode
  builder.instanceCodeFlag = true
  return builder
}
func (builder * CarbonCopyInstanceReqBodyBuilder ) Reason(reason string) *CarbonCopyInstanceReqBodyBuilder {
  builder.reason = reason
  builder.reasonFlag = true
  return builder
}
func (builder * CarbonCopyInstanceReqBodyBuilder ) ReasonVersion(reasonVersion int) *CarbonCopyInstanceReqBodyBuilder {
  builder.reasonVersion = reasonVersion
  builder.reasonVersionFlag = true
  return builder
}
func (builder * CarbonCopyInstanceReqBodyBuilder ) TargetUserIds(targetUserIds []string) *CarbonCopyInstanceReqBodyBuilder {
  builder.targetUserIds = targetUserIds
  builder.targetUserIdsFlag = true
  return builder
}
func (builder * CarbonCopyInstanceReqBodyBuilder ) UserId(userId string) *CarbonCopyInstanceReqBodyBuilder {
  builder.userId = userId
  builder.userIdFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * CarbonCopyInstanceReqBodyBuilder ) Build() *CarbonCopyInstanceReqBody {
   req := &CarbonCopyInstanceReqBody{}
   if builder.instanceCodeFlag {
	  req.InstanceCode = &builder.instanceCode
	  

   }
   if builder.reasonFlag {
	  req.Reason = &builder.reason
	  

   }
   if builder.reasonVersionFlag {
	  req.ReasonVersion = &builder.reasonVersion
	  

   }
   if builder.targetUserIdsFlag {
	  req.TargetUserIds = builder.targetUserIds

   }
   if builder.userIdFlag {
	  req.UserId = &builder.userId
	  

   }
   return req
}

/**上传文件path开始**/
type CarbonCopyInstancePathReqBodyBuilder struct {
	instanceCode  string
	instanceCodeFlag  bool
	reason  string
	reasonFlag  bool
	reasonVersion  int
	reasonVersionFlag  bool
	targetUserIds  []string
	targetUserIdsFlag  bool
	userId  string
	userIdFlag  bool
}

// 生成body的New构造器
func NewCarbonCopyInstancePathReqBodyBuilder() * CarbonCopyInstancePathReqBodyBuilder{
  builder := &CarbonCopyInstancePathReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * CarbonCopyInstancePathReqBodyBuilder ) InstanceCode(instanceCode string) *CarbonCopyInstancePathReqBodyBuilder {
  builder.instanceCode = instanceCode
  builder.instanceCodeFlag = true
  return builder
}
func (builder * CarbonCopyInstancePathReqBodyBuilder ) Reason(reason string) *CarbonCopyInstancePathReqBodyBuilder {
  builder.reason = reason
  builder.reasonFlag = true
  return builder
}
func (builder * CarbonCopyInstancePathReqBodyBuilder ) ReasonVersion(reasonVersion int) *CarbonCopyInstancePathReqBodyBuilder {
  builder.reasonVersion = reasonVersion
  builder.reasonVersionFlag = true
  return builder
}
func (builder * CarbonCopyInstancePathReqBodyBuilder ) TargetUserIds(targetUserIds []string) *CarbonCopyInstancePathReqBodyBuilder {
  builder.targetUserIds = targetUserIds
  builder.targetUserIdsFlag = true
  return builder
}
func (builder * CarbonCopyInstancePathReqBodyBuilder ) UserId(userId string) *CarbonCopyInstancePathReqBodyBuilder {
  builder.userId = userId
  builder.userIdFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * CarbonCopyInstancePathReqBodyBuilder ) Build() (*CarbonCopyInstanceReqBody, error) {
   req := &CarbonCopyInstanceReqBody{}
   if builder.instanceCodeFlag {
	  req.InstanceCode = &builder.instanceCode
	  
   }
   if builder.reasonFlag {
	  req.Reason = &builder.reason
	  
   }
   if builder.reasonVersionFlag {
	  req.ReasonVersion = &builder.reasonVersion
	  
   }
   if builder.targetUserIdsFlag {
	   req.TargetUserIds = builder.targetUserIds
   }
   if builder.userIdFlag {
	  req.UserId = &builder.userId
	  
   }
   return req, nil
}
/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type CarbonCopyInstanceReqBuilder struct {
	userIdType  string
	userIdTypeFlag  bool
	body *CarbonCopyInstanceReqBody
	bodyFlag bool

}

// 生成请求的New构造器
func NewCarbonCopyInstanceReqBuilder() * CarbonCopyInstanceReqBuilder{
   builder := &CarbonCopyInstanceReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * CarbonCopyInstanceReqBuilder) UserIdType(userIdType string) *CarbonCopyInstanceReqBuilder  {
  builder.userIdType = userIdType
  builder.userIdTypeFlag = true
  return builder
}
func (builder * CarbonCopyInstanceReqBuilder) Body(body *CarbonCopyInstanceReqBody) *CarbonCopyInstanceReqBuilder  {
  builder.body = body
  builder.bodyFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * CarbonCopyInstanceReqBuilder ) Build() *CarbonCopyInstanceReq {
   req := &CarbonCopyInstanceReq{}
   if builder.userIdTypeFlag {
	  req.UserIdType = &builder.userIdType
   }
   if builder.bodyFlag {
	  req.Body = builder.body

   }
   return req
}

type CarbonCopyInstanceReqBody struct {
	InstanceCode  *string `json:"instance_code,omitempty"`
	Reason  *string `json:"reason,omitempty"`
	ReasonVersion  *int `json:"reason_version,omitempty"`
	TargetUserIds  []string `json:"target_user_ids,omitempty"`
	UserId  *string `json:"user_id,omitempty"`
}

type CarbonCopyInstanceReq struct {
	UserIdType  *string `query:"user_id_type"`
	Body *CarbonCopyInstanceReqBody `body:""`

}

type CarbonCopyInstanceRespData struct {
	CommentId  *string `json:"comment_id,omitempty"`
}

type CarbonCopyInstanceResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *CarbonCopyInstanceRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type CcInstanceReqBuilder struct {
	userIdType  string
	userIdTypeFlag  bool
	instanceCc *InstanceCc
	instanceCcFlag bool

}

// 生成请求的New构造器
func NewCcInstanceReqBuilder() * CcInstanceReqBuilder{
   builder := &CcInstanceReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * CcInstanceReqBuilder) UserIdType(userIdType string) *CcInstanceReqBuilder  {
  builder.userIdType = userIdType
  builder.userIdTypeFlag = true
  return builder
}
func (builder * CcInstanceReqBuilder) InstanceCc(instanceCc *InstanceCc) *CcInstanceReqBuilder  {
  builder.instanceCc = instanceCc
  builder.instanceCcFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * CcInstanceReqBuilder ) Build() *CcInstanceReq {
   req := &CcInstanceReq{}
   if builder.userIdTypeFlag {
	  req.UserIdType = &builder.userIdType
   }
   return req
}


type CcInstanceReq struct {
	UserIdType  *string `query:"user_id_type"`
	InstanceCc *InstanceCc `body:""`

}


type CcInstanceResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}


/*1.4 生成请求的builder结构体*/
type CreateInstanceReqBuilder struct {
	instanceCreate *InstanceCreate
	instanceCreateFlag bool

}

// 生成请求的New构造器
func NewCreateInstanceReqBuilder() * CreateInstanceReqBuilder{
   builder := &CreateInstanceReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * CreateInstanceReqBuilder) InstanceCreate(instanceCreate *InstanceCreate) *CreateInstanceReqBuilder  {
  builder.instanceCreate = instanceCreate
  builder.instanceCreateFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * CreateInstanceReqBuilder ) Build() *CreateInstanceReq {
   req := &CreateInstanceReq{}
   return req
}


type CreateInstanceReq struct {
	InstanceCreate *InstanceCreate `body:""`

}

type CreateInstanceRespData struct {
	InstanceCode  *string `json:"instance_code,omitempty"`
}

type CreateInstanceResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *CreateInstanceRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type GetInstanceReqBuilder struct {
	instanceId  string
	instanceIdFlag  bool
	locale  string
	localeFlag  bool
	userId  string
	userIdFlag  bool
	userIdType  string
	userIdTypeFlag  bool

}

// 生成请求的New构造器
func NewGetInstanceReqBuilder() * GetInstanceReqBuilder{
   builder := &GetInstanceReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * GetInstanceReqBuilder) InstanceId(instanceId string) *GetInstanceReqBuilder  {
  builder.instanceId = instanceId
  builder.instanceIdFlag = true
  return builder
}
func (builder * GetInstanceReqBuilder) Locale(locale string) *GetInstanceReqBuilder  {
  builder.locale = locale
  builder.localeFlag = true
  return builder
}
func (builder * GetInstanceReqBuilder) UserId(userId string) *GetInstanceReqBuilder  {
  builder.userId = userId
  builder.userIdFlag = true
  return builder
}
func (builder * GetInstanceReqBuilder) UserIdType(userIdType string) *GetInstanceReqBuilder  {
  builder.userIdType = userIdType
  builder.userIdTypeFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * GetInstanceReqBuilder ) Build() *GetInstanceReq {
   req := &GetInstanceReq{}
   if builder.instanceIdFlag {
	  req.InstanceId = builder.instanceId
   }
   if builder.localeFlag {
	  req.Locale = &builder.locale
   }
   if builder.userIdFlag {
	  req.UserId = &builder.userId
   }
   if builder.userIdTypeFlag {
	  req.UserIdType = &builder.userIdType
   }
   return req
}


type GetInstanceReq struct {
	InstanceId  string `path:"instance_id"`
	Locale  *string `query:"locale"`
	UserId  *string `query:"user_id"`
	UserIdType  *string `query:"user_id_type"`

}

type GetInstanceRespData struct {
	ApprovalName  *string `json:"approval_name,omitempty"`
	StartTime  *int64 `json:"start_time,omitempty,string"`
	EndTime  *int64 `json:"end_time,omitempty,string"`
	UserId  *string `json:"user_id,omitempty"`
	OpenId  *string `json:"open_id,omitempty"`
	SerialNumber  *string `json:"serial_number,omitempty"`
	DepartmentId  *string `json:"department_id,omitempty"`
	Status  *string `json:"status,omitempty"`
	Uuid  *string `json:"uuid,omitempty"`
	Form  *string `json:"form,omitempty"`
	TaskList  []*InstanceTask `json:"task_list,omitempty"`
	CommentList  []*InstanceComment `json:"comment_list,omitempty"`
	Timeline  []*InstanceTimeline `json:"timeline,omitempty"`
	ModifiedInstanceCode  *string `json:"modified_instance_code,omitempty"`
	RevertedInstanceCode  *string `json:"reverted_instance_code,omitempty"`
	ApprovalCode  *string `json:"approval_code,omitempty"`
}

type GetInstanceResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *GetInstanceRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type ListInstanceReqBuilder struct {
	pageSize  int
	pageSizeFlag  bool
	pageToken  string
	pageTokenFlag  bool
	approvalCode  string
	approvalCodeFlag  bool
	startTime  int64
	startTimeFlag  bool
	endTime  int64
	endTimeFlag  bool
	limit int

}

// 生成请求的New构造器
func NewListInstanceReqBuilder() * ListInstanceReqBuilder{
   builder := &ListInstanceReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * ListInstanceReqBuilder) Limit(limit int ) *ListInstanceReqBuilder  {
  builder.limit = limit
  return builder
}
func (builder * ListInstanceReqBuilder) PageSize(pageSize int) *ListInstanceReqBuilder  {
  builder.pageSize = pageSize
  builder.pageSizeFlag = true
  return builder
}
func (builder * ListInstanceReqBuilder) PageToken(pageToken string) *ListInstanceReqBuilder  {
  builder.pageToken = pageToken
  builder.pageTokenFlag = true
  return builder
}
func (builder * ListInstanceReqBuilder) ApprovalCode(approvalCode string) *ListInstanceReqBuilder  {
  builder.approvalCode = approvalCode
  builder.approvalCodeFlag = true
  return builder
}
func (builder * ListInstanceReqBuilder) StartTime(startTime int64) *ListInstanceReqBuilder  {
  builder.startTime = startTime
  builder.startTimeFlag = true
  return builder
}
func (builder * ListInstanceReqBuilder) EndTime(endTime int64) *ListInstanceReqBuilder  {
  builder.endTime = endTime
  builder.endTimeFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * ListInstanceReqBuilder ) Build() *ListInstanceReq {
   req := &ListInstanceReq{}
   req.Limit = builder.limit
   if builder.pageSizeFlag {
	  req.PageSize = &builder.pageSize
   }
   if builder.pageTokenFlag {
	  req.PageToken = &builder.pageToken
   }
   if builder.approvalCodeFlag {
	  req.ApprovalCode = &builder.approvalCode
   }
   if builder.startTimeFlag {
	  req.StartTime = &builder.startTime
   }
   if builder.endTimeFlag {
	  req.EndTime = &builder.endTime
   }
   return req
}


type ListInstanceReq struct {
	PageSize  *int `query:"page_size"`
	PageToken  *string `query:"page_token"`
	ApprovalCode  *string `query:"approval_code"`
	StartTime  *int64 `query:"start_time"`
	EndTime  *int64 `query:"end_time"`
	Limit int

}

type ListInstanceRespData struct {
	InstanceCodeList  []string `json:"instance_code_list,omitempty"`
	PageToken  *string `json:"page_token,omitempty"`
	HasMore  *bool `json:"has_more,omitempty"`
}

type ListInstanceResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *ListInstanceRespData `json:"data"`
}

type PreviewInstanceReqBodyBuilder struct {
	userId  string
	userIdFlag  bool
	approvalCode  string
	approvalCodeFlag  bool
	departmentId  string
	departmentIdFlag  bool
	form  string
	formFlag  bool
	instanceCode  string
	instanceCodeFlag  bool
	locale  string
	localeFlag  bool
	taskId  string
	taskIdFlag  bool
}

// 生成body的New构造器
func NewPreviewInstanceReqBodyBuilder() * PreviewInstanceReqBodyBuilder{
  builder := &PreviewInstanceReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * PreviewInstanceReqBodyBuilder ) UserId(userId string) *PreviewInstanceReqBodyBuilder {
  builder.userId = userId
  builder.userIdFlag = true
  return builder
}
func (builder * PreviewInstanceReqBodyBuilder ) ApprovalCode(approvalCode string) *PreviewInstanceReqBodyBuilder {
  builder.approvalCode = approvalCode
  builder.approvalCodeFlag = true
  return builder
}
func (builder * PreviewInstanceReqBodyBuilder ) DepartmentId(departmentId string) *PreviewInstanceReqBodyBuilder {
  builder.departmentId = departmentId
  builder.departmentIdFlag = true
  return builder
}
func (builder * PreviewInstanceReqBodyBuilder ) Form(form string) *PreviewInstanceReqBodyBuilder {
  builder.form = form
  builder.formFlag = true
  return builder
}
func (builder * PreviewInstanceReqBodyBuilder ) InstanceCode(instanceCode string) *PreviewInstanceReqBodyBuilder {
  builder.instanceCode = instanceCode
  builder.instanceCodeFlag = true
  return builder
}
func (builder * PreviewInstanceReqBodyBuilder ) Locale(locale string) *PreviewInstanceReqBodyBuilder {
  builder.locale = locale
  builder.localeFlag = true
  return builder
}
func (builder * PreviewInstanceReqBodyBuilder ) TaskId(taskId string) *PreviewInstanceReqBodyBuilder {
  builder.taskId = taskId
  builder.taskIdFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * PreviewInstanceReqBodyBuilder ) Build() *PreviewInstanceReqBody {
   req := &PreviewInstanceReqBody{}
   if builder.userIdFlag {
	  req.UserId = &builder.userId
	  

   }
   if builder.approvalCodeFlag {
	  req.ApprovalCode = &builder.approvalCode
	  

   }
   if builder.departmentIdFlag {
	  req.DepartmentId = &builder.departmentId
	  

   }
   if builder.formFlag {
	  req.Form = &builder.form
	  

   }
   if builder.instanceCodeFlag {
	  req.InstanceCode = &builder.instanceCode
	  

   }
   if builder.localeFlag {
	  req.Locale = &builder.locale
	  

   }
   if builder.taskIdFlag {
	  req.TaskId = &builder.taskId
	  

   }
   return req
}

/**上传文件path开始**/
type PreviewInstancePathReqBodyBuilder struct {
	userId  string
	userIdFlag  bool
	approvalCode  string
	approvalCodeFlag  bool
	departmentId  string
	departmentIdFlag  bool
	form  string
	formFlag  bool
	instanceCode  string
	instanceCodeFlag  bool
	locale  string
	localeFlag  bool
	taskId  string
	taskIdFlag  bool
}

// 生成body的New构造器
func NewPreviewInstancePathReqBodyBuilder() * PreviewInstancePathReqBodyBuilder{
  builder := &PreviewInstancePathReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * PreviewInstancePathReqBodyBuilder ) UserId(userId string) *PreviewInstancePathReqBodyBuilder {
  builder.userId = userId
  builder.userIdFlag = true
  return builder
}
func (builder * PreviewInstancePathReqBodyBuilder ) ApprovalCode(approvalCode string) *PreviewInstancePathReqBodyBuilder {
  builder.approvalCode = approvalCode
  builder.approvalCodeFlag = true
  return builder
}
func (builder * PreviewInstancePathReqBodyBuilder ) DepartmentId(departmentId string) *PreviewInstancePathReqBodyBuilder {
  builder.departmentId = departmentId
  builder.departmentIdFlag = true
  return builder
}
func (builder * PreviewInstancePathReqBodyBuilder ) Form(form string) *PreviewInstancePathReqBodyBuilder {
  builder.form = form
  builder.formFlag = true
  return builder
}
func (builder * PreviewInstancePathReqBodyBuilder ) InstanceCode(instanceCode string) *PreviewInstancePathReqBodyBuilder {
  builder.instanceCode = instanceCode
  builder.instanceCodeFlag = true
  return builder
}
func (builder * PreviewInstancePathReqBodyBuilder ) Locale(locale string) *PreviewInstancePathReqBodyBuilder {
  builder.locale = locale
  builder.localeFlag = true
  return builder
}
func (builder * PreviewInstancePathReqBodyBuilder ) TaskId(taskId string) *PreviewInstancePathReqBodyBuilder {
  builder.taskId = taskId
  builder.taskIdFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * PreviewInstancePathReqBodyBuilder ) Build() (*PreviewInstanceReqBody, error) {
   req := &PreviewInstanceReqBody{}
   if builder.userIdFlag {
	  req.UserId = &builder.userId
	  
   }
   if builder.approvalCodeFlag {
	  req.ApprovalCode = &builder.approvalCode
	  
   }
   if builder.departmentIdFlag {
	  req.DepartmentId = &builder.departmentId
	  
   }
   if builder.formFlag {
	  req.Form = &builder.form
	  
   }
   if builder.instanceCodeFlag {
	  req.InstanceCode = &builder.instanceCode
	  
   }
   if builder.localeFlag {
	  req.Locale = &builder.locale
	  
   }
   if builder.taskIdFlag {
	  req.TaskId = &builder.taskId
	  
   }
   return req, nil
}
/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type PreviewInstanceReqBuilder struct {
	userIdType  string
	userIdTypeFlag  bool
	body *PreviewInstanceReqBody
	bodyFlag bool

}

// 生成请求的New构造器
func NewPreviewInstanceReqBuilder() * PreviewInstanceReqBuilder{
   builder := &PreviewInstanceReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * PreviewInstanceReqBuilder) UserIdType(userIdType string) *PreviewInstanceReqBuilder  {
  builder.userIdType = userIdType
  builder.userIdTypeFlag = true
  return builder
}
func (builder * PreviewInstanceReqBuilder) Body(body *PreviewInstanceReqBody) *PreviewInstanceReqBuilder  {
  builder.body = body
  builder.bodyFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * PreviewInstanceReqBuilder ) Build() *PreviewInstanceReq {
   req := &PreviewInstanceReq{}
   if builder.userIdTypeFlag {
	  req.UserIdType = &builder.userIdType
   }
   if builder.bodyFlag {
	  req.Body = builder.body

   }
   return req
}

type PreviewInstanceReqBody struct {
	UserId  *string `json:"user_id,omitempty"`
	ApprovalCode  *string `json:"approval_code,omitempty"`
	DepartmentId  *string `json:"department_id,omitempty"`
	Form  *string `json:"form,omitempty"`
	InstanceCode  *string `json:"instance_code,omitempty"`
	Locale  *string `json:"locale,omitempty"`
	TaskId  *string `json:"task_id,omitempty"`
}

type PreviewInstanceReq struct {
	UserIdType  *string `query:"user_id_type"`
	Body *PreviewInstanceReqBody `body:""`

}

type PreviewInstanceRespData struct {
	PreviewNodes  []*PreviewNode `json:"preview_nodes,omitempty"`
}

type PreviewInstanceResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *PreviewInstanceRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type QueryInstanceReqBuilder struct {
	pageSize  int
	pageSizeFlag  bool
	pageToken  string
	pageTokenFlag  bool
	userIdType  string
	userIdTypeFlag  bool
	instanceSearch *InstanceSearch
	instanceSearchFlag bool

}

// 生成请求的New构造器
func NewQueryInstanceReqBuilder() * QueryInstanceReqBuilder{
   builder := &QueryInstanceReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * QueryInstanceReqBuilder) PageSize(pageSize int) *QueryInstanceReqBuilder  {
  builder.pageSize = pageSize
  builder.pageSizeFlag = true
  return builder
}
func (builder * QueryInstanceReqBuilder) PageToken(pageToken string) *QueryInstanceReqBuilder  {
  builder.pageToken = pageToken
  builder.pageTokenFlag = true
  return builder
}
func (builder * QueryInstanceReqBuilder) UserIdType(userIdType string) *QueryInstanceReqBuilder  {
  builder.userIdType = userIdType
  builder.userIdTypeFlag = true
  return builder
}
func (builder * QueryInstanceReqBuilder) InstanceSearch(instanceSearch *InstanceSearch) *QueryInstanceReqBuilder  {
  builder.instanceSearch = instanceSearch
  builder.instanceSearchFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * QueryInstanceReqBuilder ) Build() *QueryInstanceReq {
   req := &QueryInstanceReq{}
   if builder.pageSizeFlag {
	  req.PageSize = &builder.pageSize
   }
   if builder.pageTokenFlag {
	  req.PageToken = &builder.pageToken
   }
   if builder.userIdTypeFlag {
	  req.UserIdType = &builder.userIdType
   }
   return req
}


type QueryInstanceReq struct {
	PageSize  *int `query:"page_size"`
	PageToken  *string `query:"page_token"`
	UserIdType  *string `query:"user_id_type"`
	InstanceSearch *InstanceSearch `body:""`

}

type QueryInstanceRespData struct {
	Code  *int `json:"code,omitempty"`
	InstanceList  *InstanceSearchItem `json:"instance_list,omitempty"`
	PageToken  *string `json:"page_token,omitempty"`
	HasMore  *bool `json:"has_more,omitempty"`
}

type QueryInstanceResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *QueryInstanceRespData `json:"data"`
}

type SearchInstanceReqBodyBuilder struct {
	userId  string
	userIdFlag  bool
	approvalCodeList  []string
	approvalCodeListFlag  bool
	searchKey  string
	searchKeyFlag  bool
	offset  int
	offsetFlag  bool
	limit  int
	limitFlag  bool
	sortAsc  bool
	sortAscFlag  bool
}

// 生成body的New构造器
func NewSearchInstanceReqBodyBuilder() * SearchInstanceReqBodyBuilder{
  builder := &SearchInstanceReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * SearchInstanceReqBodyBuilder ) UserId(userId string) *SearchInstanceReqBodyBuilder {
  builder.userId = userId
  builder.userIdFlag = true
  return builder
}
func (builder * SearchInstanceReqBodyBuilder ) ApprovalCodeList(approvalCodeList []string) *SearchInstanceReqBodyBuilder {
  builder.approvalCodeList = approvalCodeList
  builder.approvalCodeListFlag = true
  return builder
}
func (builder * SearchInstanceReqBodyBuilder ) SearchKey(searchKey string) *SearchInstanceReqBodyBuilder {
  builder.searchKey = searchKey
  builder.searchKeyFlag = true
  return builder
}
func (builder * SearchInstanceReqBodyBuilder ) Offset(offset int) *SearchInstanceReqBodyBuilder {
  builder.offset = offset
  builder.offsetFlag = true
  return builder
}
func (builder * SearchInstanceReqBodyBuilder ) Limit(limit int) *SearchInstanceReqBodyBuilder {
  builder.limit = limit
  builder.limitFlag = true
  return builder
}
func (builder * SearchInstanceReqBodyBuilder ) SortAsc(sortAsc bool) *SearchInstanceReqBodyBuilder {
  builder.sortAsc = sortAsc
  builder.sortAscFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * SearchInstanceReqBodyBuilder ) Build() *SearchInstanceReqBody {
   req := &SearchInstanceReqBody{}
   if builder.userIdFlag {
	  req.UserId = &builder.userId
	  

   }
   if builder.approvalCodeListFlag {
	  req.ApprovalCodeList = builder.approvalCodeList

   }
   if builder.searchKeyFlag {
	  req.SearchKey = &builder.searchKey
	  

   }
   if builder.offsetFlag {
	  req.Offset = &builder.offset
	  

   }
   if builder.limitFlag {
	  req.Limit = &builder.limit
	  

   }
   if builder.sortAscFlag {
	  req.SortAsc = &builder.sortAsc
	  

   }
   return req
}

/**上传文件path开始**/
type SearchInstancePathReqBodyBuilder struct {
	userId  string
	userIdFlag  bool
	approvalCodeList  []string
	approvalCodeListFlag  bool
	searchKey  string
	searchKeyFlag  bool
	offset  int
	offsetFlag  bool
	limit  int
	limitFlag  bool
	sortAsc  bool
	sortAscFlag  bool
}

// 生成body的New构造器
func NewSearchInstancePathReqBodyBuilder() * SearchInstancePathReqBodyBuilder{
  builder := &SearchInstancePathReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * SearchInstancePathReqBodyBuilder ) UserId(userId string) *SearchInstancePathReqBodyBuilder {
  builder.userId = userId
  builder.userIdFlag = true
  return builder
}
func (builder * SearchInstancePathReqBodyBuilder ) ApprovalCodeList(approvalCodeList []string) *SearchInstancePathReqBodyBuilder {
  builder.approvalCodeList = approvalCodeList
  builder.approvalCodeListFlag = true
  return builder
}
func (builder * SearchInstancePathReqBodyBuilder ) SearchKey(searchKey string) *SearchInstancePathReqBodyBuilder {
  builder.searchKey = searchKey
  builder.searchKeyFlag = true
  return builder
}
func (builder * SearchInstancePathReqBodyBuilder ) Offset(offset int) *SearchInstancePathReqBodyBuilder {
  builder.offset = offset
  builder.offsetFlag = true
  return builder
}
func (builder * SearchInstancePathReqBodyBuilder ) Limit(limit int) *SearchInstancePathReqBodyBuilder {
  builder.limit = limit
  builder.limitFlag = true
  return builder
}
func (builder * SearchInstancePathReqBodyBuilder ) SortAsc(sortAsc bool) *SearchInstancePathReqBodyBuilder {
  builder.sortAsc = sortAsc
  builder.sortAscFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * SearchInstancePathReqBodyBuilder ) Build() (*SearchInstanceReqBody, error) {
   req := &SearchInstanceReqBody{}
   if builder.userIdFlag {
	  req.UserId = &builder.userId
	  
   }
   if builder.approvalCodeListFlag {
	   req.ApprovalCodeList = builder.approvalCodeList
   }
   if builder.searchKeyFlag {
	  req.SearchKey = &builder.searchKey
	  
   }
   if builder.offsetFlag {
	  req.Offset = &builder.offset
	  
   }
   if builder.limitFlag {
	  req.Limit = &builder.limit
	  
   }
   if builder.sortAscFlag {
	  req.SortAsc = &builder.sortAsc
	  
   }
   return req, nil
}
/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type SearchInstanceReqBuilder struct {
	userIdType  string
	userIdTypeFlag  bool
	body *SearchInstanceReqBody
	bodyFlag bool

}

// 生成请求的New构造器
func NewSearchInstanceReqBuilder() * SearchInstanceReqBuilder{
   builder := &SearchInstanceReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * SearchInstanceReqBuilder) UserIdType(userIdType string) *SearchInstanceReqBuilder  {
  builder.userIdType = userIdType
  builder.userIdTypeFlag = true
  return builder
}
func (builder * SearchInstanceReqBuilder) Body(body *SearchInstanceReqBody) *SearchInstanceReqBuilder  {
  builder.body = body
  builder.bodyFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * SearchInstanceReqBuilder ) Build() *SearchInstanceReq {
   req := &SearchInstanceReq{}
   if builder.userIdTypeFlag {
	  req.UserIdType = &builder.userIdType
   }
   if builder.bodyFlag {
	  req.Body = builder.body

   }
   return req
}

type SearchInstanceReqBody struct {
	UserId  *string `json:"user_id,omitempty"`
	ApprovalCodeList  []string `json:"approval_code_list,omitempty"`
	SearchKey  *string `json:"search_key,omitempty"`
	Offset  *int `json:"offset,omitempty"`
	Limit  *int `json:"limit,omitempty"`
	SortAsc  *bool `json:"sort_asc,omitempty"`
}

type SearchInstanceReq struct {
	UserIdType  *string `query:"user_id_type"`
	Body *SearchInstanceReqBody `body:""`

}

type SearchInstanceRespData struct {
	Count  *int `json:"count,omitempty"`
	Keys  []string `json:"keys,omitempty"`
	InstanceList  []*Instance `json:"instance_list,omitempty"`
}

type SearchInstanceResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *SearchInstanceRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type SearchCcInstanceReqBuilder struct {
	pageSize  int
	pageSizeFlag  bool
	pageToken  string
	pageTokenFlag  bool
	userIdType  string
	userIdTypeFlag  bool
	ccSearch *CcSearch
	ccSearchFlag bool

}

// 生成请求的New构造器
func NewSearchCcInstanceReqBuilder() * SearchCcInstanceReqBuilder{
   builder := &SearchCcInstanceReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * SearchCcInstanceReqBuilder) PageSize(pageSize int) *SearchCcInstanceReqBuilder  {
  builder.pageSize = pageSize
  builder.pageSizeFlag = true
  return builder
}
func (builder * SearchCcInstanceReqBuilder) PageToken(pageToken string) *SearchCcInstanceReqBuilder  {
  builder.pageToken = pageToken
  builder.pageTokenFlag = true
  return builder
}
func (builder * SearchCcInstanceReqBuilder) UserIdType(userIdType string) *SearchCcInstanceReqBuilder  {
  builder.userIdType = userIdType
  builder.userIdTypeFlag = true
  return builder
}
func (builder * SearchCcInstanceReqBuilder) CcSearch(ccSearch *CcSearch) *SearchCcInstanceReqBuilder  {
  builder.ccSearch = ccSearch
  builder.ccSearchFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * SearchCcInstanceReqBuilder ) Build() *SearchCcInstanceReq {
   req := &SearchCcInstanceReq{}
   if builder.pageSizeFlag {
	  req.PageSize = &builder.pageSize
   }
   if builder.pageTokenFlag {
	  req.PageToken = &builder.pageToken
   }
   if builder.userIdTypeFlag {
	  req.UserIdType = &builder.userIdType
   }
   return req
}


type SearchCcInstanceReq struct {
	PageSize  *int `query:"page_size"`
	PageToken  *string `query:"page_token"`
	UserIdType  *string `query:"user_id_type"`
	CcSearch *CcSearch `body:""`

}

type SearchCcInstanceRespData struct {
	Count  *int `json:"count,omitempty"`
	CcList  *CcSearchItem `json:"cc_list,omitempty"`
}

type SearchCcInstanceResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *SearchCcInstanceRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type SpecifiedRollbackInstanceReqBuilder struct {
	userIdType  string
	userIdTypeFlag  bool
	specifiedRollback *SpecifiedRollback
	specifiedRollbackFlag bool

}

// 生成请求的New构造器
func NewSpecifiedRollbackInstanceReqBuilder() * SpecifiedRollbackInstanceReqBuilder{
   builder := &SpecifiedRollbackInstanceReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * SpecifiedRollbackInstanceReqBuilder) UserIdType(userIdType string) *SpecifiedRollbackInstanceReqBuilder  {
  builder.userIdType = userIdType
  builder.userIdTypeFlag = true
  return builder
}
func (builder * SpecifiedRollbackInstanceReqBuilder) SpecifiedRollback(specifiedRollback *SpecifiedRollback) *SpecifiedRollbackInstanceReqBuilder  {
  builder.specifiedRollback = specifiedRollback
  builder.specifiedRollbackFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * SpecifiedRollbackInstanceReqBuilder ) Build() *SpecifiedRollbackInstanceReq {
   req := &SpecifiedRollbackInstanceReq{}
   if builder.userIdTypeFlag {
	  req.UserIdType = &builder.userIdType
   }
   return req
}


type SpecifiedRollbackInstanceReq struct {
	UserIdType  *string `query:"user_id_type"`
	SpecifiedRollback *SpecifiedRollback `body:""`

}


type SpecifiedRollbackInstanceResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}


/*1.4 生成请求的builder结构体*/
type CreateInstanceCommentReqBuilder struct {
	instanceId  string
	instanceIdFlag  bool
	userIdType  string
	userIdTypeFlag  bool
	userId  int64
	userIdFlag  bool
	commentRequest *CommentRequest
	commentRequestFlag bool

}

// 生成请求的New构造器
func NewCreateInstanceCommentReqBuilder() * CreateInstanceCommentReqBuilder{
   builder := &CreateInstanceCommentReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * CreateInstanceCommentReqBuilder) InstanceId(instanceId string) *CreateInstanceCommentReqBuilder  {
  builder.instanceId = instanceId
  builder.instanceIdFlag = true
  return builder
}
func (builder * CreateInstanceCommentReqBuilder) UserIdType(userIdType string) *CreateInstanceCommentReqBuilder  {
  builder.userIdType = userIdType
  builder.userIdTypeFlag = true
  return builder
}
func (builder * CreateInstanceCommentReqBuilder) UserId(userId int64) *CreateInstanceCommentReqBuilder  {
  builder.userId = userId
  builder.userIdFlag = true
  return builder
}
func (builder * CreateInstanceCommentReqBuilder) CommentRequest(commentRequest *CommentRequest) *CreateInstanceCommentReqBuilder  {
  builder.commentRequest = commentRequest
  builder.commentRequestFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * CreateInstanceCommentReqBuilder ) Build() *CreateInstanceCommentReq {
   req := &CreateInstanceCommentReq{}
   if builder.instanceIdFlag {
	  req.InstanceId = builder.instanceId
   }
   if builder.userIdTypeFlag {
	  req.UserIdType = &builder.userIdType
   }
   if builder.userIdFlag {
	  req.UserId = &builder.userId
   }
   return req
}


type CreateInstanceCommentReq struct {
	InstanceId  string `path:"instance_id"`
	UserIdType  *string `query:"user_id_type"`
	UserId  *int64 `query:"user_id"`
	CommentRequest *CommentRequest `body:""`

}

type CreateInstanceCommentRespData struct {
	CommentId  *int64 `json:"comment_id,omitempty,string"`
}

type CreateInstanceCommentResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *CreateInstanceCommentRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type DeleteInstanceCommentReqBuilder struct {
	instanceId  string
	instanceIdFlag  bool
	commentId  int64
	commentIdFlag  bool
	userIdType  string
	userIdTypeFlag  bool
	userId  int64
	userIdFlag  bool

}

// 生成请求的New构造器
func NewDeleteInstanceCommentReqBuilder() * DeleteInstanceCommentReqBuilder{
   builder := &DeleteInstanceCommentReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * DeleteInstanceCommentReqBuilder) InstanceId(instanceId string) *DeleteInstanceCommentReqBuilder  {
  builder.instanceId = instanceId
  builder.instanceIdFlag = true
  return builder
}
func (builder * DeleteInstanceCommentReqBuilder) CommentId(commentId int64) *DeleteInstanceCommentReqBuilder  {
  builder.commentId = commentId
  builder.commentIdFlag = true
  return builder
}
func (builder * DeleteInstanceCommentReqBuilder) UserIdType(userIdType string) *DeleteInstanceCommentReqBuilder  {
  builder.userIdType = userIdType
  builder.userIdTypeFlag = true
  return builder
}
func (builder * DeleteInstanceCommentReqBuilder) UserId(userId int64) *DeleteInstanceCommentReqBuilder  {
  builder.userId = userId
  builder.userIdFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * DeleteInstanceCommentReqBuilder ) Build() *DeleteInstanceCommentReq {
   req := &DeleteInstanceCommentReq{}
   if builder.instanceIdFlag {
	  req.InstanceId = builder.instanceId
   }
   if builder.commentIdFlag {
	  req.CommentId = builder.commentId
   }
   if builder.userIdTypeFlag {
	  req.UserIdType = &builder.userIdType
   }
   if builder.userIdFlag {
	  req.UserId = &builder.userId
   }
   return req
}


type DeleteInstanceCommentReq struct {
	InstanceId  string `path:"instance_id"`
	CommentId  int64 `path:"comment_id"`
	UserIdType  *string `query:"user_id_type"`
	UserId  *int64 `query:"user_id"`

}

type DeleteInstanceCommentRespData struct {
	CommentId  *int64 `json:"comment_id,omitempty,string"`
}

type DeleteInstanceCommentResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *DeleteInstanceCommentRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type ListInstanceCommentReqBuilder struct {
	instanceId  string
	instanceIdFlag  bool
	userIdType  string
	userIdTypeFlag  bool
	userId  int64
	userIdFlag  bool
	pageToken  string
	pageTokenFlag  bool
	pageSize  int
	pageSizeFlag  bool

}

// 生成请求的New构造器
func NewListInstanceCommentReqBuilder() * ListInstanceCommentReqBuilder{
   builder := &ListInstanceCommentReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * ListInstanceCommentReqBuilder) InstanceId(instanceId string) *ListInstanceCommentReqBuilder  {
  builder.instanceId = instanceId
  builder.instanceIdFlag = true
  return builder
}
func (builder * ListInstanceCommentReqBuilder) UserIdType(userIdType string) *ListInstanceCommentReqBuilder  {
  builder.userIdType = userIdType
  builder.userIdTypeFlag = true
  return builder
}
func (builder * ListInstanceCommentReqBuilder) UserId(userId int64) *ListInstanceCommentReqBuilder  {
  builder.userId = userId
  builder.userIdFlag = true
  return builder
}
func (builder * ListInstanceCommentReqBuilder) PageToken(pageToken string) *ListInstanceCommentReqBuilder  {
  builder.pageToken = pageToken
  builder.pageTokenFlag = true
  return builder
}
func (builder * ListInstanceCommentReqBuilder) PageSize(pageSize int) *ListInstanceCommentReqBuilder  {
  builder.pageSize = pageSize
  builder.pageSizeFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * ListInstanceCommentReqBuilder ) Build() *ListInstanceCommentReq {
   req := &ListInstanceCommentReq{}
   if builder.instanceIdFlag {
	  req.InstanceId = builder.instanceId
   }
   if builder.userIdTypeFlag {
	  req.UserIdType = &builder.userIdType
   }
   if builder.userIdFlag {
	  req.UserId = &builder.userId
   }
   if builder.pageTokenFlag {
	  req.PageToken = &builder.pageToken
   }
   if builder.pageSizeFlag {
	  req.PageSize = &builder.pageSize
   }
   return req
}


type ListInstanceCommentReq struct {
	InstanceId  string `path:"instance_id"`
	UserIdType  *string `query:"user_id_type"`
	UserId  *int64 `query:"user_id"`
	PageToken  *string `query:"page_token"`
	PageSize  *int `query:"page_size"`

}

type ListInstanceCommentRespData struct {
	Comments  []*Comment `json:"comments,omitempty"`
}

type ListInstanceCommentResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *ListInstanceCommentRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type RemoveInstanceCommentReqBuilder struct {
	instanceId  string
	instanceIdFlag  bool
	userIdType  string
	userIdTypeFlag  bool
	userId  int64
	userIdFlag  bool

}

// 生成请求的New构造器
func NewRemoveInstanceCommentReqBuilder() * RemoveInstanceCommentReqBuilder{
   builder := &RemoveInstanceCommentReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * RemoveInstanceCommentReqBuilder) InstanceId(instanceId string) *RemoveInstanceCommentReqBuilder  {
  builder.instanceId = instanceId
  builder.instanceIdFlag = true
  return builder
}
func (builder * RemoveInstanceCommentReqBuilder) UserIdType(userIdType string) *RemoveInstanceCommentReqBuilder  {
  builder.userIdType = userIdType
  builder.userIdTypeFlag = true
  return builder
}
func (builder * RemoveInstanceCommentReqBuilder) UserId(userId int64) *RemoveInstanceCommentReqBuilder  {
  builder.userId = userId
  builder.userIdFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * RemoveInstanceCommentReqBuilder ) Build() *RemoveInstanceCommentReq {
   req := &RemoveInstanceCommentReq{}
   if builder.instanceIdFlag {
	  req.InstanceId = builder.instanceId
   }
   if builder.userIdTypeFlag {
	  req.UserIdType = &builder.userIdType
   }
   if builder.userIdFlag {
	  req.UserId = &builder.userId
   }
   return req
}


type RemoveInstanceCommentReq struct {
	InstanceId  string `path:"instance_id"`
	UserIdType  *string `query:"user_id_type"`
	UserId  *int64 `query:"user_id"`

}

type RemoveInstanceCommentRespData struct {
	InstanceId  *string `json:"instance_id,omitempty"`
	ExternalId  *string `json:"external_id,omitempty"`
}

type RemoveInstanceCommentResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *RemoveInstanceCommentRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type CreateMessageReqBuilder struct {
	receiveIdType  string
	receiveIdTypeFlag  bool
	message *Message
	messageFlag bool

}

// 生成请求的New构造器
func NewCreateMessageReqBuilder() * CreateMessageReqBuilder{
   builder := &CreateMessageReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * CreateMessageReqBuilder) ReceiveIdType(receiveIdType string) *CreateMessageReqBuilder  {
  builder.receiveIdType = receiveIdType
  builder.receiveIdTypeFlag = true
  return builder
}
func (builder * CreateMessageReqBuilder) Message(message *Message) *CreateMessageReqBuilder  {
  builder.message = message
  builder.messageFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * CreateMessageReqBuilder ) Build() *CreateMessageReq {
   req := &CreateMessageReq{}
   if builder.receiveIdTypeFlag {
	  req.ReceiveIdType = &builder.receiveIdType
   }
   return req
}


type CreateMessageReq struct {
	ReceiveIdType  *string `query:"receive_id_type"`
	Message *Message `body:""`

}

type CreateMessageRespData struct {
	Message  *Message `json:"message,omitempty"`
}

type CreateMessageResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *CreateMessageRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type PatchMessageReqBuilder struct {
	messageId  string
	messageIdFlag  bool
	message *Message
	messageFlag bool

}

// 生成请求的New构造器
func NewPatchMessageReqBuilder() * PatchMessageReqBuilder{
   builder := &PatchMessageReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * PatchMessageReqBuilder) MessageId(messageId string) *PatchMessageReqBuilder  {
  builder.messageId = messageId
  builder.messageIdFlag = true
  return builder
}
func (builder * PatchMessageReqBuilder) Message(message *Message) *PatchMessageReqBuilder  {
  builder.message = message
  builder.messageFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * PatchMessageReqBuilder ) Build() *PatchMessageReq {
   req := &PatchMessageReq{}
   if builder.messageIdFlag {
	  req.MessageId = builder.messageId
   }
   return req
}


type PatchMessageReq struct {
	MessageId  string `path:"message_id"`
	Message *Message `body:""`

}

type PatchMessageRespData struct {
	Message  *Message `json:"message,omitempty"`
}

type PatchMessageResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *PatchMessageRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type ApproveTaskReqBuilder struct {
	userIdType  string
	userIdTypeFlag  bool
	taskApprove *TaskApprove
	taskApproveFlag bool

}

// 生成请求的New构造器
func NewApproveTaskReqBuilder() * ApproveTaskReqBuilder{
   builder := &ApproveTaskReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * ApproveTaskReqBuilder) UserIdType(userIdType string) *ApproveTaskReqBuilder  {
  builder.userIdType = userIdType
  builder.userIdTypeFlag = true
  return builder
}
func (builder * ApproveTaskReqBuilder) TaskApprove(taskApprove *TaskApprove) *ApproveTaskReqBuilder  {
  builder.taskApprove = taskApprove
  builder.taskApproveFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * ApproveTaskReqBuilder ) Build() *ApproveTaskReq {
   req := &ApproveTaskReq{}
   if builder.userIdTypeFlag {
	  req.UserIdType = &builder.userIdType
   }
   return req
}


type ApproveTaskReq struct {
	UserIdType  *string `query:"user_id_type"`
	TaskApprove *TaskApprove `body:""`

}


type ApproveTaskResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}


/*1.4 生成请求的builder结构体*/
type QueryTaskReqBuilder struct {
	pageSize  int
	pageSizeFlag  bool
	pageToken  string
	pageTokenFlag  bool
	userId  string
	userIdFlag  bool
	topic  int64
	topicFlag  bool
	userIdType  string
	userIdTypeFlag  bool
	limit int

}

// 生成请求的New构造器
func NewQueryTaskReqBuilder() * QueryTaskReqBuilder{
   builder := &QueryTaskReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * QueryTaskReqBuilder) Limit(limit int ) *QueryTaskReqBuilder  {
  builder.limit = limit
  return builder
}
func (builder * QueryTaskReqBuilder) PageSize(pageSize int) *QueryTaskReqBuilder  {
  builder.pageSize = pageSize
  builder.pageSizeFlag = true
  return builder
}
func (builder * QueryTaskReqBuilder) PageToken(pageToken string) *QueryTaskReqBuilder  {
  builder.pageToken = pageToken
  builder.pageTokenFlag = true
  return builder
}
func (builder * QueryTaskReqBuilder) UserId(userId string) *QueryTaskReqBuilder  {
  builder.userId = userId
  builder.userIdFlag = true
  return builder
}
func (builder * QueryTaskReqBuilder) Topic(topic int64) *QueryTaskReqBuilder  {
  builder.topic = topic
  builder.topicFlag = true
  return builder
}
func (builder * QueryTaskReqBuilder) UserIdType(userIdType string) *QueryTaskReqBuilder  {
  builder.userIdType = userIdType
  builder.userIdTypeFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * QueryTaskReqBuilder ) Build() *QueryTaskReq {
   req := &QueryTaskReq{}
   req.Limit = builder.limit
   if builder.pageSizeFlag {
	  req.PageSize = &builder.pageSize
   }
   if builder.pageTokenFlag {
	  req.PageToken = &builder.pageToken
   }
   if builder.userIdFlag {
	  req.UserId = &builder.userId
   }
   if builder.topicFlag {
	  req.Topic = &builder.topic
   }
   if builder.userIdTypeFlag {
	  req.UserIdType = &builder.userIdType
   }
   return req
}


type QueryTaskReq struct {
	PageSize  *int `query:"page_size"`
	PageToken  *string `query:"page_token"`
	UserId  *string `query:"user_id"`
	Topic  *int64 `query:"topic"`
	UserIdType  *string `query:"user_id_type"`
	Limit int

}

type QueryTaskRespData struct {
	Tasks  []*Task `json:"tasks,omitempty"`
	PageToken  *string `json:"page_token,omitempty"`
	HasMore  *bool `json:"has_more,omitempty"`
	Count  *Count `json:"count,omitempty"`
}

type QueryTaskResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *QueryTaskRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type RejectTaskReqBuilder struct {
	userIdType  string
	userIdTypeFlag  bool
	taskApprove *TaskApprove
	taskApproveFlag bool

}

// 生成请求的New构造器
func NewRejectTaskReqBuilder() * RejectTaskReqBuilder{
   builder := &RejectTaskReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * RejectTaskReqBuilder) UserIdType(userIdType string) *RejectTaskReqBuilder  {
  builder.userIdType = userIdType
  builder.userIdTypeFlag = true
  return builder
}
func (builder * RejectTaskReqBuilder) TaskApprove(taskApprove *TaskApprove) *RejectTaskReqBuilder  {
  builder.taskApprove = taskApprove
  builder.taskApproveFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * RejectTaskReqBuilder ) Build() *RejectTaskReq {
   req := &RejectTaskReq{}
   if builder.userIdTypeFlag {
	  req.UserIdType = &builder.userIdType
   }
   return req
}


type RejectTaskReq struct {
	UserIdType  *string `query:"user_id_type"`
	TaskApprove *TaskApprove `body:""`

}


type RejectTaskResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}


/*1.4 生成请求的builder结构体*/
type SearchTaskReqBuilder struct {
	pageSize  int
	pageSizeFlag  bool
	pageToken  string
	pageTokenFlag  bool
	userIdType  string
	userIdTypeFlag  bool
	taskSearch *TaskSearch
	taskSearchFlag bool

}

// 生成请求的New构造器
func NewSearchTaskReqBuilder() * SearchTaskReqBuilder{
   builder := &SearchTaskReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * SearchTaskReqBuilder) PageSize(pageSize int) *SearchTaskReqBuilder  {
  builder.pageSize = pageSize
  builder.pageSizeFlag = true
  return builder
}
func (builder * SearchTaskReqBuilder) PageToken(pageToken string) *SearchTaskReqBuilder  {
  builder.pageToken = pageToken
  builder.pageTokenFlag = true
  return builder
}
func (builder * SearchTaskReqBuilder) UserIdType(userIdType string) *SearchTaskReqBuilder  {
  builder.userIdType = userIdType
  builder.userIdTypeFlag = true
  return builder
}
func (builder * SearchTaskReqBuilder) TaskSearch(taskSearch *TaskSearch) *SearchTaskReqBuilder  {
  builder.taskSearch = taskSearch
  builder.taskSearchFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * SearchTaskReqBuilder ) Build() *SearchTaskReq {
   req := &SearchTaskReq{}
   if builder.pageSizeFlag {
	  req.PageSize = &builder.pageSize
   }
   if builder.pageTokenFlag {
	  req.PageToken = &builder.pageToken
   }
   if builder.userIdTypeFlag {
	  req.UserIdType = &builder.userIdType
   }
   return req
}


type SearchTaskReq struct {
	PageSize  *int `query:"page_size"`
	PageToken  *string `query:"page_token"`
	UserIdType  *string `query:"user_id_type"`
	TaskSearch *TaskSearch `body:""`

}

type SearchTaskRespData struct {
	Count  *int `json:"count,omitempty"`
	TaskList  *TaskSearchItem `json:"task_list,omitempty"`
	PageToken  *string `json:"page_token,omitempty"`
	HasMore  *bool `json:"has_more,omitempty"`
}

type SearchTaskResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *SearchTaskRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type TransferTaskReqBuilder struct {
	userIdType  string
	userIdTypeFlag  bool
	taskTransfer *TaskTransfer
	taskTransferFlag bool

}

// 生成请求的New构造器
func NewTransferTaskReqBuilder() * TransferTaskReqBuilder{
   builder := &TransferTaskReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * TransferTaskReqBuilder) UserIdType(userIdType string) *TransferTaskReqBuilder  {
  builder.userIdType = userIdType
  builder.userIdTypeFlag = true
  return builder
}
func (builder * TransferTaskReqBuilder) TaskTransfer(taskTransfer *TaskTransfer) *TransferTaskReqBuilder  {
  builder.taskTransfer = taskTransfer
  builder.taskTransferFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * TransferTaskReqBuilder ) Build() *TransferTaskReq {
   req := &TransferTaskReq{}
   if builder.userIdTypeFlag {
	  req.UserIdType = &builder.userIdType
   }
   return req
}


type TransferTaskReq struct {
	UserIdType  *string `query:"user_id_type"`
	TaskTransfer *TaskTransfer `body:""`

}


type TransferTaskResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

/**生成消息事件结构体 **/

type ApprovalUpdatedEventData struct {
	Object  *ApprovalEvent `json:"object,omitempty"`
}

type ApprovalUpdatedEvent struct {
	*event.EventV2Base
	Event *ApprovalUpdatedEventData `json:"event"`
}

type InstanceRemedyGroupUpdateEventData struct {
	Object  *RemedyGroup `json:"object,omitempty"`
}

type InstanceRemedyGroupUpdateEvent struct {
	*event.EventV2Base
	Event *InstanceRemedyGroupUpdateEventData `json:"event"`
}

type InstanceSignGroupUpdateEventData struct {
	Object  *SignGroup `json:"object,omitempty"`
}

type InstanceSignGroupUpdateEvent struct {
	*event.EventV2Base
	Event *InstanceSignGroupUpdateEventData `json:"event"`
}

type InstanceTripGroupUpdateEventData struct {
	Object  *TripGroup `json:"object,omitempty"`
}

type InstanceTripGroupUpdateEvent struct {
	*event.EventV2Base
	Event *InstanceTripGroupUpdateEventData `json:"event"`
}


/* 生成请求的builder构造器*/
/*1.1 生成body的builder结构体*/
/**如果是分页查询，则添加迭代器定义**/
   type ListExternalTaskIterator struct{
	 nextPageToken *string
	 items	 []*ExternalTaskList
	 index	 int
	 limit	 int
	 ctx	   context.Context
	 req	   *ListExternalTaskReq
	 listFunc  func (ctx context.Context, req *ListExternalTaskReq, options ...core.RequestOptionFunc) (*ListExternalTaskResp, error)
	 options   []core.RequestOptionFunc
   	 curlNum	   int
   }

   func (iterator *ListExternalTaskIterator) Next() (bool, *ExternalTaskList, error) {
		// 达到最大量，则返回
		if iterator.curlNum > iterator.limit {
			return false, nil, nil
		}

		// 为0则拉取数据
		if iterator.index == 0 || iterator.index >= len(iterator.items) {
			if iterator.index != 0 && iterator.nextPageToken == nil {
				return false, nil, nil
			}
			if iterator.nextPageToken != nil {
				iterator.req.PageToken = iterator.nextPageToken
			}
			resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
			if err != nil {
				return false, nil, err
			}

			if resp.Code != 0 {
				return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
			}

			if len(resp.Data.Data) == 0 {
				return false, nil, nil
			}

			iterator.nextPageToken = resp.Data.PageToken
			iterator.items = resp.Data.Data
			iterator.index = 0
		}

		block := iterator.items[iterator.index]
		iterator.index++
		iterator.curlNum++
		return true, block, nil
   }

   func (iterator *ListExternalTaskIterator) NextPageToken() *string {
	  return iterator.nextPageToken
   }
/**如果是分页查询，则添加迭代器定义**/
   type ListInstanceIterator struct{
	 nextPageToken *string
	 items	 []string
	 index	 int
	 limit	 int
	 ctx	   context.Context
	 req	   *ListInstanceReq
	 listFunc  func (ctx context.Context, req *ListInstanceReq, options ...core.RequestOptionFunc) (*ListInstanceResp, error)
	 options   []core.RequestOptionFunc
   	 curlNum	   int
   }

   func (iterator *ListInstanceIterator) Next() (bool, string, error) {
		// 达到最大量，则返回
		if iterator.curlNum > iterator.limit {
			return false, "", nil
		}

		// 为0则拉取数据
		if iterator.index == 0 || iterator.index >= len(iterator.items) {
			if iterator.index != 0 && iterator.nextPageToken == nil {
				return false, "", nil
			}
			if iterator.nextPageToken != nil {
				iterator.req.PageToken = iterator.nextPageToken
			}
			resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
			if err != nil {
				return false, "", err
			}

			if resp.Code != 0 {
				return false, "", errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
			}

			if len(resp.Data.InstanceCodeList) == 0 {
				return false, "", nil
			}

			iterator.nextPageToken = resp.Data.PageToken
			iterator.items = resp.Data.InstanceCodeList
			iterator.index = 0
		}

		block := iterator.items[iterator.index]
		iterator.index++
		iterator.curlNum++
		return true, block, nil
   }

   func (iterator *ListInstanceIterator) NextPageToken() *string {
	  return iterator.nextPageToken
   }
/**如果是分页查询，则添加迭代器定义**/
   type QueryTaskIterator struct{
	 nextPageToken *string
	 items	 []*Task
	 index	 int
	 limit	 int
	 ctx	   context.Context
	 req	   *QueryTaskReq
	 listFunc  func (ctx context.Context, req *QueryTaskReq, options ...core.RequestOptionFunc) (*QueryTaskResp, error)
	 options   []core.RequestOptionFunc
   	 curlNum	   int
   }

   func (iterator *QueryTaskIterator) Next() (bool, *Task, error) {
		// 达到最大量，则返回
		if iterator.curlNum > iterator.limit {
			return false, nil, nil
		}

		// 为0则拉取数据
		if iterator.index == 0 || iterator.index >= len(iterator.items) {
			if iterator.index != 0 && iterator.nextPageToken == nil {
				return false, nil, nil
			}
			if iterator.nextPageToken != nil {
				iterator.req.PageToken = iterator.nextPageToken
			}
			resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
			if err != nil {
				return false, nil, err
			}

			if resp.Code != 0 {
				return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
			}

			if len(resp.Data.Tasks) == 0 {
				return false, nil, nil
			}

			iterator.nextPageToken = resp.Data.PageToken
			iterator.items = resp.Data.Tasks
			iterator.index = 0
		}

		block := iterator.items[iterator.index]
		iterator.index++
		iterator.curlNum++
		return true, block, nil
   }

   func (iterator *QueryTaskIterator) NextPageToken() *string {
	  return iterator.nextPageToken
   }


