// Package approval code generated by oapi sdk gen
package approval

import (
	"context"
	"errors"
	"fmt"

	"github.com/feishu/oapi-sdk-go/event"

	"github.com/feishu/oapi-sdk-go/core"
)

/**生成枚举值 **/

const (
	AddSignEnumAddSignPre      string = "1"
	AddSignEnumAddSignPost     string = "2"
	AddSignEnumAddSignParallel string = "3"
)

const (
	ApprovalMethodEnumOrSign  string = "1"
	ApprovalMethodEnumAddSign string = "2"
)

const (
	UserIdTypeOpenId  string = "open_id"
	UserIdTypeUserId  string = "user_id"
	UserIdTypeUnionId string = "union_id"
)

const (
	TopicTodoApproval      string = "1"
	TopicDoneApproval      string = "2"
	TopicInitiatedApproval string = "3"
	TopicUnreadNotice      string = "17"
	TopicReadNotice        string = "18"
)

/**生成数据类型 **/

type ActionConfig struct {
	ActionType       *string `json:"action_type,omitempty"`
	ActionName       *string `json:"action_name,omitempty"`
	IsNeedReason     *bool   `json:"is_need_reason,omitempty"`
	IsReasonRequired *bool   `json:"is_reason_required,omitempty"`
	IsNeedAttachment *bool   `json:"is_need_attachment,omitempty"`
}

type Approval struct {
	ApprovalCode *string `json:"approval_code,omitempty"`
	ApprovalName *string `json:"approval_name,omitempty"`
}

type ApprovalApproverCcer struct {
	Type   *string `json:"type,omitempty"`
	UserId *string `json:"user_id,omitempty"`
	Level  *string `json:"level,omitempty"`
}

type ApprovalConfig struct {
	CanUpdateViewer  *bool   `json:"can_update_viewer,omitempty"`
	CanUpdateForm    *bool   `json:"can_update_form,omitempty"`
	CanUpdateProcess *bool   `json:"can_update_process,omitempty"`
	CanUpdateRevert  *bool   `json:"can_update_revert,omitempty"`
	HelpUrl          *string `json:"help_url,omitempty"`
}

type ApprovalCreate struct {
	ApprovalName  *string                  `json:"approval_name,omitempty"`
	ApprovalCode  *string                  `json:"approval_code,omitempty"`
	Description   *string                  `json:"description,omitempty"`
	Viewers       []*ApprovalCreateViewers `json:"viewers,omitempty"`
	Form          *ApprovalForm            `json:"form,omitempty"`
	NodeList      []*ApprovalNode          `json:"node_list,omitempty"`
	Settings      *ApprovalSetting         `json:"settings,omitempty"`
	Config        *ApprovalConfig          `json:"config,omitempty"`
	Icon          *int                     `json:"icon,omitempty"`
	I18nResources []*I18nResource          `json:"i18n_resources,omitempty"`
}

type ApprovalCreateExternal struct {
	BizName             *string `json:"biz_name,omitempty"`
	BizType             *string `json:"biz_type,omitempty"`
	CreateLinkMobile    *string `json:"create_link_mobile,omitempty"`
	CreateLinkPc        *string `json:"create_link_pc,omitempty"`
	SupportPc           *bool   `json:"support_pc,omitempty"`
	SupportMobile       *bool   `json:"support_mobile,omitempty"`
	SupportBatchRead    *bool   `json:"support_batch_read,omitempty"`
	EnableMarkReaded    *bool   `json:"enable_mark_readed,omitempty"`
	EnableQuickOperate  *bool   `json:"enable_quick_operate,omitempty"`
	ActionCallbackUrl   *string `json:"action_callback_url,omitempty"`
	ActionCallbackToken *string `json:"action_callback_token,omitempty"`
	ActionCallbackKey   *string `json:"action_callback_key,omitempty"`
}

type ApprovalCreateViewers struct {
	ViewerType         *string `json:"viewer_type,omitempty"`
	ViewerUserId       *string `json:"viewer_user_id,omitempty"`
	ViewerDepartmentId *string `json:"viewer_department_id,omitempty"`
}

type ApprovalEvent struct {
	ApprovalId       *string `json:"approval_id,omitempty"`
	ApprovalCode     *string `json:"approval_code,omitempty"`
	VersionId        *string `json:"version_id,omitempty"`
	WidgetGroupType  *int    `json:"widget_group_type,omitempty"`
	FormDefinitionId *string `json:"form_definition_id,omitempty"`
	ProcessObj       *string `json:"process_obj,omitempty"`
	Timestamp        *string `json:"timestamp,omitempty"`
	Extra            *string `json:"extra,omitempty"`
}

type ApprovalForm struct {
	FormContent *string `json:"form_content,omitempty"`
}

type ApprovalNode struct {
	Id       *string                 `json:"id,omitempty"`
	Name     *string                 `json:"name,omitempty"`
	NodeType *string                 `json:"node_type,omitempty"`
	Approver []*ApprovalApproverCcer `json:"approver,omitempty"`
	Ccer     []*ApprovalApproverCcer `json:"ccer,omitempty"`
}

type ApprovalNodeInfo struct {
	Name         *string `json:"name,omitempty"`
	NeedApprover *bool   `json:"need_approver,omitempty"`
	NodeId       *string `json:"node_id,omitempty"`
	CustomNodeId *string `json:"custom_node_id,omitempty"`
	NodeType     *string `json:"node_type,omitempty"`
}

type ApprovalSetting struct {
	RevertInterval *int `json:"revert_interval,omitempty"`
	RevertOption   *int `json:"revert_option,omitempty"`
}

type ApprovalViewer struct {
	Type    *string `json:"type,omitempty"`
	OpenId  *string `json:"open_id,omitempty"`
	UserId  *string `json:"user_id,omitempty"`
	UnionId *string `json:"union_id,omitempty"`
}

type ApprovalViewerInfo struct {
	Type   *string `json:"type,omitempty"`
	Id     *string `json:"id,omitempty"`
	UserId *string `json:"user_id,omitempty"`
}

type CcNode struct {
	CcId          *string               `json:"cc_id,omitempty"`
	UserId        *string               `json:"user_id,omitempty"`
	OpenId        *string               `json:"open_id,omitempty"`
	Links         *ExternalInstanceLink `json:"links,omitempty"`
	ReadStatus    *string               `json:"read_status,omitempty"`
	Extra         *string               `json:"extra,omitempty"`
	Title         *string               `json:"title,omitempty"`
	CreateTime    *int64                `json:"create_time,omitempty,string"`
	UpdateTime    *int64                `json:"update_time,omitempty,string"`
	DisplayMethod *string               `json:"display_method,omitempty"`
}

type CcSearch struct {
	UserId             *string `json:"user_id,omitempty"`
	ApprovalCode       *string `json:"approval_code,omitempty"`
	InstanceCode       *string `json:"instance_code,omitempty"`
	InstanceExternalId *string `json:"instance_external_id,omitempty"`
	GroupExternalId    *string `json:"group_external_id,omitempty"`
	CcTitle            *string `json:"cc_title,omitempty"`
	ReadStatus         *string `json:"read_status,omitempty"`
	CcCreateTimeFrom   *int64  `json:"cc_create_time_from,omitempty,string"`
	CcCreateTimeTo     *int64  `json:"cc_create_time_to,omitempty,string"`
	Locale             *string `json:"locale,omitempty"`
}

type CcSearchItem struct {
	Approval *InstanceSearchApproval `json:"approval,omitempty"`
	Group    *InstanceSearchGroup    `json:"group,omitempty"`
	Instance *InstanceSearchNode     `json:"instance,omitempty"`
	Cc       *CcSearchNode           `json:"cc,omitempty"`
}

type CcSearchNode struct {
	UserId     *string             `json:"user_id,omitempty"`
	CreateTime *int64              `json:"create_time,omitempty,string"`
	ReadStatus *string             `json:"read_status,omitempty"`
	Title      *string             `json:"title,omitempty"`
	Extra      *string             `json:"extra,omitempty"`
	Link       *InstanceSearchLink `json:"link,omitempty"`
}

type Comment struct {
	Id          *int64           `json:"id,omitempty,string"`
	Content     *string          `json:"content,omitempty"`
	CreateTime  *int64           `json:"create_time,omitempty,string"`
	UpdateTime  *int64           `json:"update_time,omitempty,string"`
	IsDelete    *int             `json:"is_delete,omitempty"`
	Replies     []*CommentReply  `json:"replies,omitempty"`
	AtInfoList  []*CommentAtInfo `json:"at_info_list,omitempty"`
	Commentator *string          `json:"commentator,omitempty"`
	Extra       *string          `json:"extra,omitempty"`
}

type CommentAtInfo struct {
	UserId *int64  `json:"user_id,omitempty,string"`
	Name   *string `json:"name,omitempty"`
	Offset *int64  `json:"offset,omitempty,string"`
}

type CommentReply struct {
	Id          *int64           `json:"id,omitempty,string"`
	Content     *string          `json:"content,omitempty"`
	CreateTime  *int64           `json:"create_time,omitempty,string"`
	UpdateTime  *int64           `json:"update_time,omitempty,string"`
	IsDelete    *int             `json:"is_delete,omitempty"`
	AtInfoList  []*CommentAtInfo `json:"at_info_list,omitempty"`
	Commentator *string          `json:"commentator,omitempty"`
	Extra       *string          `json:"extra,omitempty"`
}

type CommentRequest struct {
	Content         *string          `json:"content,omitempty"`
	AtInfoList      []*CommentAtInfo `json:"at_info_list,omitempty"`
	ParentCommentId *int64           `json:"parent_comment_id,omitempty,string"`
	CommentId       *int64           `json:"comment_id,omitempty,string"`
	DisableBot      *bool            `json:"disable_bot,omitempty"`
	Extra           *string          `json:"extra,omitempty"`
}

type Count struct {
	Total   *int  `json:"total,omitempty"`
	HasMore *bool `json:"has_more,omitempty"`
}

type ExteranlInstanceCheck struct {
	InstanceId *string                 `json:"instance_id,omitempty"`
	UpdateTime *int64                  `json:"update_time,omitempty,string"`
	Tasks      []*ExternalInstanceTask `json:"tasks,omitempty"`
}

type ExteranlInstanceCheckResponse struct {
	InstanceId *string                 `json:"instance_id,omitempty"`
	UpdateTime *int64                  `json:"update_time,omitempty,string"`
	Tasks      []*ExternalInstanceTask `json:"tasks,omitempty"`
}

type ExternalApproval struct {
	ApprovalName  *string                  `json:"approval_name,omitempty"`
	ApprovalCode  *string                  `json:"approval_code,omitempty"`
	GroupCode     *string                  `json:"group_code,omitempty"`
	GroupName     *string                  `json:"group_name,omitempty"`
	Description   *string                  `json:"description,omitempty"`
	External      *ApprovalCreateExternal  `json:"external,omitempty"`
	Viewers       []*ApprovalCreateViewers `json:"viewers,omitempty"`
	I18nResources []*I18nResource          `json:"i18n_resources,omitempty"`
}

type ExternalInstance struct {
	ApprovalCode   *string                     `json:"approval_code,omitempty"`
	Status         *string                     `json:"status,omitempty"`
	Extra          *string                     `json:"extra,omitempty"`
	InstanceId     *string                     `json:"instance_id,omitempty"`
	Links          *ExternalInstanceLink       `json:"links,omitempty"`
	Title          *string                     `json:"title,omitempty"`
	Form           []*ExternalInstanceForm     `json:"form,omitempty"`
	UserId         *string                     `json:"user_id,omitempty"`
	UserName       *string                     `json:"user_name,omitempty"`
	OpenId         *string                     `json:"open_id,omitempty"`
	DepartmentId   *string                     `json:"department_id,omitempty"`
	DepartmentName *string                     `json:"department_name,omitempty"`
	StartTime      *int64                      `json:"start_time,omitempty,string"`
	EndTime        *int64                      `json:"end_time,omitempty,string"`
	UpdateTime     *int64                      `json:"update_time,omitempty,string"`
	DisplayMethod  *string                     `json:"display_method,omitempty"`
	UpdateMode     *string                     `json:"update_mode,omitempty"`
	TaskList       []*ExternalInstanceTaskNode `json:"task_list,omitempty"`
	CcList         []*CcNode                   `json:"cc_list,omitempty"`
	I18nResources  []*I18nResource             `json:"i18n_resources,omitempty"`
}

type ExternalInstanceForm struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

type ExternalInstanceLink struct {
	PcLink     *string `json:"pc_link,omitempty"`
	MobileLink *string `json:"mobile_link,omitempty"`
}

type ExternalInstanceTask struct {
	TaskId     *string `json:"task_id,omitempty"`
	UpdateTime *int64  `json:"update_time,omitempty,string"`
}

type ExternalInstanceTaskNode struct {
	TaskId        *string               `json:"task_id,omitempty"`
	UserId        *string               `json:"user_id,omitempty"`
	OpenId        *string               `json:"open_id,omitempty"`
	Title         *string               `json:"title,omitempty"`
	Links         *ExternalInstanceLink `json:"links,omitempty"`
	Status        *string               `json:"status,omitempty"`
	Extra         *string               `json:"extra,omitempty"`
	CreateTime    *int64                `json:"create_time,omitempty,string"`
	EndTime       *int64                `json:"end_time,omitempty,string"`
	UpdateTime    *int64                `json:"update_time,omitempty,string"`
	ActionContext *string               `json:"action_context,omitempty"`
	ActionConfigs []*ActionConfig       `json:"action_configs,omitempty"`
	DisplayMethod *string               `json:"display_method,omitempty"`
}

type ExternalTaskItem struct {
	Id         *string `json:"id,omitempty"`
	Status     *string `json:"status,omitempty"`
	UpdateTime *int64  `json:"update_time,omitempty,string"`
}

type ExternalTaskList struct {
	InstanceId   *string             `json:"instance_id,omitempty"`
	ApprovalId   *string             `json:"approval_id,omitempty"`
	ApprovalCode *string             `json:"approval_code,omitempty"`
	Status       *string             `json:"status,omitempty"`
	UpdateTime   *int64              `json:"update_time,omitempty,string"`
	Tasks        []*ExternalTaskItem `json:"tasks,omitempty"`
}

type File struct {
	Url      *string `json:"url,omitempty"`
	FileSize *int    `json:"file_size,omitempty"`
	Title    *string `json:"title,omitempty"`
	Type     *string `json:"type,omitempty"`
}

type I18nResource struct {
	Locale    *string             `json:"locale,omitempty"`
	Texts     []*I18nResourceText `json:"texts,omitempty"`
	IsDefault *bool               `json:"is_default,omitempty"`
}

type I18nResourceText struct {
	Key   *string `json:"key,omitempty"`
	Value *string `json:"value,omitempty"`
}

type Instance struct {
	InstanceCode *string `json:"instance_code,omitempty"`
	ApprovalName *string `json:"approval_name,omitempty"`
	StartTime    *int64  `json:"start_time,omitempty,string"`
	EndTime      *int64  `json:"end_time,omitempty,string"`
	UserId       *string `json:"user_id,omitempty"`
	SerialId     *string `json:"serial_id,omitempty"`
}

type InstanceCancel struct {
	ApprovalCode  *string `json:"approval_code,omitempty"`
	InstanceCode  *string `json:"instance_code,omitempty"`
	UserId        *string `json:"user_id,omitempty"`
	NotifyStarter *bool   `json:"notify_starter,omitempty"`
}

type InstanceCc struct {
	ApprovalCode *string  `json:"approval_code,omitempty"`
	InstanceCode *string  `json:"instance_code,omitempty"`
	UserId       *string  `json:"user_id,omitempty"`
	CcUserIds    []string `json:"cc_user_ids,omitempty"`
	Comment      *string  `json:"comment,omitempty"`
}

type InstanceCcUser struct {
	UserId *string `json:"user_id,omitempty"`
	CcId   *string `json:"cc_id,omitempty"`
	OpenId *string `json:"open_id,omitempty"`
}

type InstanceComment struct {
	Id         *string `json:"id,omitempty"`
	UserId     *string `json:"user_id,omitempty"`
	OpenId     *string `json:"open_id,omitempty"`
	Comment    *string `json:"comment,omitempty"`
	CreateTime *int64  `json:"create_time,omitempty,string"`
}

type InstanceCreate struct {
	ApprovalCode           *string         `json:"approval_code,omitempty"`
	UserId                 *string         `json:"user_id,omitempty"`
	OpenId                 *string         `json:"open_id,omitempty"`
	DepartmentId           *string         `json:"department_id,omitempty"`
	Form                   *string         `json:"form,omitempty"`
	NodeApproverUserIdList []*NodeApprover `json:"node_approver_user_id_list,omitempty"`
	NodeApproverOpenIdList []*NodeApprover `json:"node_approver_open_id_list,omitempty"`
	NodeCcUserIdList       []*NodeCc       `json:"node_cc_user_id_list,omitempty"`
	NodeCcOpenIdList       []*NodeCc       `json:"node_cc_open_id_list,omitempty"`
	Uuid                   *string         `json:"uuid,omitempty"`
}

type InstanceInfo struct {
	ApprovalCode *string             `json:"approval_code,omitempty"`
	ApprovalName *string             `json:"approval_name,omitempty"`
	StartTime    *int64              `json:"start_time,omitempty,string"`
	EndTime      *int64              `json:"end_time,omitempty,string"`
	UserId       *string             `json:"user_id,omitempty"`
	OpenId       *string             `json:"open_id,omitempty"`
	SerialNumber *string             `json:"serial_number,omitempty"`
	DepartmentId *string             `json:"department_id,omitempty"`
	Status       *string             `json:"status,omitempty"`
	Uuid         *string             `json:"uuid,omitempty"`
	Form         *string             `json:"form,omitempty"`
	TaskList     []*InstanceTask     `json:"task_list,omitempty"`
	CommentList  []*InstanceComment  `json:"comment_list,omitempty"`
	Timeline     []*InstanceTimeline `json:"timeline,omitempty"`
}

type InstanceSearch struct {
	UserId                *string `json:"user_id,omitempty"`
	ApprovalCode          *string `json:"approval_code,omitempty"`
	InstanceCode          *string `json:"instance_code,omitempty"`
	InstanceExternalId    *string `json:"instance_external_id,omitempty"`
	GroupExternalId       *string `json:"group_external_id,omitempty"`
	InstanceTitle         *string `json:"instance_title,omitempty"`
	InstanceStatus        *string `json:"instance_status,omitempty"`
	InstanceStartTimeFrom *int64  `json:"instance_start_time_from,omitempty,string"`
	InstanceStartTimeTo   *int64  `json:"instance_start_time_to,omitempty,string"`
	Locale                *string `json:"locale,omitempty"`
}

type InstanceSearchApproval struct {
	Code       *string                         `json:"code,omitempty"`
	Name       *string                         `json:"name,omitempty"`
	IsExternal *bool                           `json:"is_external,omitempty"`
	External   *InstanceSearchApprovalExternal `json:"external,omitempty"`
}

type InstanceSearchApprovalExternal struct {
	BatchCcRead *bool `json:"batch_cc_read,omitempty"`
}

type InstanceSearchGroup struct {
	ExternalId *string `json:"external_id,omitempty"`
	Name       *string `json:"name,omitempty"`
}

type InstanceSearchItem struct {
	Approval *InstanceSearchApproval `json:"approval,omitempty"`
	Group    *InstanceSearchGroup    `json:"group,omitempty"`
	Instance *InstanceSearchNode     `json:"instance,omitempty"`
}

type InstanceSearchLink struct {
	PcLink     *string `json:"pc_link,omitempty"`
	MobileLink *string `json:"mobile_link,omitempty"`
}

type InstanceSearchNode struct {
	Code       *string             `json:"code,omitempty"`
	ExternalId *string             `json:"external_id,omitempty"`
	UserId     *string             `json:"user_id,omitempty"`
	StartTime  *int64              `json:"start_time,omitempty,string"`
	EndTime    *int64              `json:"end_time,omitempty,string"`
	Status     *string             `json:"status,omitempty"`
	Title      *string             `json:"title,omitempty"`
	Extra      *string             `json:"extra,omitempty"`
	SerialId   *string             `json:"serial_id,omitempty"`
	Link       *InstanceSearchLink `json:"link,omitempty"`
}

type InstanceTask struct {
	Id           *string `json:"id,omitempty"`
	UserId       *string `json:"user_id,omitempty"`
	OpenId       *string `json:"open_id,omitempty"`
	Status       *string `json:"status,omitempty"`
	NodeId       *string `json:"node_id,omitempty"`
	NodeName     *string `json:"node_name,omitempty"`
	CustomNodeId *string `json:"custom_node_id,omitempty"`
	Type         *string `json:"type,omitempty"`
	StartTime    *int64  `json:"start_time,omitempty,string"`
	EndTime      *int64  `json:"end_time,omitempty,string"`
}

type InstanceTimeline struct {
	Type       *string           `json:"type,omitempty"`
	CreateTime *int64            `json:"create_time,omitempty,string"`
	UserId     *string           `json:"user_id,omitempty"`
	OpenId     *string           `json:"open_id,omitempty"`
	UserIdList []string          `json:"user_id_list,omitempty"`
	OpenIdList []string          `json:"open_id_list,omitempty"`
	TaskId     *string           `json:"task_id,omitempty"`
	Comment    *string           `json:"comment,omitempty"`
	CcUserList []*InstanceCcUser `json:"cc_user_list,omitempty"`
	Ext        *string           `json:"ext,omitempty"`
	NodeKey    *string           `json:"node_key,omitempty"`
}

type Message struct {
	Id        *string `json:"id,omitempty"`
	ReceiveId *string `json:"receive_id,omitempty"`
	Content   *string `json:"content,omitempty"`
	MsgType   *string `json:"msg_type,omitempty"`
	Config    *string `json:"config,omitempty"`
	Extra     *string `json:"extra,omitempty"`
	Uuid      *string `json:"uuid,omitempty"`
}

type NodeApprover struct {
	Key   *string  `json:"key,omitempty"`
	Value []string `json:"value,omitempty"`
}

type NodeCc struct {
	Key   *string  `json:"key,omitempty"`
	Value []string `json:"value,omitempty"`
}

type PreviewNode struct {
	NodeId             *string  `json:"node_id,omitempty"`
	NodeName           *string  `json:"node_name,omitempty"`
	NodeType           *string  `json:"node_type,omitempty"`
	Comments           []string `json:"comments,omitempty"`
	CustomNodeId       *string  `json:"custom_node_id,omitempty"`
	UserIdList         []string `json:"user_id_list,omitempty"`
	EndCcIdList        []string `json:"end_cc_id_list,omitempty"`
	IsEmptyLogic       *bool    `json:"is_empty_logic,omitempty"`
	IsApproverTypeFree *bool    `json:"is_approver_type_free,omitempty"`
	HasCcTypeFree      *bool    `json:"has_cc_type_free,omitempty"`
}

type Reason struct {
	Text  *string `json:"text,omitempty"`
	Files []*File `json:"files,omitempty"`
}

type RemedyGroup struct {
	Type         *string `json:"type,omitempty"`
	InstanceCode *string `json:"instance_code,omitempty"`
	EmployeeId   *string `json:"employee_id,omitempty"`
	StartTime    *int    `json:"start_time,omitempty"`
	EndTime      *int    `json:"end_time,omitempty"`
	RemedyTime   *int    `json:"remedy_time,omitempty"`
	RemedyReason *string `json:"remedy_reason,omitempty"`
	Status       *string `json:"status,omitempty"`
}

type SignGroup struct {
	InstanceCode          *string `json:"instance_code,omitempty"`
	UserId                *UserId `json:"user_id,omitempty"`
	AccountCode           *string `json:"account_code,omitempty"`
	BoilerplateUniqueCode *string `json:"boilerplate_unique_code,omitempty"`
	StartTime             *int    `json:"start_time,omitempty"`
	EndTime               *int    `json:"end_time,omitempty"`
	Type                  *string `json:"type,omitempty"`
}

type SpecifiedRollback struct {
	UserId         *string  `json:"user_id,omitempty"`
	TaskId         *int64   `json:"task_id,omitempty,string"`
	Reason         *string  `json:"reason,omitempty"`
	Extra          *string  `json:"extra,omitempty"`
	TaskDefKeyList []string `json:"task_def_key_list,omitempty"`
}

type Task struct {
	Topic               *int64    `json:"topic,omitempty,string"`
	UserId              *int64    `json:"user_id,omitempty,string"`
	Title               *string   `json:"title,omitempty"`
	Urls                *TaskUrls `json:"urls,omitempty"`
	ProcessExternalId   *string   `json:"process_external_id,omitempty"`
	TaskExternalId      *string   `json:"task_external_id,omitempty"`
	Status              *string   `json:"status,omitempty"`
	ProcessStatus       *string   `json:"process_status,omitempty"`
	DefinitionCode      *string   `json:"definition_code,omitempty"`
	Initiators          []string  `json:"initiators,omitempty"`
	InitiatorNames      []string  `json:"initiator_names,omitempty"`
	TaskId              *int64    `json:"task_id,omitempty,string"`
	ProcessId           *int64    `json:"process_id,omitempty,string"`
	ProcessCode         *string   `json:"process_code,omitempty"`
	DefinitionGroupId   *int64    `json:"definition_group_id,omitempty,string"`
	DefinitionGroupName *string   `json:"definition_group_name,omitempty"`
	DefinitionId        *int64    `json:"definition_id,omitempty,string"`
	DefinitionName      *string   `json:"definition_name,omitempty"`
}

type TaskApprove struct {
	ApprovalCode *string `json:"approval_code,omitempty"`
	InstanceCode *string `json:"instance_code,omitempty"`
	UserId       *string `json:"user_id,omitempty"`
	Comment      *string `json:"comment,omitempty"`
	TaskId       *string `json:"task_id,omitempty"`
}

type TaskSearch struct {
	UserId                *string `json:"user_id,omitempty"`
	ApprovalCode          *string `json:"approval_code,omitempty"`
	InstanceCode          *string `json:"instance_code,omitempty"`
	InstanceExternalId    *string `json:"instance_external_id,omitempty"`
	GroupExternalId       *string `json:"group_external_id,omitempty"`
	TaskTitle             *string `json:"task_title,omitempty"`
	TaskStatus            *string `json:"task_status,omitempty"`
	InstanceStartTimeFrom *int64  `json:"instance_start_time_from,omitempty,string"`
	InstanceStartTimeTo   *int64  `json:"instance_start_time_to,omitempty,string"`
	Locale                *string `json:"locale,omitempty"`
}

type TaskSearchItem struct {
	Approval *InstanceSearchApproval `json:"approval,omitempty"`
	Group    *InstanceSearchGroup    `json:"group,omitempty"`
	Instance *InstanceSearchNode     `json:"instance,omitempty"`
	Task     *TaskSearchNode         `json:"task,omitempty"`
}

type TaskSearchNode struct {
	UserId    *string             `json:"user_id,omitempty"`
	StartTime *int64              `json:"start_time,omitempty,string"`
	EndTime   *int64              `json:"end_time,omitempty,string"`
	Status    *string             `json:"status,omitempty"`
	Title     *string             `json:"title,omitempty"`
	Extra     *string             `json:"extra,omitempty"`
	Link      *InstanceSearchLink `json:"link,omitempty"`
}

type TaskTransfer struct {
	ApprovalCode   *string `json:"approval_code,omitempty"`
	InstanceCode   *string `json:"instance_code,omitempty"`
	UserId         *string `json:"user_id,omitempty"`
	Comment        *string `json:"comment,omitempty"`
	TransferUserId *string `json:"transfer_user_id,omitempty"`
	TaskId         *string `json:"task_id,omitempty"`
}

type TaskUrls struct {
	Helpdesk *string `json:"helpdesk,omitempty"`
	Mobile   *string `json:"mobile,omitempty"`
	Pc       *string `json:"pc,omitempty"`
}

type TripGroup struct {
	Type         *string              `json:"type,omitempty"`
	InstanceCode *string              `json:"instance_code,omitempty"`
	StartUser    *User                `json:"start_user,omitempty"`
	StartTime    *string              `json:"start_time,omitempty"`
	EndTime      *string              `json:"end_time,omitempty"`
	TripInterval *string              `json:"trip_interval,omitempty"`
	TripReason   *string              `json:"trip_reason,omitempty"`
	Schedules    []*TripGroupSchedule `json:"schedules,omitempty"`
	TripPeers    []*User              `json:"trip_peers,omitempty"`
}

type TripGroupSchedule struct {
	TripStartTime  *string `json:"trip_start_time,omitempty"`
	TripEndTime    *string `json:"trip_end_time,omitempty"`
	TripInterval   *string `json:"trip_interval,omitempty"`
	Departure      *string `json:"departure,omitempty"`
	Destination    *string `json:"destination,omitempty"`
	Transportation *string `json:"transportation,omitempty"`
	TripType       *string `json:"trip_type,omitempty"`
	Remark         *string `json:"remark,omitempty"`
}

type User struct {
	Id   *UserId `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

type UserId struct {
	UserId  *string `json:"user_id,omitempty"`
	OpenId  *string `json:"open_id,omitempty"`
	UnionId *string `json:"union_id,omitempty"`
}

/**生成请求和响应结果类型，以及请求对象的Builder构造器 **/

type AddSignInstanceReqBodyBuilder struct {
	userId             string
	userIdFlag         bool
	approvalCode       string
	approvalCodeFlag   bool
	instanceCode       string
	instanceCodeFlag   bool
	taskId             string
	taskIdFlag         bool
	comment            string
	commentFlag        bool
	addSignUserIds     []string
	addSignUserIdsFlag bool
	addSignType        int
	addSignTypeFlag    bool
	approvalMethod     int
	approvalMethodFlag bool
}

// 生成body的New构造器
func NewAddSignInstanceReqBodyBuilder() *AddSignInstanceReqBodyBuilder {
	builder := &AddSignInstanceReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *AddSignInstanceReqBodyBuilder) UserId(userId string) *AddSignInstanceReqBodyBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}
func (builder *AddSignInstanceReqBodyBuilder) ApprovalCode(approvalCode string) *AddSignInstanceReqBodyBuilder {
	builder.approvalCode = approvalCode
	builder.approvalCodeFlag = true
	return builder
}
func (builder *AddSignInstanceReqBodyBuilder) InstanceCode(instanceCode string) *AddSignInstanceReqBodyBuilder {
	builder.instanceCode = instanceCode
	builder.instanceCodeFlag = true
	return builder
}
func (builder *AddSignInstanceReqBodyBuilder) TaskId(taskId string) *AddSignInstanceReqBodyBuilder {
	builder.taskId = taskId
	builder.taskIdFlag = true
	return builder
}
func (builder *AddSignInstanceReqBodyBuilder) Comment(comment string) *AddSignInstanceReqBodyBuilder {
	builder.comment = comment
	builder.commentFlag = true
	return builder
}
func (builder *AddSignInstanceReqBodyBuilder) AddSignUserIds(addSignUserIds []string) *AddSignInstanceReqBodyBuilder {
	builder.addSignUserIds = addSignUserIds
	builder.addSignUserIdsFlag = true
	return builder
}
func (builder *AddSignInstanceReqBodyBuilder) AddSignType(addSignType int) *AddSignInstanceReqBodyBuilder {
	builder.addSignType = addSignType
	builder.addSignTypeFlag = true
	return builder
}
func (builder *AddSignInstanceReqBodyBuilder) ApprovalMethod(approvalMethod int) *AddSignInstanceReqBodyBuilder {
	builder.approvalMethod = approvalMethod
	builder.approvalMethodFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *AddSignInstanceReqBodyBuilder) Build() *AddSignInstanceReqBody {
	req := &AddSignInstanceReqBody{}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.approvalCodeFlag {
		req.ApprovalCode = &builder.approvalCode

	}
	if builder.instanceCodeFlag {
		req.InstanceCode = &builder.instanceCode

	}
	if builder.taskIdFlag {
		req.TaskId = &builder.taskId

	}
	if builder.commentFlag {
		req.Comment = &builder.comment

	}
	if builder.addSignUserIdsFlag {
		req.AddSignUserIds = builder.addSignUserIds

	}
	if builder.addSignTypeFlag {
		req.AddSignType = &builder.addSignType

	}
	if builder.approvalMethodFlag {
		req.ApprovalMethod = &builder.approvalMethod

	}
	return req
}

/**上传文件path开始**/
type AddSignInstancePathReqBodyBuilder struct {
	userId             string
	userIdFlag         bool
	approvalCode       string
	approvalCodeFlag   bool
	instanceCode       string
	instanceCodeFlag   bool
	taskId             string
	taskIdFlag         bool
	comment            string
	commentFlag        bool
	addSignUserIds     []string
	addSignUserIdsFlag bool
	addSignType        int
	addSignTypeFlag    bool
	approvalMethod     int
	approvalMethodFlag bool
}

func NewAddSignInstancePathReqBodyBuilder() *AddSignInstancePathReqBodyBuilder {
	builder := &AddSignInstancePathReqBodyBuilder{}
	return builder
}
func (builder *AddSignInstancePathReqBodyBuilder) UserId(userId string) *AddSignInstancePathReqBodyBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}
func (builder *AddSignInstancePathReqBodyBuilder) ApprovalCode(approvalCode string) *AddSignInstancePathReqBodyBuilder {
	builder.approvalCode = approvalCode
	builder.approvalCodeFlag = true
	return builder
}
func (builder *AddSignInstancePathReqBodyBuilder) InstanceCode(instanceCode string) *AddSignInstancePathReqBodyBuilder {
	builder.instanceCode = instanceCode
	builder.instanceCodeFlag = true
	return builder
}
func (builder *AddSignInstancePathReqBodyBuilder) TaskId(taskId string) *AddSignInstancePathReqBodyBuilder {
	builder.taskId = taskId
	builder.taskIdFlag = true
	return builder
}
func (builder *AddSignInstancePathReqBodyBuilder) Comment(comment string) *AddSignInstancePathReqBodyBuilder {
	builder.comment = comment
	builder.commentFlag = true
	return builder
}
func (builder *AddSignInstancePathReqBodyBuilder) AddSignUserIds(addSignUserIds []string) *AddSignInstancePathReqBodyBuilder {
	builder.addSignUserIds = addSignUserIds
	builder.addSignUserIdsFlag = true
	return builder
}
func (builder *AddSignInstancePathReqBodyBuilder) AddSignType(addSignType int) *AddSignInstancePathReqBodyBuilder {
	builder.addSignType = addSignType
	builder.addSignTypeFlag = true
	return builder
}
func (builder *AddSignInstancePathReqBodyBuilder) ApprovalMethod(approvalMethod int) *AddSignInstancePathReqBodyBuilder {
	builder.approvalMethod = approvalMethod
	builder.approvalMethodFlag = true
	return builder
}

func (builder *AddSignInstancePathReqBodyBuilder) Build() (*AddSignInstanceReqBody, error) {
	req := &AddSignInstanceReqBody{}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.approvalCodeFlag {
		req.ApprovalCode = &builder.approvalCode

	}
	if builder.instanceCodeFlag {
		req.InstanceCode = &builder.instanceCode

	}
	if builder.taskIdFlag {
		req.TaskId = &builder.taskId

	}
	if builder.commentFlag {
		req.Comment = &builder.comment

	}
	if builder.addSignUserIdsFlag {
		req.AddSignUserIds = builder.addSignUserIds
	}
	if builder.addSignTypeFlag {
		req.AddSignType = &builder.addSignType

	}
	if builder.approvalMethodFlag {
		req.ApprovalMethod = &builder.approvalMethod

	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type AddSignInstanceReqBuilder struct {
	body     *AddSignInstanceReqBody
	bodyFlag bool
}

// 生成请求的New构造器
func NewAddSignInstanceReqBuilder() *AddSignInstanceReqBuilder {
	builder := &AddSignInstanceReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *AddSignInstanceReqBuilder) Body(body *AddSignInstanceReqBody) *AddSignInstanceReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *AddSignInstanceReqBuilder) Build() *AddSignInstanceReq {
	req := &AddSignInstanceReq{}
	if builder.bodyFlag {
		req.Body = builder.body
	}
	return req
}

type AddSignInstanceReqBody struct {
	UserId         *string  `json:"user_id,omitempty"`
	ApprovalCode   *string  `json:"approval_code,omitempty"`
	InstanceCode   *string  `json:"instance_code,omitempty"`
	TaskId         *string  `json:"task_id,omitempty"`
	Comment        *string  `json:"comment,omitempty"`
	AddSignUserIds []string `json:"add_sign_user_ids,omitempty"`
	AddSignType    *int     `json:"add_sign_type,omitempty"`
	ApprovalMethod *int     `json:"approval_method,omitempty"`
}

type AddSignInstanceReq struct {
	Body *AddSignInstanceReqBody `body:""`
}

type AddSignInstanceResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *AddSignInstanceResp) Success() bool {
	return resp.Code == 0
}

type PreviewInstanceReqBodyBuilder struct {
	userId           string
	userIdFlag       bool
	approvalCode     string
	approvalCodeFlag bool
	departmentId     string
	departmentIdFlag bool
	form             string
	formFlag         bool
	instanceCode     string
	instanceCodeFlag bool
	locale           string
	localeFlag       bool
	taskId           string
	taskIdFlag       bool
}

// 生成body的New构造器
func NewPreviewInstanceReqBodyBuilder() *PreviewInstanceReqBodyBuilder {
	builder := &PreviewInstanceReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *PreviewInstanceReqBodyBuilder) UserId(userId string) *PreviewInstanceReqBodyBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}
func (builder *PreviewInstanceReqBodyBuilder) ApprovalCode(approvalCode string) *PreviewInstanceReqBodyBuilder {
	builder.approvalCode = approvalCode
	builder.approvalCodeFlag = true
	return builder
}
func (builder *PreviewInstanceReqBodyBuilder) DepartmentId(departmentId string) *PreviewInstanceReqBodyBuilder {
	builder.departmentId = departmentId
	builder.departmentIdFlag = true
	return builder
}
func (builder *PreviewInstanceReqBodyBuilder) Form(form string) *PreviewInstanceReqBodyBuilder {
	builder.form = form
	builder.formFlag = true
	return builder
}
func (builder *PreviewInstanceReqBodyBuilder) InstanceCode(instanceCode string) *PreviewInstanceReqBodyBuilder {
	builder.instanceCode = instanceCode
	builder.instanceCodeFlag = true
	return builder
}
func (builder *PreviewInstanceReqBodyBuilder) Locale(locale string) *PreviewInstanceReqBodyBuilder {
	builder.locale = locale
	builder.localeFlag = true
	return builder
}
func (builder *PreviewInstanceReqBodyBuilder) TaskId(taskId string) *PreviewInstanceReqBodyBuilder {
	builder.taskId = taskId
	builder.taskIdFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *PreviewInstanceReqBodyBuilder) Build() *PreviewInstanceReqBody {
	req := &PreviewInstanceReqBody{}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.approvalCodeFlag {
		req.ApprovalCode = &builder.approvalCode

	}
	if builder.departmentIdFlag {
		req.DepartmentId = &builder.departmentId

	}
	if builder.formFlag {
		req.Form = &builder.form

	}
	if builder.instanceCodeFlag {
		req.InstanceCode = &builder.instanceCode

	}
	if builder.localeFlag {
		req.Locale = &builder.locale

	}
	if builder.taskIdFlag {
		req.TaskId = &builder.taskId

	}
	return req
}

/**上传文件path开始**/
type PreviewInstancePathReqBodyBuilder struct {
	userId           string
	userIdFlag       bool
	approvalCode     string
	approvalCodeFlag bool
	departmentId     string
	departmentIdFlag bool
	form             string
	formFlag         bool
	instanceCode     string
	instanceCodeFlag bool
	locale           string
	localeFlag       bool
	taskId           string
	taskIdFlag       bool
}

func NewPreviewInstancePathReqBodyBuilder() *PreviewInstancePathReqBodyBuilder {
	builder := &PreviewInstancePathReqBodyBuilder{}
	return builder
}
func (builder *PreviewInstancePathReqBodyBuilder) UserId(userId string) *PreviewInstancePathReqBodyBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}
func (builder *PreviewInstancePathReqBodyBuilder) ApprovalCode(approvalCode string) *PreviewInstancePathReqBodyBuilder {
	builder.approvalCode = approvalCode
	builder.approvalCodeFlag = true
	return builder
}
func (builder *PreviewInstancePathReqBodyBuilder) DepartmentId(departmentId string) *PreviewInstancePathReqBodyBuilder {
	builder.departmentId = departmentId
	builder.departmentIdFlag = true
	return builder
}
func (builder *PreviewInstancePathReqBodyBuilder) Form(form string) *PreviewInstancePathReqBodyBuilder {
	builder.form = form
	builder.formFlag = true
	return builder
}
func (builder *PreviewInstancePathReqBodyBuilder) InstanceCode(instanceCode string) *PreviewInstancePathReqBodyBuilder {
	builder.instanceCode = instanceCode
	builder.instanceCodeFlag = true
	return builder
}
func (builder *PreviewInstancePathReqBodyBuilder) Locale(locale string) *PreviewInstancePathReqBodyBuilder {
	builder.locale = locale
	builder.localeFlag = true
	return builder
}
func (builder *PreviewInstancePathReqBodyBuilder) TaskId(taskId string) *PreviewInstancePathReqBodyBuilder {
	builder.taskId = taskId
	builder.taskIdFlag = true
	return builder
}

func (builder *PreviewInstancePathReqBodyBuilder) Build() (*PreviewInstanceReqBody, error) {
	req := &PreviewInstanceReqBody{}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.approvalCodeFlag {
		req.ApprovalCode = &builder.approvalCode

	}
	if builder.departmentIdFlag {
		req.DepartmentId = &builder.departmentId

	}
	if builder.formFlag {
		req.Form = &builder.form

	}
	if builder.instanceCodeFlag {
		req.InstanceCode = &builder.instanceCode

	}
	if builder.localeFlag {
		req.Locale = &builder.locale

	}
	if builder.taskIdFlag {
		req.TaskId = &builder.taskId

	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type PreviewInstanceReqBuilder struct {
	userIdType     string
	userIdTypeFlag bool
	body           *PreviewInstanceReqBody
	bodyFlag       bool
}

// 生成请求的New构造器
func NewPreviewInstanceReqBuilder() *PreviewInstanceReqBuilder {
	builder := &PreviewInstanceReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *PreviewInstanceReqBuilder) UserIdType(userIdType string) *PreviewInstanceReqBuilder {
	builder.userIdType = userIdType
	builder.userIdTypeFlag = true
	return builder
}
func (builder *PreviewInstanceReqBuilder) Body(body *PreviewInstanceReqBody) *PreviewInstanceReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *PreviewInstanceReqBuilder) Build() *PreviewInstanceReq {
	req := &PreviewInstanceReq{}
	if builder.userIdTypeFlag {
		req.UserIdType = &builder.userIdType
	}
	if builder.bodyFlag {
		req.Body = builder.body
	}
	return req
}

type PreviewInstanceReqBody struct {
	UserId       *string `json:"user_id,omitempty"`
	ApprovalCode *string `json:"approval_code,omitempty"`
	DepartmentId *string `json:"department_id,omitempty"`
	Form         *string `json:"form,omitempty"`
	InstanceCode *string `json:"instance_code,omitempty"`
	Locale       *string `json:"locale,omitempty"`
	TaskId       *string `json:"task_id,omitempty"`
}

type PreviewInstanceReq struct {
	UserIdType *string                 `query:"user_id_type"`
	Body       *PreviewInstanceReqBody `body:""`
}

type PreviewInstanceRespData struct {
	PreviewNodes []*PreviewNode `json:"preview_nodes,omitempty"`
}

type PreviewInstanceResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *PreviewInstanceRespData `json:"data"`
}

func (resp *PreviewInstanceResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type QueryTaskReqBuilder struct {
	pageSize       int
	pageSizeFlag   bool
	pageToken      string
	pageTokenFlag  bool
	userId         string
	userIdFlag     bool
	topic          int64
	topicFlag      bool
	userIdType     string
	userIdTypeFlag bool
	limit          int
}

// 生成请求的New构造器
func NewQueryTaskReqBuilder() *QueryTaskReqBuilder {
	builder := &QueryTaskReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *QueryTaskReqBuilder) Limit(limit int) *QueryTaskReqBuilder {
	builder.limit = limit
	return builder
}
func (builder *QueryTaskReqBuilder) PageSize(pageSize int) *QueryTaskReqBuilder {
	builder.pageSize = pageSize
	builder.pageSizeFlag = true
	return builder
}
func (builder *QueryTaskReqBuilder) PageToken(pageToken string) *QueryTaskReqBuilder {
	builder.pageToken = pageToken
	builder.pageTokenFlag = true
	return builder
}
func (builder *QueryTaskReqBuilder) UserId(userId string) *QueryTaskReqBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}
func (builder *QueryTaskReqBuilder) Topic(topic int64) *QueryTaskReqBuilder {
	builder.topic = topic
	builder.topicFlag = true
	return builder
}
func (builder *QueryTaskReqBuilder) UserIdType(userIdType string) *QueryTaskReqBuilder {
	builder.userIdType = userIdType
	builder.userIdTypeFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *QueryTaskReqBuilder) Build() *QueryTaskReq {
	req := &QueryTaskReq{}
	req.Limit = builder.limit
	if builder.pageSizeFlag {
		req.PageSize = &builder.pageSize
	}
	if builder.pageTokenFlag {
		req.PageToken = &builder.pageToken
	}
	if builder.userIdFlag {
		req.UserId = &builder.userId
	}
	if builder.topicFlag {
		req.Topic = &builder.topic
	}
	if builder.userIdTypeFlag {
		req.UserIdType = &builder.userIdType
	}
	return req
}

type QueryTaskReq struct {
	PageSize   *int    `query:"page_size"`
	PageToken  *string `query:"page_token"`
	UserId     *string `query:"user_id"`
	Topic      *int64  `query:"topic"`
	UserIdType *string `query:"user_id_type"`
	Limit      int
}

type QueryTaskRespData struct {
	Tasks     []*Task `json:"tasks,omitempty"`
	PageToken *string `json:"page_token,omitempty"`
	HasMore   *bool   `json:"has_more,omitempty"`
	Count     *Count  `json:"count,omitempty"`
}

type QueryTaskResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *QueryTaskRespData `json:"data"`
}

func (resp *QueryTaskResp) Success() bool {
	return resp.Code == 0
}

/**生成消息事件结构体 **/

type ApprovalUpdatedEventData struct {
	Object *ApprovalEvent `json:"object,omitempty"`
}

type ApprovalUpdatedEvent struct {
	*event.EventV2Base
	Event *ApprovalUpdatedEventData `json:"event"`
}

/* 生成请求的builder构造器*/
/*1.1 生成body的builder结构体*/
/**如果是分页查询，则添加迭代器定义**/
type QueryTaskIterator struct {
	nextPageToken *string
	items         []*Task
	index         int
	limit         int
	ctx           context.Context
	req           *QueryTaskReq
	listFunc      func(ctx context.Context, req *QueryTaskReq, options ...core.RequestOptionFunc) (*QueryTaskResp, error)
	options       []core.RequestOptionFunc
	curlNum       int
}

func (iterator *QueryTaskIterator) Next() (bool, *Task, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum > iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.PageToken = iterator.nextPageToken
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Tasks) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Tasks
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *QueryTaskIterator) NextPageToken() *string {
	return iterator.nextPageToken
}
