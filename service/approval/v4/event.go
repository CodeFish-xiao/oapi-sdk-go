// Package approval code generated by oapi sdk gen
package approval
import (
	"context"
)

/**
消息处理器定义
**/
type ApprovalUpdatedEventHandler struct {
	handler func(context.Context, *ApprovalUpdatedEvent) error
}

func NewApprovalUpdatedEventHandler(handler func(context.Context, *ApprovalUpdatedEvent) error) *ApprovalUpdatedEventHandler{
   h := &ApprovalUpdatedEventHandler{handler: handler}
   return h
}
/**
返回事件的消息体的实例，用于反序列化用
**/
func (h *ApprovalUpdatedEventHandler) Event() interface{} {
	return &ApprovalUpdatedEvent{}
}

/**
 回调开发者注册的handle
 r**/
func (h *ApprovalUpdatedEventHandler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*ApprovalUpdatedEvent))
}

/**
消息处理器定义
**/
type InstanceRemedyGroupUpdateEventHandler struct {
	handler func(context.Context, *InstanceRemedyGroupUpdateEvent) error
}

func NewInstanceRemedyGroupUpdateEventHandler(handler func(context.Context, *InstanceRemedyGroupUpdateEvent) error) *InstanceRemedyGroupUpdateEventHandler{
   h := &InstanceRemedyGroupUpdateEventHandler{handler: handler}
   return h
}
/**
返回事件的消息体的实例，用于反序列化用
**/
func (h *InstanceRemedyGroupUpdateEventHandler) Event() interface{} {
	return &InstanceRemedyGroupUpdateEvent{}
}

/**
 回调开发者注册的handle
 r**/
func (h *InstanceRemedyGroupUpdateEventHandler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*InstanceRemedyGroupUpdateEvent))
}

/**
消息处理器定义
**/
type InstanceSignGroupUpdateEventHandler struct {
	handler func(context.Context, *InstanceSignGroupUpdateEvent) error
}

func NewInstanceSignGroupUpdateEventHandler(handler func(context.Context, *InstanceSignGroupUpdateEvent) error) *InstanceSignGroupUpdateEventHandler{
   h := &InstanceSignGroupUpdateEventHandler{handler: handler}
   return h
}
/**
返回事件的消息体的实例，用于反序列化用
**/
func (h *InstanceSignGroupUpdateEventHandler) Event() interface{} {
	return &InstanceSignGroupUpdateEvent{}
}

/**
 回调开发者注册的handle
 r**/
func (h *InstanceSignGroupUpdateEventHandler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*InstanceSignGroupUpdateEvent))
}

/**
消息处理器定义
**/
type InstanceTripGroupUpdateEventHandler struct {
	handler func(context.Context, *InstanceTripGroupUpdateEvent) error
}

func NewInstanceTripGroupUpdateEventHandler(handler func(context.Context, *InstanceTripGroupUpdateEvent) error) *InstanceTripGroupUpdateEventHandler{
   h := &InstanceTripGroupUpdateEventHandler{handler: handler}
   return h
}
/**
返回事件的消息体的实例，用于反序列化用
**/
func (h *InstanceTripGroupUpdateEventHandler) Event() interface{} {
	return &InstanceTripGroupUpdateEvent{}
}

/**
 回调开发者注册的handle
 r**/
func (h *InstanceTripGroupUpdateEventHandler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*InstanceTripGroupUpdateEvent))
}