// Package hire code generated by oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package larkhire

import (
	"fmt"

	"context"
	"errors"

	"github.com/larksuite/oapi-sdk-go/v3/core"
)

// 生成枚举值

const (
	UserIdTypeUserId  = "user_id"
	UserIdTypeUnionId = "union_id"
	UserIdTypeOpenId  = "open_id"
)

const (
	TerminationType我们拒绝了候选人 = 1
	TerminationType候选人拒绝了我们 = 22
	TerminationType其他       = 27
)

const (
	OperationConvert   = 1
	OperationOverboard = 2
)

const (
	PrivacyPrivate = 1
	PrivacyPublic  = 2
)

const (
	ScenarioApplyOffer = 1
)

// 生成数据类型

type Agency struct {
	Id          *string `json:"id,omitempty"`
	Name        *string `json:"name,omitempty"`
	ContactorId *string `json:"contactor_id,omitempty"`
}

// builder开始
type AgencyBuilder struct {
	id              string
	idFlag          bool
	name            string
	nameFlag        bool
	contactorId     string
	contactorIdFlag bool
}

func NewAgencyBuilder() *AgencyBuilder {
	builder := &AgencyBuilder{}
	return builder
}

func (builder *AgencyBuilder) Id(id string) *AgencyBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *AgencyBuilder) Name(name string) *AgencyBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *AgencyBuilder) ContactorId(contactorId string) *AgencyBuilder {
	builder.contactorId = contactorId
	builder.contactorIdFlag = true
	return builder
}

func (builder *AgencyBuilder) Build() *Agency {
	req := &Agency{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.contactorIdFlag {
		req.ContactorId = &builder.contactorId

	}
	return req
}

// builder结束

type AppliOfferBasicCustObj struct {
	Id              *string                      `json:"id,omitempty"`
	Name            *OfferSchemaName             `json:"name,omitempty"`
	Type            *string                      `json:"type,omitempty"`
	Value           *string                      `json:"value,omitempty"`
	OptionValueList []*AppliOfferBasicCustObjOpV `json:"option_value_list,omitempty"`
}

// builder开始
type AppliOfferBasicCustObjBuilder struct {
	id                  string
	idFlag              bool
	name                *OfferSchemaName
	nameFlag            bool
	type_               string
	typeFlag            bool
	value               string
	valueFlag           bool
	optionValueList     []*AppliOfferBasicCustObjOpV
	optionValueListFlag bool
}

func NewAppliOfferBasicCustObjBuilder() *AppliOfferBasicCustObjBuilder {
	builder := &AppliOfferBasicCustObjBuilder{}
	return builder
}

func (builder *AppliOfferBasicCustObjBuilder) Id(id string) *AppliOfferBasicCustObjBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *AppliOfferBasicCustObjBuilder) Name(name *OfferSchemaName) *AppliOfferBasicCustObjBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *AppliOfferBasicCustObjBuilder) Type(type_ string) *AppliOfferBasicCustObjBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}
func (builder *AppliOfferBasicCustObjBuilder) Value(value string) *AppliOfferBasicCustObjBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}
func (builder *AppliOfferBasicCustObjBuilder) OptionValueList(optionValueList []*AppliOfferBasicCustObjOpV) *AppliOfferBasicCustObjBuilder {
	builder.optionValueList = optionValueList
	builder.optionValueListFlag = true
	return builder
}

func (builder *AppliOfferBasicCustObjBuilder) Build() *AppliOfferBasicCustObj {
	req := &AppliOfferBasicCustObj{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	if builder.valueFlag {
		req.Value = &builder.value

	}
	if builder.optionValueListFlag {
		req.OptionValueList = builder.optionValueList
	}
	return req
}

// builder结束

type AppliOfferBasicCustObjOpV struct {
	ZhCn *string `json:"zh_cn,omitempty"`
	EnUs *string `json:"en_us,omitempty"`
}

// builder开始
type AppliOfferBasicCustObjOpVBuilder struct {
	zhCn     string
	zhCnFlag bool
	enUs     string
	enUsFlag bool
}

func NewAppliOfferBasicCustObjOpVBuilder() *AppliOfferBasicCustObjOpVBuilder {
	builder := &AppliOfferBasicCustObjOpVBuilder{}
	return builder
}

func (builder *AppliOfferBasicCustObjOpVBuilder) ZhCn(zhCn string) *AppliOfferBasicCustObjOpVBuilder {
	builder.zhCn = zhCn
	builder.zhCnFlag = true
	return builder
}
func (builder *AppliOfferBasicCustObjOpVBuilder) EnUs(enUs string) *AppliOfferBasicCustObjOpVBuilder {
	builder.enUs = enUs
	builder.enUsFlag = true
	return builder
}

func (builder *AppliOfferBasicCustObjOpVBuilder) Build() *AppliOfferBasicCustObjOpV {
	req := &AppliOfferBasicCustObjOpV{}
	if builder.zhCnFlag {
		req.ZhCn = &builder.zhCn

	}
	if builder.enUsFlag {
		req.EnUs = &builder.enUs

	}
	return req
}

// builder结束

type AppliOfferBasicInfoUser struct {
	Id         *string     `json:"id,omitempty"`
	Name       *string     `json:"name,omitempty"`
	EnName     *string     `json:"en_name,omitempty"`
	Avatar     *string     `json:"avatar,omitempty"`
	Department *Department `json:"department,omitempty"`
	Timezone   *string     `json:"timezone,omitempty"`
	Phone      *string     `json:"phone,omitempty"`
	Email      *string     `json:"email,omitempty"`
	InAppScope *bool       `json:"in_app_scope,omitempty"`
}

// builder开始
type AppliOfferBasicInfoUserBuilder struct {
	id             string
	idFlag         bool
	name           string
	nameFlag       bool
	enName         string
	enNameFlag     bool
	avatar         string
	avatarFlag     bool
	department     *Department
	departmentFlag bool
	timezone       string
	timezoneFlag   bool
	phone          string
	phoneFlag      bool
	email          string
	emailFlag      bool
	inAppScope     bool
	inAppScopeFlag bool
}

func NewAppliOfferBasicInfoUserBuilder() *AppliOfferBasicInfoUserBuilder {
	builder := &AppliOfferBasicInfoUserBuilder{}
	return builder
}

func (builder *AppliOfferBasicInfoUserBuilder) Id(id string) *AppliOfferBasicInfoUserBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *AppliOfferBasicInfoUserBuilder) Name(name string) *AppliOfferBasicInfoUserBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *AppliOfferBasicInfoUserBuilder) EnName(enName string) *AppliOfferBasicInfoUserBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}
func (builder *AppliOfferBasicInfoUserBuilder) Avatar(avatar string) *AppliOfferBasicInfoUserBuilder {
	builder.avatar = avatar
	builder.avatarFlag = true
	return builder
}
func (builder *AppliOfferBasicInfoUserBuilder) Department(department *Department) *AppliOfferBasicInfoUserBuilder {
	builder.department = department
	builder.departmentFlag = true
	return builder
}
func (builder *AppliOfferBasicInfoUserBuilder) Timezone(timezone string) *AppliOfferBasicInfoUserBuilder {
	builder.timezone = timezone
	builder.timezoneFlag = true
	return builder
}
func (builder *AppliOfferBasicInfoUserBuilder) Phone(phone string) *AppliOfferBasicInfoUserBuilder {
	builder.phone = phone
	builder.phoneFlag = true
	return builder
}
func (builder *AppliOfferBasicInfoUserBuilder) Email(email string) *AppliOfferBasicInfoUserBuilder {
	builder.email = email
	builder.emailFlag = true
	return builder
}
func (builder *AppliOfferBasicInfoUserBuilder) InAppScope(inAppScope bool) *AppliOfferBasicInfoUserBuilder {
	builder.inAppScope = inAppScope
	builder.inAppScopeFlag = true
	return builder
}

func (builder *AppliOfferBasicInfoUserBuilder) Build() *AppliOfferBasicInfoUser {
	req := &AppliOfferBasicInfoUser{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.avatarFlag {
		req.Avatar = &builder.avatar

	}
	if builder.departmentFlag {
		req.Department = builder.department
	}
	if builder.timezoneFlag {
		req.Timezone = &builder.timezone

	}
	if builder.phoneFlag {
		req.Phone = &builder.phone

	}
	if builder.emailFlag {
		req.Email = &builder.email

	}
	if builder.inAppScopeFlag {
		req.InAppScope = &builder.inAppScope

	}
	return req
}

// builder结束

type AppliOfferOnboardProfile struct {
	OfferId                    *string                      `json:"offer_id,omitempty"`
	Department                 *Department                  `json:"department,omitempty"`
	RecruitmentType            *RecruitmentType             `json:"recruitment_type,omitempty"`
	Sequence                   *Sequence                    `json:"sequence,omitempty"`
	Level                      *Level                       `json:"level,omitempty"`
	OnboardAddress             *AppliOfferOnboardProfileAdd `json:"onboard_address,omitempty"`
	WorkAddress                *AppliOfferOnboardProfileAdd `json:"work_address,omitempty"`
	Leader                     *AppliOfferBasicInfoUser     `json:"leader,omitempty"`
	IsWorkAddressSameToOnboard *bool                        `json:"is_work_address_same_to_onboard,omitempty"`
	ProbationMonth             *int                         `json:"probation_month,omitempty"`
	ContractYear               *int                         `json:"contract_year,omitempty"`
}

// builder开始
type AppliOfferOnboardProfileBuilder struct {
	offerId                        string
	offerIdFlag                    bool
	department                     *Department
	departmentFlag                 bool
	recruitmentType                *RecruitmentType
	recruitmentTypeFlag            bool
	sequence                       *Sequence
	sequenceFlag                   bool
	level                          *Level
	levelFlag                      bool
	onboardAddress                 *AppliOfferOnboardProfileAdd
	onboardAddressFlag             bool
	workAddress                    *AppliOfferOnboardProfileAdd
	workAddressFlag                bool
	leader                         *AppliOfferBasicInfoUser
	leaderFlag                     bool
	isWorkAddressSameToOnboard     bool
	isWorkAddressSameToOnboardFlag bool
	probationMonth                 int
	probationMonthFlag             bool
	contractYear                   int
	contractYearFlag               bool
}

func NewAppliOfferOnboardProfileBuilder() *AppliOfferOnboardProfileBuilder {
	builder := &AppliOfferOnboardProfileBuilder{}
	return builder
}

func (builder *AppliOfferOnboardProfileBuilder) OfferId(offerId string) *AppliOfferOnboardProfileBuilder {
	builder.offerId = offerId
	builder.offerIdFlag = true
	return builder
}
func (builder *AppliOfferOnboardProfileBuilder) Department(department *Department) *AppliOfferOnboardProfileBuilder {
	builder.department = department
	builder.departmentFlag = true
	return builder
}
func (builder *AppliOfferOnboardProfileBuilder) RecruitmentType(recruitmentType *RecruitmentType) *AppliOfferOnboardProfileBuilder {
	builder.recruitmentType = recruitmentType
	builder.recruitmentTypeFlag = true
	return builder
}
func (builder *AppliOfferOnboardProfileBuilder) Sequence(sequence *Sequence) *AppliOfferOnboardProfileBuilder {
	builder.sequence = sequence
	builder.sequenceFlag = true
	return builder
}
func (builder *AppliOfferOnboardProfileBuilder) Level(level *Level) *AppliOfferOnboardProfileBuilder {
	builder.level = level
	builder.levelFlag = true
	return builder
}
func (builder *AppliOfferOnboardProfileBuilder) OnboardAddress(onboardAddress *AppliOfferOnboardProfileAdd) *AppliOfferOnboardProfileBuilder {
	builder.onboardAddress = onboardAddress
	builder.onboardAddressFlag = true
	return builder
}
func (builder *AppliOfferOnboardProfileBuilder) WorkAddress(workAddress *AppliOfferOnboardProfileAdd) *AppliOfferOnboardProfileBuilder {
	builder.workAddress = workAddress
	builder.workAddressFlag = true
	return builder
}
func (builder *AppliOfferOnboardProfileBuilder) Leader(leader *AppliOfferBasicInfoUser) *AppliOfferOnboardProfileBuilder {
	builder.leader = leader
	builder.leaderFlag = true
	return builder
}
func (builder *AppliOfferOnboardProfileBuilder) IsWorkAddressSameToOnboard(isWorkAddressSameToOnboard bool) *AppliOfferOnboardProfileBuilder {
	builder.isWorkAddressSameToOnboard = isWorkAddressSameToOnboard
	builder.isWorkAddressSameToOnboardFlag = true
	return builder
}
func (builder *AppliOfferOnboardProfileBuilder) ProbationMonth(probationMonth int) *AppliOfferOnboardProfileBuilder {
	builder.probationMonth = probationMonth
	builder.probationMonthFlag = true
	return builder
}
func (builder *AppliOfferOnboardProfileBuilder) ContractYear(contractYear int) *AppliOfferOnboardProfileBuilder {
	builder.contractYear = contractYear
	builder.contractYearFlag = true
	return builder
}

func (builder *AppliOfferOnboardProfileBuilder) Build() *AppliOfferOnboardProfile {
	req := &AppliOfferOnboardProfile{}
	if builder.offerIdFlag {
		req.OfferId = &builder.offerId

	}
	if builder.departmentFlag {
		req.Department = builder.department
	}
	if builder.recruitmentTypeFlag {
		req.RecruitmentType = builder.recruitmentType
	}
	if builder.sequenceFlag {
		req.Sequence = builder.sequence
	}
	if builder.levelFlag {
		req.Level = builder.level
	}
	if builder.onboardAddressFlag {
		req.OnboardAddress = builder.onboardAddress
	}
	if builder.workAddressFlag {
		req.WorkAddress = builder.workAddress
	}
	if builder.leaderFlag {
		req.Leader = builder.leader
	}
	if builder.isWorkAddressSameToOnboardFlag {
		req.IsWorkAddressSameToOnboard = &builder.isWorkAddressSameToOnboard

	}
	if builder.probationMonthFlag {
		req.ProbationMonth = &builder.probationMonth

	}
	if builder.contractYearFlag {
		req.ContractYear = &builder.contractYear

	}
	return req
}

// builder结束

type AppliOfferOnboardProfileAdd struct {
	Id           *string                       `json:"id,omitempty"`
	Name         *string                       `json:"name,omitempty"`
	EnName       *string                       `json:"en_name,omitempty"`
	District     *AppliOfferOnboardProfileCity `json:"district,omitempty"`
	City         *AppliOfferOnboardProfileCity `json:"city,omitempty"`
	State        *AppliOfferOnboardProfileCity `json:"state,omitempty"`
	Country      *AppliOfferOnboardProfileCity `json:"country,omitempty"`
	UsageIdList  []string                      `json:"usage_id_list,omitempty"`
	ActiveStatus *int                          `json:"active_status,omitempty"`
}

// builder开始
type AppliOfferOnboardProfileAddBuilder struct {
	id               string
	idFlag           bool
	name             string
	nameFlag         bool
	enName           string
	enNameFlag       bool
	district         *AppliOfferOnboardProfileCity
	districtFlag     bool
	city             *AppliOfferOnboardProfileCity
	cityFlag         bool
	state            *AppliOfferOnboardProfileCity
	stateFlag        bool
	country          *AppliOfferOnboardProfileCity
	countryFlag      bool
	usageIdList      []string
	usageIdListFlag  bool
	activeStatus     int
	activeStatusFlag bool
}

func NewAppliOfferOnboardProfileAddBuilder() *AppliOfferOnboardProfileAddBuilder {
	builder := &AppliOfferOnboardProfileAddBuilder{}
	return builder
}

func (builder *AppliOfferOnboardProfileAddBuilder) Id(id string) *AppliOfferOnboardProfileAddBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *AppliOfferOnboardProfileAddBuilder) Name(name string) *AppliOfferOnboardProfileAddBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *AppliOfferOnboardProfileAddBuilder) EnName(enName string) *AppliOfferOnboardProfileAddBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}
func (builder *AppliOfferOnboardProfileAddBuilder) District(district *AppliOfferOnboardProfileCity) *AppliOfferOnboardProfileAddBuilder {
	builder.district = district
	builder.districtFlag = true
	return builder
}
func (builder *AppliOfferOnboardProfileAddBuilder) City(city *AppliOfferOnboardProfileCity) *AppliOfferOnboardProfileAddBuilder {
	builder.city = city
	builder.cityFlag = true
	return builder
}
func (builder *AppliOfferOnboardProfileAddBuilder) State(state *AppliOfferOnboardProfileCity) *AppliOfferOnboardProfileAddBuilder {
	builder.state = state
	builder.stateFlag = true
	return builder
}
func (builder *AppliOfferOnboardProfileAddBuilder) Country(country *AppliOfferOnboardProfileCity) *AppliOfferOnboardProfileAddBuilder {
	builder.country = country
	builder.countryFlag = true
	return builder
}
func (builder *AppliOfferOnboardProfileAddBuilder) UsageIdList(usageIdList []string) *AppliOfferOnboardProfileAddBuilder {
	builder.usageIdList = usageIdList
	builder.usageIdListFlag = true
	return builder
}
func (builder *AppliOfferOnboardProfileAddBuilder) ActiveStatus(activeStatus int) *AppliOfferOnboardProfileAddBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}

func (builder *AppliOfferOnboardProfileAddBuilder) Build() *AppliOfferOnboardProfileAdd {
	req := &AppliOfferOnboardProfileAdd{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.districtFlag {
		req.District = builder.district
	}
	if builder.cityFlag {
		req.City = builder.city
	}
	if builder.stateFlag {
		req.State = builder.state
	}
	if builder.countryFlag {
		req.Country = builder.country
	}
	if builder.usageIdListFlag {
		req.UsageIdList = builder.usageIdList
	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	return req
}

// builder结束

type AppliOfferOnboardProfileCity struct {
	Code         *string `json:"code,omitempty"`
	Name         *string `json:"name,omitempty"`
	EnName       *string `json:"en_name,omitempty"`
	LocationType *int    `json:"location_type,omitempty"`
}

// builder开始
type AppliOfferOnboardProfileCityBuilder struct {
	code             string
	codeFlag         bool
	name             string
	nameFlag         bool
	enName           string
	enNameFlag       bool
	locationType     int
	locationTypeFlag bool
}

func NewAppliOfferOnboardProfileCityBuilder() *AppliOfferOnboardProfileCityBuilder {
	builder := &AppliOfferOnboardProfileCityBuilder{}
	return builder
}

func (builder *AppliOfferOnboardProfileCityBuilder) Code(code string) *AppliOfferOnboardProfileCityBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}
func (builder *AppliOfferOnboardProfileCityBuilder) Name(name string) *AppliOfferOnboardProfileCityBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *AppliOfferOnboardProfileCityBuilder) EnName(enName string) *AppliOfferOnboardProfileCityBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}
func (builder *AppliOfferOnboardProfileCityBuilder) LocationType(locationType int) *AppliOfferOnboardProfileCityBuilder {
	builder.locationType = locationType
	builder.locationTypeFlag = true
	return builder
}

func (builder *AppliOfferOnboardProfileCityBuilder) Build() *AppliOfferOnboardProfileCity {
	req := &AppliOfferOnboardProfileCity{}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.locationTypeFlag {
		req.LocationType = &builder.locationType

	}
	return req
}

// builder结束

type AppliOfferSalaryPlanTemplate struct {
	TemplateKey   *string `json:"template_key,omitempty"`
	TotalAmount   *string `json:"total_amount,omitempty"`
	Currency      *string `json:"currency,omitempty"`
	SalaryContent *string `json:"salary_content,omitempty"`
}

// builder开始
type AppliOfferSalaryPlanTemplateBuilder struct {
	templateKey       string
	templateKeyFlag   bool
	totalAmount       string
	totalAmountFlag   bool
	currency          string
	currencyFlag      bool
	salaryContent     string
	salaryContentFlag bool
}

func NewAppliOfferSalaryPlanTemplateBuilder() *AppliOfferSalaryPlanTemplateBuilder {
	builder := &AppliOfferSalaryPlanTemplateBuilder{}
	return builder
}

func (builder *AppliOfferSalaryPlanTemplateBuilder) TemplateKey(templateKey string) *AppliOfferSalaryPlanTemplateBuilder {
	builder.templateKey = templateKey
	builder.templateKeyFlag = true
	return builder
}
func (builder *AppliOfferSalaryPlanTemplateBuilder) TotalAmount(totalAmount string) *AppliOfferSalaryPlanTemplateBuilder {
	builder.totalAmount = totalAmount
	builder.totalAmountFlag = true
	return builder
}
func (builder *AppliOfferSalaryPlanTemplateBuilder) Currency(currency string) *AppliOfferSalaryPlanTemplateBuilder {
	builder.currency = currency
	builder.currencyFlag = true
	return builder
}
func (builder *AppliOfferSalaryPlanTemplateBuilder) SalaryContent(salaryContent string) *AppliOfferSalaryPlanTemplateBuilder {
	builder.salaryContent = salaryContent
	builder.salaryContentFlag = true
	return builder
}

func (builder *AppliOfferSalaryPlanTemplateBuilder) Build() *AppliOfferSalaryPlanTemplate {
	req := &AppliOfferSalaryPlanTemplate{}
	if builder.templateKeyFlag {
		req.TemplateKey = &builder.templateKey

	}
	if builder.totalAmountFlag {
		req.TotalAmount = &builder.totalAmount

	}
	if builder.currencyFlag {
		req.Currency = &builder.currency

	}
	if builder.salaryContentFlag {
		req.SalaryContent = &builder.salaryContent

	}
	return req
}

// builder结束

type AppliTalentAttachResumeInfo struct {
	Id   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// builder开始
type AppliTalentAttachResumeInfoBuilder struct {
	id       string
	idFlag   bool
	name     string
	nameFlag bool
}

func NewAppliTalentAttachResumeInfoBuilder() *AppliTalentAttachResumeInfoBuilder {
	builder := &AppliTalentAttachResumeInfoBuilder{}
	return builder
}

func (builder *AppliTalentAttachResumeInfoBuilder) Id(id string) *AppliTalentAttachResumeInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *AppliTalentAttachResumeInfoBuilder) Name(name string) *AppliTalentAttachResumeInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *AppliTalentAttachResumeInfoBuilder) Build() *AppliTalentAttachResumeInfo {
	req := &AppliTalentAttachResumeInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	return req
}

// builder结束

type AppliTalentCertificateInfo struct {
	Id   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Desc *string `json:"desc,omitempty"`
}

// builder开始
type AppliTalentCertificateInfoBuilder struct {
	id       string
	idFlag   bool
	name     string
	nameFlag bool
	desc     string
	descFlag bool
}

func NewAppliTalentCertificateInfoBuilder() *AppliTalentCertificateInfoBuilder {
	builder := &AppliTalentCertificateInfoBuilder{}
	return builder
}

func (builder *AppliTalentCertificateInfoBuilder) Id(id string) *AppliTalentCertificateInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *AppliTalentCertificateInfoBuilder) Name(name string) *AppliTalentCertificateInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *AppliTalentCertificateInfoBuilder) Desc(desc string) *AppliTalentCertificateInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}

func (builder *AppliTalentCertificateInfoBuilder) Build() *AppliTalentCertificateInfo {
	req := &AppliTalentCertificateInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	return req
}

// builder结束

type AppliTalentCompetitionInfo struct {
	Id   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Desc *string `json:"desc,omitempty"`
}

// builder开始
type AppliTalentCompetitionInfoBuilder struct {
	id       string
	idFlag   bool
	name     string
	nameFlag bool
	desc     string
	descFlag bool
}

func NewAppliTalentCompetitionInfoBuilder() *AppliTalentCompetitionInfoBuilder {
	builder := &AppliTalentCompetitionInfoBuilder{}
	return builder
}

func (builder *AppliTalentCompetitionInfoBuilder) Id(id string) *AppliTalentCompetitionInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *AppliTalentCompetitionInfoBuilder) Name(name string) *AppliTalentCompetitionInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *AppliTalentCompetitionInfoBuilder) Desc(desc string) *AppliTalentCompetitionInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}

func (builder *AppliTalentCompetitionInfoBuilder) Build() *AppliTalentCompetitionInfo {
	req := &AppliTalentCompetitionInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	return req
}

// builder结束

type AppliTalentEducationInfo struct {
	Id              *string `json:"id,omitempty"`
	Degree          *int    `json:"degree,omitempty"`
	School          *string `json:"school,omitempty"`
	FieldOfStudy    *string `json:"field_of_study,omitempty"`
	StartTime       *string `json:"start_time,omitempty"`
	EndTime         *string `json:"end_time,omitempty"`
	EducationType   *int    `json:"education_type,omitempty"`
	AcademicRanking *int    `json:"academic_ranking,omitempty"`
	TagList         []int   `json:"tag_list,omitempty"`
}

// builder开始
type AppliTalentEducationInfoBuilder struct {
	id                  string
	idFlag              bool
	degree              int
	degreeFlag          bool
	school              string
	schoolFlag          bool
	fieldOfStudy        string
	fieldOfStudyFlag    bool
	startTime           string
	startTimeFlag       bool
	endTime             string
	endTimeFlag         bool
	educationType       int
	educationTypeFlag   bool
	academicRanking     int
	academicRankingFlag bool
	tagList             []int
	tagListFlag         bool
}

func NewAppliTalentEducationInfoBuilder() *AppliTalentEducationInfoBuilder {
	builder := &AppliTalentEducationInfoBuilder{}
	return builder
}

func (builder *AppliTalentEducationInfoBuilder) Id(id string) *AppliTalentEducationInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *AppliTalentEducationInfoBuilder) Degree(degree int) *AppliTalentEducationInfoBuilder {
	builder.degree = degree
	builder.degreeFlag = true
	return builder
}
func (builder *AppliTalentEducationInfoBuilder) School(school string) *AppliTalentEducationInfoBuilder {
	builder.school = school
	builder.schoolFlag = true
	return builder
}
func (builder *AppliTalentEducationInfoBuilder) FieldOfStudy(fieldOfStudy string) *AppliTalentEducationInfoBuilder {
	builder.fieldOfStudy = fieldOfStudy
	builder.fieldOfStudyFlag = true
	return builder
}
func (builder *AppliTalentEducationInfoBuilder) StartTime(startTime string) *AppliTalentEducationInfoBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}
func (builder *AppliTalentEducationInfoBuilder) EndTime(endTime string) *AppliTalentEducationInfoBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}
func (builder *AppliTalentEducationInfoBuilder) EducationType(educationType int) *AppliTalentEducationInfoBuilder {
	builder.educationType = educationType
	builder.educationTypeFlag = true
	return builder
}
func (builder *AppliTalentEducationInfoBuilder) AcademicRanking(academicRanking int) *AppliTalentEducationInfoBuilder {
	builder.academicRanking = academicRanking
	builder.academicRankingFlag = true
	return builder
}
func (builder *AppliTalentEducationInfoBuilder) TagList(tagList []int) *AppliTalentEducationInfoBuilder {
	builder.tagList = tagList
	builder.tagListFlag = true
	return builder
}

func (builder *AppliTalentEducationInfoBuilder) Build() *AppliTalentEducationInfo {
	req := &AppliTalentEducationInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.degreeFlag {
		req.Degree = &builder.degree

	}
	if builder.schoolFlag {
		req.School = &builder.school

	}
	if builder.fieldOfStudyFlag {
		req.FieldOfStudy = &builder.fieldOfStudy

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.educationTypeFlag {
		req.EducationType = &builder.educationType

	}
	if builder.academicRankingFlag {
		req.AcademicRanking = &builder.academicRanking

	}
	if builder.tagListFlag {
		req.TagList = builder.tagList
	}
	return req
}

// builder结束

type Application struct {
	Id                           *string                         `json:"id,omitempty"`
	JobId                        *string                         `json:"job_id,omitempty"`
	TalentId                     *string                         `json:"talent_id,omitempty"`
	ResumeResourceId             *string                         `json:"resume_resource_id,omitempty"`
	Stage                        *ApplicationStageInfo           `json:"stage,omitempty"`
	ActiveStatus                 *int                            `json:"active_status,omitempty"`
	DeliveryType                 *int                            `json:"delivery_type,omitempty"`
	ResumeSourceInfo             *ApplicationResumeSource        `json:"resume_source_info,omitempty"`
	WebsiteResumeSource          *ApplicationWebsiteResumeSource `json:"website_resume_source,omitempty"`
	TalentAttachmentResumeId     *string                         `json:"talent_attachment_resume_id,omitempty"`
	CreateTime                   *string                         `json:"create_time,omitempty"`
	ModifyTime                   *string                         `json:"modify_time,omitempty"`
	StageTimeList                []*ApplicationStageTime         `json:"stage_time_list,omitempty"`
	TerminationType              *int                            `json:"termination_type,omitempty"`
	TerminationReasonList        []string                        `json:"termination_reason_list,omitempty"`
	TerminationReasonNote        *string                         `json:"termination_reason_note,omitempty"`
	ApplicationPreferredCityList []*CodeNameObject               `json:"application_preferred_city_list,omitempty"`
}

// builder开始
type ApplicationBuilder struct {
	id                               string
	idFlag                           bool
	jobId                            string
	jobIdFlag                        bool
	talentId                         string
	talentIdFlag                     bool
	resumeResourceId                 string
	resumeResourceIdFlag             bool
	stage                            *ApplicationStageInfo
	stageFlag                        bool
	activeStatus                     int
	activeStatusFlag                 bool
	deliveryType                     int
	deliveryTypeFlag                 bool
	resumeSourceInfo                 *ApplicationResumeSource
	resumeSourceInfoFlag             bool
	websiteResumeSource              *ApplicationWebsiteResumeSource
	websiteResumeSourceFlag          bool
	talentAttachmentResumeId         string
	talentAttachmentResumeIdFlag     bool
	createTime                       string
	createTimeFlag                   bool
	modifyTime                       string
	modifyTimeFlag                   bool
	stageTimeList                    []*ApplicationStageTime
	stageTimeListFlag                bool
	terminationType                  int
	terminationTypeFlag              bool
	terminationReasonList            []string
	terminationReasonListFlag        bool
	terminationReasonNote            string
	terminationReasonNoteFlag        bool
	applicationPreferredCityList     []*CodeNameObject
	applicationPreferredCityListFlag bool
}

func NewApplicationBuilder() *ApplicationBuilder {
	builder := &ApplicationBuilder{}
	return builder
}

func (builder *ApplicationBuilder) Id(id string) *ApplicationBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *ApplicationBuilder) JobId(jobId string) *ApplicationBuilder {
	builder.jobId = jobId
	builder.jobIdFlag = true
	return builder
}
func (builder *ApplicationBuilder) TalentId(talentId string) *ApplicationBuilder {
	builder.talentId = talentId
	builder.talentIdFlag = true
	return builder
}
func (builder *ApplicationBuilder) ResumeResourceId(resumeResourceId string) *ApplicationBuilder {
	builder.resumeResourceId = resumeResourceId
	builder.resumeResourceIdFlag = true
	return builder
}
func (builder *ApplicationBuilder) Stage(stage *ApplicationStageInfo) *ApplicationBuilder {
	builder.stage = stage
	builder.stageFlag = true
	return builder
}
func (builder *ApplicationBuilder) ActiveStatus(activeStatus int) *ApplicationBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}
func (builder *ApplicationBuilder) DeliveryType(deliveryType int) *ApplicationBuilder {
	builder.deliveryType = deliveryType
	builder.deliveryTypeFlag = true
	return builder
}
func (builder *ApplicationBuilder) ResumeSourceInfo(resumeSourceInfo *ApplicationResumeSource) *ApplicationBuilder {
	builder.resumeSourceInfo = resumeSourceInfo
	builder.resumeSourceInfoFlag = true
	return builder
}
func (builder *ApplicationBuilder) WebsiteResumeSource(websiteResumeSource *ApplicationWebsiteResumeSource) *ApplicationBuilder {
	builder.websiteResumeSource = websiteResumeSource
	builder.websiteResumeSourceFlag = true
	return builder
}
func (builder *ApplicationBuilder) TalentAttachmentResumeId(talentAttachmentResumeId string) *ApplicationBuilder {
	builder.talentAttachmentResumeId = talentAttachmentResumeId
	builder.talentAttachmentResumeIdFlag = true
	return builder
}
func (builder *ApplicationBuilder) CreateTime(createTime string) *ApplicationBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}
func (builder *ApplicationBuilder) ModifyTime(modifyTime string) *ApplicationBuilder {
	builder.modifyTime = modifyTime
	builder.modifyTimeFlag = true
	return builder
}
func (builder *ApplicationBuilder) StageTimeList(stageTimeList []*ApplicationStageTime) *ApplicationBuilder {
	builder.stageTimeList = stageTimeList
	builder.stageTimeListFlag = true
	return builder
}
func (builder *ApplicationBuilder) TerminationType(terminationType int) *ApplicationBuilder {
	builder.terminationType = terminationType
	builder.terminationTypeFlag = true
	return builder
}
func (builder *ApplicationBuilder) TerminationReasonList(terminationReasonList []string) *ApplicationBuilder {
	builder.terminationReasonList = terminationReasonList
	builder.terminationReasonListFlag = true
	return builder
}
func (builder *ApplicationBuilder) TerminationReasonNote(terminationReasonNote string) *ApplicationBuilder {
	builder.terminationReasonNote = terminationReasonNote
	builder.terminationReasonNoteFlag = true
	return builder
}
func (builder *ApplicationBuilder) ApplicationPreferredCityList(applicationPreferredCityList []*CodeNameObject) *ApplicationBuilder {
	builder.applicationPreferredCityList = applicationPreferredCityList
	builder.applicationPreferredCityListFlag = true
	return builder
}

func (builder *ApplicationBuilder) Build() *Application {
	req := &Application{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.jobIdFlag {
		req.JobId = &builder.jobId

	}
	if builder.talentIdFlag {
		req.TalentId = &builder.talentId

	}
	if builder.resumeResourceIdFlag {
		req.ResumeResourceId = &builder.resumeResourceId

	}
	if builder.stageFlag {
		req.Stage = builder.stage
	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	if builder.deliveryTypeFlag {
		req.DeliveryType = &builder.deliveryType

	}
	if builder.resumeSourceInfoFlag {
		req.ResumeSourceInfo = builder.resumeSourceInfo
	}
	if builder.websiteResumeSourceFlag {
		req.WebsiteResumeSource = builder.websiteResumeSource
	}
	if builder.talentAttachmentResumeIdFlag {
		req.TalentAttachmentResumeId = &builder.talentAttachmentResumeId

	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.modifyTimeFlag {
		req.ModifyTime = &builder.modifyTime

	}
	if builder.stageTimeListFlag {
		req.StageTimeList = builder.stageTimeList
	}
	if builder.terminationTypeFlag {
		req.TerminationType = &builder.terminationType

	}
	if builder.terminationReasonListFlag {
		req.TerminationReasonList = builder.terminationReasonList
	}
	if builder.terminationReasonNoteFlag {
		req.TerminationReasonNote = &builder.terminationReasonNote

	}
	if builder.applicationPreferredCityListFlag {
		req.ApplicationPreferredCityList = builder.applicationPreferredCityList
	}
	return req
}

// builder结束

type ApplicationBasicInfo struct {
	Stage         *ApplicationStage    `json:"stage,omitempty"`
	Referral      *ApplicationReferral `json:"referral,omitempty"`
	ActiveStatus  *int                 `json:"active_status,omitempty"`
	BizCreateTime *int                 `json:"biz_create_time,omitempty"`
	BizModifyTime *int                 `json:"biz_modify_time,omitempty"`
}

// builder开始
type ApplicationBasicInfoBuilder struct {
	stage             *ApplicationStage
	stageFlag         bool
	referral          *ApplicationReferral
	referralFlag      bool
	activeStatus      int
	activeStatusFlag  bool
	bizCreateTime     int
	bizCreateTimeFlag bool
	bizModifyTime     int
	bizModifyTimeFlag bool
}

func NewApplicationBasicInfoBuilder() *ApplicationBasicInfoBuilder {
	builder := &ApplicationBasicInfoBuilder{}
	return builder
}

func (builder *ApplicationBasicInfoBuilder) Stage(stage *ApplicationStage) *ApplicationBasicInfoBuilder {
	builder.stage = stage
	builder.stageFlag = true
	return builder
}
func (builder *ApplicationBasicInfoBuilder) Referral(referral *ApplicationReferral) *ApplicationBasicInfoBuilder {
	builder.referral = referral
	builder.referralFlag = true
	return builder
}
func (builder *ApplicationBasicInfoBuilder) ActiveStatus(activeStatus int) *ApplicationBasicInfoBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}
func (builder *ApplicationBasicInfoBuilder) BizCreateTime(bizCreateTime int) *ApplicationBasicInfoBuilder {
	builder.bizCreateTime = bizCreateTime
	builder.bizCreateTimeFlag = true
	return builder
}
func (builder *ApplicationBasicInfoBuilder) BizModifyTime(bizModifyTime int) *ApplicationBasicInfoBuilder {
	builder.bizModifyTime = bizModifyTime
	builder.bizModifyTimeFlag = true
	return builder
}

func (builder *ApplicationBasicInfoBuilder) Build() *ApplicationBasicInfo {
	req := &ApplicationBasicInfo{}
	if builder.stageFlag {
		req.Stage = builder.stage
	}
	if builder.referralFlag {
		req.Referral = builder.referral
	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	if builder.bizCreateTimeFlag {
		req.BizCreateTime = &builder.bizCreateTime

	}
	if builder.bizModifyTimeFlag {
		req.BizModifyTime = &builder.bizModifyTime

	}
	return req
}

// builder结束

type ApplicationJob struct {
	Id              *string                `json:"id,omitempty"`
	Title           *string                `json:"title,omitempty"`
	City            *City                  `json:"city,omitempty"`
	Department      *Department            `json:"department,omitempty"`
	RecruitmentType *RecruitmentType       `json:"recruitment_type,omitempty"`
	Description     *string                `json:"description,omitempty"`
	JobProcessId    *string                `json:"job_process_id,omitempty"`
	Code            *string                `json:"code,omitempty"`
	Address         *ApplicationJobAddress `json:"address,omitempty"`
	Country         *Country               `json:"country,omitempty"`
}

// builder开始
type ApplicationJobBuilder struct {
	id                  string
	idFlag              bool
	title               string
	titleFlag           bool
	city                *City
	cityFlag            bool
	department          *Department
	departmentFlag      bool
	recruitmentType     *RecruitmentType
	recruitmentTypeFlag bool
	description         string
	descriptionFlag     bool
	jobProcessId        string
	jobProcessIdFlag    bool
	code                string
	codeFlag            bool
	address             *ApplicationJobAddress
	addressFlag         bool
	country             *Country
	countryFlag         bool
}

func NewApplicationJobBuilder() *ApplicationJobBuilder {
	builder := &ApplicationJobBuilder{}
	return builder
}

func (builder *ApplicationJobBuilder) Id(id string) *ApplicationJobBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *ApplicationJobBuilder) Title(title string) *ApplicationJobBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}
func (builder *ApplicationJobBuilder) City(city *City) *ApplicationJobBuilder {
	builder.city = city
	builder.cityFlag = true
	return builder
}
func (builder *ApplicationJobBuilder) Department(department *Department) *ApplicationJobBuilder {
	builder.department = department
	builder.departmentFlag = true
	return builder
}
func (builder *ApplicationJobBuilder) RecruitmentType(recruitmentType *RecruitmentType) *ApplicationJobBuilder {
	builder.recruitmentType = recruitmentType
	builder.recruitmentTypeFlag = true
	return builder
}
func (builder *ApplicationJobBuilder) Description(description string) *ApplicationJobBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}
func (builder *ApplicationJobBuilder) JobProcessId(jobProcessId string) *ApplicationJobBuilder {
	builder.jobProcessId = jobProcessId
	builder.jobProcessIdFlag = true
	return builder
}
func (builder *ApplicationJobBuilder) Code(code string) *ApplicationJobBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}
func (builder *ApplicationJobBuilder) Address(address *ApplicationJobAddress) *ApplicationJobBuilder {
	builder.address = address
	builder.addressFlag = true
	return builder
}
func (builder *ApplicationJobBuilder) Country(country *Country) *ApplicationJobBuilder {
	builder.country = country
	builder.countryFlag = true
	return builder
}

func (builder *ApplicationJobBuilder) Build() *ApplicationJob {
	req := &ApplicationJob{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.cityFlag {
		req.City = builder.city
	}
	if builder.departmentFlag {
		req.Department = builder.department
	}
	if builder.recruitmentTypeFlag {
		req.RecruitmentType = builder.recruitmentType
	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	if builder.jobProcessIdFlag {
		req.JobProcessId = &builder.jobProcessId

	}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.addressFlag {
		req.Address = builder.address
	}
	if builder.countryFlag {
		req.Country = builder.country
	}
	return req
}

// builder结束

type ApplicationJobAddress struct {
	Id     *string `json:"id,omitempty"`
	Name   *string `json:"name,omitempty"`
	EnName *string `json:"en_name,omitempty"`
}

// builder开始
type ApplicationJobAddressBuilder struct {
	id         string
	idFlag     bool
	name       string
	nameFlag   bool
	enName     string
	enNameFlag bool
}

func NewApplicationJobAddressBuilder() *ApplicationJobAddressBuilder {
	builder := &ApplicationJobAddressBuilder{}
	return builder
}

func (builder *ApplicationJobAddressBuilder) Id(id string) *ApplicationJobAddressBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *ApplicationJobAddressBuilder) Name(name string) *ApplicationJobAddressBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *ApplicationJobAddressBuilder) EnName(enName string) *ApplicationJobAddressBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

func (builder *ApplicationJobAddressBuilder) Build() *ApplicationJobAddress {
	req := &ApplicationJobAddress{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	return req
}

// builder结束

type ApplicationOffer struct {
	Id            *string                     `json:"id,omitempty"`
	ApplicationId *string                     `json:"application_id,omitempty"`
	BasicInfo     *ApplicationOfferBasicInfo  `json:"basic_info,omitempty"`
	SalaryPlan    *ApplicationOfferSalaryPlan `json:"salary_plan,omitempty"`
	SchemaId      *string                     `json:"schema_id,omitempty"`
	OfferStatus   *int                        `json:"offer_status,omitempty"`
	JobInfo       *OfferJobInfo               `json:"job_info,omitempty"`
}

// builder开始
type ApplicationOfferBuilder struct {
	id                string
	idFlag            bool
	applicationId     string
	applicationIdFlag bool
	basicInfo         *ApplicationOfferBasicInfo
	basicInfoFlag     bool
	salaryPlan        *ApplicationOfferSalaryPlan
	salaryPlanFlag    bool
	schemaId          string
	schemaIdFlag      bool
	offerStatus       int
	offerStatusFlag   bool
	jobInfo           *OfferJobInfo
	jobInfoFlag       bool
}

func NewApplicationOfferBuilder() *ApplicationOfferBuilder {
	builder := &ApplicationOfferBuilder{}
	return builder
}

func (builder *ApplicationOfferBuilder) Id(id string) *ApplicationOfferBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *ApplicationOfferBuilder) ApplicationId(applicationId string) *ApplicationOfferBuilder {
	builder.applicationId = applicationId
	builder.applicationIdFlag = true
	return builder
}
func (builder *ApplicationOfferBuilder) BasicInfo(basicInfo *ApplicationOfferBasicInfo) *ApplicationOfferBuilder {
	builder.basicInfo = basicInfo
	builder.basicInfoFlag = true
	return builder
}
func (builder *ApplicationOfferBuilder) SalaryPlan(salaryPlan *ApplicationOfferSalaryPlan) *ApplicationOfferBuilder {
	builder.salaryPlan = salaryPlan
	builder.salaryPlanFlag = true
	return builder
}
func (builder *ApplicationOfferBuilder) SchemaId(schemaId string) *ApplicationOfferBuilder {
	builder.schemaId = schemaId
	builder.schemaIdFlag = true
	return builder
}
func (builder *ApplicationOfferBuilder) OfferStatus(offerStatus int) *ApplicationOfferBuilder {
	builder.offerStatus = offerStatus
	builder.offerStatusFlag = true
	return builder
}
func (builder *ApplicationOfferBuilder) JobInfo(jobInfo *OfferJobInfo) *ApplicationOfferBuilder {
	builder.jobInfo = jobInfo
	builder.jobInfoFlag = true
	return builder
}

func (builder *ApplicationOfferBuilder) Build() *ApplicationOffer {
	req := &ApplicationOffer{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.applicationIdFlag {
		req.ApplicationId = &builder.applicationId

	}
	if builder.basicInfoFlag {
		req.BasicInfo = builder.basicInfo
	}
	if builder.salaryPlanFlag {
		req.SalaryPlan = builder.salaryPlan
	}
	if builder.schemaIdFlag {
		req.SchemaId = &builder.schemaId

	}
	if builder.offerStatusFlag {
		req.OfferStatus = &builder.offerStatus

	}
	if builder.jobInfoFlag {
		req.JobInfo = builder.jobInfo
	}
	return req
}

// builder结束

type ApplicationOfferAttachment struct {
	AttachmentId *string `json:"attachment_id,omitempty"`
	Name         *string `json:"name,omitempty"`
}

// builder开始
type ApplicationOfferAttachmentBuilder struct {
	attachmentId     string
	attachmentIdFlag bool
	name             string
	nameFlag         bool
}

func NewApplicationOfferAttachmentBuilder() *ApplicationOfferAttachmentBuilder {
	builder := &ApplicationOfferAttachmentBuilder{}
	return builder
}

func (builder *ApplicationOfferAttachmentBuilder) AttachmentId(attachmentId string) *ApplicationOfferAttachmentBuilder {
	builder.attachmentId = attachmentId
	builder.attachmentIdFlag = true
	return builder
}
func (builder *ApplicationOfferAttachmentBuilder) Name(name string) *ApplicationOfferAttachmentBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *ApplicationOfferAttachmentBuilder) Build() *ApplicationOfferAttachment {
	req := &ApplicationOfferAttachment{}
	if builder.attachmentIdFlag {
		req.AttachmentId = &builder.attachmentId

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	return req
}

// builder结束

type ApplicationOfferBasicInfo struct {
	OfferType         *int                           `json:"offer_type,omitempty"`
	Remark            *string                        `json:"remark,omitempty"`
	ExpireTime        *int                           `json:"expire_time,omitempty"`
	OwnerUserId       *string                        `json:"owner_user_id,omitempty"`
	CreatorUserId     *string                        `json:"creator_user_id,omitempty"`
	EmployeeType      *BaseBilingualWithId           `json:"employee_type,omitempty"`
	CreateTime        *string                        `json:"create_time,omitempty"`
	LeaderUserId      *string                        `json:"leader_user_id,omitempty"`
	OnboardDate       *string                        `json:"onboard_date,omitempty"`
	DepartmentId      *string                        `json:"department_id,omitempty"`
	ProbationMonth    *int                           `json:"probation_month,omitempty"`
	ContractYear      *int                           `json:"contract_year,omitempty"`
	RecruitmentType   *BaseBilingualWithId           `json:"recruitment_type,omitempty"`
	Sequence          *BaseBilingualWithId           `json:"sequence,omitempty"`
	Level             *BaseBilingualWithId           `json:"level,omitempty"`
	OnboardAddress    *BaseAddress                   `json:"onboard_address,omitempty"`
	WorkAddress       *BaseAddress                   `json:"work_address,omitempty"`
	CustomizeInfoList []*ApplicationOfferCustomValue `json:"customize_info_list,omitempty"`
}

// builder开始
type ApplicationOfferBasicInfoBuilder struct {
	offerType             int
	offerTypeFlag         bool
	remark                string
	remarkFlag            bool
	expireTime            int
	expireTimeFlag        bool
	ownerUserId           string
	ownerUserIdFlag       bool
	creatorUserId         string
	creatorUserIdFlag     bool
	employeeType          *BaseBilingualWithId
	employeeTypeFlag      bool
	createTime            string
	createTimeFlag        bool
	leaderUserId          string
	leaderUserIdFlag      bool
	onboardDate           string
	onboardDateFlag       bool
	departmentId          string
	departmentIdFlag      bool
	probationMonth        int
	probationMonthFlag    bool
	contractYear          int
	contractYearFlag      bool
	recruitmentType       *BaseBilingualWithId
	recruitmentTypeFlag   bool
	sequence              *BaseBilingualWithId
	sequenceFlag          bool
	level                 *BaseBilingualWithId
	levelFlag             bool
	onboardAddress        *BaseAddress
	onboardAddressFlag    bool
	workAddress           *BaseAddress
	workAddressFlag       bool
	customizeInfoList     []*ApplicationOfferCustomValue
	customizeInfoListFlag bool
}

func NewApplicationOfferBasicInfoBuilder() *ApplicationOfferBasicInfoBuilder {
	builder := &ApplicationOfferBasicInfoBuilder{}
	return builder
}

func (builder *ApplicationOfferBasicInfoBuilder) OfferType(offerType int) *ApplicationOfferBasicInfoBuilder {
	builder.offerType = offerType
	builder.offerTypeFlag = true
	return builder
}
func (builder *ApplicationOfferBasicInfoBuilder) Remark(remark string) *ApplicationOfferBasicInfoBuilder {
	builder.remark = remark
	builder.remarkFlag = true
	return builder
}
func (builder *ApplicationOfferBasicInfoBuilder) ExpireTime(expireTime int) *ApplicationOfferBasicInfoBuilder {
	builder.expireTime = expireTime
	builder.expireTimeFlag = true
	return builder
}
func (builder *ApplicationOfferBasicInfoBuilder) OwnerUserId(ownerUserId string) *ApplicationOfferBasicInfoBuilder {
	builder.ownerUserId = ownerUserId
	builder.ownerUserIdFlag = true
	return builder
}
func (builder *ApplicationOfferBasicInfoBuilder) CreatorUserId(creatorUserId string) *ApplicationOfferBasicInfoBuilder {
	builder.creatorUserId = creatorUserId
	builder.creatorUserIdFlag = true
	return builder
}
func (builder *ApplicationOfferBasicInfoBuilder) EmployeeType(employeeType *BaseBilingualWithId) *ApplicationOfferBasicInfoBuilder {
	builder.employeeType = employeeType
	builder.employeeTypeFlag = true
	return builder
}
func (builder *ApplicationOfferBasicInfoBuilder) CreateTime(createTime string) *ApplicationOfferBasicInfoBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}
func (builder *ApplicationOfferBasicInfoBuilder) LeaderUserId(leaderUserId string) *ApplicationOfferBasicInfoBuilder {
	builder.leaderUserId = leaderUserId
	builder.leaderUserIdFlag = true
	return builder
}
func (builder *ApplicationOfferBasicInfoBuilder) OnboardDate(onboardDate string) *ApplicationOfferBasicInfoBuilder {
	builder.onboardDate = onboardDate
	builder.onboardDateFlag = true
	return builder
}
func (builder *ApplicationOfferBasicInfoBuilder) DepartmentId(departmentId string) *ApplicationOfferBasicInfoBuilder {
	builder.departmentId = departmentId
	builder.departmentIdFlag = true
	return builder
}
func (builder *ApplicationOfferBasicInfoBuilder) ProbationMonth(probationMonth int) *ApplicationOfferBasicInfoBuilder {
	builder.probationMonth = probationMonth
	builder.probationMonthFlag = true
	return builder
}
func (builder *ApplicationOfferBasicInfoBuilder) ContractYear(contractYear int) *ApplicationOfferBasicInfoBuilder {
	builder.contractYear = contractYear
	builder.contractYearFlag = true
	return builder
}
func (builder *ApplicationOfferBasicInfoBuilder) RecruitmentType(recruitmentType *BaseBilingualWithId) *ApplicationOfferBasicInfoBuilder {
	builder.recruitmentType = recruitmentType
	builder.recruitmentTypeFlag = true
	return builder
}
func (builder *ApplicationOfferBasicInfoBuilder) Sequence(sequence *BaseBilingualWithId) *ApplicationOfferBasicInfoBuilder {
	builder.sequence = sequence
	builder.sequenceFlag = true
	return builder
}
func (builder *ApplicationOfferBasicInfoBuilder) Level(level *BaseBilingualWithId) *ApplicationOfferBasicInfoBuilder {
	builder.level = level
	builder.levelFlag = true
	return builder
}
func (builder *ApplicationOfferBasicInfoBuilder) OnboardAddress(onboardAddress *BaseAddress) *ApplicationOfferBasicInfoBuilder {
	builder.onboardAddress = onboardAddress
	builder.onboardAddressFlag = true
	return builder
}
func (builder *ApplicationOfferBasicInfoBuilder) WorkAddress(workAddress *BaseAddress) *ApplicationOfferBasicInfoBuilder {
	builder.workAddress = workAddress
	builder.workAddressFlag = true
	return builder
}
func (builder *ApplicationOfferBasicInfoBuilder) CustomizeInfoList(customizeInfoList []*ApplicationOfferCustomValue) *ApplicationOfferBasicInfoBuilder {
	builder.customizeInfoList = customizeInfoList
	builder.customizeInfoListFlag = true
	return builder
}

func (builder *ApplicationOfferBasicInfoBuilder) Build() *ApplicationOfferBasicInfo {
	req := &ApplicationOfferBasicInfo{}
	if builder.offerTypeFlag {
		req.OfferType = &builder.offerType

	}
	if builder.remarkFlag {
		req.Remark = &builder.remark

	}
	if builder.expireTimeFlag {
		req.ExpireTime = &builder.expireTime

	}
	if builder.ownerUserIdFlag {
		req.OwnerUserId = &builder.ownerUserId

	}
	if builder.creatorUserIdFlag {
		req.CreatorUserId = &builder.creatorUserId

	}
	if builder.employeeTypeFlag {
		req.EmployeeType = builder.employeeType
	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.leaderUserIdFlag {
		req.LeaderUserId = &builder.leaderUserId

	}
	if builder.onboardDateFlag {
		req.OnboardDate = &builder.onboardDate

	}
	if builder.departmentIdFlag {
		req.DepartmentId = &builder.departmentId

	}
	if builder.probationMonthFlag {
		req.ProbationMonth = &builder.probationMonth

	}
	if builder.contractYearFlag {
		req.ContractYear = &builder.contractYear

	}
	if builder.recruitmentTypeFlag {
		req.RecruitmentType = builder.recruitmentType
	}
	if builder.sequenceFlag {
		req.Sequence = builder.sequence
	}
	if builder.levelFlag {
		req.Level = builder.level
	}
	if builder.onboardAddressFlag {
		req.OnboardAddress = builder.onboardAddress
	}
	if builder.workAddressFlag {
		req.WorkAddress = builder.workAddress
	}
	if builder.customizeInfoListFlag {
		req.CustomizeInfoList = builder.customizeInfoList
	}
	return req
}

// builder结束

type ApplicationOfferBasicInfoCustomizedObject struct {
	Id              *string                                                 `json:"id,omitempty"`
	Name            *OfferSchemaName                                        `json:"name,omitempty"`
	Type            *string                                                 `json:"type,omitempty"`
	Value           *string                                                 `json:"value,omitempty"`
	OptionValueList []*ApplicationOfferBasicInfoCustomizedObjectOptionValue `json:"option_value_list,omitempty"`
}

// builder开始
type ApplicationOfferBasicInfoCustomizedObjectBuilder struct {
	id                  string
	idFlag              bool
	name                *OfferSchemaName
	nameFlag            bool
	type_               string
	typeFlag            bool
	value               string
	valueFlag           bool
	optionValueList     []*ApplicationOfferBasicInfoCustomizedObjectOptionValue
	optionValueListFlag bool
}

func NewApplicationOfferBasicInfoCustomizedObjectBuilder() *ApplicationOfferBasicInfoCustomizedObjectBuilder {
	builder := &ApplicationOfferBasicInfoCustomizedObjectBuilder{}
	return builder
}

func (builder *ApplicationOfferBasicInfoCustomizedObjectBuilder) Id(id string) *ApplicationOfferBasicInfoCustomizedObjectBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *ApplicationOfferBasicInfoCustomizedObjectBuilder) Name(name *OfferSchemaName) *ApplicationOfferBasicInfoCustomizedObjectBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *ApplicationOfferBasicInfoCustomizedObjectBuilder) Type(type_ string) *ApplicationOfferBasicInfoCustomizedObjectBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}
func (builder *ApplicationOfferBasicInfoCustomizedObjectBuilder) Value(value string) *ApplicationOfferBasicInfoCustomizedObjectBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}
func (builder *ApplicationOfferBasicInfoCustomizedObjectBuilder) OptionValueList(optionValueList []*ApplicationOfferBasicInfoCustomizedObjectOptionValue) *ApplicationOfferBasicInfoCustomizedObjectBuilder {
	builder.optionValueList = optionValueList
	builder.optionValueListFlag = true
	return builder
}

func (builder *ApplicationOfferBasicInfoCustomizedObjectBuilder) Build() *ApplicationOfferBasicInfoCustomizedObject {
	req := &ApplicationOfferBasicInfoCustomizedObject{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	if builder.valueFlag {
		req.Value = &builder.value

	}
	if builder.optionValueListFlag {
		req.OptionValueList = builder.optionValueList
	}
	return req
}

// builder结束

type ApplicationOfferBasicInfoCustomizedObjectOptionValue struct {
	ZhCn *string `json:"zh_cn,omitempty"`
	EnUs *string `json:"en_us,omitempty"`
}

// builder开始
type ApplicationOfferBasicInfoCustomizedObjectOptionValueBuilder struct {
	zhCn     string
	zhCnFlag bool
	enUs     string
	enUsFlag bool
}

func NewApplicationOfferBasicInfoCustomizedObjectOptionValueBuilder() *ApplicationOfferBasicInfoCustomizedObjectOptionValueBuilder {
	builder := &ApplicationOfferBasicInfoCustomizedObjectOptionValueBuilder{}
	return builder
}

func (builder *ApplicationOfferBasicInfoCustomizedObjectOptionValueBuilder) ZhCn(zhCn string) *ApplicationOfferBasicInfoCustomizedObjectOptionValueBuilder {
	builder.zhCn = zhCn
	builder.zhCnFlag = true
	return builder
}
func (builder *ApplicationOfferBasicInfoCustomizedObjectOptionValueBuilder) EnUs(enUs string) *ApplicationOfferBasicInfoCustomizedObjectOptionValueBuilder {
	builder.enUs = enUs
	builder.enUsFlag = true
	return builder
}

func (builder *ApplicationOfferBasicInfoCustomizedObjectOptionValueBuilder) Build() *ApplicationOfferBasicInfoCustomizedObjectOptionValue {
	req := &ApplicationOfferBasicInfoCustomizedObjectOptionValue{}
	if builder.zhCnFlag {
		req.ZhCn = &builder.zhCn

	}
	if builder.enUsFlag {
		req.EnUs = &builder.enUs

	}
	return req
}

// builder结束

type ApplicationOfferBasicInfoUser struct {
	Id         *string     `json:"id,omitempty"`
	Name       *string     `json:"name,omitempty"`
	EnName     *string     `json:"en_name,omitempty"`
	Avatar     *string     `json:"avatar,omitempty"`
	Department *Department `json:"department,omitempty"`
	Timezone   *string     `json:"timezone,omitempty"`
	Phone      *string     `json:"phone,omitempty"`
	Email      *string     `json:"email,omitempty"`
	InAppScope *bool       `json:"in_app_scope,omitempty"`
}

// builder开始
type ApplicationOfferBasicInfoUserBuilder struct {
	id             string
	idFlag         bool
	name           string
	nameFlag       bool
	enName         string
	enNameFlag     bool
	avatar         string
	avatarFlag     bool
	department     *Department
	departmentFlag bool
	timezone       string
	timezoneFlag   bool
	phone          string
	phoneFlag      bool
	email          string
	emailFlag      bool
	inAppScope     bool
	inAppScopeFlag bool
}

func NewApplicationOfferBasicInfoUserBuilder() *ApplicationOfferBasicInfoUserBuilder {
	builder := &ApplicationOfferBasicInfoUserBuilder{}
	return builder
}

func (builder *ApplicationOfferBasicInfoUserBuilder) Id(id string) *ApplicationOfferBasicInfoUserBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *ApplicationOfferBasicInfoUserBuilder) Name(name string) *ApplicationOfferBasicInfoUserBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *ApplicationOfferBasicInfoUserBuilder) EnName(enName string) *ApplicationOfferBasicInfoUserBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}
func (builder *ApplicationOfferBasicInfoUserBuilder) Avatar(avatar string) *ApplicationOfferBasicInfoUserBuilder {
	builder.avatar = avatar
	builder.avatarFlag = true
	return builder
}
func (builder *ApplicationOfferBasicInfoUserBuilder) Department(department *Department) *ApplicationOfferBasicInfoUserBuilder {
	builder.department = department
	builder.departmentFlag = true
	return builder
}
func (builder *ApplicationOfferBasicInfoUserBuilder) Timezone(timezone string) *ApplicationOfferBasicInfoUserBuilder {
	builder.timezone = timezone
	builder.timezoneFlag = true
	return builder
}
func (builder *ApplicationOfferBasicInfoUserBuilder) Phone(phone string) *ApplicationOfferBasicInfoUserBuilder {
	builder.phone = phone
	builder.phoneFlag = true
	return builder
}
func (builder *ApplicationOfferBasicInfoUserBuilder) Email(email string) *ApplicationOfferBasicInfoUserBuilder {
	builder.email = email
	builder.emailFlag = true
	return builder
}
func (builder *ApplicationOfferBasicInfoUserBuilder) InAppScope(inAppScope bool) *ApplicationOfferBasicInfoUserBuilder {
	builder.inAppScope = inAppScope
	builder.inAppScopeFlag = true
	return builder
}

func (builder *ApplicationOfferBasicInfoUserBuilder) Build() *ApplicationOfferBasicInfoUser {
	req := &ApplicationOfferBasicInfoUser{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.avatarFlag {
		req.Avatar = &builder.avatar

	}
	if builder.departmentFlag {
		req.Department = builder.department
	}
	if builder.timezoneFlag {
		req.Timezone = &builder.timezone

	}
	if builder.phoneFlag {
		req.Phone = &builder.phone

	}
	if builder.emailFlag {
		req.Email = &builder.email

	}
	if builder.inAppScopeFlag {
		req.InAppScope = &builder.inAppScope

	}
	return req
}

// builder结束

type ApplicationOfferCustomValue struct {
	ObjectId       *string `json:"object_id,omitempty"`
	CustomizeValue *string `json:"customize_value,omitempty"`
}

// builder开始
type ApplicationOfferCustomValueBuilder struct {
	objectId           string
	objectIdFlag       bool
	customizeValue     string
	customizeValueFlag bool
}

func NewApplicationOfferCustomValueBuilder() *ApplicationOfferCustomValueBuilder {
	builder := &ApplicationOfferCustomValueBuilder{}
	return builder
}

func (builder *ApplicationOfferCustomValueBuilder) ObjectId(objectId string) *ApplicationOfferCustomValueBuilder {
	builder.objectId = objectId
	builder.objectIdFlag = true
	return builder
}
func (builder *ApplicationOfferCustomValueBuilder) CustomizeValue(customizeValue string) *ApplicationOfferCustomValueBuilder {
	builder.customizeValue = customizeValue
	builder.customizeValueFlag = true
	return builder
}

func (builder *ApplicationOfferCustomValueBuilder) Build() *ApplicationOfferCustomValue {
	req := &ApplicationOfferCustomValue{}
	if builder.objectIdFlag {
		req.ObjectId = &builder.objectId

	}
	if builder.customizeValueFlag {
		req.CustomizeValue = &builder.customizeValue

	}
	return req
}

// builder结束

type ApplicationOfferOnboardProfile struct {
	OfferId                    *string                                `json:"offer_id,omitempty"`
	Department                 *Department                            `json:"department,omitempty"`
	RecruitmentType            *RecruitmentType                       `json:"recruitment_type,omitempty"`
	Sequence                   *Sequence                              `json:"sequence,omitempty"`
	Level                      *Level                                 `json:"level,omitempty"`
	OnboardAddress             *ApplicationOfferOnboardProfileAddress `json:"onboard_address,omitempty"`
	WorkAddress                *ApplicationOfferOnboardProfileAddress `json:"work_address,omitempty"`
	Leader                     *ApplicationOfferBasicInfoUser         `json:"leader,omitempty"`
	IsWorkAddressSameToOnboard *bool                                  `json:"is_work_address_same_to_onboard,omitempty"`
	ProbationMonth             *int                                   `json:"probation_month,omitempty"`
	ContractYear               *int                                   `json:"contract_year,omitempty"`
}

// builder开始
type ApplicationOfferOnboardProfileBuilder struct {
	offerId                        string
	offerIdFlag                    bool
	department                     *Department
	departmentFlag                 bool
	recruitmentType                *RecruitmentType
	recruitmentTypeFlag            bool
	sequence                       *Sequence
	sequenceFlag                   bool
	level                          *Level
	levelFlag                      bool
	onboardAddress                 *ApplicationOfferOnboardProfileAddress
	onboardAddressFlag             bool
	workAddress                    *ApplicationOfferOnboardProfileAddress
	workAddressFlag                bool
	leader                         *ApplicationOfferBasicInfoUser
	leaderFlag                     bool
	isWorkAddressSameToOnboard     bool
	isWorkAddressSameToOnboardFlag bool
	probationMonth                 int
	probationMonthFlag             bool
	contractYear                   int
	contractYearFlag               bool
}

func NewApplicationOfferOnboardProfileBuilder() *ApplicationOfferOnboardProfileBuilder {
	builder := &ApplicationOfferOnboardProfileBuilder{}
	return builder
}

func (builder *ApplicationOfferOnboardProfileBuilder) OfferId(offerId string) *ApplicationOfferOnboardProfileBuilder {
	builder.offerId = offerId
	builder.offerIdFlag = true
	return builder
}
func (builder *ApplicationOfferOnboardProfileBuilder) Department(department *Department) *ApplicationOfferOnboardProfileBuilder {
	builder.department = department
	builder.departmentFlag = true
	return builder
}
func (builder *ApplicationOfferOnboardProfileBuilder) RecruitmentType(recruitmentType *RecruitmentType) *ApplicationOfferOnboardProfileBuilder {
	builder.recruitmentType = recruitmentType
	builder.recruitmentTypeFlag = true
	return builder
}
func (builder *ApplicationOfferOnboardProfileBuilder) Sequence(sequence *Sequence) *ApplicationOfferOnboardProfileBuilder {
	builder.sequence = sequence
	builder.sequenceFlag = true
	return builder
}
func (builder *ApplicationOfferOnboardProfileBuilder) Level(level *Level) *ApplicationOfferOnboardProfileBuilder {
	builder.level = level
	builder.levelFlag = true
	return builder
}
func (builder *ApplicationOfferOnboardProfileBuilder) OnboardAddress(onboardAddress *ApplicationOfferOnboardProfileAddress) *ApplicationOfferOnboardProfileBuilder {
	builder.onboardAddress = onboardAddress
	builder.onboardAddressFlag = true
	return builder
}
func (builder *ApplicationOfferOnboardProfileBuilder) WorkAddress(workAddress *ApplicationOfferOnboardProfileAddress) *ApplicationOfferOnboardProfileBuilder {
	builder.workAddress = workAddress
	builder.workAddressFlag = true
	return builder
}
func (builder *ApplicationOfferOnboardProfileBuilder) Leader(leader *ApplicationOfferBasicInfoUser) *ApplicationOfferOnboardProfileBuilder {
	builder.leader = leader
	builder.leaderFlag = true
	return builder
}
func (builder *ApplicationOfferOnboardProfileBuilder) IsWorkAddressSameToOnboard(isWorkAddressSameToOnboard bool) *ApplicationOfferOnboardProfileBuilder {
	builder.isWorkAddressSameToOnboard = isWorkAddressSameToOnboard
	builder.isWorkAddressSameToOnboardFlag = true
	return builder
}
func (builder *ApplicationOfferOnboardProfileBuilder) ProbationMonth(probationMonth int) *ApplicationOfferOnboardProfileBuilder {
	builder.probationMonth = probationMonth
	builder.probationMonthFlag = true
	return builder
}
func (builder *ApplicationOfferOnboardProfileBuilder) ContractYear(contractYear int) *ApplicationOfferOnboardProfileBuilder {
	builder.contractYear = contractYear
	builder.contractYearFlag = true
	return builder
}

func (builder *ApplicationOfferOnboardProfileBuilder) Build() *ApplicationOfferOnboardProfile {
	req := &ApplicationOfferOnboardProfile{}
	if builder.offerIdFlag {
		req.OfferId = &builder.offerId

	}
	if builder.departmentFlag {
		req.Department = builder.department
	}
	if builder.recruitmentTypeFlag {
		req.RecruitmentType = builder.recruitmentType
	}
	if builder.sequenceFlag {
		req.Sequence = builder.sequence
	}
	if builder.levelFlag {
		req.Level = builder.level
	}
	if builder.onboardAddressFlag {
		req.OnboardAddress = builder.onboardAddress
	}
	if builder.workAddressFlag {
		req.WorkAddress = builder.workAddress
	}
	if builder.leaderFlag {
		req.Leader = builder.leader
	}
	if builder.isWorkAddressSameToOnboardFlag {
		req.IsWorkAddressSameToOnboard = &builder.isWorkAddressSameToOnboard

	}
	if builder.probationMonthFlag {
		req.ProbationMonth = &builder.probationMonth

	}
	if builder.contractYearFlag {
		req.ContractYear = &builder.contractYear

	}
	return req
}

// builder结束

type ApplicationOfferOnboardProfileAddress struct {
	Id           *string                             `json:"id,omitempty"`
	Name         *string                             `json:"name,omitempty"`
	EnName       *string                             `json:"en_name,omitempty"`
	District     *ApplicationOfferOnboardProfileCity `json:"district,omitempty"`
	City         *ApplicationOfferOnboardProfileCity `json:"city,omitempty"`
	State        *ApplicationOfferOnboardProfileCity `json:"state,omitempty"`
	Country      *ApplicationOfferOnboardProfileCity `json:"country,omitempty"`
	UsageIdList  []string                            `json:"usage_id_list,omitempty"`
	ActiveStatus *int                                `json:"active_status,omitempty"`
}

// builder开始
type ApplicationOfferOnboardProfileAddressBuilder struct {
	id               string
	idFlag           bool
	name             string
	nameFlag         bool
	enName           string
	enNameFlag       bool
	district         *ApplicationOfferOnboardProfileCity
	districtFlag     bool
	city             *ApplicationOfferOnboardProfileCity
	cityFlag         bool
	state            *ApplicationOfferOnboardProfileCity
	stateFlag        bool
	country          *ApplicationOfferOnboardProfileCity
	countryFlag      bool
	usageIdList      []string
	usageIdListFlag  bool
	activeStatus     int
	activeStatusFlag bool
}

func NewApplicationOfferOnboardProfileAddressBuilder() *ApplicationOfferOnboardProfileAddressBuilder {
	builder := &ApplicationOfferOnboardProfileAddressBuilder{}
	return builder
}

func (builder *ApplicationOfferOnboardProfileAddressBuilder) Id(id string) *ApplicationOfferOnboardProfileAddressBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *ApplicationOfferOnboardProfileAddressBuilder) Name(name string) *ApplicationOfferOnboardProfileAddressBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *ApplicationOfferOnboardProfileAddressBuilder) EnName(enName string) *ApplicationOfferOnboardProfileAddressBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}
func (builder *ApplicationOfferOnboardProfileAddressBuilder) District(district *ApplicationOfferOnboardProfileCity) *ApplicationOfferOnboardProfileAddressBuilder {
	builder.district = district
	builder.districtFlag = true
	return builder
}
func (builder *ApplicationOfferOnboardProfileAddressBuilder) City(city *ApplicationOfferOnboardProfileCity) *ApplicationOfferOnboardProfileAddressBuilder {
	builder.city = city
	builder.cityFlag = true
	return builder
}
func (builder *ApplicationOfferOnboardProfileAddressBuilder) State(state *ApplicationOfferOnboardProfileCity) *ApplicationOfferOnboardProfileAddressBuilder {
	builder.state = state
	builder.stateFlag = true
	return builder
}
func (builder *ApplicationOfferOnboardProfileAddressBuilder) Country(country *ApplicationOfferOnboardProfileCity) *ApplicationOfferOnboardProfileAddressBuilder {
	builder.country = country
	builder.countryFlag = true
	return builder
}
func (builder *ApplicationOfferOnboardProfileAddressBuilder) UsageIdList(usageIdList []string) *ApplicationOfferOnboardProfileAddressBuilder {
	builder.usageIdList = usageIdList
	builder.usageIdListFlag = true
	return builder
}
func (builder *ApplicationOfferOnboardProfileAddressBuilder) ActiveStatus(activeStatus int) *ApplicationOfferOnboardProfileAddressBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}

func (builder *ApplicationOfferOnboardProfileAddressBuilder) Build() *ApplicationOfferOnboardProfileAddress {
	req := &ApplicationOfferOnboardProfileAddress{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.districtFlag {
		req.District = builder.district
	}
	if builder.cityFlag {
		req.City = builder.city
	}
	if builder.stateFlag {
		req.State = builder.state
	}
	if builder.countryFlag {
		req.Country = builder.country
	}
	if builder.usageIdListFlag {
		req.UsageIdList = builder.usageIdList
	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	return req
}

// builder结束

type ApplicationOfferOnboardProfileCity struct {
	Code         *string `json:"code,omitempty"`
	Name         *string `json:"name,omitempty"`
	EnName       *string `json:"en_name,omitempty"`
	LocationType *int    `json:"location_type,omitempty"`
}

// builder开始
type ApplicationOfferOnboardProfileCityBuilder struct {
	code             string
	codeFlag         bool
	name             string
	nameFlag         bool
	enName           string
	enNameFlag       bool
	locationType     int
	locationTypeFlag bool
}

func NewApplicationOfferOnboardProfileCityBuilder() *ApplicationOfferOnboardProfileCityBuilder {
	builder := &ApplicationOfferOnboardProfileCityBuilder{}
	return builder
}

func (builder *ApplicationOfferOnboardProfileCityBuilder) Code(code string) *ApplicationOfferOnboardProfileCityBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}
func (builder *ApplicationOfferOnboardProfileCityBuilder) Name(name string) *ApplicationOfferOnboardProfileCityBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *ApplicationOfferOnboardProfileCityBuilder) EnName(enName string) *ApplicationOfferOnboardProfileCityBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}
func (builder *ApplicationOfferOnboardProfileCityBuilder) LocationType(locationType int) *ApplicationOfferOnboardProfileCityBuilder {
	builder.locationType = locationType
	builder.locationTypeFlag = true
	return builder
}

func (builder *ApplicationOfferOnboardProfileCityBuilder) Build() *ApplicationOfferOnboardProfileCity {
	req := &ApplicationOfferOnboardProfileCity{}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.locationTypeFlag {
		req.LocationType = &builder.locationType

	}
	return req
}

// builder结束

type ApplicationOfferSalaryPlan struct {
	Currency                  *string                        `json:"currency,omitempty"`
	BasicSalary               *string                        `json:"basic_salary,omitempty"`
	ProbationSalaryPercentage *string                        `json:"probation_salary_percentage,omitempty"`
	AwardSalaryMultiple       *string                        `json:"award_salary_multiple,omitempty"`
	OptionShares              *string                        `json:"option_shares,omitempty"`
	QuarterlyBonus            *string                        `json:"quarterly_bonus,omitempty"`
	HalfYearBonus             *string                        `json:"half_year_bonus,omitempty"`
	TotalAnnualCash           *string                        `json:"total_annual_cash,omitempty"`
	CustomizeInfoList         []*ApplicationOfferCustomValue `json:"customize_info_list,omitempty"`
}

// builder开始
type ApplicationOfferSalaryPlanBuilder struct {
	currency                      string
	currencyFlag                  bool
	basicSalary                   string
	basicSalaryFlag               bool
	probationSalaryPercentage     string
	probationSalaryPercentageFlag bool
	awardSalaryMultiple           string
	awardSalaryMultipleFlag       bool
	optionShares                  string
	optionSharesFlag              bool
	quarterlyBonus                string
	quarterlyBonusFlag            bool
	halfYearBonus                 string
	halfYearBonusFlag             bool
	totalAnnualCash               string
	totalAnnualCashFlag           bool
	customizeInfoList             []*ApplicationOfferCustomValue
	customizeInfoListFlag         bool
}

func NewApplicationOfferSalaryPlanBuilder() *ApplicationOfferSalaryPlanBuilder {
	builder := &ApplicationOfferSalaryPlanBuilder{}
	return builder
}

func (builder *ApplicationOfferSalaryPlanBuilder) Currency(currency string) *ApplicationOfferSalaryPlanBuilder {
	builder.currency = currency
	builder.currencyFlag = true
	return builder
}
func (builder *ApplicationOfferSalaryPlanBuilder) BasicSalary(basicSalary string) *ApplicationOfferSalaryPlanBuilder {
	builder.basicSalary = basicSalary
	builder.basicSalaryFlag = true
	return builder
}
func (builder *ApplicationOfferSalaryPlanBuilder) ProbationSalaryPercentage(probationSalaryPercentage string) *ApplicationOfferSalaryPlanBuilder {
	builder.probationSalaryPercentage = probationSalaryPercentage
	builder.probationSalaryPercentageFlag = true
	return builder
}
func (builder *ApplicationOfferSalaryPlanBuilder) AwardSalaryMultiple(awardSalaryMultiple string) *ApplicationOfferSalaryPlanBuilder {
	builder.awardSalaryMultiple = awardSalaryMultiple
	builder.awardSalaryMultipleFlag = true
	return builder
}
func (builder *ApplicationOfferSalaryPlanBuilder) OptionShares(optionShares string) *ApplicationOfferSalaryPlanBuilder {
	builder.optionShares = optionShares
	builder.optionSharesFlag = true
	return builder
}
func (builder *ApplicationOfferSalaryPlanBuilder) QuarterlyBonus(quarterlyBonus string) *ApplicationOfferSalaryPlanBuilder {
	builder.quarterlyBonus = quarterlyBonus
	builder.quarterlyBonusFlag = true
	return builder
}
func (builder *ApplicationOfferSalaryPlanBuilder) HalfYearBonus(halfYearBonus string) *ApplicationOfferSalaryPlanBuilder {
	builder.halfYearBonus = halfYearBonus
	builder.halfYearBonusFlag = true
	return builder
}
func (builder *ApplicationOfferSalaryPlanBuilder) TotalAnnualCash(totalAnnualCash string) *ApplicationOfferSalaryPlanBuilder {
	builder.totalAnnualCash = totalAnnualCash
	builder.totalAnnualCashFlag = true
	return builder
}
func (builder *ApplicationOfferSalaryPlanBuilder) CustomizeInfoList(customizeInfoList []*ApplicationOfferCustomValue) *ApplicationOfferSalaryPlanBuilder {
	builder.customizeInfoList = customizeInfoList
	builder.customizeInfoListFlag = true
	return builder
}

func (builder *ApplicationOfferSalaryPlanBuilder) Build() *ApplicationOfferSalaryPlan {
	req := &ApplicationOfferSalaryPlan{}
	if builder.currencyFlag {
		req.Currency = &builder.currency

	}
	if builder.basicSalaryFlag {
		req.BasicSalary = &builder.basicSalary

	}
	if builder.probationSalaryPercentageFlag {
		req.ProbationSalaryPercentage = &builder.probationSalaryPercentage

	}
	if builder.awardSalaryMultipleFlag {
		req.AwardSalaryMultiple = &builder.awardSalaryMultiple

	}
	if builder.optionSharesFlag {
		req.OptionShares = &builder.optionShares

	}
	if builder.quarterlyBonusFlag {
		req.QuarterlyBonus = &builder.quarterlyBonus

	}
	if builder.halfYearBonusFlag {
		req.HalfYearBonus = &builder.halfYearBonus

	}
	if builder.totalAnnualCashFlag {
		req.TotalAnnualCash = &builder.totalAnnualCash

	}
	if builder.customizeInfoListFlag {
		req.CustomizeInfoList = builder.customizeInfoList
	}
	return req
}

// builder结束

type ApplicationOfferSalaryPlanSalaryTemplate struct {
	TemplateKey   *string `json:"template_key,omitempty"`
	TotalAmount   *string `json:"total_amount,omitempty"`
	Currency      *string `json:"currency,omitempty"`
	SalaryContent *string `json:"salary_content,omitempty"`
}

// builder开始
type ApplicationOfferSalaryPlanSalaryTemplateBuilder struct {
	templateKey       string
	templateKeyFlag   bool
	totalAmount       string
	totalAmountFlag   bool
	currency          string
	currencyFlag      bool
	salaryContent     string
	salaryContentFlag bool
}

func NewApplicationOfferSalaryPlanSalaryTemplateBuilder() *ApplicationOfferSalaryPlanSalaryTemplateBuilder {
	builder := &ApplicationOfferSalaryPlanSalaryTemplateBuilder{}
	return builder
}

func (builder *ApplicationOfferSalaryPlanSalaryTemplateBuilder) TemplateKey(templateKey string) *ApplicationOfferSalaryPlanSalaryTemplateBuilder {
	builder.templateKey = templateKey
	builder.templateKeyFlag = true
	return builder
}
func (builder *ApplicationOfferSalaryPlanSalaryTemplateBuilder) TotalAmount(totalAmount string) *ApplicationOfferSalaryPlanSalaryTemplateBuilder {
	builder.totalAmount = totalAmount
	builder.totalAmountFlag = true
	return builder
}
func (builder *ApplicationOfferSalaryPlanSalaryTemplateBuilder) Currency(currency string) *ApplicationOfferSalaryPlanSalaryTemplateBuilder {
	builder.currency = currency
	builder.currencyFlag = true
	return builder
}
func (builder *ApplicationOfferSalaryPlanSalaryTemplateBuilder) SalaryContent(salaryContent string) *ApplicationOfferSalaryPlanSalaryTemplateBuilder {
	builder.salaryContent = salaryContent
	builder.salaryContentFlag = true
	return builder
}

func (builder *ApplicationOfferSalaryPlanSalaryTemplateBuilder) Build() *ApplicationOfferSalaryPlanSalaryTemplate {
	req := &ApplicationOfferSalaryPlanSalaryTemplate{}
	if builder.templateKeyFlag {
		req.TemplateKey = &builder.templateKey

	}
	if builder.totalAmountFlag {
		req.TotalAmount = &builder.totalAmount

	}
	if builder.currencyFlag {
		req.Currency = &builder.currency

	}
	if builder.salaryContentFlag {
		req.SalaryContent = &builder.salaryContent

	}
	return req
}

// builder结束

type ApplicationPrehire struct {
	Id        *string                  `json:"id,omitempty"`
	BasicInfo *ApplicationBasicInfo    `json:"basic_info,omitempty"`
	Talent    *ApplicationTalent       `json:"talent,omitempty"`
	Job       *ApplicationJob          `json:"job,omitempty"`
	Offer     *ApplicationPrehireOffer `json:"offer,omitempty"`
}

// builder开始
type ApplicationPrehireBuilder struct {
	id            string
	idFlag        bool
	basicInfo     *ApplicationBasicInfo
	basicInfoFlag bool
	talent        *ApplicationTalent
	talentFlag    bool
	job           *ApplicationJob
	jobFlag       bool
	offer         *ApplicationPrehireOffer
	offerFlag     bool
}

func NewApplicationPrehireBuilder() *ApplicationPrehireBuilder {
	builder := &ApplicationPrehireBuilder{}
	return builder
}

func (builder *ApplicationPrehireBuilder) Id(id string) *ApplicationPrehireBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *ApplicationPrehireBuilder) BasicInfo(basicInfo *ApplicationBasicInfo) *ApplicationPrehireBuilder {
	builder.basicInfo = basicInfo
	builder.basicInfoFlag = true
	return builder
}
func (builder *ApplicationPrehireBuilder) Talent(talent *ApplicationTalent) *ApplicationPrehireBuilder {
	builder.talent = talent
	builder.talentFlag = true
	return builder
}
func (builder *ApplicationPrehireBuilder) Job(job *ApplicationJob) *ApplicationPrehireBuilder {
	builder.job = job
	builder.jobFlag = true
	return builder
}
func (builder *ApplicationPrehireBuilder) Offer(offer *ApplicationPrehireOffer) *ApplicationPrehireBuilder {
	builder.offer = offer
	builder.offerFlag = true
	return builder
}

func (builder *ApplicationPrehireBuilder) Build() *ApplicationPrehire {
	req := &ApplicationPrehire{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.basicInfoFlag {
		req.BasicInfo = builder.basicInfo
	}
	if builder.talentFlag {
		req.Talent = builder.talent
	}
	if builder.jobFlag {
		req.Job = builder.job
	}
	if builder.offerFlag {
		req.Offer = builder.offer
	}
	return req
}

// builder结束

type ApplicationPrehireDepartment struct {
	Id     *string `json:"id,omitempty"`
	Name   *string `json:"name,omitempty"`
	EnName *string `json:"en_name,omitempty"`
}

// builder开始
type ApplicationPrehireDepartmentBuilder struct {
	id         string
	idFlag     bool
	name       string
	nameFlag   bool
	enName     string
	enNameFlag bool
}

func NewApplicationPrehireDepartmentBuilder() *ApplicationPrehireDepartmentBuilder {
	builder := &ApplicationPrehireDepartmentBuilder{}
	return builder
}

func (builder *ApplicationPrehireDepartmentBuilder) Id(id string) *ApplicationPrehireDepartmentBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *ApplicationPrehireDepartmentBuilder) Name(name string) *ApplicationPrehireDepartmentBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *ApplicationPrehireDepartmentBuilder) EnName(enName string) *ApplicationPrehireDepartmentBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

func (builder *ApplicationPrehireDepartmentBuilder) Build() *ApplicationPrehireDepartment {
	req := &ApplicationPrehireDepartment{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	return req
}

// builder结束

type ApplicationPrehireOffer struct {
	BasicInfo           *ApplicationPrehireOfferBasic `json:"basic_info,omitempty"`
	OfferOnboardProfile *AppliOfferOnboardProfile     `json:"offer_onboard_profile,omitempty"`
	AttachmentList      []*ApplicationOfferAttachment `json:"attachment_list,omitempty"`
}

// builder开始
type ApplicationPrehireOfferBuilder struct {
	basicInfo               *ApplicationPrehireOfferBasic
	basicInfoFlag           bool
	offerOnboardProfile     *AppliOfferOnboardProfile
	offerOnboardProfileFlag bool
	attachmentList          []*ApplicationOfferAttachment
	attachmentListFlag      bool
}

func NewApplicationPrehireOfferBuilder() *ApplicationPrehireOfferBuilder {
	builder := &ApplicationPrehireOfferBuilder{}
	return builder
}

func (builder *ApplicationPrehireOfferBuilder) BasicInfo(basicInfo *ApplicationPrehireOfferBasic) *ApplicationPrehireOfferBuilder {
	builder.basicInfo = basicInfo
	builder.basicInfoFlag = true
	return builder
}
func (builder *ApplicationPrehireOfferBuilder) OfferOnboardProfile(offerOnboardProfile *AppliOfferOnboardProfile) *ApplicationPrehireOfferBuilder {
	builder.offerOnboardProfile = offerOnboardProfile
	builder.offerOnboardProfileFlag = true
	return builder
}
func (builder *ApplicationPrehireOfferBuilder) AttachmentList(attachmentList []*ApplicationOfferAttachment) *ApplicationPrehireOfferBuilder {
	builder.attachmentList = attachmentList
	builder.attachmentListFlag = true
	return builder
}

func (builder *ApplicationPrehireOfferBuilder) Build() *ApplicationPrehireOffer {
	req := &ApplicationPrehireOffer{}
	if builder.basicInfoFlag {
		req.BasicInfo = builder.basicInfo
	}
	if builder.offerOnboardProfileFlag {
		req.OfferOnboardProfile = builder.offerOnboardProfile
	}
	if builder.attachmentListFlag {
		req.AttachmentList = builder.attachmentList
	}
	return req
}

// builder结束

type ApplicationPrehireOfferBasic struct {
	OfferId       *string                  `json:"offer_id,omitempty"`
	ApplicationId *string                  `json:"application_id,omitempty"`
	TalentId      *string                  `json:"talent_id,omitempty"`
	JobId         *string                  `json:"job_id,omitempty"`
	Remark        *string                  `json:"remark,omitempty"`
	ExpireTime    *int                     `json:"expire_time,omitempty"`
	OnboardTime   *int                     `json:"onboard_time,omitempty"`
	TimeZone      *string                  `json:"time_zone,omitempty"`
	OfferType     *int                     `json:"offer_type,omitempty"`
	OfferStatus   *int                     `json:"offer_status,omitempty"`
	Owner         *AppliOfferBasicInfoUser `json:"owner,omitempty"`
	OfferJobTitle *string                  `json:"offer_job_title,omitempty"`
}

// builder开始
type ApplicationPrehireOfferBasicBuilder struct {
	offerId           string
	offerIdFlag       bool
	applicationId     string
	applicationIdFlag bool
	talentId          string
	talentIdFlag      bool
	jobId             string
	jobIdFlag         bool
	remark            string
	remarkFlag        bool
	expireTime        int
	expireTimeFlag    bool
	onboardTime       int
	onboardTimeFlag   bool
	timeZone          string
	timeZoneFlag      bool
	offerType         int
	offerTypeFlag     bool
	offerStatus       int
	offerStatusFlag   bool
	owner             *AppliOfferBasicInfoUser
	ownerFlag         bool
	offerJobTitle     string
	offerJobTitleFlag bool
}

func NewApplicationPrehireOfferBasicBuilder() *ApplicationPrehireOfferBasicBuilder {
	builder := &ApplicationPrehireOfferBasicBuilder{}
	return builder
}

func (builder *ApplicationPrehireOfferBasicBuilder) OfferId(offerId string) *ApplicationPrehireOfferBasicBuilder {
	builder.offerId = offerId
	builder.offerIdFlag = true
	return builder
}
func (builder *ApplicationPrehireOfferBasicBuilder) ApplicationId(applicationId string) *ApplicationPrehireOfferBasicBuilder {
	builder.applicationId = applicationId
	builder.applicationIdFlag = true
	return builder
}
func (builder *ApplicationPrehireOfferBasicBuilder) TalentId(talentId string) *ApplicationPrehireOfferBasicBuilder {
	builder.talentId = talentId
	builder.talentIdFlag = true
	return builder
}
func (builder *ApplicationPrehireOfferBasicBuilder) JobId(jobId string) *ApplicationPrehireOfferBasicBuilder {
	builder.jobId = jobId
	builder.jobIdFlag = true
	return builder
}
func (builder *ApplicationPrehireOfferBasicBuilder) Remark(remark string) *ApplicationPrehireOfferBasicBuilder {
	builder.remark = remark
	builder.remarkFlag = true
	return builder
}
func (builder *ApplicationPrehireOfferBasicBuilder) ExpireTime(expireTime int) *ApplicationPrehireOfferBasicBuilder {
	builder.expireTime = expireTime
	builder.expireTimeFlag = true
	return builder
}
func (builder *ApplicationPrehireOfferBasicBuilder) OnboardTime(onboardTime int) *ApplicationPrehireOfferBasicBuilder {
	builder.onboardTime = onboardTime
	builder.onboardTimeFlag = true
	return builder
}
func (builder *ApplicationPrehireOfferBasicBuilder) TimeZone(timeZone string) *ApplicationPrehireOfferBasicBuilder {
	builder.timeZone = timeZone
	builder.timeZoneFlag = true
	return builder
}
func (builder *ApplicationPrehireOfferBasicBuilder) OfferType(offerType int) *ApplicationPrehireOfferBasicBuilder {
	builder.offerType = offerType
	builder.offerTypeFlag = true
	return builder
}
func (builder *ApplicationPrehireOfferBasicBuilder) OfferStatus(offerStatus int) *ApplicationPrehireOfferBasicBuilder {
	builder.offerStatus = offerStatus
	builder.offerStatusFlag = true
	return builder
}
func (builder *ApplicationPrehireOfferBasicBuilder) Owner(owner *AppliOfferBasicInfoUser) *ApplicationPrehireOfferBasicBuilder {
	builder.owner = owner
	builder.ownerFlag = true
	return builder
}
func (builder *ApplicationPrehireOfferBasicBuilder) OfferJobTitle(offerJobTitle string) *ApplicationPrehireOfferBasicBuilder {
	builder.offerJobTitle = offerJobTitle
	builder.offerJobTitleFlag = true
	return builder
}

func (builder *ApplicationPrehireOfferBasicBuilder) Build() *ApplicationPrehireOfferBasic {
	req := &ApplicationPrehireOfferBasic{}
	if builder.offerIdFlag {
		req.OfferId = &builder.offerId

	}
	if builder.applicationIdFlag {
		req.ApplicationId = &builder.applicationId

	}
	if builder.talentIdFlag {
		req.TalentId = &builder.talentId

	}
	if builder.jobIdFlag {
		req.JobId = &builder.jobId

	}
	if builder.remarkFlag {
		req.Remark = &builder.remark

	}
	if builder.expireTimeFlag {
		req.ExpireTime = &builder.expireTime

	}
	if builder.onboardTimeFlag {
		req.OnboardTime = &builder.onboardTime

	}
	if builder.timeZoneFlag {
		req.TimeZone = &builder.timeZone

	}
	if builder.offerTypeFlag {
		req.OfferType = &builder.offerType

	}
	if builder.offerStatusFlag {
		req.OfferStatus = &builder.offerStatus

	}
	if builder.ownerFlag {
		req.Owner = builder.owner
	}
	if builder.offerJobTitleFlag {
		req.OfferJobTitle = &builder.offerJobTitle

	}
	return req
}

// builder结束

type ApplicationPrehireOptional struct {
	WithTalentBasic  *bool `json:"with_talent_basic,omitempty"`
	WithTalentExtend *bool `json:"with_talent_extend,omitempty"`
	WithJob          *bool `json:"with_job,omitempty"`
	WithOffer        *bool `json:"with_offer,omitempty"`
}

// builder开始
type ApplicationPrehireOptionalBuilder struct {
	withTalentBasic      bool
	withTalentBasicFlag  bool
	withTalentExtend     bool
	withTalentExtendFlag bool
	withJob              bool
	withJobFlag          bool
	withOffer            bool
	withOfferFlag        bool
}

func NewApplicationPrehireOptionalBuilder() *ApplicationPrehireOptionalBuilder {
	builder := &ApplicationPrehireOptionalBuilder{}
	return builder
}

func (builder *ApplicationPrehireOptionalBuilder) WithTalentBasic(withTalentBasic bool) *ApplicationPrehireOptionalBuilder {
	builder.withTalentBasic = withTalentBasic
	builder.withTalentBasicFlag = true
	return builder
}
func (builder *ApplicationPrehireOptionalBuilder) WithTalentExtend(withTalentExtend bool) *ApplicationPrehireOptionalBuilder {
	builder.withTalentExtend = withTalentExtend
	builder.withTalentExtendFlag = true
	return builder
}
func (builder *ApplicationPrehireOptionalBuilder) WithJob(withJob bool) *ApplicationPrehireOptionalBuilder {
	builder.withJob = withJob
	builder.withJobFlag = true
	return builder
}
func (builder *ApplicationPrehireOptionalBuilder) WithOffer(withOffer bool) *ApplicationPrehireOptionalBuilder {
	builder.withOffer = withOffer
	builder.withOfferFlag = true
	return builder
}

func (builder *ApplicationPrehireOptionalBuilder) Build() *ApplicationPrehireOptional {
	req := &ApplicationPrehireOptional{}
	if builder.withTalentBasicFlag {
		req.WithTalentBasic = &builder.withTalentBasic

	}
	if builder.withTalentExtendFlag {
		req.WithTalentExtend = &builder.withTalentExtend

	}
	if builder.withJobFlag {
		req.WithJob = &builder.withJob

	}
	if builder.withOfferFlag {
		req.WithOffer = &builder.withOffer

	}
	return req
}

// builder结束

type ApplicationReferral struct {
	Id     *string `json:"id,omitempty"`
	Name   *string `json:"name,omitempty"`
	EnName *string `json:"en_name,omitempty"`
}

// builder开始
type ApplicationReferralBuilder struct {
	id         string
	idFlag     bool
	name       string
	nameFlag   bool
	enName     string
	enNameFlag bool
}

func NewApplicationReferralBuilder() *ApplicationReferralBuilder {
	builder := &ApplicationReferralBuilder{}
	return builder
}

func (builder *ApplicationReferralBuilder) Id(id string) *ApplicationReferralBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *ApplicationReferralBuilder) Name(name string) *ApplicationReferralBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *ApplicationReferralBuilder) EnName(enName string) *ApplicationReferralBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

func (builder *ApplicationReferralBuilder) Build() *ApplicationReferral {
	req := &ApplicationReferral{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	return req
}

// builder结束

type ApplicationResumeSource struct {
	Id               *string `json:"id,omitempty"`
	Name             *I18n   `json:"name,omitempty"`
	ResumeSourceType *int    `json:"resume_source_type,omitempty"`
}

// builder开始
type ApplicationResumeSourceBuilder struct {
	id                   string
	idFlag               bool
	name                 *I18n
	nameFlag             bool
	resumeSourceType     int
	resumeSourceTypeFlag bool
}

func NewApplicationResumeSourceBuilder() *ApplicationResumeSourceBuilder {
	builder := &ApplicationResumeSourceBuilder{}
	return builder
}

func (builder *ApplicationResumeSourceBuilder) Id(id string) *ApplicationResumeSourceBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *ApplicationResumeSourceBuilder) Name(name *I18n) *ApplicationResumeSourceBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *ApplicationResumeSourceBuilder) ResumeSourceType(resumeSourceType int) *ApplicationResumeSourceBuilder {
	builder.resumeSourceType = resumeSourceType
	builder.resumeSourceTypeFlag = true
	return builder
}

func (builder *ApplicationResumeSourceBuilder) Build() *ApplicationResumeSource {
	req := &ApplicationResumeSource{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.resumeSourceTypeFlag {
		req.ResumeSourceType = &builder.resumeSourceType

	}
	return req
}

// builder结束

type ApplicationStage struct {
	Id            *string `json:"id,omitempty"`
	Name          *string `json:"name,omitempty"`
	EnName        *string `json:"en_name,omitempty"`
	Type          *int    `json:"type,omitempty"`
	Args          *string `json:"args,omitempty"`
	CreatorId     *string `json:"creator_id,omitempty"`
	Seq           *int    `json:"seq,omitempty"`
	PublishName   *string `json:"publish_name,omitempty"`
	PublishEnName *string `json:"publish_en_name,omitempty"`
}

// builder开始
type ApplicationStageBuilder struct {
	id                string
	idFlag            bool
	name              string
	nameFlag          bool
	enName            string
	enNameFlag        bool
	type_             int
	typeFlag          bool
	args              string
	argsFlag          bool
	creatorId         string
	creatorIdFlag     bool
	seq               int
	seqFlag           bool
	publishName       string
	publishNameFlag   bool
	publishEnName     string
	publishEnNameFlag bool
}

func NewApplicationStageBuilder() *ApplicationStageBuilder {
	builder := &ApplicationStageBuilder{}
	return builder
}

func (builder *ApplicationStageBuilder) Id(id string) *ApplicationStageBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *ApplicationStageBuilder) Name(name string) *ApplicationStageBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *ApplicationStageBuilder) EnName(enName string) *ApplicationStageBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}
func (builder *ApplicationStageBuilder) Type(type_ int) *ApplicationStageBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}
func (builder *ApplicationStageBuilder) Args(args string) *ApplicationStageBuilder {
	builder.args = args
	builder.argsFlag = true
	return builder
}
func (builder *ApplicationStageBuilder) CreatorId(creatorId string) *ApplicationStageBuilder {
	builder.creatorId = creatorId
	builder.creatorIdFlag = true
	return builder
}
func (builder *ApplicationStageBuilder) Seq(seq int) *ApplicationStageBuilder {
	builder.seq = seq
	builder.seqFlag = true
	return builder
}
func (builder *ApplicationStageBuilder) PublishName(publishName string) *ApplicationStageBuilder {
	builder.publishName = publishName
	builder.publishNameFlag = true
	return builder
}
func (builder *ApplicationStageBuilder) PublishEnName(publishEnName string) *ApplicationStageBuilder {
	builder.publishEnName = publishEnName
	builder.publishEnNameFlag = true
	return builder
}

func (builder *ApplicationStageBuilder) Build() *ApplicationStage {
	req := &ApplicationStage{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	if builder.argsFlag {
		req.Args = &builder.args

	}
	if builder.creatorIdFlag {
		req.CreatorId = &builder.creatorId

	}
	if builder.seqFlag {
		req.Seq = &builder.seq

	}
	if builder.publishNameFlag {
		req.PublishName = &builder.publishName

	}
	if builder.publishEnNameFlag {
		req.PublishEnName = &builder.publishEnName

	}
	return req
}

// builder结束

type ApplicationStageInfo struct {
	Id     *string `json:"id,omitempty"`
	ZhName *string `json:"zh_name,omitempty"`
	EnName *string `json:"en_name,omitempty"`
	Type   *int    `json:"type,omitempty"`
}

// builder开始
type ApplicationStageInfoBuilder struct {
	id         string
	idFlag     bool
	zhName     string
	zhNameFlag bool
	enName     string
	enNameFlag bool
	type_      int
	typeFlag   bool
}

func NewApplicationStageInfoBuilder() *ApplicationStageInfoBuilder {
	builder := &ApplicationStageInfoBuilder{}
	return builder
}

func (builder *ApplicationStageInfoBuilder) Id(id string) *ApplicationStageInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *ApplicationStageInfoBuilder) ZhName(zhName string) *ApplicationStageInfoBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}
func (builder *ApplicationStageInfoBuilder) EnName(enName string) *ApplicationStageInfoBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}
func (builder *ApplicationStageInfoBuilder) Type(type_ int) *ApplicationStageInfoBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}

func (builder *ApplicationStageInfoBuilder) Build() *ApplicationStageInfo {
	req := &ApplicationStageInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	return req
}

// builder结束

type ApplicationStageTime struct {
	StageId   *string `json:"stage_id,omitempty"`
	EnterTime *string `json:"enter_time,omitempty"`
	ExitTime  *string `json:"exit_time,omitempty"`
}

// builder开始
type ApplicationStageTimeBuilder struct {
	stageId       string
	stageIdFlag   bool
	enterTime     string
	enterTimeFlag bool
	exitTime      string
	exitTimeFlag  bool
}

func NewApplicationStageTimeBuilder() *ApplicationStageTimeBuilder {
	builder := &ApplicationStageTimeBuilder{}
	return builder
}

func (builder *ApplicationStageTimeBuilder) StageId(stageId string) *ApplicationStageTimeBuilder {
	builder.stageId = stageId
	builder.stageIdFlag = true
	return builder
}
func (builder *ApplicationStageTimeBuilder) EnterTime(enterTime string) *ApplicationStageTimeBuilder {
	builder.enterTime = enterTime
	builder.enterTimeFlag = true
	return builder
}
func (builder *ApplicationStageTimeBuilder) ExitTime(exitTime string) *ApplicationStageTimeBuilder {
	builder.exitTime = exitTime
	builder.exitTimeFlag = true
	return builder
}

func (builder *ApplicationStageTimeBuilder) Build() *ApplicationStageTime {
	req := &ApplicationStageTime{}
	if builder.stageIdFlag {
		req.StageId = &builder.stageId

	}
	if builder.enterTimeFlag {
		req.EnterTime = &builder.enterTime

	}
	if builder.exitTimeFlag {
		req.ExitTime = &builder.exitTime

	}
	return req
}

// builder结束

type ApplicationTalent struct {
	Id                   *string                          `json:"id,omitempty"`
	BasicInfo            *ApplicationTalentBasicInfo      `json:"basic_info,omitempty"`
	SelfEvaluation       *string                          `json:"self_evaluation,omitempty"`
	EducationList        []*AppliTalentEducationInfo      `json:"education_list,omitempty"`
	CareerList           []*ApplicationTalentCareerInfo   `json:"career_list,omitempty"`
	ProjectList          []*ApplicationTalentProjectInfo  `json:"project_list,omitempty"`
	WorksList            []*ApplicationTalentWorksInfo    `json:"works_list,omitempty"`
	AwardList            []*ApplicationTalentAwardInfo    `json:"award_list,omitempty"`
	CompetitionList      []*AppliTalentCompetitionInfo    `json:"competition_list,omitempty"`
	CertificateList      []*AppliTalentCertificateInfo    `json:"certificate_list,omitempty"`
	LanguageList         []*ApplicationTalentLanguageInfo `json:"language_list,omitempty"`
	SnsList              []*ApplicationTalentSnsInfo      `json:"sns_list,omitempty"`
	AttachmentResumeList []*AppliTalentAttachResumeInfo   `json:"attachment_resume_list,omitempty"`
}

// builder开始
type ApplicationTalentBuilder struct {
	id                       string
	idFlag                   bool
	basicInfo                *ApplicationTalentBasicInfo
	basicInfoFlag            bool
	selfEvaluation           string
	selfEvaluationFlag       bool
	educationList            []*AppliTalentEducationInfo
	educationListFlag        bool
	careerList               []*ApplicationTalentCareerInfo
	careerListFlag           bool
	projectList              []*ApplicationTalentProjectInfo
	projectListFlag          bool
	worksList                []*ApplicationTalentWorksInfo
	worksListFlag            bool
	awardList                []*ApplicationTalentAwardInfo
	awardListFlag            bool
	competitionList          []*AppliTalentCompetitionInfo
	competitionListFlag      bool
	certificateList          []*AppliTalentCertificateInfo
	certificateListFlag      bool
	languageList             []*ApplicationTalentLanguageInfo
	languageListFlag         bool
	snsList                  []*ApplicationTalentSnsInfo
	snsListFlag              bool
	attachmentResumeList     []*AppliTalentAttachResumeInfo
	attachmentResumeListFlag bool
}

func NewApplicationTalentBuilder() *ApplicationTalentBuilder {
	builder := &ApplicationTalentBuilder{}
	return builder
}

func (builder *ApplicationTalentBuilder) Id(id string) *ApplicationTalentBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *ApplicationTalentBuilder) BasicInfo(basicInfo *ApplicationTalentBasicInfo) *ApplicationTalentBuilder {
	builder.basicInfo = basicInfo
	builder.basicInfoFlag = true
	return builder
}
func (builder *ApplicationTalentBuilder) SelfEvaluation(selfEvaluation string) *ApplicationTalentBuilder {
	builder.selfEvaluation = selfEvaluation
	builder.selfEvaluationFlag = true
	return builder
}
func (builder *ApplicationTalentBuilder) EducationList(educationList []*AppliTalentEducationInfo) *ApplicationTalentBuilder {
	builder.educationList = educationList
	builder.educationListFlag = true
	return builder
}
func (builder *ApplicationTalentBuilder) CareerList(careerList []*ApplicationTalentCareerInfo) *ApplicationTalentBuilder {
	builder.careerList = careerList
	builder.careerListFlag = true
	return builder
}
func (builder *ApplicationTalentBuilder) ProjectList(projectList []*ApplicationTalentProjectInfo) *ApplicationTalentBuilder {
	builder.projectList = projectList
	builder.projectListFlag = true
	return builder
}
func (builder *ApplicationTalentBuilder) WorksList(worksList []*ApplicationTalentWorksInfo) *ApplicationTalentBuilder {
	builder.worksList = worksList
	builder.worksListFlag = true
	return builder
}
func (builder *ApplicationTalentBuilder) AwardList(awardList []*ApplicationTalentAwardInfo) *ApplicationTalentBuilder {
	builder.awardList = awardList
	builder.awardListFlag = true
	return builder
}
func (builder *ApplicationTalentBuilder) CompetitionList(competitionList []*AppliTalentCompetitionInfo) *ApplicationTalentBuilder {
	builder.competitionList = competitionList
	builder.competitionListFlag = true
	return builder
}
func (builder *ApplicationTalentBuilder) CertificateList(certificateList []*AppliTalentCertificateInfo) *ApplicationTalentBuilder {
	builder.certificateList = certificateList
	builder.certificateListFlag = true
	return builder
}
func (builder *ApplicationTalentBuilder) LanguageList(languageList []*ApplicationTalentLanguageInfo) *ApplicationTalentBuilder {
	builder.languageList = languageList
	builder.languageListFlag = true
	return builder
}
func (builder *ApplicationTalentBuilder) SnsList(snsList []*ApplicationTalentSnsInfo) *ApplicationTalentBuilder {
	builder.snsList = snsList
	builder.snsListFlag = true
	return builder
}
func (builder *ApplicationTalentBuilder) AttachmentResumeList(attachmentResumeList []*AppliTalentAttachResumeInfo) *ApplicationTalentBuilder {
	builder.attachmentResumeList = attachmentResumeList
	builder.attachmentResumeListFlag = true
	return builder
}

func (builder *ApplicationTalentBuilder) Build() *ApplicationTalent {
	req := &ApplicationTalent{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.basicInfoFlag {
		req.BasicInfo = builder.basicInfo
	}
	if builder.selfEvaluationFlag {
		req.SelfEvaluation = &builder.selfEvaluation

	}
	if builder.educationListFlag {
		req.EducationList = builder.educationList
	}
	if builder.careerListFlag {
		req.CareerList = builder.careerList
	}
	if builder.projectListFlag {
		req.ProjectList = builder.projectList
	}
	if builder.worksListFlag {
		req.WorksList = builder.worksList
	}
	if builder.awardListFlag {
		req.AwardList = builder.awardList
	}
	if builder.competitionListFlag {
		req.CompetitionList = builder.competitionList
	}
	if builder.certificateListFlag {
		req.CertificateList = builder.certificateList
	}
	if builder.languageListFlag {
		req.LanguageList = builder.languageList
	}
	if builder.snsListFlag {
		req.SnsList = builder.snsList
	}
	if builder.attachmentResumeListFlag {
		req.AttachmentResumeList = builder.attachmentResumeList
	}
	return req
}

// builder结束

type ApplicationTalentAttachmentResumeInfo struct {
	Id   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// builder开始
type ApplicationTalentAttachmentResumeInfoBuilder struct {
	id       string
	idFlag   bool
	name     string
	nameFlag bool
}

func NewApplicationTalentAttachmentResumeInfoBuilder() *ApplicationTalentAttachmentResumeInfoBuilder {
	builder := &ApplicationTalentAttachmentResumeInfoBuilder{}
	return builder
}

func (builder *ApplicationTalentAttachmentResumeInfoBuilder) Id(id string) *ApplicationTalentAttachmentResumeInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *ApplicationTalentAttachmentResumeInfoBuilder) Name(name string) *ApplicationTalentAttachmentResumeInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *ApplicationTalentAttachmentResumeInfoBuilder) Build() *ApplicationTalentAttachmentResumeInfo {
	req := &ApplicationTalentAttachmentResumeInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	return req
}

// builder结束

type ApplicationTalentAwardInfo struct {
	Id        *string `json:"id,omitempty"`
	Title     *string `json:"title,omitempty"`
	AwardTime *int    `json:"award_time,omitempty"`
	Desc      *string `json:"desc,omitempty"`
}

// builder开始
type ApplicationTalentAwardInfoBuilder struct {
	id            string
	idFlag        bool
	title         string
	titleFlag     bool
	awardTime     int
	awardTimeFlag bool
	desc          string
	descFlag      bool
}

func NewApplicationTalentAwardInfoBuilder() *ApplicationTalentAwardInfoBuilder {
	builder := &ApplicationTalentAwardInfoBuilder{}
	return builder
}

func (builder *ApplicationTalentAwardInfoBuilder) Id(id string) *ApplicationTalentAwardInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *ApplicationTalentAwardInfoBuilder) Title(title string) *ApplicationTalentAwardInfoBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}
func (builder *ApplicationTalentAwardInfoBuilder) AwardTime(awardTime int) *ApplicationTalentAwardInfoBuilder {
	builder.awardTime = awardTime
	builder.awardTimeFlag = true
	return builder
}
func (builder *ApplicationTalentAwardInfoBuilder) Desc(desc string) *ApplicationTalentAwardInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}

func (builder *ApplicationTalentAwardInfoBuilder) Build() *ApplicationTalentAwardInfo {
	req := &ApplicationTalentAwardInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.awardTimeFlag {
		req.AwardTime = &builder.awardTime

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	return req
}

// builder结束

type ApplicationTalentBasicInfo struct {
	Name                 *string      `json:"name,omitempty"`
	Mobile               *string      `json:"mobile,omitempty"`
	MobileCountryCode    *string      `json:"mobile_country_code,omitempty"`
	Email                *string      `json:"email,omitempty"`
	ExperienceYears      *int         `json:"experience_years,omitempty"`
	Age                  *int         `json:"age,omitempty"`
	Nationality          *Nationality `json:"nationality,omitempty"`
	Gender               *int         `json:"gender,omitempty"`
	CurrentCity          *City        `json:"current_city,omitempty"`
	HometownCity         *City        `json:"hometown_city,omitempty"`
	PreferredCityList    []*City      `json:"preferred_city_list,omitempty"`
	MobileCode           *string      `json:"mobile_code,omitempty"`
	IdentificationType   *int         `json:"identification_type,omitempty"`
	IdentificationNumber *string      `json:"identification_number,omitempty"`
}

// builder开始
type ApplicationTalentBasicInfoBuilder struct {
	name                     string
	nameFlag                 bool
	mobile                   string
	mobileFlag               bool
	mobileCountryCode        string
	mobileCountryCodeFlag    bool
	email                    string
	emailFlag                bool
	experienceYears          int
	experienceYearsFlag      bool
	age                      int
	ageFlag                  bool
	nationality              *Nationality
	nationalityFlag          bool
	gender                   int
	genderFlag               bool
	currentCity              *City
	currentCityFlag          bool
	hometownCity             *City
	hometownCityFlag         bool
	preferredCityList        []*City
	preferredCityListFlag    bool
	mobileCode               string
	mobileCodeFlag           bool
	identificationType       int
	identificationTypeFlag   bool
	identificationNumber     string
	identificationNumberFlag bool
}

func NewApplicationTalentBasicInfoBuilder() *ApplicationTalentBasicInfoBuilder {
	builder := &ApplicationTalentBasicInfoBuilder{}
	return builder
}

func (builder *ApplicationTalentBasicInfoBuilder) Name(name string) *ApplicationTalentBasicInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *ApplicationTalentBasicInfoBuilder) Mobile(mobile string) *ApplicationTalentBasicInfoBuilder {
	builder.mobile = mobile
	builder.mobileFlag = true
	return builder
}
func (builder *ApplicationTalentBasicInfoBuilder) MobileCountryCode(mobileCountryCode string) *ApplicationTalentBasicInfoBuilder {
	builder.mobileCountryCode = mobileCountryCode
	builder.mobileCountryCodeFlag = true
	return builder
}
func (builder *ApplicationTalentBasicInfoBuilder) Email(email string) *ApplicationTalentBasicInfoBuilder {
	builder.email = email
	builder.emailFlag = true
	return builder
}
func (builder *ApplicationTalentBasicInfoBuilder) ExperienceYears(experienceYears int) *ApplicationTalentBasicInfoBuilder {
	builder.experienceYears = experienceYears
	builder.experienceYearsFlag = true
	return builder
}
func (builder *ApplicationTalentBasicInfoBuilder) Age(age int) *ApplicationTalentBasicInfoBuilder {
	builder.age = age
	builder.ageFlag = true
	return builder
}
func (builder *ApplicationTalentBasicInfoBuilder) Nationality(nationality *Nationality) *ApplicationTalentBasicInfoBuilder {
	builder.nationality = nationality
	builder.nationalityFlag = true
	return builder
}
func (builder *ApplicationTalentBasicInfoBuilder) Gender(gender int) *ApplicationTalentBasicInfoBuilder {
	builder.gender = gender
	builder.genderFlag = true
	return builder
}
func (builder *ApplicationTalentBasicInfoBuilder) CurrentCity(currentCity *City) *ApplicationTalentBasicInfoBuilder {
	builder.currentCity = currentCity
	builder.currentCityFlag = true
	return builder
}
func (builder *ApplicationTalentBasicInfoBuilder) HometownCity(hometownCity *City) *ApplicationTalentBasicInfoBuilder {
	builder.hometownCity = hometownCity
	builder.hometownCityFlag = true
	return builder
}
func (builder *ApplicationTalentBasicInfoBuilder) PreferredCityList(preferredCityList []*City) *ApplicationTalentBasicInfoBuilder {
	builder.preferredCityList = preferredCityList
	builder.preferredCityListFlag = true
	return builder
}
func (builder *ApplicationTalentBasicInfoBuilder) MobileCode(mobileCode string) *ApplicationTalentBasicInfoBuilder {
	builder.mobileCode = mobileCode
	builder.mobileCodeFlag = true
	return builder
}
func (builder *ApplicationTalentBasicInfoBuilder) IdentificationType(identificationType int) *ApplicationTalentBasicInfoBuilder {
	builder.identificationType = identificationType
	builder.identificationTypeFlag = true
	return builder
}
func (builder *ApplicationTalentBasicInfoBuilder) IdentificationNumber(identificationNumber string) *ApplicationTalentBasicInfoBuilder {
	builder.identificationNumber = identificationNumber
	builder.identificationNumberFlag = true
	return builder
}

func (builder *ApplicationTalentBasicInfoBuilder) Build() *ApplicationTalentBasicInfo {
	req := &ApplicationTalentBasicInfo{}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.mobileFlag {
		req.Mobile = &builder.mobile

	}
	if builder.mobileCountryCodeFlag {
		req.MobileCountryCode = &builder.mobileCountryCode

	}
	if builder.emailFlag {
		req.Email = &builder.email

	}
	if builder.experienceYearsFlag {
		req.ExperienceYears = &builder.experienceYears

	}
	if builder.ageFlag {
		req.Age = &builder.age

	}
	if builder.nationalityFlag {
		req.Nationality = builder.nationality
	}
	if builder.genderFlag {
		req.Gender = &builder.gender

	}
	if builder.currentCityFlag {
		req.CurrentCity = builder.currentCity
	}
	if builder.hometownCityFlag {
		req.HometownCity = builder.hometownCity
	}
	if builder.preferredCityListFlag {
		req.PreferredCityList = builder.preferredCityList
	}
	if builder.mobileCodeFlag {
		req.MobileCode = &builder.mobileCode

	}
	if builder.identificationTypeFlag {
		req.IdentificationType = &builder.identificationType

	}
	if builder.identificationNumberFlag {
		req.IdentificationNumber = &builder.identificationNumber

	}
	return req
}

// builder结束

type ApplicationTalentCareerInfo struct {
	Id        *string `json:"id,omitempty"`
	Company   *string `json:"company,omitempty"`
	Title     *string `json:"title,omitempty"`
	Desc      *string `json:"desc,omitempty"`
	StartTime *string `json:"start_time,omitempty"`
	EndTime   *string `json:"end_time,omitempty"`
	TagList   []int   `json:"tag_list,omitempty"`
}

// builder开始
type ApplicationTalentCareerInfoBuilder struct {
	id            string
	idFlag        bool
	company       string
	companyFlag   bool
	title         string
	titleFlag     bool
	desc          string
	descFlag      bool
	startTime     string
	startTimeFlag bool
	endTime       string
	endTimeFlag   bool
	tagList       []int
	tagListFlag   bool
}

func NewApplicationTalentCareerInfoBuilder() *ApplicationTalentCareerInfoBuilder {
	builder := &ApplicationTalentCareerInfoBuilder{}
	return builder
}

func (builder *ApplicationTalentCareerInfoBuilder) Id(id string) *ApplicationTalentCareerInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *ApplicationTalentCareerInfoBuilder) Company(company string) *ApplicationTalentCareerInfoBuilder {
	builder.company = company
	builder.companyFlag = true
	return builder
}
func (builder *ApplicationTalentCareerInfoBuilder) Title(title string) *ApplicationTalentCareerInfoBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}
func (builder *ApplicationTalentCareerInfoBuilder) Desc(desc string) *ApplicationTalentCareerInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}
func (builder *ApplicationTalentCareerInfoBuilder) StartTime(startTime string) *ApplicationTalentCareerInfoBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}
func (builder *ApplicationTalentCareerInfoBuilder) EndTime(endTime string) *ApplicationTalentCareerInfoBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}
func (builder *ApplicationTalentCareerInfoBuilder) TagList(tagList []int) *ApplicationTalentCareerInfoBuilder {
	builder.tagList = tagList
	builder.tagListFlag = true
	return builder
}

func (builder *ApplicationTalentCareerInfoBuilder) Build() *ApplicationTalentCareerInfo {
	req := &ApplicationTalentCareerInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.companyFlag {
		req.Company = &builder.company

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.tagListFlag {
		req.TagList = builder.tagList
	}
	return req
}

// builder结束

type ApplicationTalentCertificateInfo struct {
	Id   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Desc *string `json:"desc,omitempty"`
}

// builder开始
type ApplicationTalentCertificateInfoBuilder struct {
	id       string
	idFlag   bool
	name     string
	nameFlag bool
	desc     string
	descFlag bool
}

func NewApplicationTalentCertificateInfoBuilder() *ApplicationTalentCertificateInfoBuilder {
	builder := &ApplicationTalentCertificateInfoBuilder{}
	return builder
}

func (builder *ApplicationTalentCertificateInfoBuilder) Id(id string) *ApplicationTalentCertificateInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *ApplicationTalentCertificateInfoBuilder) Name(name string) *ApplicationTalentCertificateInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *ApplicationTalentCertificateInfoBuilder) Desc(desc string) *ApplicationTalentCertificateInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}

func (builder *ApplicationTalentCertificateInfoBuilder) Build() *ApplicationTalentCertificateInfo {
	req := &ApplicationTalentCertificateInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	return req
}

// builder结束

type ApplicationTalentCompetitionInfo struct {
	Id   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Desc *string `json:"desc,omitempty"`
}

// builder开始
type ApplicationTalentCompetitionInfoBuilder struct {
	id       string
	idFlag   bool
	name     string
	nameFlag bool
	desc     string
	descFlag bool
}

func NewApplicationTalentCompetitionInfoBuilder() *ApplicationTalentCompetitionInfoBuilder {
	builder := &ApplicationTalentCompetitionInfoBuilder{}
	return builder
}

func (builder *ApplicationTalentCompetitionInfoBuilder) Id(id string) *ApplicationTalentCompetitionInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *ApplicationTalentCompetitionInfoBuilder) Name(name string) *ApplicationTalentCompetitionInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *ApplicationTalentCompetitionInfoBuilder) Desc(desc string) *ApplicationTalentCompetitionInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}

func (builder *ApplicationTalentCompetitionInfoBuilder) Build() *ApplicationTalentCompetitionInfo {
	req := &ApplicationTalentCompetitionInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	return req
}

// builder结束

type ApplicationTalentEducationInfo struct {
	Id              *string `json:"id,omitempty"`
	Degree          *int    `json:"degree,omitempty"`
	School          *string `json:"school,omitempty"`
	FieldOfStudy    *string `json:"field_of_study,omitempty"`
	StartTime       *string `json:"start_time,omitempty"`
	EndTime         *string `json:"end_time,omitempty"`
	EducationType   *int    `json:"education_type,omitempty"`
	AcademicRanking *int    `json:"academic_ranking,omitempty"`
	TagList         []int   `json:"tag_list,omitempty"`
}

// builder开始
type ApplicationTalentEducationInfoBuilder struct {
	id                  string
	idFlag              bool
	degree              int
	degreeFlag          bool
	school              string
	schoolFlag          bool
	fieldOfStudy        string
	fieldOfStudyFlag    bool
	startTime           string
	startTimeFlag       bool
	endTime             string
	endTimeFlag         bool
	educationType       int
	educationTypeFlag   bool
	academicRanking     int
	academicRankingFlag bool
	tagList             []int
	tagListFlag         bool
}

func NewApplicationTalentEducationInfoBuilder() *ApplicationTalentEducationInfoBuilder {
	builder := &ApplicationTalentEducationInfoBuilder{}
	return builder
}

func (builder *ApplicationTalentEducationInfoBuilder) Id(id string) *ApplicationTalentEducationInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *ApplicationTalentEducationInfoBuilder) Degree(degree int) *ApplicationTalentEducationInfoBuilder {
	builder.degree = degree
	builder.degreeFlag = true
	return builder
}
func (builder *ApplicationTalentEducationInfoBuilder) School(school string) *ApplicationTalentEducationInfoBuilder {
	builder.school = school
	builder.schoolFlag = true
	return builder
}
func (builder *ApplicationTalentEducationInfoBuilder) FieldOfStudy(fieldOfStudy string) *ApplicationTalentEducationInfoBuilder {
	builder.fieldOfStudy = fieldOfStudy
	builder.fieldOfStudyFlag = true
	return builder
}
func (builder *ApplicationTalentEducationInfoBuilder) StartTime(startTime string) *ApplicationTalentEducationInfoBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}
func (builder *ApplicationTalentEducationInfoBuilder) EndTime(endTime string) *ApplicationTalentEducationInfoBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}
func (builder *ApplicationTalentEducationInfoBuilder) EducationType(educationType int) *ApplicationTalentEducationInfoBuilder {
	builder.educationType = educationType
	builder.educationTypeFlag = true
	return builder
}
func (builder *ApplicationTalentEducationInfoBuilder) AcademicRanking(academicRanking int) *ApplicationTalentEducationInfoBuilder {
	builder.academicRanking = academicRanking
	builder.academicRankingFlag = true
	return builder
}
func (builder *ApplicationTalentEducationInfoBuilder) TagList(tagList []int) *ApplicationTalentEducationInfoBuilder {
	builder.tagList = tagList
	builder.tagListFlag = true
	return builder
}

func (builder *ApplicationTalentEducationInfoBuilder) Build() *ApplicationTalentEducationInfo {
	req := &ApplicationTalentEducationInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.degreeFlag {
		req.Degree = &builder.degree

	}
	if builder.schoolFlag {
		req.School = &builder.school

	}
	if builder.fieldOfStudyFlag {
		req.FieldOfStudy = &builder.fieldOfStudy

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.educationTypeFlag {
		req.EducationType = &builder.educationType

	}
	if builder.academicRankingFlag {
		req.AcademicRanking = &builder.academicRanking

	}
	if builder.tagListFlag {
		req.TagList = builder.tagList
	}
	return req
}

// builder结束

type ApplicationTalentLanguageInfo struct {
	Id          *string `json:"id,omitempty"`
	Language    *int    `json:"language,omitempty"`
	Proficiency *int    `json:"proficiency,omitempty"`
}

// builder开始
type ApplicationTalentLanguageInfoBuilder struct {
	id              string
	idFlag          bool
	language        int
	languageFlag    bool
	proficiency     int
	proficiencyFlag bool
}

func NewApplicationTalentLanguageInfoBuilder() *ApplicationTalentLanguageInfoBuilder {
	builder := &ApplicationTalentLanguageInfoBuilder{}
	return builder
}

func (builder *ApplicationTalentLanguageInfoBuilder) Id(id string) *ApplicationTalentLanguageInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *ApplicationTalentLanguageInfoBuilder) Language(language int) *ApplicationTalentLanguageInfoBuilder {
	builder.language = language
	builder.languageFlag = true
	return builder
}
func (builder *ApplicationTalentLanguageInfoBuilder) Proficiency(proficiency int) *ApplicationTalentLanguageInfoBuilder {
	builder.proficiency = proficiency
	builder.proficiencyFlag = true
	return builder
}

func (builder *ApplicationTalentLanguageInfoBuilder) Build() *ApplicationTalentLanguageInfo {
	req := &ApplicationTalentLanguageInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.languageFlag {
		req.Language = &builder.language

	}
	if builder.proficiencyFlag {
		req.Proficiency = &builder.proficiency

	}
	return req
}

// builder结束

type ApplicationTalentProjectInfo struct {
	Id        *string `json:"id,omitempty"`
	Name      *string `json:"name,omitempty"`
	Role      *string `json:"role,omitempty"`
	Link      *string `json:"link,omitempty"`
	Desc      *string `json:"desc,omitempty"`
	StartTime *int    `json:"start_time,omitempty"`
	EndTime   *int    `json:"end_time,omitempty"`
}

// builder开始
type ApplicationTalentProjectInfoBuilder struct {
	id            string
	idFlag        bool
	name          string
	nameFlag      bool
	role          string
	roleFlag      bool
	link          string
	linkFlag      bool
	desc          string
	descFlag      bool
	startTime     int
	startTimeFlag bool
	endTime       int
	endTimeFlag   bool
}

func NewApplicationTalentProjectInfoBuilder() *ApplicationTalentProjectInfoBuilder {
	builder := &ApplicationTalentProjectInfoBuilder{}
	return builder
}

func (builder *ApplicationTalentProjectInfoBuilder) Id(id string) *ApplicationTalentProjectInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *ApplicationTalentProjectInfoBuilder) Name(name string) *ApplicationTalentProjectInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *ApplicationTalentProjectInfoBuilder) Role(role string) *ApplicationTalentProjectInfoBuilder {
	builder.role = role
	builder.roleFlag = true
	return builder
}
func (builder *ApplicationTalentProjectInfoBuilder) Link(link string) *ApplicationTalentProjectInfoBuilder {
	builder.link = link
	builder.linkFlag = true
	return builder
}
func (builder *ApplicationTalentProjectInfoBuilder) Desc(desc string) *ApplicationTalentProjectInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}
func (builder *ApplicationTalentProjectInfoBuilder) StartTime(startTime int) *ApplicationTalentProjectInfoBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}
func (builder *ApplicationTalentProjectInfoBuilder) EndTime(endTime int) *ApplicationTalentProjectInfoBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

func (builder *ApplicationTalentProjectInfoBuilder) Build() *ApplicationTalentProjectInfo {
	req := &ApplicationTalentProjectInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.roleFlag {
		req.Role = &builder.role

	}
	if builder.linkFlag {
		req.Link = &builder.link

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	return req
}

// builder结束

type ApplicationTalentSnsInfo struct {
	Id      *string `json:"id,omitempty"`
	SnsType *int    `json:"sns_type,omitempty"`
	Link    *string `json:"link,omitempty"`
}

// builder开始
type ApplicationTalentSnsInfoBuilder struct {
	id          string
	idFlag      bool
	snsType     int
	snsTypeFlag bool
	link        string
	linkFlag    bool
}

func NewApplicationTalentSnsInfoBuilder() *ApplicationTalentSnsInfoBuilder {
	builder := &ApplicationTalentSnsInfoBuilder{}
	return builder
}

func (builder *ApplicationTalentSnsInfoBuilder) Id(id string) *ApplicationTalentSnsInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *ApplicationTalentSnsInfoBuilder) SnsType(snsType int) *ApplicationTalentSnsInfoBuilder {
	builder.snsType = snsType
	builder.snsTypeFlag = true
	return builder
}
func (builder *ApplicationTalentSnsInfoBuilder) Link(link string) *ApplicationTalentSnsInfoBuilder {
	builder.link = link
	builder.linkFlag = true
	return builder
}

func (builder *ApplicationTalentSnsInfoBuilder) Build() *ApplicationTalentSnsInfo {
	req := &ApplicationTalentSnsInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.snsTypeFlag {
		req.SnsType = &builder.snsType

	}
	if builder.linkFlag {
		req.Link = &builder.link

	}
	return req
}

// builder结束

type ApplicationTalentWorksInfo struct {
	Id   *string `json:"id,omitempty"`
	Link *string `json:"link,omitempty"`
	Desc *string `json:"desc,omitempty"`
	Name *string `json:"name,omitempty"`
}

// builder开始
type ApplicationTalentWorksInfoBuilder struct {
	id       string
	idFlag   bool
	link     string
	linkFlag bool
	desc     string
	descFlag bool
	name     string
	nameFlag bool
}

func NewApplicationTalentWorksInfoBuilder() *ApplicationTalentWorksInfoBuilder {
	builder := &ApplicationTalentWorksInfoBuilder{}
	return builder
}

func (builder *ApplicationTalentWorksInfoBuilder) Id(id string) *ApplicationTalentWorksInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *ApplicationTalentWorksInfoBuilder) Link(link string) *ApplicationTalentWorksInfoBuilder {
	builder.link = link
	builder.linkFlag = true
	return builder
}
func (builder *ApplicationTalentWorksInfoBuilder) Desc(desc string) *ApplicationTalentWorksInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}
func (builder *ApplicationTalentWorksInfoBuilder) Name(name string) *ApplicationTalentWorksInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *ApplicationTalentWorksInfoBuilder) Build() *ApplicationTalentWorksInfo {
	req := &ApplicationTalentWorksInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.linkFlag {
		req.Link = &builder.link

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	return req
}

// builder结束

type ApplicationWebsiteChannel struct {
	ChannelId   *string `json:"channel_id,omitempty"`
	ChannelName *I18n   `json:"channel_name,omitempty"`
}

// builder开始
type ApplicationWebsiteChannelBuilder struct {
	channelId       string
	channelIdFlag   bool
	channelName     *I18n
	channelNameFlag bool
}

func NewApplicationWebsiteChannelBuilder() *ApplicationWebsiteChannelBuilder {
	builder := &ApplicationWebsiteChannelBuilder{}
	return builder
}

func (builder *ApplicationWebsiteChannelBuilder) ChannelId(channelId string) *ApplicationWebsiteChannelBuilder {
	builder.channelId = channelId
	builder.channelIdFlag = true
	return builder
}
func (builder *ApplicationWebsiteChannelBuilder) ChannelName(channelName *I18n) *ApplicationWebsiteChannelBuilder {
	builder.channelName = channelName
	builder.channelNameFlag = true
	return builder
}

func (builder *ApplicationWebsiteChannelBuilder) Build() *ApplicationWebsiteChannel {
	req := &ApplicationWebsiteChannel{}
	if builder.channelIdFlag {
		req.ChannelId = &builder.channelId

	}
	if builder.channelNameFlag {
		req.ChannelName = builder.channelName
	}
	return req
}

// builder结束

type ApplicationWebsiteResumeSource struct {
	WebsiteId   *string                    `json:"website_id,omitempty"`
	WebsiteName *I18n                      `json:"website_name,omitempty"`
	Channel     *ApplicationWebsiteChannel `json:"channel,omitempty"`
}

// builder开始
type ApplicationWebsiteResumeSourceBuilder struct {
	websiteId       string
	websiteIdFlag   bool
	websiteName     *I18n
	websiteNameFlag bool
	channel         *ApplicationWebsiteChannel
	channelFlag     bool
}

func NewApplicationWebsiteResumeSourceBuilder() *ApplicationWebsiteResumeSourceBuilder {
	builder := &ApplicationWebsiteResumeSourceBuilder{}
	return builder
}

func (builder *ApplicationWebsiteResumeSourceBuilder) WebsiteId(websiteId string) *ApplicationWebsiteResumeSourceBuilder {
	builder.websiteId = websiteId
	builder.websiteIdFlag = true
	return builder
}
func (builder *ApplicationWebsiteResumeSourceBuilder) WebsiteName(websiteName *I18n) *ApplicationWebsiteResumeSourceBuilder {
	builder.websiteName = websiteName
	builder.websiteNameFlag = true
	return builder
}
func (builder *ApplicationWebsiteResumeSourceBuilder) Channel(channel *ApplicationWebsiteChannel) *ApplicationWebsiteResumeSourceBuilder {
	builder.channel = channel
	builder.channelFlag = true
	return builder
}

func (builder *ApplicationWebsiteResumeSourceBuilder) Build() *ApplicationWebsiteResumeSource {
	req := &ApplicationWebsiteResumeSource{}
	if builder.websiteIdFlag {
		req.WebsiteId = &builder.websiteId

	}
	if builder.websiteNameFlag {
		req.WebsiteName = builder.websiteName
	}
	if builder.channelFlag {
		req.Channel = builder.channel
	}
	return req
}

// builder结束

type Attachment struct {
	Id         *string `json:"id,omitempty"`
	Url        *string `json:"url,omitempty"`
	Name       *string `json:"name,omitempty"`
	Mime       *string `json:"mime,omitempty"`
	CreateTime *int    `json:"create_time,omitempty"`
}

// builder开始
type AttachmentBuilder struct {
	id             string
	idFlag         bool
	url            string
	urlFlag        bool
	name           string
	nameFlag       bool
	mime           string
	mimeFlag       bool
	createTime     int
	createTimeFlag bool
}

func NewAttachmentBuilder() *AttachmentBuilder {
	builder := &AttachmentBuilder{}
	return builder
}

func (builder *AttachmentBuilder) Id(id string) *AttachmentBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *AttachmentBuilder) Url(url string) *AttachmentBuilder {
	builder.url = url
	builder.urlFlag = true
	return builder
}
func (builder *AttachmentBuilder) Name(name string) *AttachmentBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *AttachmentBuilder) Mime(mime string) *AttachmentBuilder {
	builder.mime = mime
	builder.mimeFlag = true
	return builder
}
func (builder *AttachmentBuilder) CreateTime(createTime int) *AttachmentBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}

func (builder *AttachmentBuilder) Build() *Attachment {
	req := &Attachment{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.urlFlag {
		req.Url = &builder.url

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.mimeFlag {
		req.Mime = &builder.mime

	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	return req
}

// builder结束

type Auth struct {
	Id   *string `json:"id,omitempty"`
	Name *I18n   `json:"name,omitempty"`
}

// builder开始
type AuthBuilder struct {
	id       string
	idFlag   bool
	name     *I18n
	nameFlag bool
}

func NewAuthBuilder() *AuthBuilder {
	builder := &AuthBuilder{}
	return builder
}

func (builder *AuthBuilder) Id(id string) *AuthBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *AuthBuilder) Name(name *I18n) *AuthBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *AuthBuilder) Build() *Auth {
	req := &Auth{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	return req
}

// builder结束

type AwardInfo struct {
	AwardTime *int    `json:"award_time,omitempty"`
	Desc      *string `json:"desc,omitempty"`
	Title     *string `json:"title,omitempty"`
}

// builder开始
type AwardInfoBuilder struct {
	awardTime     int
	awardTimeFlag bool
	desc          string
	descFlag      bool
	title         string
	titleFlag     bool
}

func NewAwardInfoBuilder() *AwardInfoBuilder {
	builder := &AwardInfoBuilder{}
	return builder
}

func (builder *AwardInfoBuilder) AwardTime(awardTime int) *AwardInfoBuilder {
	builder.awardTime = awardTime
	builder.awardTimeFlag = true
	return builder
}
func (builder *AwardInfoBuilder) Desc(desc string) *AwardInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}
func (builder *AwardInfoBuilder) Title(title string) *AwardInfoBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}

func (builder *AwardInfoBuilder) Build() *AwardInfo {
	req := &AwardInfo{}
	if builder.awardTimeFlag {
		req.AwardTime = &builder.awardTime

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	return req
}

// builder结束

type BackgroundCheckFeedbackInfo struct {
	AttachmentUrl *string `json:"attachment_url,omitempty"`
	Result        *string `json:"result,omitempty"`
}

// builder开始
type BackgroundCheckFeedbackInfoBuilder struct {
	attachmentUrl     string
	attachmentUrlFlag bool
	result            string
	resultFlag        bool
}

func NewBackgroundCheckFeedbackInfoBuilder() *BackgroundCheckFeedbackInfoBuilder {
	builder := &BackgroundCheckFeedbackInfoBuilder{}
	return builder
}

func (builder *BackgroundCheckFeedbackInfoBuilder) AttachmentUrl(attachmentUrl string) *BackgroundCheckFeedbackInfoBuilder {
	builder.attachmentUrl = attachmentUrl
	builder.attachmentUrlFlag = true
	return builder
}
func (builder *BackgroundCheckFeedbackInfoBuilder) Result(result string) *BackgroundCheckFeedbackInfoBuilder {
	builder.result = result
	builder.resultFlag = true
	return builder
}

func (builder *BackgroundCheckFeedbackInfoBuilder) Build() *BackgroundCheckFeedbackInfo {
	req := &BackgroundCheckFeedbackInfo{}
	if builder.attachmentUrlFlag {
		req.AttachmentUrl = &builder.attachmentUrl

	}
	if builder.resultFlag {
		req.Result = &builder.result

	}
	return req
}

// builder结束

type BackgroundCheckOrder struct {
	OrderId          *string                        `json:"order_id,omitempty"`
	ApplicationId    *string                        `json:"application_id,omitempty"`
	AccountThirdType *int                           `json:"account_third_type,omitempty"`
	Package          *string                        `json:"package,omitempty"`
	FeedbackInfoList []*BackgroundCheckFeedbackInfo `json:"feedback_info_list,omitempty"`
	ProcessInfoList  []*BackgroundCheckProcessInfo  `json:"process_info_list,omitempty"`
}

// builder开始
type BackgroundCheckOrderBuilder struct {
	orderId              string
	orderIdFlag          bool
	applicationId        string
	applicationIdFlag    bool
	accountThirdType     int
	accountThirdTypeFlag bool
	package_             string
	packageFlag          bool
	feedbackInfoList     []*BackgroundCheckFeedbackInfo
	feedbackInfoListFlag bool
	processInfoList      []*BackgroundCheckProcessInfo
	processInfoListFlag  bool
}

func NewBackgroundCheckOrderBuilder() *BackgroundCheckOrderBuilder {
	builder := &BackgroundCheckOrderBuilder{}
	return builder
}

func (builder *BackgroundCheckOrderBuilder) OrderId(orderId string) *BackgroundCheckOrderBuilder {
	builder.orderId = orderId
	builder.orderIdFlag = true
	return builder
}
func (builder *BackgroundCheckOrderBuilder) ApplicationId(applicationId string) *BackgroundCheckOrderBuilder {
	builder.applicationId = applicationId
	builder.applicationIdFlag = true
	return builder
}
func (builder *BackgroundCheckOrderBuilder) AccountThirdType(accountThirdType int) *BackgroundCheckOrderBuilder {
	builder.accountThirdType = accountThirdType
	builder.accountThirdTypeFlag = true
	return builder
}
func (builder *BackgroundCheckOrderBuilder) Package(package_ string) *BackgroundCheckOrderBuilder {
	builder.package_ = package_
	builder.packageFlag = true
	return builder
}
func (builder *BackgroundCheckOrderBuilder) FeedbackInfoList(feedbackInfoList []*BackgroundCheckFeedbackInfo) *BackgroundCheckOrderBuilder {
	builder.feedbackInfoList = feedbackInfoList
	builder.feedbackInfoListFlag = true
	return builder
}
func (builder *BackgroundCheckOrderBuilder) ProcessInfoList(processInfoList []*BackgroundCheckProcessInfo) *BackgroundCheckOrderBuilder {
	builder.processInfoList = processInfoList
	builder.processInfoListFlag = true
	return builder
}

func (builder *BackgroundCheckOrderBuilder) Build() *BackgroundCheckOrder {
	req := &BackgroundCheckOrder{}
	if builder.orderIdFlag {
		req.OrderId = &builder.orderId

	}
	if builder.applicationIdFlag {
		req.ApplicationId = &builder.applicationId

	}
	if builder.accountThirdTypeFlag {
		req.AccountThirdType = &builder.accountThirdType

	}
	if builder.packageFlag {
		req.Package = &builder.package_

	}
	if builder.feedbackInfoListFlag {
		req.FeedbackInfoList = builder.feedbackInfoList
	}
	if builder.processInfoListFlag {
		req.ProcessInfoList = builder.processInfoList
	}
	return req
}

// builder结束

type BackgroundCheckProcessInfo struct {
	Process    *string `json:"process,omitempty"`
	UpdateTime *string `json:"update_time,omitempty"`
}

// builder开始
type BackgroundCheckProcessInfoBuilder struct {
	process        string
	processFlag    bool
	updateTime     string
	updateTimeFlag bool
}

func NewBackgroundCheckProcessInfoBuilder() *BackgroundCheckProcessInfoBuilder {
	builder := &BackgroundCheckProcessInfoBuilder{}
	return builder
}

func (builder *BackgroundCheckProcessInfoBuilder) Process(process string) *BackgroundCheckProcessInfoBuilder {
	builder.process = process
	builder.processFlag = true
	return builder
}
func (builder *BackgroundCheckProcessInfoBuilder) UpdateTime(updateTime string) *BackgroundCheckProcessInfoBuilder {
	builder.updateTime = updateTime
	builder.updateTimeFlag = true
	return builder
}

func (builder *BackgroundCheckProcessInfoBuilder) Build() *BackgroundCheckProcessInfo {
	req := &BackgroundCheckProcessInfo{}
	if builder.processFlag {
		req.Process = &builder.process

	}
	if builder.updateTimeFlag {
		req.UpdateTime = &builder.updateTime

	}
	return req
}

// builder结束

type BaseAddress struct {
	Id       *string       `json:"id,omitempty"`
	ZhName   *string       `json:"zh_name,omitempty"`
	EnName   *string       `json:"en_name,omitempty"`
	District *BaseDistrict `json:"district,omitempty"`
	City     *BaseCity     `json:"city,omitempty"`
	State    *BaseCity     `json:"state,omitempty"`
	Country  *BaseCountry  `json:"country,omitempty"`
}

// builder开始
type BaseAddressBuilder struct {
	id           string
	idFlag       bool
	zhName       string
	zhNameFlag   bool
	enName       string
	enNameFlag   bool
	district     *BaseDistrict
	districtFlag bool
	city         *BaseCity
	cityFlag     bool
	state        *BaseCity
	stateFlag    bool
	country      *BaseCountry
	countryFlag  bool
}

func NewBaseAddressBuilder() *BaseAddressBuilder {
	builder := &BaseAddressBuilder{}
	return builder
}

func (builder *BaseAddressBuilder) Id(id string) *BaseAddressBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *BaseAddressBuilder) ZhName(zhName string) *BaseAddressBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}
func (builder *BaseAddressBuilder) EnName(enName string) *BaseAddressBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}
func (builder *BaseAddressBuilder) District(district *BaseDistrict) *BaseAddressBuilder {
	builder.district = district
	builder.districtFlag = true
	return builder
}
func (builder *BaseAddressBuilder) City(city *BaseCity) *BaseAddressBuilder {
	builder.city = city
	builder.cityFlag = true
	return builder
}
func (builder *BaseAddressBuilder) State(state *BaseCity) *BaseAddressBuilder {
	builder.state = state
	builder.stateFlag = true
	return builder
}
func (builder *BaseAddressBuilder) Country(country *BaseCountry) *BaseAddressBuilder {
	builder.country = country
	builder.countryFlag = true
	return builder
}

func (builder *BaseAddressBuilder) Build() *BaseAddress {
	req := &BaseAddress{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.districtFlag {
		req.District = builder.district
	}
	if builder.cityFlag {
		req.City = builder.city
	}
	if builder.stateFlag {
		req.State = builder.state
	}
	if builder.countryFlag {
		req.Country = builder.country
	}
	return req
}

// builder结束

type BaseBilingualWithId struct {
	Id     *string `json:"id,omitempty"`
	ZhName *string `json:"zh_name,omitempty"`
	EnName *string `json:"en_name,omitempty"`
}

// builder开始
type BaseBilingualWithIdBuilder struct {
	id         string
	idFlag     bool
	zhName     string
	zhNameFlag bool
	enName     string
	enNameFlag bool
}

func NewBaseBilingualWithIdBuilder() *BaseBilingualWithIdBuilder {
	builder := &BaseBilingualWithIdBuilder{}
	return builder
}

func (builder *BaseBilingualWithIdBuilder) Id(id string) *BaseBilingualWithIdBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *BaseBilingualWithIdBuilder) ZhName(zhName string) *BaseBilingualWithIdBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}
func (builder *BaseBilingualWithIdBuilder) EnName(enName string) *BaseBilingualWithIdBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

func (builder *BaseBilingualWithIdBuilder) Build() *BaseBilingualWithId {
	req := &BaseBilingualWithId{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	return req
}

// builder结束

type BaseCity struct {
	ZhName       *string `json:"zh_name,omitempty"`
	EnName       *string `json:"en_name,omitempty"`
	Code         *string `json:"code,omitempty"`
	LocationType *int    `json:"location_type,omitempty"`
}

// builder开始
type BaseCityBuilder struct {
	zhName           string
	zhNameFlag       bool
	enName           string
	enNameFlag       bool
	code             string
	codeFlag         bool
	locationType     int
	locationTypeFlag bool
}

func NewBaseCityBuilder() *BaseCityBuilder {
	builder := &BaseCityBuilder{}
	return builder
}

func (builder *BaseCityBuilder) ZhName(zhName string) *BaseCityBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}
func (builder *BaseCityBuilder) EnName(enName string) *BaseCityBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}
func (builder *BaseCityBuilder) Code(code string) *BaseCityBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}
func (builder *BaseCityBuilder) LocationType(locationType int) *BaseCityBuilder {
	builder.locationType = locationType
	builder.locationTypeFlag = true
	return builder
}

func (builder *BaseCityBuilder) Build() *BaseCity {
	req := &BaseCity{}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.locationTypeFlag {
		req.LocationType = &builder.locationType

	}
	return req
}

// builder结束

type BaseCountry struct {
	ZhName       *string `json:"zh_name,omitempty"`
	EnName       *string `json:"en_name,omitempty"`
	Code         *string `json:"code,omitempty"`
	LocationType *int    `json:"location_type,omitempty"`
}

// builder开始
type BaseCountryBuilder struct {
	zhName           string
	zhNameFlag       bool
	enName           string
	enNameFlag       bool
	code             string
	codeFlag         bool
	locationType     int
	locationTypeFlag bool
}

func NewBaseCountryBuilder() *BaseCountryBuilder {
	builder := &BaseCountryBuilder{}
	return builder
}

func (builder *BaseCountryBuilder) ZhName(zhName string) *BaseCountryBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}
func (builder *BaseCountryBuilder) EnName(enName string) *BaseCountryBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}
func (builder *BaseCountryBuilder) Code(code string) *BaseCountryBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}
func (builder *BaseCountryBuilder) LocationType(locationType int) *BaseCountryBuilder {
	builder.locationType = locationType
	builder.locationTypeFlag = true
	return builder
}

func (builder *BaseCountryBuilder) Build() *BaseCountry {
	req := &BaseCountry{}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.locationTypeFlag {
		req.LocationType = &builder.locationType

	}
	return req
}

// builder结束

type BaseDistrict struct {
	ZhName       *string `json:"zh_name,omitempty"`
	EnName       *string `json:"en_name,omitempty"`
	Code         *string `json:"code,omitempty"`
	LocationType *int    `json:"location_type,omitempty"`
}

// builder开始
type BaseDistrictBuilder struct {
	zhName           string
	zhNameFlag       bool
	enName           string
	enNameFlag       bool
	code             string
	codeFlag         bool
	locationType     int
	locationTypeFlag bool
}

func NewBaseDistrictBuilder() *BaseDistrictBuilder {
	builder := &BaseDistrictBuilder{}
	return builder
}

func (builder *BaseDistrictBuilder) ZhName(zhName string) *BaseDistrictBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}
func (builder *BaseDistrictBuilder) EnName(enName string) *BaseDistrictBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}
func (builder *BaseDistrictBuilder) Code(code string) *BaseDistrictBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}
func (builder *BaseDistrictBuilder) LocationType(locationType int) *BaseDistrictBuilder {
	builder.locationType = locationType
	builder.locationTypeFlag = true
	return builder
}

func (builder *BaseDistrictBuilder) Build() *BaseDistrict {
	req := &BaseDistrict{}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.locationTypeFlag {
		req.LocationType = &builder.locationType

	}
	return req
}

// builder结束

type BaseResp struct {
	StatusMessage *string `json:"StatusMessage,omitempty"`
	StatusCode    *int    `json:"StatusCode,omitempty"`
}

// builder开始
type BaseRespBuilder struct {
	statusMessage     string
	statusMessageFlag bool
	statusCode        int
	statusCodeFlag    bool
}

func NewBaseRespBuilder() *BaseRespBuilder {
	builder := &BaseRespBuilder{}
	return builder
}

func (builder *BaseRespBuilder) StatusMessage(statusMessage string) *BaseRespBuilder {
	builder.statusMessage = statusMessage
	builder.statusMessageFlag = true
	return builder
}
func (builder *BaseRespBuilder) StatusCode(statusCode int) *BaseRespBuilder {
	builder.statusCode = statusCode
	builder.statusCodeFlag = true
	return builder
}

func (builder *BaseRespBuilder) Build() *BaseResp {
	req := &BaseResp{}
	if builder.statusMessageFlag {
		req.StatusMessage = &builder.statusMessage

	}
	if builder.statusCodeFlag {
		req.StatusCode = &builder.statusCode

	}
	return req
}

// builder结束

type BasicInfo struct {
	Name               *string         `json:"name,omitempty"`
	Mobile             *string         `json:"mobile,omitempty"`
	MobileCountryCode  *string         `json:"mobile_country_code,omitempty"`
	Email              *string         `json:"email,omitempty"`
	Birthday           *int            `json:"birthday,omitempty"`
	Confidentiality    *int            `json:"confidentiality,omitempty"`
	CreatorAccountType *int            `json:"creator_account_type,omitempty"`
	CreatorId          *string         `json:"creator_id,omitempty"`
	CurrentCityCode    *string         `json:"current_city_code,omitempty"`
	Gender             *int            `json:"gender,omitempty"`
	HometownCityCode   *string         `json:"hometown_city_code,omitempty"`
	Identification     *Identification `json:"identification,omitempty"`
	InitSourceId       *string         `json:"init_source_id,omitempty"`
	NationalityId      *string         `json:"nationality_id,omitempty"`
	ResumeAttachmentId *string         `json:"resume_attachment_id,omitempty"`
	SelfEvaluation     *string         `json:"self_evaluation,omitempty"`
	StartWorkTime      *int            `json:"start_work_time,omitempty"`
}

// builder开始
type BasicInfoBuilder struct {
	name                   string
	nameFlag               bool
	mobile                 string
	mobileFlag             bool
	mobileCountryCode      string
	mobileCountryCodeFlag  bool
	email                  string
	emailFlag              bool
	birthday               int
	birthdayFlag           bool
	confidentiality        int
	confidentialityFlag    bool
	creatorAccountType     int
	creatorAccountTypeFlag bool
	creatorId              string
	creatorIdFlag          bool
	currentCityCode        string
	currentCityCodeFlag    bool
	gender                 int
	genderFlag             bool
	hometownCityCode       string
	hometownCityCodeFlag   bool
	identification         *Identification
	identificationFlag     bool
	initSourceId           string
	initSourceIdFlag       bool
	nationalityId          string
	nationalityIdFlag      bool
	resumeAttachmentId     string
	resumeAttachmentIdFlag bool
	selfEvaluation         string
	selfEvaluationFlag     bool
	startWorkTime          int
	startWorkTimeFlag      bool
}

func NewBasicInfoBuilder() *BasicInfoBuilder {
	builder := &BasicInfoBuilder{}
	return builder
}

func (builder *BasicInfoBuilder) Name(name string) *BasicInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *BasicInfoBuilder) Mobile(mobile string) *BasicInfoBuilder {
	builder.mobile = mobile
	builder.mobileFlag = true
	return builder
}
func (builder *BasicInfoBuilder) MobileCountryCode(mobileCountryCode string) *BasicInfoBuilder {
	builder.mobileCountryCode = mobileCountryCode
	builder.mobileCountryCodeFlag = true
	return builder
}
func (builder *BasicInfoBuilder) Email(email string) *BasicInfoBuilder {
	builder.email = email
	builder.emailFlag = true
	return builder
}
func (builder *BasicInfoBuilder) Birthday(birthday int) *BasicInfoBuilder {
	builder.birthday = birthday
	builder.birthdayFlag = true
	return builder
}
func (builder *BasicInfoBuilder) Confidentiality(confidentiality int) *BasicInfoBuilder {
	builder.confidentiality = confidentiality
	builder.confidentialityFlag = true
	return builder
}
func (builder *BasicInfoBuilder) CreatorAccountType(creatorAccountType int) *BasicInfoBuilder {
	builder.creatorAccountType = creatorAccountType
	builder.creatorAccountTypeFlag = true
	return builder
}
func (builder *BasicInfoBuilder) CreatorId(creatorId string) *BasicInfoBuilder {
	builder.creatorId = creatorId
	builder.creatorIdFlag = true
	return builder
}
func (builder *BasicInfoBuilder) CurrentCityCode(currentCityCode string) *BasicInfoBuilder {
	builder.currentCityCode = currentCityCode
	builder.currentCityCodeFlag = true
	return builder
}
func (builder *BasicInfoBuilder) Gender(gender int) *BasicInfoBuilder {
	builder.gender = gender
	builder.genderFlag = true
	return builder
}
func (builder *BasicInfoBuilder) HometownCityCode(hometownCityCode string) *BasicInfoBuilder {
	builder.hometownCityCode = hometownCityCode
	builder.hometownCityCodeFlag = true
	return builder
}
func (builder *BasicInfoBuilder) Identification(identification *Identification) *BasicInfoBuilder {
	builder.identification = identification
	builder.identificationFlag = true
	return builder
}
func (builder *BasicInfoBuilder) InitSourceId(initSourceId string) *BasicInfoBuilder {
	builder.initSourceId = initSourceId
	builder.initSourceIdFlag = true
	return builder
}
func (builder *BasicInfoBuilder) NationalityId(nationalityId string) *BasicInfoBuilder {
	builder.nationalityId = nationalityId
	builder.nationalityIdFlag = true
	return builder
}
func (builder *BasicInfoBuilder) ResumeAttachmentId(resumeAttachmentId string) *BasicInfoBuilder {
	builder.resumeAttachmentId = resumeAttachmentId
	builder.resumeAttachmentIdFlag = true
	return builder
}
func (builder *BasicInfoBuilder) SelfEvaluation(selfEvaluation string) *BasicInfoBuilder {
	builder.selfEvaluation = selfEvaluation
	builder.selfEvaluationFlag = true
	return builder
}
func (builder *BasicInfoBuilder) StartWorkTime(startWorkTime int) *BasicInfoBuilder {
	builder.startWorkTime = startWorkTime
	builder.startWorkTimeFlag = true
	return builder
}

func (builder *BasicInfoBuilder) Build() *BasicInfo {
	req := &BasicInfo{}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.mobileFlag {
		req.Mobile = &builder.mobile

	}
	if builder.mobileCountryCodeFlag {
		req.MobileCountryCode = &builder.mobileCountryCode

	}
	if builder.emailFlag {
		req.Email = &builder.email

	}
	if builder.birthdayFlag {
		req.Birthday = &builder.birthday

	}
	if builder.confidentialityFlag {
		req.Confidentiality = &builder.confidentiality

	}
	if builder.creatorAccountTypeFlag {
		req.CreatorAccountType = &builder.creatorAccountType

	}
	if builder.creatorIdFlag {
		req.CreatorId = &builder.creatorId

	}
	if builder.currentCityCodeFlag {
		req.CurrentCityCode = &builder.currentCityCode

	}
	if builder.genderFlag {
		req.Gender = &builder.gender

	}
	if builder.hometownCityCodeFlag {
		req.HometownCityCode = &builder.hometownCityCode

	}
	if builder.identificationFlag {
		req.Identification = builder.identification
	}
	if builder.initSourceIdFlag {
		req.InitSourceId = &builder.initSourceId

	}
	if builder.nationalityIdFlag {
		req.NationalityId = &builder.nationalityId

	}
	if builder.resumeAttachmentIdFlag {
		req.ResumeAttachmentId = &builder.resumeAttachmentId

	}
	if builder.selfEvaluationFlag {
		req.SelfEvaluation = &builder.selfEvaluation

	}
	if builder.startWorkTimeFlag {
		req.StartWorkTime = &builder.startWorkTime

	}
	return req
}

// builder结束

type CareerInfo struct {
	CareerType *int    `json:"career_type,omitempty"`
	Company    *string `json:"company,omitempty"`
	Desc       *string `json:"desc,omitempty"`
	EndTime    *int    `json:"end_time,omitempty"`
	StartTime  *int    `json:"start_time,omitempty"`
	Title      *string `json:"title,omitempty"`
}

// builder开始
type CareerInfoBuilder struct {
	careerType     int
	careerTypeFlag bool
	company        string
	companyFlag    bool
	desc           string
	descFlag       bool
	endTime        int
	endTimeFlag    bool
	startTime      int
	startTimeFlag  bool
	title          string
	titleFlag      bool
}

func NewCareerInfoBuilder() *CareerInfoBuilder {
	builder := &CareerInfoBuilder{}
	return builder
}

func (builder *CareerInfoBuilder) CareerType(careerType int) *CareerInfoBuilder {
	builder.careerType = careerType
	builder.careerTypeFlag = true
	return builder
}
func (builder *CareerInfoBuilder) Company(company string) *CareerInfoBuilder {
	builder.company = company
	builder.companyFlag = true
	return builder
}
func (builder *CareerInfoBuilder) Desc(desc string) *CareerInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}
func (builder *CareerInfoBuilder) EndTime(endTime int) *CareerInfoBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}
func (builder *CareerInfoBuilder) StartTime(startTime int) *CareerInfoBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}
func (builder *CareerInfoBuilder) Title(title string) *CareerInfoBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}

func (builder *CareerInfoBuilder) Build() *CareerInfo {
	req := &CareerInfo{}
	if builder.careerTypeFlag {
		req.CareerType = &builder.careerType

	}
	if builder.companyFlag {
		req.Company = &builder.company

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	return req
}

// builder结束

type CertificateInfo struct {
	Desc *string `json:"desc,omitempty"`
	Name *string `json:"name,omitempty"`
}

// builder开始
type CertificateInfoBuilder struct {
	desc     string
	descFlag bool
	name     string
	nameFlag bool
}

func NewCertificateInfoBuilder() *CertificateInfoBuilder {
	builder := &CertificateInfoBuilder{}
	return builder
}

func (builder *CertificateInfoBuilder) Desc(desc string) *CertificateInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}
func (builder *CertificateInfoBuilder) Name(name string) *CertificateInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *CertificateInfoBuilder) Build() *CertificateInfo {
	req := &CertificateInfo{}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	return req
}

// builder结束

type ChangeEmployeeStage struct {
	Operation      *int                    `json:"operation,omitempty"`
	ConversionInfo *EmployeeConversionInfo `json:"conversion_info,omitempty"`
	OverboardInfo  *EmployeeOverboardInfo  `json:"overboard_info,omitempty"`
}

// builder开始
type ChangeEmployeeStageBuilder struct {
	operation          int
	operationFlag      bool
	conversionInfo     *EmployeeConversionInfo
	conversionInfoFlag bool
	overboardInfo      *EmployeeOverboardInfo
	overboardInfoFlag  bool
}

func NewChangeEmployeeStageBuilder() *ChangeEmployeeStageBuilder {
	builder := &ChangeEmployeeStageBuilder{}
	return builder
}

func (builder *ChangeEmployeeStageBuilder) Operation(operation int) *ChangeEmployeeStageBuilder {
	builder.operation = operation
	builder.operationFlag = true
	return builder
}
func (builder *ChangeEmployeeStageBuilder) ConversionInfo(conversionInfo *EmployeeConversionInfo) *ChangeEmployeeStageBuilder {
	builder.conversionInfo = conversionInfo
	builder.conversionInfoFlag = true
	return builder
}
func (builder *ChangeEmployeeStageBuilder) OverboardInfo(overboardInfo *EmployeeOverboardInfo) *ChangeEmployeeStageBuilder {
	builder.overboardInfo = overboardInfo
	builder.overboardInfoFlag = true
	return builder
}

func (builder *ChangeEmployeeStageBuilder) Build() *ChangeEmployeeStage {
	req := &ChangeEmployeeStage{}
	if builder.operationFlag {
		req.Operation = &builder.operation

	}
	if builder.conversionInfoFlag {
		req.ConversionInfo = builder.conversionInfo
	}
	if builder.overboardInfoFlag {
		req.OverboardInfo = builder.overboardInfo
	}
	return req
}

// builder结束

type City struct {
	CityCode *string  `json:"city_code,omitempty"`
	Name     *string  `json:"name,omitempty"`
	EnName   *string  `json:"en_name,omitempty"`
	Country  *Country `json:"country,omitempty"`
}

// builder开始
type CityBuilder struct {
	cityCode     string
	cityCodeFlag bool
	name         string
	nameFlag     bool
	enName       string
	enNameFlag   bool
	country      *Country
	countryFlag  bool
}

func NewCityBuilder() *CityBuilder {
	builder := &CityBuilder{}
	return builder
}

func (builder *CityBuilder) CityCode(cityCode string) *CityBuilder {
	builder.cityCode = cityCode
	builder.cityCodeFlag = true
	return builder
}
func (builder *CityBuilder) Name(name string) *CityBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *CityBuilder) EnName(enName string) *CityBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}
func (builder *CityBuilder) Country(country *Country) *CityBuilder {
	builder.country = country
	builder.countryFlag = true
	return builder
}

func (builder *CityBuilder) Build() *City {
	req := &City{}
	if builder.cityCodeFlag {
		req.CityCode = &builder.cityCode

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.countryFlag {
		req.Country = builder.country
	}
	return req
}

// builder结束

type CodeNameObject struct {
	Code *string `json:"code,omitempty"`
	Name *I18n   `json:"name,omitempty"`
}

// builder开始
type CodeNameObjectBuilder struct {
	code     string
	codeFlag bool
	name     *I18n
	nameFlag bool
}

func NewCodeNameObjectBuilder() *CodeNameObjectBuilder {
	builder := &CodeNameObjectBuilder{}
	return builder
}

func (builder *CodeNameObjectBuilder) Code(code string) *CodeNameObjectBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}
func (builder *CodeNameObjectBuilder) Name(name *I18n) *CodeNameObjectBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *CodeNameObjectBuilder) Build() *CodeNameObject {
	req := &CodeNameObject{}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	return req
}

// builder结束

type CombinedJob struct {
	Id                 *string                      `json:"id,omitempty"`
	Code               *string                      `json:"code,omitempty"`
	Experience         *int                         `json:"experience,omitempty"`
	ExpiryTime         *int                         `json:"expiry_time,omitempty"`
	CustomizedDataList []*CombinedJobObjectValueMap `json:"customized_data_list,omitempty"`
	MinLevelId         *string                      `json:"min_level_id,omitempty"`
	MinSalary          *int                         `json:"min_salary,omitempty"`
	Title              *string                      `json:"title,omitempty"`
	JobManagers        *JobManager                  `json:"job_managers,omitempty"`
	JobProcessId       *string                      `json:"job_process_id,omitempty"`
	ProcessType        *int                         `json:"process_type,omitempty"`
	SubjectId          *string                      `json:"subject_id,omitempty"`
	JobFunctionId      *string                      `json:"job_function_id,omitempty"`
	DepartmentId       *string                      `json:"department_id,omitempty"`
	HeadCount          *int                         `json:"head_count,omitempty"`
	IsNeverExpired     *bool                        `json:"is_never_expired,omitempty"`
	MaxSalary          *int                         `json:"max_salary,omitempty"`
	Requirement        *string                      `json:"requirement,omitempty"`
	AddressId          *string                      `json:"address_id,omitempty"`
	Description        *string                      `json:"description,omitempty"`
	HighlightList      []string                     `json:"highlight_list,omitempty"`
	JobTypeId          *string                      `json:"job_type_id,omitempty"`
	MaxLevelId         *string                      `json:"max_level_id,omitempty"`
	RecruitmentTypeId  *string                      `json:"recruitment_type_id,omitempty"`
	RequiredDegree     *int                         `json:"required_degree,omitempty"`
	JobCategoryId      *string                      `json:"job_category_id,omitempty"`
	AddressIdList      []string                     `json:"address_id_list,omitempty"`
}

// builder开始
type CombinedJobBuilder struct {
	id                     string
	idFlag                 bool
	code                   string
	codeFlag               bool
	experience             int
	experienceFlag         bool
	expiryTime             int
	expiryTimeFlag         bool
	customizedDataList     []*CombinedJobObjectValueMap
	customizedDataListFlag bool
	minLevelId             string
	minLevelIdFlag         bool
	minSalary              int
	minSalaryFlag          bool
	title                  string
	titleFlag              bool
	jobManagers            *JobManager
	jobManagersFlag        bool
	jobProcessId           string
	jobProcessIdFlag       bool
	processType            int
	processTypeFlag        bool
	subjectId              string
	subjectIdFlag          bool
	jobFunctionId          string
	jobFunctionIdFlag      bool
	departmentId           string
	departmentIdFlag       bool
	headCount              int
	headCountFlag          bool
	isNeverExpired         bool
	isNeverExpiredFlag     bool
	maxSalary              int
	maxSalaryFlag          bool
	requirement            string
	requirementFlag        bool
	addressId              string
	addressIdFlag          bool
	description            string
	descriptionFlag        bool
	highlightList          []string
	highlightListFlag      bool
	jobTypeId              string
	jobTypeIdFlag          bool
	maxLevelId             string
	maxLevelIdFlag         bool
	recruitmentTypeId      string
	recruitmentTypeIdFlag  bool
	requiredDegree         int
	requiredDegreeFlag     bool
	jobCategoryId          string
	jobCategoryIdFlag      bool
	addressIdList          []string
	addressIdListFlag      bool
}

func NewCombinedJobBuilder() *CombinedJobBuilder {
	builder := &CombinedJobBuilder{}
	return builder
}

func (builder *CombinedJobBuilder) Id(id string) *CombinedJobBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *CombinedJobBuilder) Code(code string) *CombinedJobBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}
func (builder *CombinedJobBuilder) Experience(experience int) *CombinedJobBuilder {
	builder.experience = experience
	builder.experienceFlag = true
	return builder
}
func (builder *CombinedJobBuilder) ExpiryTime(expiryTime int) *CombinedJobBuilder {
	builder.expiryTime = expiryTime
	builder.expiryTimeFlag = true
	return builder
}
func (builder *CombinedJobBuilder) CustomizedDataList(customizedDataList []*CombinedJobObjectValueMap) *CombinedJobBuilder {
	builder.customizedDataList = customizedDataList
	builder.customizedDataListFlag = true
	return builder
}
func (builder *CombinedJobBuilder) MinLevelId(minLevelId string) *CombinedJobBuilder {
	builder.minLevelId = minLevelId
	builder.minLevelIdFlag = true
	return builder
}
func (builder *CombinedJobBuilder) MinSalary(minSalary int) *CombinedJobBuilder {
	builder.minSalary = minSalary
	builder.minSalaryFlag = true
	return builder
}
func (builder *CombinedJobBuilder) Title(title string) *CombinedJobBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}
func (builder *CombinedJobBuilder) JobManagers(jobManagers *JobManager) *CombinedJobBuilder {
	builder.jobManagers = jobManagers
	builder.jobManagersFlag = true
	return builder
}
func (builder *CombinedJobBuilder) JobProcessId(jobProcessId string) *CombinedJobBuilder {
	builder.jobProcessId = jobProcessId
	builder.jobProcessIdFlag = true
	return builder
}
func (builder *CombinedJobBuilder) ProcessType(processType int) *CombinedJobBuilder {
	builder.processType = processType
	builder.processTypeFlag = true
	return builder
}
func (builder *CombinedJobBuilder) SubjectId(subjectId string) *CombinedJobBuilder {
	builder.subjectId = subjectId
	builder.subjectIdFlag = true
	return builder
}
func (builder *CombinedJobBuilder) JobFunctionId(jobFunctionId string) *CombinedJobBuilder {
	builder.jobFunctionId = jobFunctionId
	builder.jobFunctionIdFlag = true
	return builder
}
func (builder *CombinedJobBuilder) DepartmentId(departmentId string) *CombinedJobBuilder {
	builder.departmentId = departmentId
	builder.departmentIdFlag = true
	return builder
}
func (builder *CombinedJobBuilder) HeadCount(headCount int) *CombinedJobBuilder {
	builder.headCount = headCount
	builder.headCountFlag = true
	return builder
}
func (builder *CombinedJobBuilder) IsNeverExpired(isNeverExpired bool) *CombinedJobBuilder {
	builder.isNeverExpired = isNeverExpired
	builder.isNeverExpiredFlag = true
	return builder
}
func (builder *CombinedJobBuilder) MaxSalary(maxSalary int) *CombinedJobBuilder {
	builder.maxSalary = maxSalary
	builder.maxSalaryFlag = true
	return builder
}
func (builder *CombinedJobBuilder) Requirement(requirement string) *CombinedJobBuilder {
	builder.requirement = requirement
	builder.requirementFlag = true
	return builder
}
func (builder *CombinedJobBuilder) AddressId(addressId string) *CombinedJobBuilder {
	builder.addressId = addressId
	builder.addressIdFlag = true
	return builder
}
func (builder *CombinedJobBuilder) Description(description string) *CombinedJobBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}
func (builder *CombinedJobBuilder) HighlightList(highlightList []string) *CombinedJobBuilder {
	builder.highlightList = highlightList
	builder.highlightListFlag = true
	return builder
}
func (builder *CombinedJobBuilder) JobTypeId(jobTypeId string) *CombinedJobBuilder {
	builder.jobTypeId = jobTypeId
	builder.jobTypeIdFlag = true
	return builder
}
func (builder *CombinedJobBuilder) MaxLevelId(maxLevelId string) *CombinedJobBuilder {
	builder.maxLevelId = maxLevelId
	builder.maxLevelIdFlag = true
	return builder
}
func (builder *CombinedJobBuilder) RecruitmentTypeId(recruitmentTypeId string) *CombinedJobBuilder {
	builder.recruitmentTypeId = recruitmentTypeId
	builder.recruitmentTypeIdFlag = true
	return builder
}
func (builder *CombinedJobBuilder) RequiredDegree(requiredDegree int) *CombinedJobBuilder {
	builder.requiredDegree = requiredDegree
	builder.requiredDegreeFlag = true
	return builder
}
func (builder *CombinedJobBuilder) JobCategoryId(jobCategoryId string) *CombinedJobBuilder {
	builder.jobCategoryId = jobCategoryId
	builder.jobCategoryIdFlag = true
	return builder
}
func (builder *CombinedJobBuilder) AddressIdList(addressIdList []string) *CombinedJobBuilder {
	builder.addressIdList = addressIdList
	builder.addressIdListFlag = true
	return builder
}

func (builder *CombinedJobBuilder) Build() *CombinedJob {
	req := &CombinedJob{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.experienceFlag {
		req.Experience = &builder.experience

	}
	if builder.expiryTimeFlag {
		req.ExpiryTime = &builder.expiryTime

	}
	if builder.customizedDataListFlag {
		req.CustomizedDataList = builder.customizedDataList
	}
	if builder.minLevelIdFlag {
		req.MinLevelId = &builder.minLevelId

	}
	if builder.minSalaryFlag {
		req.MinSalary = &builder.minSalary

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.jobManagersFlag {
		req.JobManagers = builder.jobManagers
	}
	if builder.jobProcessIdFlag {
		req.JobProcessId = &builder.jobProcessId

	}
	if builder.processTypeFlag {
		req.ProcessType = &builder.processType

	}
	if builder.subjectIdFlag {
		req.SubjectId = &builder.subjectId

	}
	if builder.jobFunctionIdFlag {
		req.JobFunctionId = &builder.jobFunctionId

	}
	if builder.departmentIdFlag {
		req.DepartmentId = &builder.departmentId

	}
	if builder.headCountFlag {
		req.HeadCount = &builder.headCount

	}
	if builder.isNeverExpiredFlag {
		req.IsNeverExpired = &builder.isNeverExpired

	}
	if builder.maxSalaryFlag {
		req.MaxSalary = &builder.maxSalary

	}
	if builder.requirementFlag {
		req.Requirement = &builder.requirement

	}
	if builder.addressIdFlag {
		req.AddressId = &builder.addressId

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	if builder.highlightListFlag {
		req.HighlightList = builder.highlightList
	}
	if builder.jobTypeIdFlag {
		req.JobTypeId = &builder.jobTypeId

	}
	if builder.maxLevelIdFlag {
		req.MaxLevelId = &builder.maxLevelId

	}
	if builder.recruitmentTypeIdFlag {
		req.RecruitmentTypeId = &builder.recruitmentTypeId

	}
	if builder.requiredDegreeFlag {
		req.RequiredDegree = &builder.requiredDegree

	}
	if builder.jobCategoryIdFlag {
		req.JobCategoryId = &builder.jobCategoryId

	}
	if builder.addressIdListFlag {
		req.AddressIdList = builder.addressIdList
	}
	return req
}

// builder结束

type CombinedJobObjectValueMap struct {
	ObjectId *string `json:"object_id,omitempty"`
	Value    *string `json:"value,omitempty"`
}

// builder开始
type CombinedJobObjectValueMapBuilder struct {
	objectId     string
	objectIdFlag bool
	value        string
	valueFlag    bool
}

func NewCombinedJobObjectValueMapBuilder() *CombinedJobObjectValueMapBuilder {
	builder := &CombinedJobObjectValueMapBuilder{}
	return builder
}

func (builder *CombinedJobObjectValueMapBuilder) ObjectId(objectId string) *CombinedJobObjectValueMapBuilder {
	builder.objectId = objectId
	builder.objectIdFlag = true
	return builder
}
func (builder *CombinedJobObjectValueMapBuilder) Value(value string) *CombinedJobObjectValueMapBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}

func (builder *CombinedJobObjectValueMapBuilder) Build() *CombinedJobObjectValueMap {
	req := &CombinedJobObjectValueMap{}
	if builder.objectIdFlag {
		req.ObjectId = &builder.objectId

	}
	if builder.valueFlag {
		req.Value = &builder.value

	}
	return req
}

// builder结束

type CombinedJobResult struct {
	DefaultJobPost *CombinedJobResultDefaultJobPost `json:"default_job_post,omitempty"`
	Job            *Job                             `json:"job,omitempty"`
	JobManager     *JobManager                      `json:"job_manager,omitempty"`
}

// builder开始
type CombinedJobResultBuilder struct {
	defaultJobPost     *CombinedJobResultDefaultJobPost
	defaultJobPostFlag bool
	job                *Job
	jobFlag            bool
	jobManager         *JobManager
	jobManagerFlag     bool
}

func NewCombinedJobResultBuilder() *CombinedJobResultBuilder {
	builder := &CombinedJobResultBuilder{}
	return builder
}

func (builder *CombinedJobResultBuilder) DefaultJobPost(defaultJobPost *CombinedJobResultDefaultJobPost) *CombinedJobResultBuilder {
	builder.defaultJobPost = defaultJobPost
	builder.defaultJobPostFlag = true
	return builder
}
func (builder *CombinedJobResultBuilder) Job(job *Job) *CombinedJobResultBuilder {
	builder.job = job
	builder.jobFlag = true
	return builder
}
func (builder *CombinedJobResultBuilder) JobManager(jobManager *JobManager) *CombinedJobResultBuilder {
	builder.jobManager = jobManager
	builder.jobManagerFlag = true
	return builder
}

func (builder *CombinedJobResultBuilder) Build() *CombinedJobResult {
	req := &CombinedJobResult{}
	if builder.defaultJobPostFlag {
		req.DefaultJobPost = builder.defaultJobPost
	}
	if builder.jobFlag {
		req.Job = builder.job
	}
	if builder.jobManagerFlag {
		req.JobManager = builder.jobManager
	}
	return req
}

// builder结束

type CombinedJobResultDefaultJobPost struct {
	Id *string `json:"id,omitempty"`
}

// builder开始
type CombinedJobResultDefaultJobPostBuilder struct {
	id     string
	idFlag bool
}

func NewCombinedJobResultDefaultJobPostBuilder() *CombinedJobResultDefaultJobPostBuilder {
	builder := &CombinedJobResultDefaultJobPostBuilder{}
	return builder
}

func (builder *CombinedJobResultDefaultJobPostBuilder) Id(id string) *CombinedJobResultDefaultJobPostBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

func (builder *CombinedJobResultDefaultJobPostBuilder) Build() *CombinedJobResultDefaultJobPost {
	req := &CombinedJobResultDefaultJobPost{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	return req
}

// builder结束

type CommonAddress struct {
	Id       *string         `json:"id,omitempty"`
	Name     *I18n           `json:"name,omitempty"`
	District *CodeNameObject `json:"district,omitempty"`
	City     *CodeNameObject `json:"city,omitempty"`
	State    *CodeNameObject `json:"state,omitempty"`
	Country  *CodeNameObject `json:"country,omitempty"`
}

// builder开始
type CommonAddressBuilder struct {
	id           string
	idFlag       bool
	name         *I18n
	nameFlag     bool
	district     *CodeNameObject
	districtFlag bool
	city         *CodeNameObject
	cityFlag     bool
	state        *CodeNameObject
	stateFlag    bool
	country      *CodeNameObject
	countryFlag  bool
}

func NewCommonAddressBuilder() *CommonAddressBuilder {
	builder := &CommonAddressBuilder{}
	return builder
}

func (builder *CommonAddressBuilder) Id(id string) *CommonAddressBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *CommonAddressBuilder) Name(name *I18n) *CommonAddressBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *CommonAddressBuilder) District(district *CodeNameObject) *CommonAddressBuilder {
	builder.district = district
	builder.districtFlag = true
	return builder
}
func (builder *CommonAddressBuilder) City(city *CodeNameObject) *CommonAddressBuilder {
	builder.city = city
	builder.cityFlag = true
	return builder
}
func (builder *CommonAddressBuilder) State(state *CodeNameObject) *CommonAddressBuilder {
	builder.state = state
	builder.stateFlag = true
	return builder
}
func (builder *CommonAddressBuilder) Country(country *CodeNameObject) *CommonAddressBuilder {
	builder.country = country
	builder.countryFlag = true
	return builder
}

func (builder *CommonAddressBuilder) Build() *CommonAddress {
	req := &CommonAddress{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.districtFlag {
		req.District = builder.district
	}
	if builder.cityFlag {
		req.City = builder.city
	}
	if builder.stateFlag {
		req.State = builder.state
	}
	if builder.countryFlag {
		req.Country = builder.country
	}
	return req
}

// builder结束

type CommonSchema struct {
	Id           *string              `json:"id,omitempty"`
	Name         *I18n                `json:"name,omitempty"`
	Description  *I18n                `json:"description,omitempty"`
	Setting      *CommonSchemaSetting `json:"setting,omitempty"`
	IsCustomized *bool                `json:"is_customized,omitempty"`
	IsRequired   *bool                `json:"is_required,omitempty"`
	IsVisible    *bool                `json:"is_visible,omitempty"`
	ActiveStatus *int                 `json:"active_status,omitempty"`
	ChildrenList []*CommonSchemaChild `json:"children_list,omitempty"`
}

// builder开始
type CommonSchemaBuilder struct {
	id               string
	idFlag           bool
	name             *I18n
	nameFlag         bool
	description      *I18n
	descriptionFlag  bool
	setting          *CommonSchemaSetting
	settingFlag      bool
	isCustomized     bool
	isCustomizedFlag bool
	isRequired       bool
	isRequiredFlag   bool
	isVisible        bool
	isVisibleFlag    bool
	activeStatus     int
	activeStatusFlag bool
	childrenList     []*CommonSchemaChild
	childrenListFlag bool
}

func NewCommonSchemaBuilder() *CommonSchemaBuilder {
	builder := &CommonSchemaBuilder{}
	return builder
}

func (builder *CommonSchemaBuilder) Id(id string) *CommonSchemaBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *CommonSchemaBuilder) Name(name *I18n) *CommonSchemaBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *CommonSchemaBuilder) Description(description *I18n) *CommonSchemaBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}
func (builder *CommonSchemaBuilder) Setting(setting *CommonSchemaSetting) *CommonSchemaBuilder {
	builder.setting = setting
	builder.settingFlag = true
	return builder
}
func (builder *CommonSchemaBuilder) IsCustomized(isCustomized bool) *CommonSchemaBuilder {
	builder.isCustomized = isCustomized
	builder.isCustomizedFlag = true
	return builder
}
func (builder *CommonSchemaBuilder) IsRequired(isRequired bool) *CommonSchemaBuilder {
	builder.isRequired = isRequired
	builder.isRequiredFlag = true
	return builder
}
func (builder *CommonSchemaBuilder) IsVisible(isVisible bool) *CommonSchemaBuilder {
	builder.isVisible = isVisible
	builder.isVisibleFlag = true
	return builder
}
func (builder *CommonSchemaBuilder) ActiveStatus(activeStatus int) *CommonSchemaBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}
func (builder *CommonSchemaBuilder) ChildrenList(childrenList []*CommonSchemaChild) *CommonSchemaBuilder {
	builder.childrenList = childrenList
	builder.childrenListFlag = true
	return builder
}

func (builder *CommonSchemaBuilder) Build() *CommonSchema {
	req := &CommonSchema{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.descriptionFlag {
		req.Description = builder.description
	}
	if builder.settingFlag {
		req.Setting = builder.setting
	}
	if builder.isCustomizedFlag {
		req.IsCustomized = &builder.isCustomized

	}
	if builder.isRequiredFlag {
		req.IsRequired = &builder.isRequired

	}
	if builder.isVisibleFlag {
		req.IsVisible = &builder.isVisible

	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	if builder.childrenListFlag {
		req.ChildrenList = builder.childrenList
	}
	return req
}

// builder结束

type CommonSchemaChild struct {
	Id           *string              `json:"id,omitempty"`
	Name         *I18n                `json:"name,omitempty"`
	Description  *I18n                `json:"description,omitempty"`
	Setting      *CommonSchemaSetting `json:"setting,omitempty"`
	ParentId     *string              `json:"parent_id,omitempty"`
	IsCustomized *bool                `json:"is_customized,omitempty"`
	IsRequired   *bool                `json:"is_required,omitempty"`
	IsVisible    *bool                `json:"is_visible,omitempty"`
	ActiveStatus *int                 `json:"active_status,omitempty"`
}

// builder开始
type CommonSchemaChildBuilder struct {
	id               string
	idFlag           bool
	name             *I18n
	nameFlag         bool
	description      *I18n
	descriptionFlag  bool
	setting          *CommonSchemaSetting
	settingFlag      bool
	parentId         string
	parentIdFlag     bool
	isCustomized     bool
	isCustomizedFlag bool
	isRequired       bool
	isRequiredFlag   bool
	isVisible        bool
	isVisibleFlag    bool
	activeStatus     int
	activeStatusFlag bool
}

func NewCommonSchemaChildBuilder() *CommonSchemaChildBuilder {
	builder := &CommonSchemaChildBuilder{}
	return builder
}

func (builder *CommonSchemaChildBuilder) Id(id string) *CommonSchemaChildBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *CommonSchemaChildBuilder) Name(name *I18n) *CommonSchemaChildBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *CommonSchemaChildBuilder) Description(description *I18n) *CommonSchemaChildBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}
func (builder *CommonSchemaChildBuilder) Setting(setting *CommonSchemaSetting) *CommonSchemaChildBuilder {
	builder.setting = setting
	builder.settingFlag = true
	return builder
}
func (builder *CommonSchemaChildBuilder) ParentId(parentId string) *CommonSchemaChildBuilder {
	builder.parentId = parentId
	builder.parentIdFlag = true
	return builder
}
func (builder *CommonSchemaChildBuilder) IsCustomized(isCustomized bool) *CommonSchemaChildBuilder {
	builder.isCustomized = isCustomized
	builder.isCustomizedFlag = true
	return builder
}
func (builder *CommonSchemaChildBuilder) IsRequired(isRequired bool) *CommonSchemaChildBuilder {
	builder.isRequired = isRequired
	builder.isRequiredFlag = true
	return builder
}
func (builder *CommonSchemaChildBuilder) IsVisible(isVisible bool) *CommonSchemaChildBuilder {
	builder.isVisible = isVisible
	builder.isVisibleFlag = true
	return builder
}
func (builder *CommonSchemaChildBuilder) ActiveStatus(activeStatus int) *CommonSchemaChildBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}

func (builder *CommonSchemaChildBuilder) Build() *CommonSchemaChild {
	req := &CommonSchemaChild{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.descriptionFlag {
		req.Description = builder.description
	}
	if builder.settingFlag {
		req.Setting = builder.setting
	}
	if builder.parentIdFlag {
		req.ParentId = &builder.parentId

	}
	if builder.isCustomizedFlag {
		req.IsCustomized = &builder.isCustomized

	}
	if builder.isRequiredFlag {
		req.IsRequired = &builder.isRequired

	}
	if builder.isVisibleFlag {
		req.IsVisible = &builder.isVisible

	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	return req
}

// builder结束

type CommonSchemaConfig struct {
	Options []*CommonSchemaOption `json:"options,omitempty"`
}

// builder开始
type CommonSchemaConfigBuilder struct {
	options     []*CommonSchemaOption
	optionsFlag bool
}

func NewCommonSchemaConfigBuilder() *CommonSchemaConfigBuilder {
	builder := &CommonSchemaConfigBuilder{}
	return builder
}

func (builder *CommonSchemaConfigBuilder) Options(options []*CommonSchemaOption) *CommonSchemaConfigBuilder {
	builder.options = options
	builder.optionsFlag = true
	return builder
}

func (builder *CommonSchemaConfigBuilder) Build() *CommonSchemaConfig {
	req := &CommonSchemaConfig{}
	if builder.optionsFlag {
		req.Options = builder.options
	}
	return req
}

// builder结束

type CommonSchemaOption struct {
	Key          *string `json:"key,omitempty"`
	Name         *I18n   `json:"name,omitempty"`
	Description  *I18n   `json:"description,omitempty"`
	ActiveStatus *int    `json:"active_status,omitempty"`
}

// builder开始
type CommonSchemaOptionBuilder struct {
	key              string
	keyFlag          bool
	name             *I18n
	nameFlag         bool
	description      *I18n
	descriptionFlag  bool
	activeStatus     int
	activeStatusFlag bool
}

func NewCommonSchemaOptionBuilder() *CommonSchemaOptionBuilder {
	builder := &CommonSchemaOptionBuilder{}
	return builder
}

func (builder *CommonSchemaOptionBuilder) Key(key string) *CommonSchemaOptionBuilder {
	builder.key = key
	builder.keyFlag = true
	return builder
}
func (builder *CommonSchemaOptionBuilder) Name(name *I18n) *CommonSchemaOptionBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *CommonSchemaOptionBuilder) Description(description *I18n) *CommonSchemaOptionBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}
func (builder *CommonSchemaOptionBuilder) ActiveStatus(activeStatus int) *CommonSchemaOptionBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}

func (builder *CommonSchemaOptionBuilder) Build() *CommonSchemaOption {
	req := &CommonSchemaOption{}
	if builder.keyFlag {
		req.Key = &builder.key

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.descriptionFlag {
		req.Description = builder.description
	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	return req
}

// builder结束

type CommonSchemaSetting struct {
	ObjectType *int                `json:"object_type,omitempty"`
	Config     *CommonSchemaConfig `json:"config,omitempty"`
}

// builder开始
type CommonSchemaSettingBuilder struct {
	objectType     int
	objectTypeFlag bool
	config         *CommonSchemaConfig
	configFlag     bool
}

func NewCommonSchemaSettingBuilder() *CommonSchemaSettingBuilder {
	builder := &CommonSchemaSettingBuilder{}
	return builder
}

func (builder *CommonSchemaSettingBuilder) ObjectType(objectType int) *CommonSchemaSettingBuilder {
	builder.objectType = objectType
	builder.objectTypeFlag = true
	return builder
}
func (builder *CommonSchemaSettingBuilder) Config(config *CommonSchemaConfig) *CommonSchemaSettingBuilder {
	builder.config = config
	builder.configFlag = true
	return builder
}

func (builder *CommonSchemaSettingBuilder) Build() *CommonSchemaSetting {
	req := &CommonSchemaSetting{}
	if builder.objectTypeFlag {
		req.ObjectType = &builder.objectType

	}
	if builder.configFlag {
		req.Config = builder.config
	}
	return req
}

// builder结束

type CompetitionInfo struct {
	Desc *string `json:"desc,omitempty"`
	Name *string `json:"name,omitempty"`
}

// builder开始
type CompetitionInfoBuilder struct {
	desc     string
	descFlag bool
	name     string
	nameFlag bool
}

func NewCompetitionInfoBuilder() *CompetitionInfoBuilder {
	builder := &CompetitionInfoBuilder{}
	return builder
}

func (builder *CompetitionInfoBuilder) Desc(desc string) *CompetitionInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}
func (builder *CompetitionInfoBuilder) Name(name string) *CompetitionInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *CompetitionInfoBuilder) Build() *CompetitionInfo {
	req := &CompetitionInfo{}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	return req
}

// builder结束

type Country struct {
	CountryCode *string `json:"country_code,omitempty"`
	Name        *string `json:"name,omitempty"`
	EnName      *string `json:"en_name,omitempty"`
}

// builder开始
type CountryBuilder struct {
	countryCode     string
	countryCodeFlag bool
	name            string
	nameFlag        bool
	enName          string
	enNameFlag      bool
}

func NewCountryBuilder() *CountryBuilder {
	builder := &CountryBuilder{}
	return builder
}

func (builder *CountryBuilder) CountryCode(countryCode string) *CountryBuilder {
	builder.countryCode = countryCode
	builder.countryCodeFlag = true
	return builder
}
func (builder *CountryBuilder) Name(name string) *CountryBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *CountryBuilder) EnName(enName string) *CountryBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

func (builder *CountryBuilder) Build() *Country {
	req := &Country{}
	if builder.countryCodeFlag {
		req.CountryCode = &builder.countryCode

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	return req
}

// builder结束

type Department struct {
	Id     *string `json:"id,omitempty"`
	Name   *string `json:"name,omitempty"`
	EnName *string `json:"en_name,omitempty"`
}

// builder开始
type DepartmentBuilder struct {
	id         string
	idFlag     bool
	name       string
	nameFlag   bool
	enName     string
	enNameFlag bool
}

func NewDepartmentBuilder() *DepartmentBuilder {
	builder := &DepartmentBuilder{}
	return builder
}

func (builder *DepartmentBuilder) Id(id string) *DepartmentBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *DepartmentBuilder) Name(name string) *DepartmentBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *DepartmentBuilder) EnName(enName string) *DepartmentBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

func (builder *DepartmentBuilder) Build() *Department {
	req := &Department{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	return req
}

// builder结束

type Dummy struct {
	Id *string `json:"id,omitempty"`
}

// builder开始
type DummyBuilder struct {
	id     string
	idFlag bool
}

func NewDummyBuilder() *DummyBuilder {
	builder := &DummyBuilder{}
	return builder
}

func (builder *DummyBuilder) Id(id string) *DummyBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

func (builder *DummyBuilder) Build() *Dummy {
	req := &Dummy{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	return req
}

// builder结束

type EducationInfo struct {
	Degree          *int    `json:"degree,omitempty"`
	EndTime         *int    `json:"end_time,omitempty"`
	FieldOfStudy    *string `json:"field_of_study,omitempty"`
	School          *string `json:"school,omitempty"`
	StartTime       *int    `json:"start_time,omitempty"`
	EducationType   *int    `json:"education_type,omitempty"`
	AcademicRanking *int    `json:"academic_ranking,omitempty"`
}

// builder开始
type EducationInfoBuilder struct {
	degree              int
	degreeFlag          bool
	endTime             int
	endTimeFlag         bool
	fieldOfStudy        string
	fieldOfStudyFlag    bool
	school              string
	schoolFlag          bool
	startTime           int
	startTimeFlag       bool
	educationType       int
	educationTypeFlag   bool
	academicRanking     int
	academicRankingFlag bool
}

func NewEducationInfoBuilder() *EducationInfoBuilder {
	builder := &EducationInfoBuilder{}
	return builder
}

func (builder *EducationInfoBuilder) Degree(degree int) *EducationInfoBuilder {
	builder.degree = degree
	builder.degreeFlag = true
	return builder
}
func (builder *EducationInfoBuilder) EndTime(endTime int) *EducationInfoBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}
func (builder *EducationInfoBuilder) FieldOfStudy(fieldOfStudy string) *EducationInfoBuilder {
	builder.fieldOfStudy = fieldOfStudy
	builder.fieldOfStudyFlag = true
	return builder
}
func (builder *EducationInfoBuilder) School(school string) *EducationInfoBuilder {
	builder.school = school
	builder.schoolFlag = true
	return builder
}
func (builder *EducationInfoBuilder) StartTime(startTime int) *EducationInfoBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}
func (builder *EducationInfoBuilder) EducationType(educationType int) *EducationInfoBuilder {
	builder.educationType = educationType
	builder.educationTypeFlag = true
	return builder
}
func (builder *EducationInfoBuilder) AcademicRanking(academicRanking int) *EducationInfoBuilder {
	builder.academicRanking = academicRanking
	builder.academicRankingFlag = true
	return builder
}

func (builder *EducationInfoBuilder) Build() *EducationInfo {
	req := &EducationInfo{}
	if builder.degreeFlag {
		req.Degree = &builder.degree

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.fieldOfStudyFlag {
		req.FieldOfStudy = &builder.fieldOfStudy

	}
	if builder.schoolFlag {
		req.School = &builder.school

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.educationTypeFlag {
		req.EducationType = &builder.educationType

	}
	if builder.academicRankingFlag {
		req.AcademicRanking = &builder.academicRanking

	}
	return req
}

// builder结束

type EhrImportTask struct {
	FailReason  *string `json:"fail_reason,omitempty"`
	RedirectUrl *string `json:"redirect_url,omitempty"`
	State       *int    `json:"state,omitempty"`
}

// builder开始
type EhrImportTaskBuilder struct {
	failReason      string
	failReasonFlag  bool
	redirectUrl     string
	redirectUrlFlag bool
	state           int
	stateFlag       bool
}

func NewEhrImportTaskBuilder() *EhrImportTaskBuilder {
	builder := &EhrImportTaskBuilder{}
	return builder
}

func (builder *EhrImportTaskBuilder) FailReason(failReason string) *EhrImportTaskBuilder {
	builder.failReason = failReason
	builder.failReasonFlag = true
	return builder
}
func (builder *EhrImportTaskBuilder) RedirectUrl(redirectUrl string) *EhrImportTaskBuilder {
	builder.redirectUrl = redirectUrl
	builder.redirectUrlFlag = true
	return builder
}
func (builder *EhrImportTaskBuilder) State(state int) *EhrImportTaskBuilder {
	builder.state = state
	builder.stateFlag = true
	return builder
}

func (builder *EhrImportTaskBuilder) Build() *EhrImportTask {
	req := &EhrImportTask{}
	if builder.failReasonFlag {
		req.FailReason = &builder.failReason

	}
	if builder.redirectUrlFlag {
		req.RedirectUrl = &builder.redirectUrl

	}
	if builder.stateFlag {
		req.State = &builder.state

	}
	return req
}

// builder结束

type Employee struct {
	Id                     *string `json:"id,omitempty"`
	ApplicationId          *string `json:"application_id,omitempty"`
	OnboardStatus          *int    `json:"onboard_status,omitempty"`
	ConversionStatus       *int    `json:"conversion_status,omitempty"`
	OnboardTime            *int    `json:"onboard_time,omitempty"`
	ExpectedConversionTime *int    `json:"expected_conversion_time,omitempty"`
	ActualConversionTime   *int    `json:"actual_conversion_time,omitempty"`
	OverboardTime          *int    `json:"overboard_time,omitempty"`
	OverboardNote          *string `json:"overboard_note,omitempty"`
	OnboardCityCode        *string `json:"onboard_city_code,omitempty"`
	Department             *string `json:"department,omitempty"`
	Leader                 *string `json:"leader,omitempty"`
	Sequence               *string `json:"sequence,omitempty"`
	Level                  *string `json:"level,omitempty"`
	EmployeeType           *string `json:"employee_type,omitempty"`
}

// builder开始
type EmployeeBuilder struct {
	id                         string
	idFlag                     bool
	applicationId              string
	applicationIdFlag          bool
	onboardStatus              int
	onboardStatusFlag          bool
	conversionStatus           int
	conversionStatusFlag       bool
	onboardTime                int
	onboardTimeFlag            bool
	expectedConversionTime     int
	expectedConversionTimeFlag bool
	actualConversionTime       int
	actualConversionTimeFlag   bool
	overboardTime              int
	overboardTimeFlag          bool
	overboardNote              string
	overboardNoteFlag          bool
	onboardCityCode            string
	onboardCityCodeFlag        bool
	department                 string
	departmentFlag             bool
	leader                     string
	leaderFlag                 bool
	sequence                   string
	sequenceFlag               bool
	level                      string
	levelFlag                  bool
	employeeType               string
	employeeTypeFlag           bool
}

func NewEmployeeBuilder() *EmployeeBuilder {
	builder := &EmployeeBuilder{}
	return builder
}

func (builder *EmployeeBuilder) Id(id string) *EmployeeBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *EmployeeBuilder) ApplicationId(applicationId string) *EmployeeBuilder {
	builder.applicationId = applicationId
	builder.applicationIdFlag = true
	return builder
}
func (builder *EmployeeBuilder) OnboardStatus(onboardStatus int) *EmployeeBuilder {
	builder.onboardStatus = onboardStatus
	builder.onboardStatusFlag = true
	return builder
}
func (builder *EmployeeBuilder) ConversionStatus(conversionStatus int) *EmployeeBuilder {
	builder.conversionStatus = conversionStatus
	builder.conversionStatusFlag = true
	return builder
}
func (builder *EmployeeBuilder) OnboardTime(onboardTime int) *EmployeeBuilder {
	builder.onboardTime = onboardTime
	builder.onboardTimeFlag = true
	return builder
}
func (builder *EmployeeBuilder) ExpectedConversionTime(expectedConversionTime int) *EmployeeBuilder {
	builder.expectedConversionTime = expectedConversionTime
	builder.expectedConversionTimeFlag = true
	return builder
}
func (builder *EmployeeBuilder) ActualConversionTime(actualConversionTime int) *EmployeeBuilder {
	builder.actualConversionTime = actualConversionTime
	builder.actualConversionTimeFlag = true
	return builder
}
func (builder *EmployeeBuilder) OverboardTime(overboardTime int) *EmployeeBuilder {
	builder.overboardTime = overboardTime
	builder.overboardTimeFlag = true
	return builder
}
func (builder *EmployeeBuilder) OverboardNote(overboardNote string) *EmployeeBuilder {
	builder.overboardNote = overboardNote
	builder.overboardNoteFlag = true
	return builder
}
func (builder *EmployeeBuilder) OnboardCityCode(onboardCityCode string) *EmployeeBuilder {
	builder.onboardCityCode = onboardCityCode
	builder.onboardCityCodeFlag = true
	return builder
}
func (builder *EmployeeBuilder) Department(department string) *EmployeeBuilder {
	builder.department = department
	builder.departmentFlag = true
	return builder
}
func (builder *EmployeeBuilder) Leader(leader string) *EmployeeBuilder {
	builder.leader = leader
	builder.leaderFlag = true
	return builder
}
func (builder *EmployeeBuilder) Sequence(sequence string) *EmployeeBuilder {
	builder.sequence = sequence
	builder.sequenceFlag = true
	return builder
}
func (builder *EmployeeBuilder) Level(level string) *EmployeeBuilder {
	builder.level = level
	builder.levelFlag = true
	return builder
}
func (builder *EmployeeBuilder) EmployeeType(employeeType string) *EmployeeBuilder {
	builder.employeeType = employeeType
	builder.employeeTypeFlag = true
	return builder
}

func (builder *EmployeeBuilder) Build() *Employee {
	req := &Employee{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.applicationIdFlag {
		req.ApplicationId = &builder.applicationId

	}
	if builder.onboardStatusFlag {
		req.OnboardStatus = &builder.onboardStatus

	}
	if builder.conversionStatusFlag {
		req.ConversionStatus = &builder.conversionStatus

	}
	if builder.onboardTimeFlag {
		req.OnboardTime = &builder.onboardTime

	}
	if builder.expectedConversionTimeFlag {
		req.ExpectedConversionTime = &builder.expectedConversionTime

	}
	if builder.actualConversionTimeFlag {
		req.ActualConversionTime = &builder.actualConversionTime

	}
	if builder.overboardTimeFlag {
		req.OverboardTime = &builder.overboardTime

	}
	if builder.overboardNoteFlag {
		req.OverboardNote = &builder.overboardNote

	}
	if builder.onboardCityCodeFlag {
		req.OnboardCityCode = &builder.onboardCityCode

	}
	if builder.departmentFlag {
		req.Department = &builder.department

	}
	if builder.leaderFlag {
		req.Leader = &builder.leader

	}
	if builder.sequenceFlag {
		req.Sequence = &builder.sequence

	}
	if builder.levelFlag {
		req.Level = &builder.level

	}
	if builder.employeeTypeFlag {
		req.EmployeeType = &builder.employeeType

	}
	return req
}

// builder结束

type EmployeeConversionInfo struct {
	ActualConversionTime *int `json:"actual_conversion_time,omitempty"`
}

// builder开始
type EmployeeConversionInfoBuilder struct {
	actualConversionTime     int
	actualConversionTimeFlag bool
}

func NewEmployeeConversionInfoBuilder() *EmployeeConversionInfoBuilder {
	builder := &EmployeeConversionInfoBuilder{}
	return builder
}

func (builder *EmployeeConversionInfoBuilder) ActualConversionTime(actualConversionTime int) *EmployeeConversionInfoBuilder {
	builder.actualConversionTime = actualConversionTime
	builder.actualConversionTimeFlag = true
	return builder
}

func (builder *EmployeeConversionInfoBuilder) Build() *EmployeeConversionInfo {
	req := &EmployeeConversionInfo{}
	if builder.actualConversionTimeFlag {
		req.ActualConversionTime = &builder.actualConversionTime

	}
	return req
}

// builder结束

type EmployeeOverboardInfo struct {
	ActualOverboardTime *int    `json:"actual_overboard_time,omitempty"`
	OverboardNote       *string `json:"overboard_note,omitempty"`
}

// builder开始
type EmployeeOverboardInfoBuilder struct {
	actualOverboardTime     int
	actualOverboardTimeFlag bool
	overboardNote           string
	overboardNoteFlag       bool
}

func NewEmployeeOverboardInfoBuilder() *EmployeeOverboardInfoBuilder {
	builder := &EmployeeOverboardInfoBuilder{}
	return builder
}

func (builder *EmployeeOverboardInfoBuilder) ActualOverboardTime(actualOverboardTime int) *EmployeeOverboardInfoBuilder {
	builder.actualOverboardTime = actualOverboardTime
	builder.actualOverboardTimeFlag = true
	return builder
}
func (builder *EmployeeOverboardInfoBuilder) OverboardNote(overboardNote string) *EmployeeOverboardInfoBuilder {
	builder.overboardNote = overboardNote
	builder.overboardNoteFlag = true
	return builder
}

func (builder *EmployeeOverboardInfoBuilder) Build() *EmployeeOverboardInfo {
	req := &EmployeeOverboardInfo{}
	if builder.actualOverboardTimeFlag {
		req.ActualOverboardTime = &builder.actualOverboardTime

	}
	if builder.overboardNoteFlag {
		req.OverboardNote = &builder.overboardNote

	}
	return req
}

// builder结束

type Evaluation struct {
	Id            *string `json:"id,omitempty"`
	ApplicationId *string `json:"application_id,omitempty"`
	StageId       *string `json:"stage_id,omitempty"`
	CreatorId     *string `json:"creator_id,omitempty"`
	EvaluatorId   *string `json:"evaluator_id,omitempty"`
	CommitStatus  *int    `json:"commit_status,omitempty"`
	Conclusion    *int    `json:"conclusion,omitempty"`
	Content       *string `json:"content,omitempty"`
	CreateTime    *string `json:"create_time,omitempty"`
	UpdateTime    *string `json:"update_time,omitempty"`
}

// builder开始
type EvaluationBuilder struct {
	id                string
	idFlag            bool
	applicationId     string
	applicationIdFlag bool
	stageId           string
	stageIdFlag       bool
	creatorId         string
	creatorIdFlag     bool
	evaluatorId       string
	evaluatorIdFlag   bool
	commitStatus      int
	commitStatusFlag  bool
	conclusion        int
	conclusionFlag    bool
	content           string
	contentFlag       bool
	createTime        string
	createTimeFlag    bool
	updateTime        string
	updateTimeFlag    bool
}

func NewEvaluationBuilder() *EvaluationBuilder {
	builder := &EvaluationBuilder{}
	return builder
}

func (builder *EvaluationBuilder) Id(id string) *EvaluationBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *EvaluationBuilder) ApplicationId(applicationId string) *EvaluationBuilder {
	builder.applicationId = applicationId
	builder.applicationIdFlag = true
	return builder
}
func (builder *EvaluationBuilder) StageId(stageId string) *EvaluationBuilder {
	builder.stageId = stageId
	builder.stageIdFlag = true
	return builder
}
func (builder *EvaluationBuilder) CreatorId(creatorId string) *EvaluationBuilder {
	builder.creatorId = creatorId
	builder.creatorIdFlag = true
	return builder
}
func (builder *EvaluationBuilder) EvaluatorId(evaluatorId string) *EvaluationBuilder {
	builder.evaluatorId = evaluatorId
	builder.evaluatorIdFlag = true
	return builder
}
func (builder *EvaluationBuilder) CommitStatus(commitStatus int) *EvaluationBuilder {
	builder.commitStatus = commitStatus
	builder.commitStatusFlag = true
	return builder
}
func (builder *EvaluationBuilder) Conclusion(conclusion int) *EvaluationBuilder {
	builder.conclusion = conclusion
	builder.conclusionFlag = true
	return builder
}
func (builder *EvaluationBuilder) Content(content string) *EvaluationBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}
func (builder *EvaluationBuilder) CreateTime(createTime string) *EvaluationBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}
func (builder *EvaluationBuilder) UpdateTime(updateTime string) *EvaluationBuilder {
	builder.updateTime = updateTime
	builder.updateTimeFlag = true
	return builder
}

func (builder *EvaluationBuilder) Build() *Evaluation {
	req := &Evaluation{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.applicationIdFlag {
		req.ApplicationId = &builder.applicationId

	}
	if builder.stageIdFlag {
		req.StageId = &builder.stageId

	}
	if builder.creatorIdFlag {
		req.CreatorId = &builder.creatorId

	}
	if builder.evaluatorIdFlag {
		req.EvaluatorId = &builder.evaluatorId

	}
	if builder.commitStatusFlag {
		req.CommitStatus = &builder.commitStatus

	}
	if builder.conclusionFlag {
		req.Conclusion = &builder.conclusion

	}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.updateTimeFlag {
		req.UpdateTime = &builder.updateTime

	}
	return req
}

// builder结束

type EvaluationTask struct {
	Id             *string `json:"id,omitempty"`
	JobId          *string `json:"job_id,omitempty"`
	TalentId       *string `json:"talent_id,omitempty"`
	ApplicationId  *string `json:"application_id,omitempty"`
	ActivityStatus *int    `json:"activity_status,omitempty"`
}

// builder开始
type EvaluationTaskBuilder struct {
	id                 string
	idFlag             bool
	jobId              string
	jobIdFlag          bool
	talentId           string
	talentIdFlag       bool
	applicationId      string
	applicationIdFlag  bool
	activityStatus     int
	activityStatusFlag bool
}

func NewEvaluationTaskBuilder() *EvaluationTaskBuilder {
	builder := &EvaluationTaskBuilder{}
	return builder
}

func (builder *EvaluationTaskBuilder) Id(id string) *EvaluationTaskBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *EvaluationTaskBuilder) JobId(jobId string) *EvaluationTaskBuilder {
	builder.jobId = jobId
	builder.jobIdFlag = true
	return builder
}
func (builder *EvaluationTaskBuilder) TalentId(talentId string) *EvaluationTaskBuilder {
	builder.talentId = talentId
	builder.talentIdFlag = true
	return builder
}
func (builder *EvaluationTaskBuilder) ApplicationId(applicationId string) *EvaluationTaskBuilder {
	builder.applicationId = applicationId
	builder.applicationIdFlag = true
	return builder
}
func (builder *EvaluationTaskBuilder) ActivityStatus(activityStatus int) *EvaluationTaskBuilder {
	builder.activityStatus = activityStatus
	builder.activityStatusFlag = true
	return builder
}

func (builder *EvaluationTaskBuilder) Build() *EvaluationTask {
	req := &EvaluationTask{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.jobIdFlag {
		req.JobId = &builder.jobId

	}
	if builder.talentIdFlag {
		req.TalentId = &builder.talentId

	}
	if builder.applicationIdFlag {
		req.ApplicationId = &builder.applicationId

	}
	if builder.activityStatusFlag {
		req.ActivityStatus = &builder.activityStatus

	}
	return req
}

// builder结束

type ExamMarkingTask struct {
	Id             *string `json:"id,omitempty"`
	JobId          *string `json:"job_id,omitempty"`
	TalentId       *string `json:"talent_id,omitempty"`
	ApplicationId  *string `json:"application_id,omitempty"`
	ActivityStatus *int    `json:"activity_status,omitempty"`
}

// builder开始
type ExamMarkingTaskBuilder struct {
	id                 string
	idFlag             bool
	jobId              string
	jobIdFlag          bool
	talentId           string
	talentIdFlag       bool
	applicationId      string
	applicationIdFlag  bool
	activityStatus     int
	activityStatusFlag bool
}

func NewExamMarkingTaskBuilder() *ExamMarkingTaskBuilder {
	builder := &ExamMarkingTaskBuilder{}
	return builder
}

func (builder *ExamMarkingTaskBuilder) Id(id string) *ExamMarkingTaskBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *ExamMarkingTaskBuilder) JobId(jobId string) *ExamMarkingTaskBuilder {
	builder.jobId = jobId
	builder.jobIdFlag = true
	return builder
}
func (builder *ExamMarkingTaskBuilder) TalentId(talentId string) *ExamMarkingTaskBuilder {
	builder.talentId = talentId
	builder.talentIdFlag = true
	return builder
}
func (builder *ExamMarkingTaskBuilder) ApplicationId(applicationId string) *ExamMarkingTaskBuilder {
	builder.applicationId = applicationId
	builder.applicationIdFlag = true
	return builder
}
func (builder *ExamMarkingTaskBuilder) ActivityStatus(activityStatus int) *ExamMarkingTaskBuilder {
	builder.activityStatus = activityStatus
	builder.activityStatusFlag = true
	return builder
}

func (builder *ExamMarkingTaskBuilder) Build() *ExamMarkingTask {
	req := &ExamMarkingTask{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.jobIdFlag {
		req.JobId = &builder.jobId

	}
	if builder.talentIdFlag {
		req.TalentId = &builder.talentId

	}
	if builder.applicationIdFlag {
		req.ApplicationId = &builder.applicationId

	}
	if builder.activityStatusFlag {
		req.ActivityStatus = &builder.activityStatus

	}
	return req
}

// builder结束

type ExternalApplication struct {
	Id                 *string `json:"id,omitempty"`
	ExternalId         *string `json:"external_id,omitempty"`
	JobRecruitmentType *int    `json:"job_recruitment_type,omitempty"`
	JobTitle           *string `json:"job_title,omitempty"`
	ResumeSource       *string `json:"resume_source,omitempty"`
	Stage              *string `json:"stage,omitempty"`
	TalentId           *string `json:"talent_id,omitempty"`
	TerminationReason  *string `json:"termination_reason,omitempty"`
	DeliveryType       *int    `json:"delivery_type,omitempty"`
	ModifyTime         *string `json:"modify_time,omitempty"`
	TerminationType    *string `json:"termination_type,omitempty"`
}

// builder开始
type ExternalApplicationBuilder struct {
	id                     string
	idFlag                 bool
	externalId             string
	externalIdFlag         bool
	jobRecruitmentType     int
	jobRecruitmentTypeFlag bool
	jobTitle               string
	jobTitleFlag           bool
	resumeSource           string
	resumeSourceFlag       bool
	stage                  string
	stageFlag              bool
	talentId               string
	talentIdFlag           bool
	terminationReason      string
	terminationReasonFlag  bool
	deliveryType           int
	deliveryTypeFlag       bool
	modifyTime             string
	modifyTimeFlag         bool
	terminationType        string
	terminationTypeFlag    bool
}

func NewExternalApplicationBuilder() *ExternalApplicationBuilder {
	builder := &ExternalApplicationBuilder{}
	return builder
}

func (builder *ExternalApplicationBuilder) Id(id string) *ExternalApplicationBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *ExternalApplicationBuilder) ExternalId(externalId string) *ExternalApplicationBuilder {
	builder.externalId = externalId
	builder.externalIdFlag = true
	return builder
}
func (builder *ExternalApplicationBuilder) JobRecruitmentType(jobRecruitmentType int) *ExternalApplicationBuilder {
	builder.jobRecruitmentType = jobRecruitmentType
	builder.jobRecruitmentTypeFlag = true
	return builder
}
func (builder *ExternalApplicationBuilder) JobTitle(jobTitle string) *ExternalApplicationBuilder {
	builder.jobTitle = jobTitle
	builder.jobTitleFlag = true
	return builder
}
func (builder *ExternalApplicationBuilder) ResumeSource(resumeSource string) *ExternalApplicationBuilder {
	builder.resumeSource = resumeSource
	builder.resumeSourceFlag = true
	return builder
}
func (builder *ExternalApplicationBuilder) Stage(stage string) *ExternalApplicationBuilder {
	builder.stage = stage
	builder.stageFlag = true
	return builder
}
func (builder *ExternalApplicationBuilder) TalentId(talentId string) *ExternalApplicationBuilder {
	builder.talentId = talentId
	builder.talentIdFlag = true
	return builder
}
func (builder *ExternalApplicationBuilder) TerminationReason(terminationReason string) *ExternalApplicationBuilder {
	builder.terminationReason = terminationReason
	builder.terminationReasonFlag = true
	return builder
}
func (builder *ExternalApplicationBuilder) DeliveryType(deliveryType int) *ExternalApplicationBuilder {
	builder.deliveryType = deliveryType
	builder.deliveryTypeFlag = true
	return builder
}
func (builder *ExternalApplicationBuilder) ModifyTime(modifyTime string) *ExternalApplicationBuilder {
	builder.modifyTime = modifyTime
	builder.modifyTimeFlag = true
	return builder
}
func (builder *ExternalApplicationBuilder) TerminationType(terminationType string) *ExternalApplicationBuilder {
	builder.terminationType = terminationType
	builder.terminationTypeFlag = true
	return builder
}

func (builder *ExternalApplicationBuilder) Build() *ExternalApplication {
	req := &ExternalApplication{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.externalIdFlag {
		req.ExternalId = &builder.externalId

	}
	if builder.jobRecruitmentTypeFlag {
		req.JobRecruitmentType = &builder.jobRecruitmentType

	}
	if builder.jobTitleFlag {
		req.JobTitle = &builder.jobTitle

	}
	if builder.resumeSourceFlag {
		req.ResumeSource = &builder.resumeSource

	}
	if builder.stageFlag {
		req.Stage = &builder.stage

	}
	if builder.talentIdFlag {
		req.TalentId = &builder.talentId

	}
	if builder.terminationReasonFlag {
		req.TerminationReason = &builder.terminationReason

	}
	if builder.deliveryTypeFlag {
		req.DeliveryType = &builder.deliveryType

	}
	if builder.modifyTimeFlag {
		req.ModifyTime = &builder.modifyTime

	}
	if builder.terminationTypeFlag {
		req.TerminationType = &builder.terminationType

	}
	return req
}

// builder结束

type ExternalBackgroundCheck struct {
	Id                    *string                              `json:"id,omitempty"`
	ExternalId            *string                              `json:"external_id,omitempty"`
	ExternalApplicationId *string                              `json:"external_application_id,omitempty"`
	Date                  *int                                 `json:"date,omitempty"`
	Name                  *string                              `json:"name,omitempty"`
	Result                *string                              `json:"result,omitempty"`
	AttachmentIdList      []string                             `json:"attachment_id_list,omitempty"`
	AttachmentList        []*ExternalBackgroundCheckAttachment `json:"attachment_list,omitempty"`
}

// builder开始
type ExternalBackgroundCheckBuilder struct {
	id                        string
	idFlag                    bool
	externalId                string
	externalIdFlag            bool
	externalApplicationId     string
	externalApplicationIdFlag bool
	date                      int
	dateFlag                  bool
	name                      string
	nameFlag                  bool
	result                    string
	resultFlag                bool
	attachmentIdList          []string
	attachmentIdListFlag      bool
	attachmentList            []*ExternalBackgroundCheckAttachment
	attachmentListFlag        bool
}

func NewExternalBackgroundCheckBuilder() *ExternalBackgroundCheckBuilder {
	builder := &ExternalBackgroundCheckBuilder{}
	return builder
}

func (builder *ExternalBackgroundCheckBuilder) Id(id string) *ExternalBackgroundCheckBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *ExternalBackgroundCheckBuilder) ExternalId(externalId string) *ExternalBackgroundCheckBuilder {
	builder.externalId = externalId
	builder.externalIdFlag = true
	return builder
}
func (builder *ExternalBackgroundCheckBuilder) ExternalApplicationId(externalApplicationId string) *ExternalBackgroundCheckBuilder {
	builder.externalApplicationId = externalApplicationId
	builder.externalApplicationIdFlag = true
	return builder
}
func (builder *ExternalBackgroundCheckBuilder) Date(date int) *ExternalBackgroundCheckBuilder {
	builder.date = date
	builder.dateFlag = true
	return builder
}
func (builder *ExternalBackgroundCheckBuilder) Name(name string) *ExternalBackgroundCheckBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *ExternalBackgroundCheckBuilder) Result(result string) *ExternalBackgroundCheckBuilder {
	builder.result = result
	builder.resultFlag = true
	return builder
}
func (builder *ExternalBackgroundCheckBuilder) AttachmentIdList(attachmentIdList []string) *ExternalBackgroundCheckBuilder {
	builder.attachmentIdList = attachmentIdList
	builder.attachmentIdListFlag = true
	return builder
}
func (builder *ExternalBackgroundCheckBuilder) AttachmentList(attachmentList []*ExternalBackgroundCheckAttachment) *ExternalBackgroundCheckBuilder {
	builder.attachmentList = attachmentList
	builder.attachmentListFlag = true
	return builder
}

func (builder *ExternalBackgroundCheckBuilder) Build() *ExternalBackgroundCheck {
	req := &ExternalBackgroundCheck{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.externalIdFlag {
		req.ExternalId = &builder.externalId

	}
	if builder.externalApplicationIdFlag {
		req.ExternalApplicationId = &builder.externalApplicationId

	}
	if builder.dateFlag {
		req.Date = &builder.date

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.resultFlag {
		req.Result = &builder.result

	}
	if builder.attachmentIdListFlag {
		req.AttachmentIdList = builder.attachmentIdList
	}
	if builder.attachmentListFlag {
		req.AttachmentList = builder.attachmentList
	}
	return req
}

// builder结束

type ExternalBackgroundCheckAttachment struct {
	Id   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Size *int    `json:"size,omitempty"`
}

// builder开始
type ExternalBackgroundCheckAttachmentBuilder struct {
	id       string
	idFlag   bool
	name     string
	nameFlag bool
	size     int
	sizeFlag bool
}

func NewExternalBackgroundCheckAttachmentBuilder() *ExternalBackgroundCheckAttachmentBuilder {
	builder := &ExternalBackgroundCheckAttachmentBuilder{}
	return builder
}

func (builder *ExternalBackgroundCheckAttachmentBuilder) Id(id string) *ExternalBackgroundCheckAttachmentBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *ExternalBackgroundCheckAttachmentBuilder) Name(name string) *ExternalBackgroundCheckAttachmentBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *ExternalBackgroundCheckAttachmentBuilder) Size(size int) *ExternalBackgroundCheckAttachmentBuilder {
	builder.size = size
	builder.sizeFlag = true
	return builder
}

func (builder *ExternalBackgroundCheckAttachmentBuilder) Build() *ExternalBackgroundCheckAttachment {
	req := &ExternalBackgroundCheckAttachment{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.sizeFlag {
		req.Size = &builder.size

	}
	return req
}

// builder结束

type ExternalInterview struct {
	ExternalId            *string `json:"external_id,omitempty"`
	ExternalApplicationId *string `json:"external_application_id,omitempty"`
	Id                    *string `json:"id,omitempty"`
	ParticipateStatus     *int    `json:"participate_status,omitempty"`
	BeginTime             *int    `json:"begin_time,omitempty"`
	EndTime               *int    `json:"end_time,omitempty"`
}

// builder开始
type ExternalInterviewBuilder struct {
	externalId                string
	externalIdFlag            bool
	externalApplicationId     string
	externalApplicationIdFlag bool
	id                        string
	idFlag                    bool
	participateStatus         int
	participateStatusFlag     bool
	beginTime                 int
	beginTimeFlag             bool
	endTime                   int
	endTimeFlag               bool
}

func NewExternalInterviewBuilder() *ExternalInterviewBuilder {
	builder := &ExternalInterviewBuilder{}
	return builder
}

func (builder *ExternalInterviewBuilder) ExternalId(externalId string) *ExternalInterviewBuilder {
	builder.externalId = externalId
	builder.externalIdFlag = true
	return builder
}
func (builder *ExternalInterviewBuilder) ExternalApplicationId(externalApplicationId string) *ExternalInterviewBuilder {
	builder.externalApplicationId = externalApplicationId
	builder.externalApplicationIdFlag = true
	return builder
}
func (builder *ExternalInterviewBuilder) Id(id string) *ExternalInterviewBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *ExternalInterviewBuilder) ParticipateStatus(participateStatus int) *ExternalInterviewBuilder {
	builder.participateStatus = participateStatus
	builder.participateStatusFlag = true
	return builder
}
func (builder *ExternalInterviewBuilder) BeginTime(beginTime int) *ExternalInterviewBuilder {
	builder.beginTime = beginTime
	builder.beginTimeFlag = true
	return builder
}
func (builder *ExternalInterviewBuilder) EndTime(endTime int) *ExternalInterviewBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

func (builder *ExternalInterviewBuilder) Build() *ExternalInterview {
	req := &ExternalInterview{}
	if builder.externalIdFlag {
		req.ExternalId = &builder.externalId

	}
	if builder.externalApplicationIdFlag {
		req.ExternalApplicationId = &builder.externalApplicationId

	}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.participateStatusFlag {
		req.ParticipateStatus = &builder.participateStatus

	}
	if builder.beginTimeFlag {
		req.BeginTime = &builder.beginTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	return req
}

// builder结束

type ExternalInterviewAssessment struct {
	Id                      *string                                 `json:"id,omitempty"`
	ExternalId              *string                                 `json:"external_id,omitempty"`
	Username                *string                                 `json:"username,omitempty"`
	Conclusion              *int                                    `json:"conclusion,omitempty"`
	AssessmentDimensionList []*ExternalInterviewAssessmentDimension `json:"assessment_dimension_list,omitempty"`
	Content                 *string                                 `json:"content,omitempty"`
	ExternalInterviewId     *string                                 `json:"external_interview_id,omitempty"`
}

// builder开始
type ExternalInterviewAssessmentBuilder struct {
	id                          string
	idFlag                      bool
	externalId                  string
	externalIdFlag              bool
	username                    string
	usernameFlag                bool
	conclusion                  int
	conclusionFlag              bool
	assessmentDimensionList     []*ExternalInterviewAssessmentDimension
	assessmentDimensionListFlag bool
	content                     string
	contentFlag                 bool
	externalInterviewId         string
	externalInterviewIdFlag     bool
}

func NewExternalInterviewAssessmentBuilder() *ExternalInterviewAssessmentBuilder {
	builder := &ExternalInterviewAssessmentBuilder{}
	return builder
}

func (builder *ExternalInterviewAssessmentBuilder) Id(id string) *ExternalInterviewAssessmentBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *ExternalInterviewAssessmentBuilder) ExternalId(externalId string) *ExternalInterviewAssessmentBuilder {
	builder.externalId = externalId
	builder.externalIdFlag = true
	return builder
}
func (builder *ExternalInterviewAssessmentBuilder) Username(username string) *ExternalInterviewAssessmentBuilder {
	builder.username = username
	builder.usernameFlag = true
	return builder
}
func (builder *ExternalInterviewAssessmentBuilder) Conclusion(conclusion int) *ExternalInterviewAssessmentBuilder {
	builder.conclusion = conclusion
	builder.conclusionFlag = true
	return builder
}
func (builder *ExternalInterviewAssessmentBuilder) AssessmentDimensionList(assessmentDimensionList []*ExternalInterviewAssessmentDimension) *ExternalInterviewAssessmentBuilder {
	builder.assessmentDimensionList = assessmentDimensionList
	builder.assessmentDimensionListFlag = true
	return builder
}
func (builder *ExternalInterviewAssessmentBuilder) Content(content string) *ExternalInterviewAssessmentBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}
func (builder *ExternalInterviewAssessmentBuilder) ExternalInterviewId(externalInterviewId string) *ExternalInterviewAssessmentBuilder {
	builder.externalInterviewId = externalInterviewId
	builder.externalInterviewIdFlag = true
	return builder
}

func (builder *ExternalInterviewAssessmentBuilder) Build() *ExternalInterviewAssessment {
	req := &ExternalInterviewAssessment{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.externalIdFlag {
		req.ExternalId = &builder.externalId

	}
	if builder.usernameFlag {
		req.Username = &builder.username

	}
	if builder.conclusionFlag {
		req.Conclusion = &builder.conclusion

	}
	if builder.assessmentDimensionListFlag {
		req.AssessmentDimensionList = builder.assessmentDimensionList
	}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.externalInterviewIdFlag {
		req.ExternalInterviewId = &builder.externalInterviewId

	}
	return req
}

// builder结束

type ExternalInterviewAssessmentDimension struct {
	Score          *int     `json:"score,omitempty"`
	Option         *string  `json:"option,omitempty"`
	Options        []string `json:"options,omitempty"`
	Content        *string  `json:"content,omitempty"`
	AssessmentType *int     `json:"assessment_type,omitempty"`
	Title          *string  `json:"title,omitempty"`
	Description    *string  `json:"description,omitempty"`
}

// builder开始
type ExternalInterviewAssessmentDimensionBuilder struct {
	score              int
	scoreFlag          bool
	option             string
	optionFlag         bool
	options            []string
	optionsFlag        bool
	content            string
	contentFlag        bool
	assessmentType     int
	assessmentTypeFlag bool
	title              string
	titleFlag          bool
	description        string
	descriptionFlag    bool
}

func NewExternalInterviewAssessmentDimensionBuilder() *ExternalInterviewAssessmentDimensionBuilder {
	builder := &ExternalInterviewAssessmentDimensionBuilder{}
	return builder
}

func (builder *ExternalInterviewAssessmentDimensionBuilder) Score(score int) *ExternalInterviewAssessmentDimensionBuilder {
	builder.score = score
	builder.scoreFlag = true
	return builder
}
func (builder *ExternalInterviewAssessmentDimensionBuilder) Option(option string) *ExternalInterviewAssessmentDimensionBuilder {
	builder.option = option
	builder.optionFlag = true
	return builder
}
func (builder *ExternalInterviewAssessmentDimensionBuilder) Options(options []string) *ExternalInterviewAssessmentDimensionBuilder {
	builder.options = options
	builder.optionsFlag = true
	return builder
}
func (builder *ExternalInterviewAssessmentDimensionBuilder) Content(content string) *ExternalInterviewAssessmentDimensionBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}
func (builder *ExternalInterviewAssessmentDimensionBuilder) AssessmentType(assessmentType int) *ExternalInterviewAssessmentDimensionBuilder {
	builder.assessmentType = assessmentType
	builder.assessmentTypeFlag = true
	return builder
}
func (builder *ExternalInterviewAssessmentDimensionBuilder) Title(title string) *ExternalInterviewAssessmentDimensionBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}
func (builder *ExternalInterviewAssessmentDimensionBuilder) Description(description string) *ExternalInterviewAssessmentDimensionBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

func (builder *ExternalInterviewAssessmentDimensionBuilder) Build() *ExternalInterviewAssessmentDimension {
	req := &ExternalInterviewAssessmentDimension{}
	if builder.scoreFlag {
		req.Score = &builder.score

	}
	if builder.optionFlag {
		req.Option = &builder.option

	}
	if builder.optionsFlag {
		req.Options = builder.options
	}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.assessmentTypeFlag {
		req.AssessmentType = &builder.assessmentType

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	return req
}

// builder结束

type FiveStartScoringResult struct {
	HighestScoreDesc   *string  `json:"highest_score_desc,omitempty"`
	HighestScoreEnDesc *string  `json:"highest_score_en_desc,omitempty"`
	LowestScoreDesc    *string  `json:"lowest_score_desc,omitempty"`
	LowestScoreEnDesc  *string  `json:"lowest_score_en_desc,omitempty"`
	ScoreResult        *float64 `json:"score_result,omitempty"`
}

// builder开始
type FiveStartScoringResultBuilder struct {
	highestScoreDesc       string
	highestScoreDescFlag   bool
	highestScoreEnDesc     string
	highestScoreEnDescFlag bool
	lowestScoreDesc        string
	lowestScoreDescFlag    bool
	lowestScoreEnDesc      string
	lowestScoreEnDescFlag  bool
	scoreResult            float64
	scoreResultFlag        bool
}

func NewFiveStartScoringResultBuilder() *FiveStartScoringResultBuilder {
	builder := &FiveStartScoringResultBuilder{}
	return builder
}

func (builder *FiveStartScoringResultBuilder) HighestScoreDesc(highestScoreDesc string) *FiveStartScoringResultBuilder {
	builder.highestScoreDesc = highestScoreDesc
	builder.highestScoreDescFlag = true
	return builder
}
func (builder *FiveStartScoringResultBuilder) HighestScoreEnDesc(highestScoreEnDesc string) *FiveStartScoringResultBuilder {
	builder.highestScoreEnDesc = highestScoreEnDesc
	builder.highestScoreEnDescFlag = true
	return builder
}
func (builder *FiveStartScoringResultBuilder) LowestScoreDesc(lowestScoreDesc string) *FiveStartScoringResultBuilder {
	builder.lowestScoreDesc = lowestScoreDesc
	builder.lowestScoreDescFlag = true
	return builder
}
func (builder *FiveStartScoringResultBuilder) LowestScoreEnDesc(lowestScoreEnDesc string) *FiveStartScoringResultBuilder {
	builder.lowestScoreEnDesc = lowestScoreEnDesc
	builder.lowestScoreEnDescFlag = true
	return builder
}
func (builder *FiveStartScoringResultBuilder) ScoreResult(scoreResult float64) *FiveStartScoringResultBuilder {
	builder.scoreResult = scoreResult
	builder.scoreResultFlag = true
	return builder
}

func (builder *FiveStartScoringResultBuilder) Build() *FiveStartScoringResult {
	req := &FiveStartScoringResult{}
	if builder.highestScoreDescFlag {
		req.HighestScoreDesc = &builder.highestScoreDesc

	}
	if builder.highestScoreEnDescFlag {
		req.HighestScoreEnDesc = &builder.highestScoreEnDesc

	}
	if builder.lowestScoreDescFlag {
		req.LowestScoreDesc = &builder.lowestScoreDesc

	}
	if builder.lowestScoreEnDescFlag {
		req.LowestScoreEnDesc = &builder.lowestScoreEnDesc

	}
	if builder.scoreResultFlag {
		req.ScoreResult = &builder.scoreResult

	}
	return req
}

// builder结束

type I18n struct {
	ZhCn *string `json:"zh_cn,omitempty"`
	EnUs *string `json:"en_us,omitempty"`
}

// builder开始
type I18nBuilder struct {
	zhCn     string
	zhCnFlag bool
	enUs     string
	enUsFlag bool
}

func NewI18nBuilder() *I18nBuilder {
	builder := &I18nBuilder{}
	return builder
}

func (builder *I18nBuilder) ZhCn(zhCn string) *I18nBuilder {
	builder.zhCn = zhCn
	builder.zhCnFlag = true
	return builder
}
func (builder *I18nBuilder) EnUs(enUs string) *I18nBuilder {
	builder.enUs = enUs
	builder.enUsFlag = true
	return builder
}

func (builder *I18nBuilder) Build() *I18n {
	req := &I18n{}
	if builder.zhCnFlag {
		req.ZhCn = &builder.zhCn

	}
	if builder.enUsFlag {
		req.EnUs = &builder.enUs

	}
	return req
}

// builder结束

type IdNameObject struct {
	Id   *string `json:"id,omitempty"`
	Name *I18n   `json:"name,omitempty"`
}

// builder开始
type IdNameObjectBuilder struct {
	id       string
	idFlag   bool
	name     *I18n
	nameFlag bool
}

func NewIdNameObjectBuilder() *IdNameObjectBuilder {
	builder := &IdNameObjectBuilder{}
	return builder
}

func (builder *IdNameObjectBuilder) Id(id string) *IdNameObjectBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *IdNameObjectBuilder) Name(name *I18n) *IdNameObjectBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *IdNameObjectBuilder) Build() *IdNameObject {
	req := &IdNameObject{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	return req
}

// builder结束

type Identification struct {
	IdentificationNumber *string `json:"identification_number,omitempty"`
	IdentificationType   *int    `json:"identification_type,omitempty"`
}

// builder开始
type IdentificationBuilder struct {
	identificationNumber     string
	identificationNumberFlag bool
	identificationType       int
	identificationTypeFlag   bool
}

func NewIdentificationBuilder() *IdentificationBuilder {
	builder := &IdentificationBuilder{}
	return builder
}

func (builder *IdentificationBuilder) IdentificationNumber(identificationNumber string) *IdentificationBuilder {
	builder.identificationNumber = identificationNumber
	builder.identificationNumberFlag = true
	return builder
}
func (builder *IdentificationBuilder) IdentificationType(identificationType int) *IdentificationBuilder {
	builder.identificationType = identificationType
	builder.identificationTypeFlag = true
	return builder
}

func (builder *IdentificationBuilder) Build() *Identification {
	req := &Identification{}
	if builder.identificationNumberFlag {
		req.IdentificationNumber = &builder.identificationNumber

	}
	if builder.identificationTypeFlag {
		req.IdentificationType = &builder.identificationType

	}
	return req
}

// builder结束

type InternshipInfo struct {
	CareerType *int    `json:"career_type,omitempty"`
	Company    *string `json:"company,omitempty"`
	Desc       *string `json:"desc,omitempty"`
	EndTime    *int    `json:"end_time,omitempty"`
	StartTime  *int    `json:"start_time,omitempty"`
	Title      *string `json:"title,omitempty"`
}

// builder开始
type InternshipInfoBuilder struct {
	careerType     int
	careerTypeFlag bool
	company        string
	companyFlag    bool
	desc           string
	descFlag       bool
	endTime        int
	endTimeFlag    bool
	startTime      int
	startTimeFlag  bool
	title          string
	titleFlag      bool
}

func NewInternshipInfoBuilder() *InternshipInfoBuilder {
	builder := &InternshipInfoBuilder{}
	return builder
}

func (builder *InternshipInfoBuilder) CareerType(careerType int) *InternshipInfoBuilder {
	builder.careerType = careerType
	builder.careerTypeFlag = true
	return builder
}
func (builder *InternshipInfoBuilder) Company(company string) *InternshipInfoBuilder {
	builder.company = company
	builder.companyFlag = true
	return builder
}
func (builder *InternshipInfoBuilder) Desc(desc string) *InternshipInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}
func (builder *InternshipInfoBuilder) EndTime(endTime int) *InternshipInfoBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}
func (builder *InternshipInfoBuilder) StartTime(startTime int) *InternshipInfoBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}
func (builder *InternshipInfoBuilder) Title(title string) *InternshipInfoBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}

func (builder *InternshipInfoBuilder) Build() *InternshipInfo {
	req := &InternshipInfo{}
	if builder.careerTypeFlag {
		req.CareerType = &builder.careerType

	}
	if builder.companyFlag {
		req.Company = &builder.company

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	return req
}

// builder结束

type Interview struct {
	Id                  *string            `json:"id,omitempty"`
	BeginTime           *int               `json:"begin_time,omitempty"`
	EndTime             *int               `json:"end_time,omitempty"`
	Round               *int               `json:"round,omitempty"`
	StageId             *string            `json:"stage_id,omitempty"`
	InterviewRecordList []*InterviewRecord `json:"interview_record_list,omitempty"`
}

// builder开始
type InterviewBuilder struct {
	id                      string
	idFlag                  bool
	beginTime               int
	beginTimeFlag           bool
	endTime                 int
	endTimeFlag             bool
	round                   int
	roundFlag               bool
	stageId                 string
	stageIdFlag             bool
	interviewRecordList     []*InterviewRecord
	interviewRecordListFlag bool
}

func NewInterviewBuilder() *InterviewBuilder {
	builder := &InterviewBuilder{}
	return builder
}

func (builder *InterviewBuilder) Id(id string) *InterviewBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *InterviewBuilder) BeginTime(beginTime int) *InterviewBuilder {
	builder.beginTime = beginTime
	builder.beginTimeFlag = true
	return builder
}
func (builder *InterviewBuilder) EndTime(endTime int) *InterviewBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}
func (builder *InterviewBuilder) Round(round int) *InterviewBuilder {
	builder.round = round
	builder.roundFlag = true
	return builder
}
func (builder *InterviewBuilder) StageId(stageId string) *InterviewBuilder {
	builder.stageId = stageId
	builder.stageIdFlag = true
	return builder
}
func (builder *InterviewBuilder) InterviewRecordList(interviewRecordList []*InterviewRecord) *InterviewBuilder {
	builder.interviewRecordList = interviewRecordList
	builder.interviewRecordListFlag = true
	return builder
}

func (builder *InterviewBuilder) Build() *Interview {
	req := &Interview{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.beginTimeFlag {
		req.BeginTime = &builder.beginTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.roundFlag {
		req.Round = &builder.round

	}
	if builder.stageIdFlag {
		req.StageId = &builder.stageId

	}
	if builder.interviewRecordListFlag {
		req.InterviewRecordList = builder.interviewRecordList
	}
	return req
}

// builder结束

type InterviewAddress struct {
	Id       *string         `json:"id,omitempty"`
	Name     *I18n           `json:"name,omitempty"`
	District *CodeNameObject `json:"district,omitempty"`
	City     *CodeNameObject `json:"city,omitempty"`
	State    *CodeNameObject `json:"state,omitempty"`
	Country  *CodeNameObject `json:"country,omitempty"`
}

// builder开始
type InterviewAddressBuilder struct {
	id           string
	idFlag       bool
	name         *I18n
	nameFlag     bool
	district     *CodeNameObject
	districtFlag bool
	city         *CodeNameObject
	cityFlag     bool
	state        *CodeNameObject
	stateFlag    bool
	country      *CodeNameObject
	countryFlag  bool
}

func NewInterviewAddressBuilder() *InterviewAddressBuilder {
	builder := &InterviewAddressBuilder{}
	return builder
}

func (builder *InterviewAddressBuilder) Id(id string) *InterviewAddressBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *InterviewAddressBuilder) Name(name *I18n) *InterviewAddressBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *InterviewAddressBuilder) District(district *CodeNameObject) *InterviewAddressBuilder {
	builder.district = district
	builder.districtFlag = true
	return builder
}
func (builder *InterviewAddressBuilder) City(city *CodeNameObject) *InterviewAddressBuilder {
	builder.city = city
	builder.cityFlag = true
	return builder
}
func (builder *InterviewAddressBuilder) State(state *CodeNameObject) *InterviewAddressBuilder {
	builder.state = state
	builder.stateFlag = true
	return builder
}
func (builder *InterviewAddressBuilder) Country(country *CodeNameObject) *InterviewAddressBuilder {
	builder.country = country
	builder.countryFlag = true
	return builder
}

func (builder *InterviewAddressBuilder) Build() *InterviewAddress {
	req := &InterviewAddress{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.districtFlag {
		req.District = builder.district
	}
	if builder.cityFlag {
		req.City = builder.city
	}
	if builder.stateFlag {
		req.State = builder.state
	}
	if builder.countryFlag {
		req.Country = builder.country
	}
	return req
}

// builder结束

type InterviewAssessmentDimension struct {
	Id            *string                           `json:"id,omitempty"`
	Name          *I18n                             `json:"name,omitempty"`
	Description   *I18n                             `json:"description,omitempty"`
	Enabled       *bool                             `json:"enabled,omitempty"`
	Seq           *int                              `json:"seq,omitempty"`
	Required      *bool                             `json:"required,omitempty"`
	DimensionType *int                              `json:"dimension_type,omitempty"`
	Args          *InterviewAssessmentDimensionArgs `json:"args,omitempty"`
}

// builder开始
type InterviewAssessmentDimensionBuilder struct {
	id                string
	idFlag            bool
	name              *I18n
	nameFlag          bool
	description       *I18n
	descriptionFlag   bool
	enabled           bool
	enabledFlag       bool
	seq               int
	seqFlag           bool
	required          bool
	requiredFlag      bool
	dimensionType     int
	dimensionTypeFlag bool
	args              *InterviewAssessmentDimensionArgs
	argsFlag          bool
}

func NewInterviewAssessmentDimensionBuilder() *InterviewAssessmentDimensionBuilder {
	builder := &InterviewAssessmentDimensionBuilder{}
	return builder
}

func (builder *InterviewAssessmentDimensionBuilder) Id(id string) *InterviewAssessmentDimensionBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *InterviewAssessmentDimensionBuilder) Name(name *I18n) *InterviewAssessmentDimensionBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *InterviewAssessmentDimensionBuilder) Description(description *I18n) *InterviewAssessmentDimensionBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}
func (builder *InterviewAssessmentDimensionBuilder) Enabled(enabled bool) *InterviewAssessmentDimensionBuilder {
	builder.enabled = enabled
	builder.enabledFlag = true
	return builder
}
func (builder *InterviewAssessmentDimensionBuilder) Seq(seq int) *InterviewAssessmentDimensionBuilder {
	builder.seq = seq
	builder.seqFlag = true
	return builder
}
func (builder *InterviewAssessmentDimensionBuilder) Required(required bool) *InterviewAssessmentDimensionBuilder {
	builder.required = required
	builder.requiredFlag = true
	return builder
}
func (builder *InterviewAssessmentDimensionBuilder) DimensionType(dimensionType int) *InterviewAssessmentDimensionBuilder {
	builder.dimensionType = dimensionType
	builder.dimensionTypeFlag = true
	return builder
}
func (builder *InterviewAssessmentDimensionBuilder) Args(args *InterviewAssessmentDimensionArgs) *InterviewAssessmentDimensionBuilder {
	builder.args = args
	builder.argsFlag = true
	return builder
}

func (builder *InterviewAssessmentDimensionBuilder) Build() *InterviewAssessmentDimension {
	req := &InterviewAssessmentDimension{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.descriptionFlag {
		req.Description = builder.description
	}
	if builder.enabledFlag {
		req.Enabled = &builder.enabled

	}
	if builder.seqFlag {
		req.Seq = &builder.seq

	}
	if builder.requiredFlag {
		req.Required = &builder.required

	}
	if builder.dimensionTypeFlag {
		req.DimensionType = &builder.dimensionType

	}
	if builder.argsFlag {
		req.Args = builder.args
	}
	return req
}

// builder结束

type InterviewAssessmentDimensionArgs struct {
	ScoreList []*InterviewAssessmentDimensionArgsScore `json:"score_list,omitempty"`
}

// builder开始
type InterviewAssessmentDimensionArgsBuilder struct {
	scoreList     []*InterviewAssessmentDimensionArgsScore
	scoreListFlag bool
}

func NewInterviewAssessmentDimensionArgsBuilder() *InterviewAssessmentDimensionArgsBuilder {
	builder := &InterviewAssessmentDimensionArgsBuilder{}
	return builder
}

func (builder *InterviewAssessmentDimensionArgsBuilder) ScoreList(scoreList []*InterviewAssessmentDimensionArgsScore) *InterviewAssessmentDimensionArgsBuilder {
	builder.scoreList = scoreList
	builder.scoreListFlag = true
	return builder
}

func (builder *InterviewAssessmentDimensionArgsBuilder) Build() *InterviewAssessmentDimensionArgs {
	req := &InterviewAssessmentDimensionArgs{}
	if builder.scoreListFlag {
		req.ScoreList = builder.scoreList
	}
	return req
}

// builder结束

type InterviewAssessmentDimensionArgsScore struct {
	Id          *string `json:"id,omitempty"`
	Name        *I18n   `json:"name,omitempty"`
	Description *I18n   `json:"description,omitempty"`
	Enabled     *bool   `json:"enabled,omitempty"`
}

// builder开始
type InterviewAssessmentDimensionArgsScoreBuilder struct {
	id              string
	idFlag          bool
	name            *I18n
	nameFlag        bool
	description     *I18n
	descriptionFlag bool
	enabled         bool
	enabledFlag     bool
}

func NewInterviewAssessmentDimensionArgsScoreBuilder() *InterviewAssessmentDimensionArgsScoreBuilder {
	builder := &InterviewAssessmentDimensionArgsScoreBuilder{}
	return builder
}

func (builder *InterviewAssessmentDimensionArgsScoreBuilder) Id(id string) *InterviewAssessmentDimensionArgsScoreBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *InterviewAssessmentDimensionArgsScoreBuilder) Name(name *I18n) *InterviewAssessmentDimensionArgsScoreBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *InterviewAssessmentDimensionArgsScoreBuilder) Description(description *I18n) *InterviewAssessmentDimensionArgsScoreBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}
func (builder *InterviewAssessmentDimensionArgsScoreBuilder) Enabled(enabled bool) *InterviewAssessmentDimensionArgsScoreBuilder {
	builder.enabled = enabled
	builder.enabledFlag = true
	return builder
}

func (builder *InterviewAssessmentDimensionArgsScoreBuilder) Build() *InterviewAssessmentDimensionArgsScore {
	req := &InterviewAssessmentDimensionArgsScore{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.descriptionFlag {
		req.Description = builder.description
	}
	if builder.enabledFlag {
		req.Enabled = &builder.enabled

	}
	return req
}

// builder结束

type InterviewAssessmentTemplate struct {
	Id   *string                          `json:"id,omitempty"`
	Name *I18n                            `json:"name,omitempty"`
	Args *InterviewAssessmentTemplateArgs `json:"args,omitempty"`
}

// builder开始
type InterviewAssessmentTemplateBuilder struct {
	id       string
	idFlag   bool
	name     *I18n
	nameFlag bool
	args     *InterviewAssessmentTemplateArgs
	argsFlag bool
}

func NewInterviewAssessmentTemplateBuilder() *InterviewAssessmentTemplateBuilder {
	builder := &InterviewAssessmentTemplateBuilder{}
	return builder
}

func (builder *InterviewAssessmentTemplateBuilder) Id(id string) *InterviewAssessmentTemplateBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *InterviewAssessmentTemplateBuilder) Name(name *I18n) *InterviewAssessmentTemplateBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *InterviewAssessmentTemplateBuilder) Args(args *InterviewAssessmentTemplateArgs) *InterviewAssessmentTemplateBuilder {
	builder.args = args
	builder.argsFlag = true
	return builder
}

func (builder *InterviewAssessmentTemplateBuilder) Build() *InterviewAssessmentTemplate {
	req := &InterviewAssessmentTemplate{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.argsFlag {
		req.Args = builder.args
	}
	return req
}

// builder结束

type InterviewAssessmentTemplateArgs struct {
	ConclusionDimension *InterviewAssessmentDimension   `json:"conclusion_dimension,omitempty"`
	ScoreDimension      *InterviewAssessmentDimension   `json:"score_dimension,omitempty"`
	ContentDimension    *InterviewAssessmentDimension   `json:"content_dimension,omitempty"`
	CustomDimensionList []*InterviewAssessmentDimension `json:"custom_dimension_list,omitempty"`
}

// builder开始
type InterviewAssessmentTemplateArgsBuilder struct {
	conclusionDimension     *InterviewAssessmentDimension
	conclusionDimensionFlag bool
	scoreDimension          *InterviewAssessmentDimension
	scoreDimensionFlag      bool
	contentDimension        *InterviewAssessmentDimension
	contentDimensionFlag    bool
	customDimensionList     []*InterviewAssessmentDimension
	customDimensionListFlag bool
}

func NewInterviewAssessmentTemplateArgsBuilder() *InterviewAssessmentTemplateArgsBuilder {
	builder := &InterviewAssessmentTemplateArgsBuilder{}
	return builder
}

func (builder *InterviewAssessmentTemplateArgsBuilder) ConclusionDimension(conclusionDimension *InterviewAssessmentDimension) *InterviewAssessmentTemplateArgsBuilder {
	builder.conclusionDimension = conclusionDimension
	builder.conclusionDimensionFlag = true
	return builder
}
func (builder *InterviewAssessmentTemplateArgsBuilder) ScoreDimension(scoreDimension *InterviewAssessmentDimension) *InterviewAssessmentTemplateArgsBuilder {
	builder.scoreDimension = scoreDimension
	builder.scoreDimensionFlag = true
	return builder
}
func (builder *InterviewAssessmentTemplateArgsBuilder) ContentDimension(contentDimension *InterviewAssessmentDimension) *InterviewAssessmentTemplateArgsBuilder {
	builder.contentDimension = contentDimension
	builder.contentDimensionFlag = true
	return builder
}
func (builder *InterviewAssessmentTemplateArgsBuilder) CustomDimensionList(customDimensionList []*InterviewAssessmentDimension) *InterviewAssessmentTemplateArgsBuilder {
	builder.customDimensionList = customDimensionList
	builder.customDimensionListFlag = true
	return builder
}

func (builder *InterviewAssessmentTemplateArgsBuilder) Build() *InterviewAssessmentTemplateArgs {
	req := &InterviewAssessmentTemplateArgs{}
	if builder.conclusionDimensionFlag {
		req.ConclusionDimension = builder.conclusionDimension
	}
	if builder.scoreDimensionFlag {
		req.ScoreDimension = builder.scoreDimension
	}
	if builder.contentDimensionFlag {
		req.ContentDimension = builder.contentDimension
	}
	if builder.customDimensionListFlag {
		req.CustomDimensionList = builder.customDimensionList
	}
	return req
}

// builder结束

type InterviewDimensionAssessment struct {
	Id                 *string                    `json:"id,omitempty"`
	Name               *I18n                      `json:"name,omitempty"`
	Content            *string                    `json:"content,omitempty"`
	DimensionId        *string                    `json:"dimension_id,omitempty"`
	DimensionScore     *InterviewDimensionScore   `json:"dimension_score,omitempty"`
	DimensionScoreList []*InterviewDimensionScore `json:"dimension_score_list,omitempty"`
	DimensionType      *int                       `json:"dimension_type,omitempty"`
}

// builder开始
type InterviewDimensionAssessmentBuilder struct {
	id                     string
	idFlag                 bool
	name                   *I18n
	nameFlag               bool
	content                string
	contentFlag            bool
	dimensionId            string
	dimensionIdFlag        bool
	dimensionScore         *InterviewDimensionScore
	dimensionScoreFlag     bool
	dimensionScoreList     []*InterviewDimensionScore
	dimensionScoreListFlag bool
	dimensionType          int
	dimensionTypeFlag      bool
}

func NewInterviewDimensionAssessmentBuilder() *InterviewDimensionAssessmentBuilder {
	builder := &InterviewDimensionAssessmentBuilder{}
	return builder
}

func (builder *InterviewDimensionAssessmentBuilder) Id(id string) *InterviewDimensionAssessmentBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *InterviewDimensionAssessmentBuilder) Name(name *I18n) *InterviewDimensionAssessmentBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *InterviewDimensionAssessmentBuilder) Content(content string) *InterviewDimensionAssessmentBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}
func (builder *InterviewDimensionAssessmentBuilder) DimensionId(dimensionId string) *InterviewDimensionAssessmentBuilder {
	builder.dimensionId = dimensionId
	builder.dimensionIdFlag = true
	return builder
}
func (builder *InterviewDimensionAssessmentBuilder) DimensionScore(dimensionScore *InterviewDimensionScore) *InterviewDimensionAssessmentBuilder {
	builder.dimensionScore = dimensionScore
	builder.dimensionScoreFlag = true
	return builder
}
func (builder *InterviewDimensionAssessmentBuilder) DimensionScoreList(dimensionScoreList []*InterviewDimensionScore) *InterviewDimensionAssessmentBuilder {
	builder.dimensionScoreList = dimensionScoreList
	builder.dimensionScoreListFlag = true
	return builder
}
func (builder *InterviewDimensionAssessmentBuilder) DimensionType(dimensionType int) *InterviewDimensionAssessmentBuilder {
	builder.dimensionType = dimensionType
	builder.dimensionTypeFlag = true
	return builder
}

func (builder *InterviewDimensionAssessmentBuilder) Build() *InterviewDimensionAssessment {
	req := &InterviewDimensionAssessment{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.dimensionIdFlag {
		req.DimensionId = &builder.dimensionId

	}
	if builder.dimensionScoreFlag {
		req.DimensionScore = builder.dimensionScore
	}
	if builder.dimensionScoreListFlag {
		req.DimensionScoreList = builder.dimensionScoreList
	}
	if builder.dimensionTypeFlag {
		req.DimensionType = &builder.dimensionType

	}
	return req
}

// builder结束

type InterviewDimensionScore struct {
	Id   *string `json:"id,omitempty"`
	Name *I18n   `json:"name,omitempty"`
}

// builder开始
type InterviewDimensionScoreBuilder struct {
	id       string
	idFlag   bool
	name     *I18n
	nameFlag bool
}

func NewInterviewDimensionScoreBuilder() *InterviewDimensionScoreBuilder {
	builder := &InterviewDimensionScoreBuilder{}
	return builder
}

func (builder *InterviewDimensionScoreBuilder) Id(id string) *InterviewDimensionScoreBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *InterviewDimensionScoreBuilder) Name(name *I18n) *InterviewDimensionScoreBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *InterviewDimensionScoreBuilder) Build() *InterviewDimensionScore {
	req := &InterviewDimensionScore{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	return req
}

// builder结束

type InterviewExtend struct {
	Id                         *string                 `json:"id,omitempty"`
	BeginTime                  *int                    `json:"begin_time,omitempty"`
	EndTime                    *int                    `json:"end_time,omitempty"`
	Round                      *int                    `json:"round,omitempty"`
	InterviewRecordList        []*InterviewRecord      `json:"interview_record_list,omitempty"`
	StageId                    *string                 `json:"stage_id,omitempty"`
	ApplicationId              *string                 `json:"application_id,omitempty"`
	Stage                      *IdNameObject           `json:"stage,omitempty"`
	Creator                    *IdNameObject           `json:"creator,omitempty"`
	BizCreateTime              *int                    `json:"biz_create_time,omitempty"`
	BizModifyTime              *int                    `json:"biz_modify_time,omitempty"`
	InterviewRoundSummary      *int                    `json:"interview_round_summary,omitempty"`
	InterviewArrangementId     *string                 `json:"interview_arrangement_id,omitempty"`
	InterviewType              *int                    `json:"interview_type,omitempty"`
	TalentTimeZone             *CodeNameObject         `json:"talent_time_zone,omitempty"`
	ContactUser                *IdNameObject           `json:"contact_user,omitempty"`
	ContactMobile              *string                 `json:"contact_mobile,omitempty"`
	Remark                     *string                 `json:"remark,omitempty"`
	Address                    *InterviewAddress       `json:"address,omitempty"`
	VideoType                  *int                    `json:"video_type,omitempty"`
	ArrangementStatus          *int                    `json:"arrangement_status,omitempty"`
	ArrangementType            *int                    `json:"arrangement_type,omitempty"`
	ArrangementAppointmentKind *int                    `json:"arrangement_appointment_kind,omitempty"`
	MeetingRoomList            []*InterviewMeetingRoom `json:"meeting_room_list,omitempty"`
	InterviewRoundType         *IdNameObject           `json:"interview_round_type,omitempty"`
}

// builder开始
type InterviewExtendBuilder struct {
	id                             string
	idFlag                         bool
	beginTime                      int
	beginTimeFlag                  bool
	endTime                        int
	endTimeFlag                    bool
	round                          int
	roundFlag                      bool
	interviewRecordList            []*InterviewRecord
	interviewRecordListFlag        bool
	stageId                        string
	stageIdFlag                    bool
	applicationId                  string
	applicationIdFlag              bool
	stage                          *IdNameObject
	stageFlag                      bool
	creator                        *IdNameObject
	creatorFlag                    bool
	bizCreateTime                  int
	bizCreateTimeFlag              bool
	bizModifyTime                  int
	bizModifyTimeFlag              bool
	interviewRoundSummary          int
	interviewRoundSummaryFlag      bool
	interviewArrangementId         string
	interviewArrangementIdFlag     bool
	interviewType                  int
	interviewTypeFlag              bool
	talentTimeZone                 *CodeNameObject
	talentTimeZoneFlag             bool
	contactUser                    *IdNameObject
	contactUserFlag                bool
	contactMobile                  string
	contactMobileFlag              bool
	remark                         string
	remarkFlag                     bool
	address                        *InterviewAddress
	addressFlag                    bool
	videoType                      int
	videoTypeFlag                  bool
	arrangementStatus              int
	arrangementStatusFlag          bool
	arrangementType                int
	arrangementTypeFlag            bool
	arrangementAppointmentKind     int
	arrangementAppointmentKindFlag bool
	meetingRoomList                []*InterviewMeetingRoom
	meetingRoomListFlag            bool
	interviewRoundType             *IdNameObject
	interviewRoundTypeFlag         bool
}

func NewInterviewExtendBuilder() *InterviewExtendBuilder {
	builder := &InterviewExtendBuilder{}
	return builder
}

func (builder *InterviewExtendBuilder) Id(id string) *InterviewExtendBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *InterviewExtendBuilder) BeginTime(beginTime int) *InterviewExtendBuilder {
	builder.beginTime = beginTime
	builder.beginTimeFlag = true
	return builder
}
func (builder *InterviewExtendBuilder) EndTime(endTime int) *InterviewExtendBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}
func (builder *InterviewExtendBuilder) Round(round int) *InterviewExtendBuilder {
	builder.round = round
	builder.roundFlag = true
	return builder
}
func (builder *InterviewExtendBuilder) InterviewRecordList(interviewRecordList []*InterviewRecord) *InterviewExtendBuilder {
	builder.interviewRecordList = interviewRecordList
	builder.interviewRecordListFlag = true
	return builder
}
func (builder *InterviewExtendBuilder) StageId(stageId string) *InterviewExtendBuilder {
	builder.stageId = stageId
	builder.stageIdFlag = true
	return builder
}
func (builder *InterviewExtendBuilder) ApplicationId(applicationId string) *InterviewExtendBuilder {
	builder.applicationId = applicationId
	builder.applicationIdFlag = true
	return builder
}
func (builder *InterviewExtendBuilder) Stage(stage *IdNameObject) *InterviewExtendBuilder {
	builder.stage = stage
	builder.stageFlag = true
	return builder
}
func (builder *InterviewExtendBuilder) Creator(creator *IdNameObject) *InterviewExtendBuilder {
	builder.creator = creator
	builder.creatorFlag = true
	return builder
}
func (builder *InterviewExtendBuilder) BizCreateTime(bizCreateTime int) *InterviewExtendBuilder {
	builder.bizCreateTime = bizCreateTime
	builder.bizCreateTimeFlag = true
	return builder
}
func (builder *InterviewExtendBuilder) BizModifyTime(bizModifyTime int) *InterviewExtendBuilder {
	builder.bizModifyTime = bizModifyTime
	builder.bizModifyTimeFlag = true
	return builder
}
func (builder *InterviewExtendBuilder) InterviewRoundSummary(interviewRoundSummary int) *InterviewExtendBuilder {
	builder.interviewRoundSummary = interviewRoundSummary
	builder.interviewRoundSummaryFlag = true
	return builder
}
func (builder *InterviewExtendBuilder) InterviewArrangementId(interviewArrangementId string) *InterviewExtendBuilder {
	builder.interviewArrangementId = interviewArrangementId
	builder.interviewArrangementIdFlag = true
	return builder
}
func (builder *InterviewExtendBuilder) InterviewType(interviewType int) *InterviewExtendBuilder {
	builder.interviewType = interviewType
	builder.interviewTypeFlag = true
	return builder
}
func (builder *InterviewExtendBuilder) TalentTimeZone(talentTimeZone *CodeNameObject) *InterviewExtendBuilder {
	builder.talentTimeZone = talentTimeZone
	builder.talentTimeZoneFlag = true
	return builder
}
func (builder *InterviewExtendBuilder) ContactUser(contactUser *IdNameObject) *InterviewExtendBuilder {
	builder.contactUser = contactUser
	builder.contactUserFlag = true
	return builder
}
func (builder *InterviewExtendBuilder) ContactMobile(contactMobile string) *InterviewExtendBuilder {
	builder.contactMobile = contactMobile
	builder.contactMobileFlag = true
	return builder
}
func (builder *InterviewExtendBuilder) Remark(remark string) *InterviewExtendBuilder {
	builder.remark = remark
	builder.remarkFlag = true
	return builder
}
func (builder *InterviewExtendBuilder) Address(address *InterviewAddress) *InterviewExtendBuilder {
	builder.address = address
	builder.addressFlag = true
	return builder
}
func (builder *InterviewExtendBuilder) VideoType(videoType int) *InterviewExtendBuilder {
	builder.videoType = videoType
	builder.videoTypeFlag = true
	return builder
}
func (builder *InterviewExtendBuilder) ArrangementStatus(arrangementStatus int) *InterviewExtendBuilder {
	builder.arrangementStatus = arrangementStatus
	builder.arrangementStatusFlag = true
	return builder
}
func (builder *InterviewExtendBuilder) ArrangementType(arrangementType int) *InterviewExtendBuilder {
	builder.arrangementType = arrangementType
	builder.arrangementTypeFlag = true
	return builder
}
func (builder *InterviewExtendBuilder) ArrangementAppointmentKind(arrangementAppointmentKind int) *InterviewExtendBuilder {
	builder.arrangementAppointmentKind = arrangementAppointmentKind
	builder.arrangementAppointmentKindFlag = true
	return builder
}
func (builder *InterviewExtendBuilder) MeetingRoomList(meetingRoomList []*InterviewMeetingRoom) *InterviewExtendBuilder {
	builder.meetingRoomList = meetingRoomList
	builder.meetingRoomListFlag = true
	return builder
}
func (builder *InterviewExtendBuilder) InterviewRoundType(interviewRoundType *IdNameObject) *InterviewExtendBuilder {
	builder.interviewRoundType = interviewRoundType
	builder.interviewRoundTypeFlag = true
	return builder
}

func (builder *InterviewExtendBuilder) Build() *InterviewExtend {
	req := &InterviewExtend{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.beginTimeFlag {
		req.BeginTime = &builder.beginTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.roundFlag {
		req.Round = &builder.round

	}
	if builder.interviewRecordListFlag {
		req.InterviewRecordList = builder.interviewRecordList
	}
	if builder.stageIdFlag {
		req.StageId = &builder.stageId

	}
	if builder.applicationIdFlag {
		req.ApplicationId = &builder.applicationId

	}
	if builder.stageFlag {
		req.Stage = builder.stage
	}
	if builder.creatorFlag {
		req.Creator = builder.creator
	}
	if builder.bizCreateTimeFlag {
		req.BizCreateTime = &builder.bizCreateTime

	}
	if builder.bizModifyTimeFlag {
		req.BizModifyTime = &builder.bizModifyTime

	}
	if builder.interviewRoundSummaryFlag {
		req.InterviewRoundSummary = &builder.interviewRoundSummary

	}
	if builder.interviewArrangementIdFlag {
		req.InterviewArrangementId = &builder.interviewArrangementId

	}
	if builder.interviewTypeFlag {
		req.InterviewType = &builder.interviewType

	}
	if builder.talentTimeZoneFlag {
		req.TalentTimeZone = builder.talentTimeZone
	}
	if builder.contactUserFlag {
		req.ContactUser = builder.contactUser
	}
	if builder.contactMobileFlag {
		req.ContactMobile = &builder.contactMobile

	}
	if builder.remarkFlag {
		req.Remark = &builder.remark

	}
	if builder.addressFlag {
		req.Address = builder.address
	}
	if builder.videoTypeFlag {
		req.VideoType = &builder.videoType

	}
	if builder.arrangementStatusFlag {
		req.ArrangementStatus = &builder.arrangementStatus

	}
	if builder.arrangementTypeFlag {
		req.ArrangementType = &builder.arrangementType

	}
	if builder.arrangementAppointmentKindFlag {
		req.ArrangementAppointmentKind = &builder.arrangementAppointmentKind

	}
	if builder.meetingRoomListFlag {
		req.MeetingRoomList = builder.meetingRoomList
	}
	if builder.interviewRoundTypeFlag {
		req.InterviewRoundType = builder.interviewRoundType
	}
	return req
}

// builder结束

type InterviewMeetingRoom struct {
	RoomId         *string `json:"room_id,omitempty"`
	RoomName       *string `json:"room_name,omitempty"`
	BuildingName   *string `json:"building_name,omitempty"`
	ReservedStatus *int    `json:"reserved_status,omitempty"`
	FloorName      *string `json:"floor_name,omitempty"`
}

// builder开始
type InterviewMeetingRoomBuilder struct {
	roomId             string
	roomIdFlag         bool
	roomName           string
	roomNameFlag       bool
	buildingName       string
	buildingNameFlag   bool
	reservedStatus     int
	reservedStatusFlag bool
	floorName          string
	floorNameFlag      bool
}

func NewInterviewMeetingRoomBuilder() *InterviewMeetingRoomBuilder {
	builder := &InterviewMeetingRoomBuilder{}
	return builder
}

func (builder *InterviewMeetingRoomBuilder) RoomId(roomId string) *InterviewMeetingRoomBuilder {
	builder.roomId = roomId
	builder.roomIdFlag = true
	return builder
}
func (builder *InterviewMeetingRoomBuilder) RoomName(roomName string) *InterviewMeetingRoomBuilder {
	builder.roomName = roomName
	builder.roomNameFlag = true
	return builder
}
func (builder *InterviewMeetingRoomBuilder) BuildingName(buildingName string) *InterviewMeetingRoomBuilder {
	builder.buildingName = buildingName
	builder.buildingNameFlag = true
	return builder
}
func (builder *InterviewMeetingRoomBuilder) ReservedStatus(reservedStatus int) *InterviewMeetingRoomBuilder {
	builder.reservedStatus = reservedStatus
	builder.reservedStatusFlag = true
	return builder
}
func (builder *InterviewMeetingRoomBuilder) FloorName(floorName string) *InterviewMeetingRoomBuilder {
	builder.floorName = floorName
	builder.floorNameFlag = true
	return builder
}

func (builder *InterviewMeetingRoomBuilder) Build() *InterviewMeetingRoom {
	req := &InterviewMeetingRoom{}
	if builder.roomIdFlag {
		req.RoomId = &builder.roomId

	}
	if builder.roomNameFlag {
		req.RoomName = &builder.roomName

	}
	if builder.buildingNameFlag {
		req.BuildingName = &builder.buildingName

	}
	if builder.reservedStatusFlag {
		req.ReservedStatus = &builder.reservedStatus

	}
	if builder.floorNameFlag {
		req.FloorName = &builder.floorName

	}
	return req
}

// builder结束

type InterviewRecord struct {
	Id                      *string                         `json:"id,omitempty"`
	UserId                  *string                         `json:"user_id,omitempty"`
	Content                 *string                         `json:"content,omitempty"`
	MinJobLevelId           *string                         `json:"min_job_level_id,omitempty"`
	MaxJobLevelId           *string                         `json:"max_job_level_id,omitempty"`
	CommitStatus            *int                            `json:"commit_status,omitempty"`
	Conclusion              *int                            `json:"conclusion,omitempty"`
	InterviewScore          *InterviewScore                 `json:"interview_score,omitempty"`
	Interviewer             *IdNameObject                   `json:"interviewer,omitempty"`
	DimensionAssessmentList []*InterviewDimensionAssessment `json:"dimension_assessment_list,omitempty"`
}

// builder开始
type InterviewRecordBuilder struct {
	id                          string
	idFlag                      bool
	userId                      string
	userIdFlag                  bool
	content                     string
	contentFlag                 bool
	minJobLevelId               string
	minJobLevelIdFlag           bool
	maxJobLevelId               string
	maxJobLevelIdFlag           bool
	commitStatus                int
	commitStatusFlag            bool
	conclusion                  int
	conclusionFlag              bool
	interviewScore              *InterviewScore
	interviewScoreFlag          bool
	interviewer                 *IdNameObject
	interviewerFlag             bool
	dimensionAssessmentList     []*InterviewDimensionAssessment
	dimensionAssessmentListFlag bool
}

func NewInterviewRecordBuilder() *InterviewRecordBuilder {
	builder := &InterviewRecordBuilder{}
	return builder
}

func (builder *InterviewRecordBuilder) Id(id string) *InterviewRecordBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *InterviewRecordBuilder) UserId(userId string) *InterviewRecordBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}
func (builder *InterviewRecordBuilder) Content(content string) *InterviewRecordBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}
func (builder *InterviewRecordBuilder) MinJobLevelId(minJobLevelId string) *InterviewRecordBuilder {
	builder.minJobLevelId = minJobLevelId
	builder.minJobLevelIdFlag = true
	return builder
}
func (builder *InterviewRecordBuilder) MaxJobLevelId(maxJobLevelId string) *InterviewRecordBuilder {
	builder.maxJobLevelId = maxJobLevelId
	builder.maxJobLevelIdFlag = true
	return builder
}
func (builder *InterviewRecordBuilder) CommitStatus(commitStatus int) *InterviewRecordBuilder {
	builder.commitStatus = commitStatus
	builder.commitStatusFlag = true
	return builder
}
func (builder *InterviewRecordBuilder) Conclusion(conclusion int) *InterviewRecordBuilder {
	builder.conclusion = conclusion
	builder.conclusionFlag = true
	return builder
}
func (builder *InterviewRecordBuilder) InterviewScore(interviewScore *InterviewScore) *InterviewRecordBuilder {
	builder.interviewScore = interviewScore
	builder.interviewScoreFlag = true
	return builder
}
func (builder *InterviewRecordBuilder) Interviewer(interviewer *IdNameObject) *InterviewRecordBuilder {
	builder.interviewer = interviewer
	builder.interviewerFlag = true
	return builder
}
func (builder *InterviewRecordBuilder) DimensionAssessmentList(dimensionAssessmentList []*InterviewDimensionAssessment) *InterviewRecordBuilder {
	builder.dimensionAssessmentList = dimensionAssessmentList
	builder.dimensionAssessmentListFlag = true
	return builder
}

func (builder *InterviewRecordBuilder) Build() *InterviewRecord {
	req := &InterviewRecord{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.minJobLevelIdFlag {
		req.MinJobLevelId = &builder.minJobLevelId

	}
	if builder.maxJobLevelIdFlag {
		req.MaxJobLevelId = &builder.maxJobLevelId

	}
	if builder.commitStatusFlag {
		req.CommitStatus = &builder.commitStatus

	}
	if builder.conclusionFlag {
		req.Conclusion = &builder.conclusion

	}
	if builder.interviewScoreFlag {
		req.InterviewScore = builder.interviewScore
	}
	if builder.interviewerFlag {
		req.Interviewer = builder.interviewer
	}
	if builder.dimensionAssessmentListFlag {
		req.DimensionAssessmentList = builder.dimensionAssessmentList
	}
	return req
}

// builder结束

type InterviewRecordTemplate struct {
	AssessmentTemplate *InterviewAssessmentTemplate `json:"assessment_template,omitempty"`
}

// builder开始
type InterviewRecordTemplateBuilder struct {
	assessmentTemplate     *InterviewAssessmentTemplate
	assessmentTemplateFlag bool
}

func NewInterviewRecordTemplateBuilder() *InterviewRecordTemplateBuilder {
	builder := &InterviewRecordTemplateBuilder{}
	return builder
}

func (builder *InterviewRecordTemplateBuilder) AssessmentTemplate(assessmentTemplate *InterviewAssessmentTemplate) *InterviewRecordTemplateBuilder {
	builder.assessmentTemplate = assessmentTemplate
	builder.assessmentTemplateFlag = true
	return builder
}

func (builder *InterviewRecordTemplateBuilder) Build() *InterviewRecordTemplate {
	req := &InterviewRecordTemplate{}
	if builder.assessmentTemplateFlag {
		req.AssessmentTemplate = builder.assessmentTemplate
	}
	return req
}

// builder结束

type InterviewRegistrationSchema struct {
	Id                *string         `json:"id,omitempty"`
	Name              *string         `json:"name,omitempty"`
	IsUsedAsInterview *bool           `json:"is_used_as_interview,omitempty"`
	ObjectList        []*CommonSchema `json:"object_list,omitempty"`
}

// builder开始
type InterviewRegistrationSchemaBuilder struct {
	id                    string
	idFlag                bool
	name                  string
	nameFlag              bool
	isUsedAsInterview     bool
	isUsedAsInterviewFlag bool
	objectList            []*CommonSchema
	objectListFlag        bool
}

func NewInterviewRegistrationSchemaBuilder() *InterviewRegistrationSchemaBuilder {
	builder := &InterviewRegistrationSchemaBuilder{}
	return builder
}

func (builder *InterviewRegistrationSchemaBuilder) Id(id string) *InterviewRegistrationSchemaBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *InterviewRegistrationSchemaBuilder) Name(name string) *InterviewRegistrationSchemaBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *InterviewRegistrationSchemaBuilder) IsUsedAsInterview(isUsedAsInterview bool) *InterviewRegistrationSchemaBuilder {
	builder.isUsedAsInterview = isUsedAsInterview
	builder.isUsedAsInterviewFlag = true
	return builder
}
func (builder *InterviewRegistrationSchemaBuilder) ObjectList(objectList []*CommonSchema) *InterviewRegistrationSchemaBuilder {
	builder.objectList = objectList
	builder.objectListFlag = true
	return builder
}

func (builder *InterviewRegistrationSchemaBuilder) Build() *InterviewRegistrationSchema {
	req := &InterviewRegistrationSchema{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.isUsedAsInterviewFlag {
		req.IsUsedAsInterview = &builder.isUsedAsInterview

	}
	if builder.objectListFlag {
		req.ObjectList = builder.objectList
	}
	return req
}

// builder结束

type InterviewRoundType struct {
	Id                              *string                               `json:"id,omitempty"`
	BizId                           *string                               `json:"biz_id,omitempty"`
	Name                            *I18n                                 `json:"name,omitempty"`
	ProcessType                     *int                                  `json:"process_type,omitempty"`
	ActiveStatus                    *int                                  `json:"active_status,omitempty"`
	InterviewAssessmentTemplateInfo *InterviewRoundTypeAssessmentTemplate `json:"interview_assessment_template_info,omitempty"`
}

// builder开始
type InterviewRoundTypeBuilder struct {
	id                                  string
	idFlag                              bool
	bizId                               string
	bizIdFlag                           bool
	name                                *I18n
	nameFlag                            bool
	processType                         int
	processTypeFlag                     bool
	activeStatus                        int
	activeStatusFlag                    bool
	interviewAssessmentTemplateInfo     *InterviewRoundTypeAssessmentTemplate
	interviewAssessmentTemplateInfoFlag bool
}

func NewInterviewRoundTypeBuilder() *InterviewRoundTypeBuilder {
	builder := &InterviewRoundTypeBuilder{}
	return builder
}

func (builder *InterviewRoundTypeBuilder) Id(id string) *InterviewRoundTypeBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *InterviewRoundTypeBuilder) BizId(bizId string) *InterviewRoundTypeBuilder {
	builder.bizId = bizId
	builder.bizIdFlag = true
	return builder
}
func (builder *InterviewRoundTypeBuilder) Name(name *I18n) *InterviewRoundTypeBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *InterviewRoundTypeBuilder) ProcessType(processType int) *InterviewRoundTypeBuilder {
	builder.processType = processType
	builder.processTypeFlag = true
	return builder
}
func (builder *InterviewRoundTypeBuilder) ActiveStatus(activeStatus int) *InterviewRoundTypeBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}
func (builder *InterviewRoundTypeBuilder) InterviewAssessmentTemplateInfo(interviewAssessmentTemplateInfo *InterviewRoundTypeAssessmentTemplate) *InterviewRoundTypeBuilder {
	builder.interviewAssessmentTemplateInfo = interviewAssessmentTemplateInfo
	builder.interviewAssessmentTemplateInfoFlag = true
	return builder
}

func (builder *InterviewRoundTypeBuilder) Build() *InterviewRoundType {
	req := &InterviewRoundType{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.bizIdFlag {
		req.BizId = &builder.bizId

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.processTypeFlag {
		req.ProcessType = &builder.processType

	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	if builder.interviewAssessmentTemplateInfoFlag {
		req.InterviewAssessmentTemplateInfo = builder.interviewAssessmentTemplateInfo
	}
	return req
}

// builder结束

type InterviewRoundTypeAssessmentTemplate struct {
	Id    *string `json:"id,omitempty"`
	BizId *string `json:"biz_id,omitempty"`
	Name  *I18n   `json:"name,omitempty"`
}

// builder开始
type InterviewRoundTypeAssessmentTemplateBuilder struct {
	id        string
	idFlag    bool
	bizId     string
	bizIdFlag bool
	name      *I18n
	nameFlag  bool
}

func NewInterviewRoundTypeAssessmentTemplateBuilder() *InterviewRoundTypeAssessmentTemplateBuilder {
	builder := &InterviewRoundTypeAssessmentTemplateBuilder{}
	return builder
}

func (builder *InterviewRoundTypeAssessmentTemplateBuilder) Id(id string) *InterviewRoundTypeAssessmentTemplateBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *InterviewRoundTypeAssessmentTemplateBuilder) BizId(bizId string) *InterviewRoundTypeAssessmentTemplateBuilder {
	builder.bizId = bizId
	builder.bizIdFlag = true
	return builder
}
func (builder *InterviewRoundTypeAssessmentTemplateBuilder) Name(name *I18n) *InterviewRoundTypeAssessmentTemplateBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *InterviewRoundTypeAssessmentTemplateBuilder) Build() *InterviewRoundTypeAssessmentTemplate {
	req := &InterviewRoundTypeAssessmentTemplate{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.bizIdFlag {
		req.BizId = &builder.bizId

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	return req
}

// builder结束

type InterviewScore struct {
	Id            *string `json:"id,omitempty"`
	Level         *int    `json:"level,omitempty"`
	ZhName        *string `json:"zh_name,omitempty"`
	ZhDescription *string `json:"zh_description,omitempty"`
	EnName        *string `json:"en_name,omitempty"`
	EnDescription *string `json:"en_description,omitempty"`
}

// builder开始
type InterviewScoreBuilder struct {
	id                string
	idFlag            bool
	level             int
	levelFlag         bool
	zhName            string
	zhNameFlag        bool
	zhDescription     string
	zhDescriptionFlag bool
	enName            string
	enNameFlag        bool
	enDescription     string
	enDescriptionFlag bool
}

func NewInterviewScoreBuilder() *InterviewScoreBuilder {
	builder := &InterviewScoreBuilder{}
	return builder
}

func (builder *InterviewScoreBuilder) Id(id string) *InterviewScoreBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *InterviewScoreBuilder) Level(level int) *InterviewScoreBuilder {
	builder.level = level
	builder.levelFlag = true
	return builder
}
func (builder *InterviewScoreBuilder) ZhName(zhName string) *InterviewScoreBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}
func (builder *InterviewScoreBuilder) ZhDescription(zhDescription string) *InterviewScoreBuilder {
	builder.zhDescription = zhDescription
	builder.zhDescriptionFlag = true
	return builder
}
func (builder *InterviewScoreBuilder) EnName(enName string) *InterviewScoreBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}
func (builder *InterviewScoreBuilder) EnDescription(enDescription string) *InterviewScoreBuilder {
	builder.enDescription = enDescription
	builder.enDescriptionFlag = true
	return builder
}

func (builder *InterviewScoreBuilder) Build() *InterviewScore {
	req := &InterviewScore{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.levelFlag {
		req.Level = &builder.level

	}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.zhDescriptionFlag {
		req.ZhDescription = &builder.zhDescription

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.enDescriptionFlag {
		req.EnDescription = &builder.enDescription

	}
	return req
}

// builder结束

type InterviewTask struct {
	Id             *string `json:"id,omitempty"`
	JobId          *string `json:"job_id,omitempty"`
	TalentId       *string `json:"talent_id,omitempty"`
	ApplicationId  *string `json:"application_id,omitempty"`
	ActivityStatus *int    `json:"activity_status,omitempty"`
}

// builder开始
type InterviewTaskBuilder struct {
	id                 string
	idFlag             bool
	jobId              string
	jobIdFlag          bool
	talentId           string
	talentIdFlag       bool
	applicationId      string
	applicationIdFlag  bool
	activityStatus     int
	activityStatusFlag bool
}

func NewInterviewTaskBuilder() *InterviewTaskBuilder {
	builder := &InterviewTaskBuilder{}
	return builder
}

func (builder *InterviewTaskBuilder) Id(id string) *InterviewTaskBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *InterviewTaskBuilder) JobId(jobId string) *InterviewTaskBuilder {
	builder.jobId = jobId
	builder.jobIdFlag = true
	return builder
}
func (builder *InterviewTaskBuilder) TalentId(talentId string) *InterviewTaskBuilder {
	builder.talentId = talentId
	builder.talentIdFlag = true
	return builder
}
func (builder *InterviewTaskBuilder) ApplicationId(applicationId string) *InterviewTaskBuilder {
	builder.applicationId = applicationId
	builder.applicationIdFlag = true
	return builder
}
func (builder *InterviewTaskBuilder) ActivityStatus(activityStatus int) *InterviewTaskBuilder {
	builder.activityStatus = activityStatus
	builder.activityStatusFlag = true
	return builder
}

func (builder *InterviewTaskBuilder) Build() *InterviewTask {
	req := &InterviewTask{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.jobIdFlag {
		req.JobId = &builder.jobId

	}
	if builder.talentIdFlag {
		req.TalentId = &builder.talentId

	}
	if builder.applicationIdFlag {
		req.ApplicationId = &builder.applicationId

	}
	if builder.activityStatusFlag {
		req.ActivityStatus = &builder.activityStatus

	}
	return req
}

// builder结束

type Job struct {
	Id                 *string              `json:"id,omitempty"`
	Title              *string              `json:"title,omitempty"`
	Description        *string              `json:"description,omitempty"`
	Code               *string              `json:"code,omitempty"`
	Requirement        *string              `json:"requirement,omitempty"`
	RecruitmentType    *JobRecruitmentType  `json:"recruitment_type,omitempty"`
	Department         *JobDepartment       `json:"department,omitempty"`
	City               *JobCity             `json:"city,omitempty"`
	MinJobLevel        *JobLevel            `json:"min_job_level,omitempty"`
	MaxJobLevel        *JobLevel            `json:"max_job_level,omitempty"`
	HighlightList      []*JobHighlight      `json:"highlight_list,omitempty"`
	JobCategory        *JobCategory         `json:"job_category,omitempty"`
	JobType            *JobType             `json:"job_type,omitempty"`
	ActiveStatus       *int                 `json:"active_status,omitempty"`
	CreateUserId       *string              `json:"create_user_id,omitempty"`
	CreateTime         *int                 `json:"create_time,omitempty"`
	UpdateTime         *int                 `json:"update_time,omitempty"`
	ProcessType        *int                 `json:"process_type,omitempty"`
	ProcessId          *string              `json:"process_id,omitempty"`
	ProcessName        *string              `json:"process_name,omitempty"`
	ProcessEnName      *string              `json:"process_en_name,omitempty"`
	CustomizedDataList []*JobCustomizedData `json:"customized_data_list,omitempty"`
	JobFunction        *IdNameObject        `json:"job_function,omitempty"`
	Subject            *IdNameObject        `json:"subject,omitempty"`
	HeadCount          *int                 `json:"head_count,omitempty"`
	Experience         *int                 `json:"experience,omitempty"`
	ExpiryTime         *int                 `json:"expiry_time,omitempty"`
	MinSalary          *int                 `json:"min_salary,omitempty"`
	MaxSalary          *int                 `json:"max_salary,omitempty"`
	RequiredDegree     *int                 `json:"required_degree,omitempty"`
	CityList           []*CodeNameObject    `json:"city_list,omitempty"`
}

// builder开始
type JobBuilder struct {
	id                     string
	idFlag                 bool
	title                  string
	titleFlag              bool
	description            string
	descriptionFlag        bool
	code                   string
	codeFlag               bool
	requirement            string
	requirementFlag        bool
	recruitmentType        *JobRecruitmentType
	recruitmentTypeFlag    bool
	department             *JobDepartment
	departmentFlag         bool
	city                   *JobCity
	cityFlag               bool
	minJobLevel            *JobLevel
	minJobLevelFlag        bool
	maxJobLevel            *JobLevel
	maxJobLevelFlag        bool
	highlightList          []*JobHighlight
	highlightListFlag      bool
	jobCategory            *JobCategory
	jobCategoryFlag        bool
	jobType                *JobType
	jobTypeFlag            bool
	activeStatus           int
	activeStatusFlag       bool
	createUserId           string
	createUserIdFlag       bool
	createTime             int
	createTimeFlag         bool
	updateTime             int
	updateTimeFlag         bool
	processType            int
	processTypeFlag        bool
	processId              string
	processIdFlag          bool
	processName            string
	processNameFlag        bool
	processEnName          string
	processEnNameFlag      bool
	customizedDataList     []*JobCustomizedData
	customizedDataListFlag bool
	jobFunction            *IdNameObject
	jobFunctionFlag        bool
	subject                *IdNameObject
	subjectFlag            bool
	headCount              int
	headCountFlag          bool
	experience             int
	experienceFlag         bool
	expiryTime             int
	expiryTimeFlag         bool
	minSalary              int
	minSalaryFlag          bool
	maxSalary              int
	maxSalaryFlag          bool
	requiredDegree         int
	requiredDegreeFlag     bool
	cityList               []*CodeNameObject
	cityListFlag           bool
}

func NewJobBuilder() *JobBuilder {
	builder := &JobBuilder{}
	return builder
}

func (builder *JobBuilder) Id(id string) *JobBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *JobBuilder) Title(title string) *JobBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}
func (builder *JobBuilder) Description(description string) *JobBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}
func (builder *JobBuilder) Code(code string) *JobBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}
func (builder *JobBuilder) Requirement(requirement string) *JobBuilder {
	builder.requirement = requirement
	builder.requirementFlag = true
	return builder
}
func (builder *JobBuilder) RecruitmentType(recruitmentType *JobRecruitmentType) *JobBuilder {
	builder.recruitmentType = recruitmentType
	builder.recruitmentTypeFlag = true
	return builder
}
func (builder *JobBuilder) Department(department *JobDepartment) *JobBuilder {
	builder.department = department
	builder.departmentFlag = true
	return builder
}
func (builder *JobBuilder) City(city *JobCity) *JobBuilder {
	builder.city = city
	builder.cityFlag = true
	return builder
}
func (builder *JobBuilder) MinJobLevel(minJobLevel *JobLevel) *JobBuilder {
	builder.minJobLevel = minJobLevel
	builder.minJobLevelFlag = true
	return builder
}
func (builder *JobBuilder) MaxJobLevel(maxJobLevel *JobLevel) *JobBuilder {
	builder.maxJobLevel = maxJobLevel
	builder.maxJobLevelFlag = true
	return builder
}
func (builder *JobBuilder) HighlightList(highlightList []*JobHighlight) *JobBuilder {
	builder.highlightList = highlightList
	builder.highlightListFlag = true
	return builder
}
func (builder *JobBuilder) JobCategory(jobCategory *JobCategory) *JobBuilder {
	builder.jobCategory = jobCategory
	builder.jobCategoryFlag = true
	return builder
}
func (builder *JobBuilder) JobType(jobType *JobType) *JobBuilder {
	builder.jobType = jobType
	builder.jobTypeFlag = true
	return builder
}
func (builder *JobBuilder) ActiveStatus(activeStatus int) *JobBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}
func (builder *JobBuilder) CreateUserId(createUserId string) *JobBuilder {
	builder.createUserId = createUserId
	builder.createUserIdFlag = true
	return builder
}
func (builder *JobBuilder) CreateTime(createTime int) *JobBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}
func (builder *JobBuilder) UpdateTime(updateTime int) *JobBuilder {
	builder.updateTime = updateTime
	builder.updateTimeFlag = true
	return builder
}
func (builder *JobBuilder) ProcessType(processType int) *JobBuilder {
	builder.processType = processType
	builder.processTypeFlag = true
	return builder
}
func (builder *JobBuilder) ProcessId(processId string) *JobBuilder {
	builder.processId = processId
	builder.processIdFlag = true
	return builder
}
func (builder *JobBuilder) ProcessName(processName string) *JobBuilder {
	builder.processName = processName
	builder.processNameFlag = true
	return builder
}
func (builder *JobBuilder) ProcessEnName(processEnName string) *JobBuilder {
	builder.processEnName = processEnName
	builder.processEnNameFlag = true
	return builder
}
func (builder *JobBuilder) CustomizedDataList(customizedDataList []*JobCustomizedData) *JobBuilder {
	builder.customizedDataList = customizedDataList
	builder.customizedDataListFlag = true
	return builder
}
func (builder *JobBuilder) JobFunction(jobFunction *IdNameObject) *JobBuilder {
	builder.jobFunction = jobFunction
	builder.jobFunctionFlag = true
	return builder
}
func (builder *JobBuilder) Subject(subject *IdNameObject) *JobBuilder {
	builder.subject = subject
	builder.subjectFlag = true
	return builder
}
func (builder *JobBuilder) HeadCount(headCount int) *JobBuilder {
	builder.headCount = headCount
	builder.headCountFlag = true
	return builder
}
func (builder *JobBuilder) Experience(experience int) *JobBuilder {
	builder.experience = experience
	builder.experienceFlag = true
	return builder
}
func (builder *JobBuilder) ExpiryTime(expiryTime int) *JobBuilder {
	builder.expiryTime = expiryTime
	builder.expiryTimeFlag = true
	return builder
}
func (builder *JobBuilder) MinSalary(minSalary int) *JobBuilder {
	builder.minSalary = minSalary
	builder.minSalaryFlag = true
	return builder
}
func (builder *JobBuilder) MaxSalary(maxSalary int) *JobBuilder {
	builder.maxSalary = maxSalary
	builder.maxSalaryFlag = true
	return builder
}
func (builder *JobBuilder) RequiredDegree(requiredDegree int) *JobBuilder {
	builder.requiredDegree = requiredDegree
	builder.requiredDegreeFlag = true
	return builder
}
func (builder *JobBuilder) CityList(cityList []*CodeNameObject) *JobBuilder {
	builder.cityList = cityList
	builder.cityListFlag = true
	return builder
}

func (builder *JobBuilder) Build() *Job {
	req := &Job{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.requirementFlag {
		req.Requirement = &builder.requirement

	}
	if builder.recruitmentTypeFlag {
		req.RecruitmentType = builder.recruitmentType
	}
	if builder.departmentFlag {
		req.Department = builder.department
	}
	if builder.cityFlag {
		req.City = builder.city
	}
	if builder.minJobLevelFlag {
		req.MinJobLevel = builder.minJobLevel
	}
	if builder.maxJobLevelFlag {
		req.MaxJobLevel = builder.maxJobLevel
	}
	if builder.highlightListFlag {
		req.HighlightList = builder.highlightList
	}
	if builder.jobCategoryFlag {
		req.JobCategory = builder.jobCategory
	}
	if builder.jobTypeFlag {
		req.JobType = builder.jobType
	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	if builder.createUserIdFlag {
		req.CreateUserId = &builder.createUserId

	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.updateTimeFlag {
		req.UpdateTime = &builder.updateTime

	}
	if builder.processTypeFlag {
		req.ProcessType = &builder.processType

	}
	if builder.processIdFlag {
		req.ProcessId = &builder.processId

	}
	if builder.processNameFlag {
		req.ProcessName = &builder.processName

	}
	if builder.processEnNameFlag {
		req.ProcessEnName = &builder.processEnName

	}
	if builder.customizedDataListFlag {
		req.CustomizedDataList = builder.customizedDataList
	}
	if builder.jobFunctionFlag {
		req.JobFunction = builder.jobFunction
	}
	if builder.subjectFlag {
		req.Subject = builder.subject
	}
	if builder.headCountFlag {
		req.HeadCount = &builder.headCount

	}
	if builder.experienceFlag {
		req.Experience = &builder.experience

	}
	if builder.expiryTimeFlag {
		req.ExpiryTime = &builder.expiryTime

	}
	if builder.minSalaryFlag {
		req.MinSalary = &builder.minSalary

	}
	if builder.maxSalaryFlag {
		req.MaxSalary = &builder.maxSalary

	}
	if builder.requiredDegreeFlag {
		req.RequiredDegree = &builder.requiredDegree

	}
	if builder.cityListFlag {
		req.CityList = builder.cityList
	}
	return req
}

// builder结束

type JobManager struct {
	Id                  *string  `json:"id,omitempty"`
	RecruiterId         *string  `json:"recruiter_id,omitempty"`
	HiringManagerIdList []string `json:"hiring_manager_id_list,omitempty"`
	AssistantIdList     []string `json:"assistant_id_list,omitempty"`
}

// builder开始
type JobManagerBuilder struct {
	id                      string
	idFlag                  bool
	recruiterId             string
	recruiterIdFlag         bool
	hiringManagerIdList     []string
	hiringManagerIdListFlag bool
	assistantIdList         []string
	assistantIdListFlag     bool
}

func NewJobManagerBuilder() *JobManagerBuilder {
	builder := &JobManagerBuilder{}
	return builder
}

func (builder *JobManagerBuilder) Id(id string) *JobManagerBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *JobManagerBuilder) RecruiterId(recruiterId string) *JobManagerBuilder {
	builder.recruiterId = recruiterId
	builder.recruiterIdFlag = true
	return builder
}
func (builder *JobManagerBuilder) HiringManagerIdList(hiringManagerIdList []string) *JobManagerBuilder {
	builder.hiringManagerIdList = hiringManagerIdList
	builder.hiringManagerIdListFlag = true
	return builder
}
func (builder *JobManagerBuilder) AssistantIdList(assistantIdList []string) *JobManagerBuilder {
	builder.assistantIdList = assistantIdList
	builder.assistantIdListFlag = true
	return builder
}

func (builder *JobManagerBuilder) Build() *JobManager {
	req := &JobManager{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.recruiterIdFlag {
		req.RecruiterId = &builder.recruiterId

	}
	if builder.hiringManagerIdListFlag {
		req.HiringManagerIdList = builder.hiringManagerIdList
	}
	if builder.assistantIdListFlag {
		req.AssistantIdList = builder.assistantIdList
	}
	return req
}

// builder结束

type JobRecruiter struct {
	Id                  *string  `json:"id,omitempty"`
	RecruiterId         *string  `json:"recruiter_id,omitempty"`
	HiringManagerIdList []string `json:"hiring_manager_id_list,omitempty"`
	AssistantIdList     []string `json:"assistant_id_list,omitempty"`
}

// builder开始
type JobRecruiterBuilder struct {
	id                      string
	idFlag                  bool
	recruiterId             string
	recruiterIdFlag         bool
	hiringManagerIdList     []string
	hiringManagerIdListFlag bool
	assistantIdList         []string
	assistantIdListFlag     bool
}

func NewJobRecruiterBuilder() *JobRecruiterBuilder {
	builder := &JobRecruiterBuilder{}
	return builder
}

func (builder *JobRecruiterBuilder) Id(id string) *JobRecruiterBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *JobRecruiterBuilder) RecruiterId(recruiterId string) *JobRecruiterBuilder {
	builder.recruiterId = recruiterId
	builder.recruiterIdFlag = true
	return builder
}
func (builder *JobRecruiterBuilder) HiringManagerIdList(hiringManagerIdList []string) *JobRecruiterBuilder {
	builder.hiringManagerIdList = hiringManagerIdList
	builder.hiringManagerIdListFlag = true
	return builder
}
func (builder *JobRecruiterBuilder) AssistantIdList(assistantIdList []string) *JobRecruiterBuilder {
	builder.assistantIdList = assistantIdList
	builder.assistantIdListFlag = true
	return builder
}

func (builder *JobRecruiterBuilder) Build() *JobRecruiter {
	req := &JobRecruiter{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.recruiterIdFlag {
		req.RecruiterId = &builder.recruiterId

	}
	if builder.hiringManagerIdListFlag {
		req.HiringManagerIdList = builder.hiringManagerIdList
	}
	if builder.assistantIdListFlag {
		req.AssistantIdList = builder.assistantIdList
	}
	return req
}

// builder结束

type JobCategory struct {
	Id           *string `json:"id,omitempty"`
	ZhName       *string `json:"zh_name,omitempty"`
	EnName       *string `json:"en_name,omitempty"`
	ActiveStatus *int    `json:"active_status,omitempty"`
}

// builder开始
type JobCategoryBuilder struct {
	id               string
	idFlag           bool
	zhName           string
	zhNameFlag       bool
	enName           string
	enNameFlag       bool
	activeStatus     int
	activeStatusFlag bool
}

func NewJobCategoryBuilder() *JobCategoryBuilder {
	builder := &JobCategoryBuilder{}
	return builder
}

func (builder *JobCategoryBuilder) Id(id string) *JobCategoryBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *JobCategoryBuilder) ZhName(zhName string) *JobCategoryBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}
func (builder *JobCategoryBuilder) EnName(enName string) *JobCategoryBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}
func (builder *JobCategoryBuilder) ActiveStatus(activeStatus int) *JobCategoryBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}

func (builder *JobCategoryBuilder) Build() *JobCategory {
	req := &JobCategory{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	return req
}

// builder结束

type JobCity struct {
	CityCode *string `json:"city_code,omitempty"`
	ZhName   *string `json:"zh_name,omitempty"`
	EnName   *string `json:"en_name,omitempty"`
}

// builder开始
type JobCityBuilder struct {
	cityCode     string
	cityCodeFlag bool
	zhName       string
	zhNameFlag   bool
	enName       string
	enNameFlag   bool
}

func NewJobCityBuilder() *JobCityBuilder {
	builder := &JobCityBuilder{}
	return builder
}

func (builder *JobCityBuilder) CityCode(cityCode string) *JobCityBuilder {
	builder.cityCode = cityCode
	builder.cityCodeFlag = true
	return builder
}
func (builder *JobCityBuilder) ZhName(zhName string) *JobCityBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}
func (builder *JobCityBuilder) EnName(enName string) *JobCityBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

func (builder *JobCityBuilder) Build() *JobCity {
	req := &JobCity{}
	if builder.cityCodeFlag {
		req.CityCode = &builder.cityCode

	}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	return req
}

// builder结束

type JobConfig struct {
	OfferApplySchemaId         *string                        `json:"offer_apply_schema_id,omitempty"`
	OfferProcessConf           *string                        `json:"offer_process_conf,omitempty"`
	RecommendedEvaluatorIdList []string                       `json:"recommended_evaluator_id_list,omitempty"`
	UpdateOptionList           []int                          `json:"update_option_list,omitempty"`
	AssessmentTemplateBizId    *string                        `json:"assessment_template_biz_id,omitempty"`
	InterviewRoundConfList     []*JobConfigInterviewRoundConf `json:"interview_round_conf_list,omitempty"`
	JrIdList                   []string                       `json:"jr_id_list,omitempty"`
	InterviewRoundTypeConfList []*JobConfigRoundType          `json:"interview_round_type_conf_list,omitempty"`
}

// builder开始
type JobConfigBuilder struct {
	offerApplySchemaId             string
	offerApplySchemaIdFlag         bool
	offerProcessConf               string
	offerProcessConfFlag           bool
	recommendedEvaluatorIdList     []string
	recommendedEvaluatorIdListFlag bool
	updateOptionList               []int
	updateOptionListFlag           bool
	assessmentTemplateBizId        string
	assessmentTemplateBizIdFlag    bool
	interviewRoundConfList         []*JobConfigInterviewRoundConf
	interviewRoundConfListFlag     bool
	jrIdList                       []string
	jrIdListFlag                   bool
	interviewRoundTypeConfList     []*JobConfigRoundType
	interviewRoundTypeConfListFlag bool
}

func NewJobConfigBuilder() *JobConfigBuilder {
	builder := &JobConfigBuilder{}
	return builder
}

func (builder *JobConfigBuilder) OfferApplySchemaId(offerApplySchemaId string) *JobConfigBuilder {
	builder.offerApplySchemaId = offerApplySchemaId
	builder.offerApplySchemaIdFlag = true
	return builder
}
func (builder *JobConfigBuilder) OfferProcessConf(offerProcessConf string) *JobConfigBuilder {
	builder.offerProcessConf = offerProcessConf
	builder.offerProcessConfFlag = true
	return builder
}
func (builder *JobConfigBuilder) RecommendedEvaluatorIdList(recommendedEvaluatorIdList []string) *JobConfigBuilder {
	builder.recommendedEvaluatorIdList = recommendedEvaluatorIdList
	builder.recommendedEvaluatorIdListFlag = true
	return builder
}
func (builder *JobConfigBuilder) UpdateOptionList(updateOptionList []int) *JobConfigBuilder {
	builder.updateOptionList = updateOptionList
	builder.updateOptionListFlag = true
	return builder
}
func (builder *JobConfigBuilder) AssessmentTemplateBizId(assessmentTemplateBizId string) *JobConfigBuilder {
	builder.assessmentTemplateBizId = assessmentTemplateBizId
	builder.assessmentTemplateBizIdFlag = true
	return builder
}
func (builder *JobConfigBuilder) InterviewRoundConfList(interviewRoundConfList []*JobConfigInterviewRoundConf) *JobConfigBuilder {
	builder.interviewRoundConfList = interviewRoundConfList
	builder.interviewRoundConfListFlag = true
	return builder
}
func (builder *JobConfigBuilder) JrIdList(jrIdList []string) *JobConfigBuilder {
	builder.jrIdList = jrIdList
	builder.jrIdListFlag = true
	return builder
}
func (builder *JobConfigBuilder) InterviewRoundTypeConfList(interviewRoundTypeConfList []*JobConfigRoundType) *JobConfigBuilder {
	builder.interviewRoundTypeConfList = interviewRoundTypeConfList
	builder.interviewRoundTypeConfListFlag = true
	return builder
}

func (builder *JobConfigBuilder) Build() *JobConfig {
	req := &JobConfig{}
	if builder.offerApplySchemaIdFlag {
		req.OfferApplySchemaId = &builder.offerApplySchemaId

	}
	if builder.offerProcessConfFlag {
		req.OfferProcessConf = &builder.offerProcessConf

	}
	if builder.recommendedEvaluatorIdListFlag {
		req.RecommendedEvaluatorIdList = builder.recommendedEvaluatorIdList
	}
	if builder.updateOptionListFlag {
		req.UpdateOptionList = builder.updateOptionList
	}
	if builder.assessmentTemplateBizIdFlag {
		req.AssessmentTemplateBizId = &builder.assessmentTemplateBizId

	}
	if builder.interviewRoundConfListFlag {
		req.InterviewRoundConfList = builder.interviewRoundConfList
	}
	if builder.jrIdListFlag {
		req.JrIdList = builder.jrIdList
	}
	if builder.interviewRoundTypeConfListFlag {
		req.InterviewRoundTypeConfList = builder.interviewRoundTypeConfList
	}
	return req
}

// builder结束

type JobConfigInterviewRound struct {
	InterviewerList []*IdNameObject `json:"interviewer_list,omitempty"`
	Round           *int            `json:"round,omitempty"`
}

// builder开始
type JobConfigInterviewRoundBuilder struct {
	interviewerList     []*IdNameObject
	interviewerListFlag bool
	round               int
	roundFlag           bool
}

func NewJobConfigInterviewRoundBuilder() *JobConfigInterviewRoundBuilder {
	builder := &JobConfigInterviewRoundBuilder{}
	return builder
}

func (builder *JobConfigInterviewRoundBuilder) InterviewerList(interviewerList []*IdNameObject) *JobConfigInterviewRoundBuilder {
	builder.interviewerList = interviewerList
	builder.interviewerListFlag = true
	return builder
}
func (builder *JobConfigInterviewRoundBuilder) Round(round int) *JobConfigInterviewRoundBuilder {
	builder.round = round
	builder.roundFlag = true
	return builder
}

func (builder *JobConfigInterviewRoundBuilder) Build() *JobConfigInterviewRound {
	req := &JobConfigInterviewRound{}
	if builder.interviewerListFlag {
		req.InterviewerList = builder.interviewerList
	}
	if builder.roundFlag {
		req.Round = &builder.round

	}
	return req
}

// builder结束

type JobConfigInterviewRoundConf struct {
	InterviewerIdList []string `json:"interviewer_id_list,omitempty"`
	Round             *int     `json:"round,omitempty"`
}

// builder开始
type JobConfigInterviewRoundConfBuilder struct {
	interviewerIdList     []string
	interviewerIdListFlag bool
	round                 int
	roundFlag             bool
}

func NewJobConfigInterviewRoundConfBuilder() *JobConfigInterviewRoundConfBuilder {
	builder := &JobConfigInterviewRoundConfBuilder{}
	return builder
}

func (builder *JobConfigInterviewRoundConfBuilder) InterviewerIdList(interviewerIdList []string) *JobConfigInterviewRoundConfBuilder {
	builder.interviewerIdList = interviewerIdList
	builder.interviewerIdListFlag = true
	return builder
}
func (builder *JobConfigInterviewRoundConfBuilder) Round(round int) *JobConfigInterviewRoundConfBuilder {
	builder.round = round
	builder.roundFlag = true
	return builder
}

func (builder *JobConfigInterviewRoundConfBuilder) Build() *JobConfigInterviewRoundConf {
	req := &JobConfigInterviewRoundConf{}
	if builder.interviewerIdListFlag {
		req.InterviewerIdList = builder.interviewerIdList
	}
	if builder.roundFlag {
		req.Round = &builder.round

	}
	return req
}

// builder结束

type JobConfigResult struct {
	OfferApplySchema         *IdNameObject               `json:"offer_apply_schema,omitempty"`
	OfferProcessConf         *IdNameObject               `json:"offer_process_conf,omitempty"`
	RecommendedEvaluatorList []*IdNameObject             `json:"recommended_evaluator_list,omitempty"`
	AssessmentTemplate       *IdNameObject               `json:"assessment_template,omitempty"`
	Id                       *string                     `json:"id,omitempty"`
	InterviewRoundList       []*JobConfigInterviewRound  `json:"interview_round_list,omitempty"`
	JobRequirementList       []*IdNameObject             `json:"job_requirement_list,omitempty"`
	InterviewRoundTypeList   []*JobConfigRoundTypeResult `json:"interview_round_type_list,omitempty"`
}

// builder开始
type JobConfigResultBuilder struct {
	offerApplySchema             *IdNameObject
	offerApplySchemaFlag         bool
	offerProcessConf             *IdNameObject
	offerProcessConfFlag         bool
	recommendedEvaluatorList     []*IdNameObject
	recommendedEvaluatorListFlag bool
	assessmentTemplate           *IdNameObject
	assessmentTemplateFlag       bool
	id                           string
	idFlag                       bool
	interviewRoundList           []*JobConfigInterviewRound
	interviewRoundListFlag       bool
	jobRequirementList           []*IdNameObject
	jobRequirementListFlag       bool
	interviewRoundTypeList       []*JobConfigRoundTypeResult
	interviewRoundTypeListFlag   bool
}

func NewJobConfigResultBuilder() *JobConfigResultBuilder {
	builder := &JobConfigResultBuilder{}
	return builder
}

func (builder *JobConfigResultBuilder) OfferApplySchema(offerApplySchema *IdNameObject) *JobConfigResultBuilder {
	builder.offerApplySchema = offerApplySchema
	builder.offerApplySchemaFlag = true
	return builder
}
func (builder *JobConfigResultBuilder) OfferProcessConf(offerProcessConf *IdNameObject) *JobConfigResultBuilder {
	builder.offerProcessConf = offerProcessConf
	builder.offerProcessConfFlag = true
	return builder
}
func (builder *JobConfigResultBuilder) RecommendedEvaluatorList(recommendedEvaluatorList []*IdNameObject) *JobConfigResultBuilder {
	builder.recommendedEvaluatorList = recommendedEvaluatorList
	builder.recommendedEvaluatorListFlag = true
	return builder
}
func (builder *JobConfigResultBuilder) AssessmentTemplate(assessmentTemplate *IdNameObject) *JobConfigResultBuilder {
	builder.assessmentTemplate = assessmentTemplate
	builder.assessmentTemplateFlag = true
	return builder
}
func (builder *JobConfigResultBuilder) Id(id string) *JobConfigResultBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *JobConfigResultBuilder) InterviewRoundList(interviewRoundList []*JobConfigInterviewRound) *JobConfigResultBuilder {
	builder.interviewRoundList = interviewRoundList
	builder.interviewRoundListFlag = true
	return builder
}
func (builder *JobConfigResultBuilder) JobRequirementList(jobRequirementList []*IdNameObject) *JobConfigResultBuilder {
	builder.jobRequirementList = jobRequirementList
	builder.jobRequirementListFlag = true
	return builder
}
func (builder *JobConfigResultBuilder) InterviewRoundTypeList(interviewRoundTypeList []*JobConfigRoundTypeResult) *JobConfigResultBuilder {
	builder.interviewRoundTypeList = interviewRoundTypeList
	builder.interviewRoundTypeListFlag = true
	return builder
}

func (builder *JobConfigResultBuilder) Build() *JobConfigResult {
	req := &JobConfigResult{}
	if builder.offerApplySchemaFlag {
		req.OfferApplySchema = builder.offerApplySchema
	}
	if builder.offerProcessConfFlag {
		req.OfferProcessConf = builder.offerProcessConf
	}
	if builder.recommendedEvaluatorListFlag {
		req.RecommendedEvaluatorList = builder.recommendedEvaluatorList
	}
	if builder.assessmentTemplateFlag {
		req.AssessmentTemplate = builder.assessmentTemplate
	}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.interviewRoundListFlag {
		req.InterviewRoundList = builder.interviewRoundList
	}
	if builder.jobRequirementListFlag {
		req.JobRequirementList = builder.jobRequirementList
	}
	if builder.interviewRoundTypeListFlag {
		req.InterviewRoundTypeList = builder.interviewRoundTypeList
	}
	return req
}

// builder结束

type JobConfigRoundType struct {
	RoundBizId              *string `json:"round_biz_id,omitempty"`
	AssessmentTemplateBizId *string `json:"assessment_template_biz_id,omitempty"`
}

// builder开始
type JobConfigRoundTypeBuilder struct {
	roundBizId                  string
	roundBizIdFlag              bool
	assessmentTemplateBizId     string
	assessmentTemplateBizIdFlag bool
}

func NewJobConfigRoundTypeBuilder() *JobConfigRoundTypeBuilder {
	builder := &JobConfigRoundTypeBuilder{}
	return builder
}

func (builder *JobConfigRoundTypeBuilder) RoundBizId(roundBizId string) *JobConfigRoundTypeBuilder {
	builder.roundBizId = roundBizId
	builder.roundBizIdFlag = true
	return builder
}
func (builder *JobConfigRoundTypeBuilder) AssessmentTemplateBizId(assessmentTemplateBizId string) *JobConfigRoundTypeBuilder {
	builder.assessmentTemplateBizId = assessmentTemplateBizId
	builder.assessmentTemplateBizIdFlag = true
	return builder
}

func (builder *JobConfigRoundTypeBuilder) Build() *JobConfigRoundType {
	req := &JobConfigRoundType{}
	if builder.roundBizIdFlag {
		req.RoundBizId = &builder.roundBizId

	}
	if builder.assessmentTemplateBizIdFlag {
		req.AssessmentTemplateBizId = &builder.assessmentTemplateBizId

	}
	return req
}

// builder结束

type JobConfigRoundTypeResult struct {
	AssessmentRound    *IdNameObject `json:"assessment_round,omitempty"`
	AssessmentTemplate *IdNameObject `json:"assessment_template,omitempty"`
}

// builder开始
type JobConfigRoundTypeResultBuilder struct {
	assessmentRound        *IdNameObject
	assessmentRoundFlag    bool
	assessmentTemplate     *IdNameObject
	assessmentTemplateFlag bool
}

func NewJobConfigRoundTypeResultBuilder() *JobConfigRoundTypeResultBuilder {
	builder := &JobConfigRoundTypeResultBuilder{}
	return builder
}

func (builder *JobConfigRoundTypeResultBuilder) AssessmentRound(assessmentRound *IdNameObject) *JobConfigRoundTypeResultBuilder {
	builder.assessmentRound = assessmentRound
	builder.assessmentRoundFlag = true
	return builder
}
func (builder *JobConfigRoundTypeResultBuilder) AssessmentTemplate(assessmentTemplate *IdNameObject) *JobConfigRoundTypeResultBuilder {
	builder.assessmentTemplate = assessmentTemplate
	builder.assessmentTemplateFlag = true
	return builder
}

func (builder *JobConfigRoundTypeResultBuilder) Build() *JobConfigRoundTypeResult {
	req := &JobConfigRoundTypeResult{}
	if builder.assessmentRoundFlag {
		req.AssessmentRound = builder.assessmentRound
	}
	if builder.assessmentTemplateFlag {
		req.AssessmentTemplate = builder.assessmentTemplate
	}
	return req
}

// builder结束

type JobCustomizedData struct {
	ObjectId   *string             `json:"object_id,omitempty"`
	Name       *I18n               `json:"name,omitempty"`
	ObjectType *int                `json:"object_type,omitempty"`
	Value      *JobCustomizedValue `json:"value,omitempty"`
}

// builder开始
type JobCustomizedDataBuilder struct {
	objectId       string
	objectIdFlag   bool
	name           *I18n
	nameFlag       bool
	objectType     int
	objectTypeFlag bool
	value          *JobCustomizedValue
	valueFlag      bool
}

func NewJobCustomizedDataBuilder() *JobCustomizedDataBuilder {
	builder := &JobCustomizedDataBuilder{}
	return builder
}

func (builder *JobCustomizedDataBuilder) ObjectId(objectId string) *JobCustomizedDataBuilder {
	builder.objectId = objectId
	builder.objectIdFlag = true
	return builder
}
func (builder *JobCustomizedDataBuilder) Name(name *I18n) *JobCustomizedDataBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *JobCustomizedDataBuilder) ObjectType(objectType int) *JobCustomizedDataBuilder {
	builder.objectType = objectType
	builder.objectTypeFlag = true
	return builder
}
func (builder *JobCustomizedDataBuilder) Value(value *JobCustomizedValue) *JobCustomizedDataBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}

func (builder *JobCustomizedDataBuilder) Build() *JobCustomizedData {
	req := &JobCustomizedData{}
	if builder.objectIdFlag {
		req.ObjectId = &builder.objectId

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.objectTypeFlag {
		req.ObjectType = &builder.objectType

	}
	if builder.valueFlag {
		req.Value = builder.value
	}
	return req
}

// builder结束

type JobCustomizedOption struct {
	Key  *string `json:"key,omitempty"`
	Name *I18n   `json:"name,omitempty"`
}

// builder开始
type JobCustomizedOptionBuilder struct {
	key      string
	keyFlag  bool
	name     *I18n
	nameFlag bool
}

func NewJobCustomizedOptionBuilder() *JobCustomizedOptionBuilder {
	builder := &JobCustomizedOptionBuilder{}
	return builder
}

func (builder *JobCustomizedOptionBuilder) Key(key string) *JobCustomizedOptionBuilder {
	builder.key = key
	builder.keyFlag = true
	return builder
}
func (builder *JobCustomizedOptionBuilder) Name(name *I18n) *JobCustomizedOptionBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *JobCustomizedOptionBuilder) Build() *JobCustomizedOption {
	req := &JobCustomizedOption{}
	if builder.keyFlag {
		req.Key = &builder.key

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	return req
}

// builder结束

type JobCustomizedTimeRange struct {
	StartTime *string `json:"start_time,omitempty"`
	EndTime   *string `json:"end_time,omitempty"`
}

// builder开始
type JobCustomizedTimeRangeBuilder struct {
	startTime     string
	startTimeFlag bool
	endTime       string
	endTimeFlag   bool
}

func NewJobCustomizedTimeRangeBuilder() *JobCustomizedTimeRangeBuilder {
	builder := &JobCustomizedTimeRangeBuilder{}
	return builder
}

func (builder *JobCustomizedTimeRangeBuilder) StartTime(startTime string) *JobCustomizedTimeRangeBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}
func (builder *JobCustomizedTimeRangeBuilder) EndTime(endTime string) *JobCustomizedTimeRangeBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

func (builder *JobCustomizedTimeRangeBuilder) Build() *JobCustomizedTimeRange {
	req := &JobCustomizedTimeRange{}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	return req
}

// builder结束

type JobCustomizedValue struct {
	Content    *string                 `json:"content,omitempty"`
	Option     *JobCustomizedOption    `json:"option,omitempty"`
	OptionList []*JobCustomizedOption  `json:"option_list,omitempty"`
	TimeRange  *JobCustomizedTimeRange `json:"time_range,omitempty"`
	Time       *string                 `json:"time,omitempty"`
	Number     *string                 `json:"number,omitempty"`
}

// builder开始
type JobCustomizedValueBuilder struct {
	content        string
	contentFlag    bool
	option         *JobCustomizedOption
	optionFlag     bool
	optionList     []*JobCustomizedOption
	optionListFlag bool
	timeRange      *JobCustomizedTimeRange
	timeRangeFlag  bool
	time           string
	timeFlag       bool
	number         string
	numberFlag     bool
}

func NewJobCustomizedValueBuilder() *JobCustomizedValueBuilder {
	builder := &JobCustomizedValueBuilder{}
	return builder
}

func (builder *JobCustomizedValueBuilder) Content(content string) *JobCustomizedValueBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}
func (builder *JobCustomizedValueBuilder) Option(option *JobCustomizedOption) *JobCustomizedValueBuilder {
	builder.option = option
	builder.optionFlag = true
	return builder
}
func (builder *JobCustomizedValueBuilder) OptionList(optionList []*JobCustomizedOption) *JobCustomizedValueBuilder {
	builder.optionList = optionList
	builder.optionListFlag = true
	return builder
}
func (builder *JobCustomizedValueBuilder) TimeRange(timeRange *JobCustomizedTimeRange) *JobCustomizedValueBuilder {
	builder.timeRange = timeRange
	builder.timeRangeFlag = true
	return builder
}
func (builder *JobCustomizedValueBuilder) Time(time string) *JobCustomizedValueBuilder {
	builder.time = time
	builder.timeFlag = true
	return builder
}
func (builder *JobCustomizedValueBuilder) Number(number string) *JobCustomizedValueBuilder {
	builder.number = number
	builder.numberFlag = true
	return builder
}

func (builder *JobCustomizedValueBuilder) Build() *JobCustomizedValue {
	req := &JobCustomizedValue{}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.optionFlag {
		req.Option = builder.option
	}
	if builder.optionListFlag {
		req.OptionList = builder.optionList
	}
	if builder.timeRangeFlag {
		req.TimeRange = builder.timeRange
	}
	if builder.timeFlag {
		req.Time = &builder.time

	}
	if builder.numberFlag {
		req.Number = &builder.number

	}
	return req
}

// builder结束

type JobDepartment struct {
	Id     *string `json:"id,omitempty"`
	ZhName *string `json:"zh_name,omitempty"`
	EnName *string `json:"en_name,omitempty"`
}

// builder开始
type JobDepartmentBuilder struct {
	id         string
	idFlag     bool
	zhName     string
	zhNameFlag bool
	enName     string
	enNameFlag bool
}

func NewJobDepartmentBuilder() *JobDepartmentBuilder {
	builder := &JobDepartmentBuilder{}
	return builder
}

func (builder *JobDepartmentBuilder) Id(id string) *JobDepartmentBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *JobDepartmentBuilder) ZhName(zhName string) *JobDepartmentBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}
func (builder *JobDepartmentBuilder) EnName(enName string) *JobDepartmentBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

func (builder *JobDepartmentBuilder) Build() *JobDepartment {
	req := &JobDepartment{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	return req
}

// builder结束

type JobFunction struct {
	Id           *string `json:"id,omitempty"`
	Name         *I18n   `json:"name,omitempty"`
	ActiveStatus *int    `json:"active_status,omitempty"`
	ParentId     *string `json:"parent_id,omitempty"`
}

// builder开始
type JobFunctionBuilder struct {
	id               string
	idFlag           bool
	name             *I18n
	nameFlag         bool
	activeStatus     int
	activeStatusFlag bool
	parentId         string
	parentIdFlag     bool
}

func NewJobFunctionBuilder() *JobFunctionBuilder {
	builder := &JobFunctionBuilder{}
	return builder
}

func (builder *JobFunctionBuilder) Id(id string) *JobFunctionBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *JobFunctionBuilder) Name(name *I18n) *JobFunctionBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *JobFunctionBuilder) ActiveStatus(activeStatus int) *JobFunctionBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}
func (builder *JobFunctionBuilder) ParentId(parentId string) *JobFunctionBuilder {
	builder.parentId = parentId
	builder.parentIdFlag = true
	return builder
}

func (builder *JobFunctionBuilder) Build() *JobFunction {
	req := &JobFunction{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	if builder.parentIdFlag {
		req.ParentId = &builder.parentId

	}
	return req
}

// builder结束

type JobHighlight struct {
	Id     *string `json:"id,omitempty"`
	ZhName *string `json:"zh_name,omitempty"`
	EnName *string `json:"en_name,omitempty"`
}

// builder开始
type JobHighlightBuilder struct {
	id         string
	idFlag     bool
	zhName     string
	zhNameFlag bool
	enName     string
	enNameFlag bool
}

func NewJobHighlightBuilder() *JobHighlightBuilder {
	builder := &JobHighlightBuilder{}
	return builder
}

func (builder *JobHighlightBuilder) Id(id string) *JobHighlightBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *JobHighlightBuilder) ZhName(zhName string) *JobHighlightBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}
func (builder *JobHighlightBuilder) EnName(enName string) *JobHighlightBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

func (builder *JobHighlightBuilder) Build() *JobHighlight {
	req := &JobHighlight{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	return req
}

// builder结束

type JobLevel struct {
	Id           *string `json:"id,omitempty"`
	ZhName       *string `json:"zh_name,omitempty"`
	EnName       *string `json:"en_name,omitempty"`
	ActiveStatus *int    `json:"active_status,omitempty"`
}

// builder开始
type JobLevelBuilder struct {
	id               string
	idFlag           bool
	zhName           string
	zhNameFlag       bool
	enName           string
	enNameFlag       bool
	activeStatus     int
	activeStatusFlag bool
}

func NewJobLevelBuilder() *JobLevelBuilder {
	builder := &JobLevelBuilder{}
	return builder
}

func (builder *JobLevelBuilder) Id(id string) *JobLevelBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *JobLevelBuilder) ZhName(zhName string) *JobLevelBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}
func (builder *JobLevelBuilder) EnName(enName string) *JobLevelBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}
func (builder *JobLevelBuilder) ActiveStatus(activeStatus int) *JobLevelBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}

func (builder *JobLevelBuilder) Build() *JobLevel {
	req := &JobLevel{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	return req
}

// builder结束

type JobProcess struct {
	YourPropertyName *string `json:"your_property_name,omitempty"`
}

// builder开始
type JobProcessBuilder struct {
	yourPropertyName     string
	yourPropertyNameFlag bool
}

func NewJobProcessBuilder() *JobProcessBuilder {
	builder := &JobProcessBuilder{}
	return builder
}

func (builder *JobProcessBuilder) YourPropertyName(yourPropertyName string) *JobProcessBuilder {
	builder.yourPropertyName = yourPropertyName
	builder.yourPropertyNameFlag = true
	return builder
}

func (builder *JobProcessBuilder) Build() *JobProcess {
	req := &JobProcess{}
	if builder.yourPropertyNameFlag {
		req.YourPropertyName = &builder.yourPropertyName

	}
	return req
}

// builder结束

type JobProcesses struct {
	Id        *string              `json:"id,omitempty"`
	ZhName    *string              `json:"zh_name,omitempty"`
	EnName    *string              `json:"en_name,omitempty"`
	Type      *int                 `json:"type,omitempty"`
	StageList []*JobProcessesStage `json:"stage_list,omitempty"`
}

// builder开始
type JobProcessesBuilder struct {
	id            string
	idFlag        bool
	zhName        string
	zhNameFlag    bool
	enName        string
	enNameFlag    bool
	type_         int
	typeFlag      bool
	stageList     []*JobProcessesStage
	stageListFlag bool
}

func NewJobProcessesBuilder() *JobProcessesBuilder {
	builder := &JobProcessesBuilder{}
	return builder
}

func (builder *JobProcessesBuilder) Id(id string) *JobProcessesBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *JobProcessesBuilder) ZhName(zhName string) *JobProcessesBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}
func (builder *JobProcessesBuilder) EnName(enName string) *JobProcessesBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}
func (builder *JobProcessesBuilder) Type(type_ int) *JobProcessesBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}
func (builder *JobProcessesBuilder) StageList(stageList []*JobProcessesStage) *JobProcessesBuilder {
	builder.stageList = stageList
	builder.stageListFlag = true
	return builder
}

func (builder *JobProcessesBuilder) Build() *JobProcesses {
	req := &JobProcesses{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	if builder.stageListFlag {
		req.StageList = builder.stageList
	}
	return req
}

// builder结束

type JobProcessesStage struct {
	Id     *string `json:"id,omitempty"`
	ZhName *string `json:"zh_name,omitempty"`
	EnName *string `json:"en_name,omitempty"`
	Type   *int    `json:"type,omitempty"`
}

// builder开始
type JobProcessesStageBuilder struct {
	id         string
	idFlag     bool
	zhName     string
	zhNameFlag bool
	enName     string
	enNameFlag bool
	type_      int
	typeFlag   bool
}

func NewJobProcessesStageBuilder() *JobProcessesStageBuilder {
	builder := &JobProcessesStageBuilder{}
	return builder
}

func (builder *JobProcessesStageBuilder) Id(id string) *JobProcessesStageBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *JobProcessesStageBuilder) ZhName(zhName string) *JobProcessesStageBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}
func (builder *JobProcessesStageBuilder) EnName(enName string) *JobProcessesStageBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}
func (builder *JobProcessesStageBuilder) Type(type_ int) *JobProcessesStageBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}

func (builder *JobProcessesStageBuilder) Build() *JobProcessesStage {
	req := &JobProcessesStage{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	return req
}

// builder结束

type JobRecruiter2 struct {
	Id                  *string  `json:"id,omitempty"`
	RecruiterId         *string  `json:"recruiter_id,omitempty"`
	HiringManagerIdList []string `json:"hiring_manager_id_list,omitempty"`
	AssistantIdList     []string `json:"assistant_id_list,omitempty"`
}

// builder开始
type JobRecruiter2Builder struct {
	id                      string
	idFlag                  bool
	recruiterId             string
	recruiterIdFlag         bool
	hiringManagerIdList     []string
	hiringManagerIdListFlag bool
	assistantIdList         []string
	assistantIdListFlag     bool
}

func NewJobRecruiter2Builder() *JobRecruiter2Builder {
	builder := &JobRecruiter2Builder{}
	return builder
}

func (builder *JobRecruiter2Builder) Id(id string) *JobRecruiter2Builder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *JobRecruiter2Builder) RecruiterId(recruiterId string) *JobRecruiter2Builder {
	builder.recruiterId = recruiterId
	builder.recruiterIdFlag = true
	return builder
}
func (builder *JobRecruiter2Builder) HiringManagerIdList(hiringManagerIdList []string) *JobRecruiter2Builder {
	builder.hiringManagerIdList = hiringManagerIdList
	builder.hiringManagerIdListFlag = true
	return builder
}
func (builder *JobRecruiter2Builder) AssistantIdList(assistantIdList []string) *JobRecruiter2Builder {
	builder.assistantIdList = assistantIdList
	builder.assistantIdListFlag = true
	return builder
}

func (builder *JobRecruiter2Builder) Build() *JobRecruiter2 {
	req := &JobRecruiter2{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.recruiterIdFlag {
		req.RecruiterId = &builder.recruiterId

	}
	if builder.hiringManagerIdListFlag {
		req.HiringManagerIdList = builder.hiringManagerIdList
	}
	if builder.assistantIdListFlag {
		req.AssistantIdList = builder.assistantIdList
	}
	return req
}

// builder结束

type JobRecruitmentType struct {
	Id           *string `json:"id,omitempty"`
	ZhName       *string `json:"zh_name,omitempty"`
	EnName       *string `json:"en_name,omitempty"`
	ActiveStatus *int    `json:"active_status,omitempty"`
}

// builder开始
type JobRecruitmentTypeBuilder struct {
	id               string
	idFlag           bool
	zhName           string
	zhNameFlag       bool
	enName           string
	enNameFlag       bool
	activeStatus     int
	activeStatusFlag bool
}

func NewJobRecruitmentTypeBuilder() *JobRecruitmentTypeBuilder {
	builder := &JobRecruitmentTypeBuilder{}
	return builder
}

func (builder *JobRecruitmentTypeBuilder) Id(id string) *JobRecruitmentTypeBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *JobRecruitmentTypeBuilder) ZhName(zhName string) *JobRecruitmentTypeBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}
func (builder *JobRecruitmentTypeBuilder) EnName(enName string) *JobRecruitmentTypeBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}
func (builder *JobRecruitmentTypeBuilder) ActiveStatus(activeStatus int) *JobRecruitmentTypeBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}

func (builder *JobRecruitmentTypeBuilder) Build() *JobRecruitmentType {
	req := &JobRecruitmentType{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	return req
}

// builder结束

type JobRequirement struct {
	ShortCode          *string                         `json:"short_code,omitempty"`
	Name               *string                         `json:"name,omitempty"`
	DisplayProgress    *int                            `json:"display_progress,omitempty"`
	HeadCount          *int                            `json:"head_count,omitempty"`
	RecruitmentTypeId  *string                         `json:"recruitment_type_id,omitempty"`
	MaxLevelId         *string                         `json:"max_level_id,omitempty"`
	MinLevelId         *string                         `json:"min_level_id,omitempty"`
	SequenceId         *string                         `json:"sequence_id,omitempty"`
	Category           *int                            `json:"category,omitempty"`
	DepartmentId       *string                         `json:"department_id,omitempty"`
	RecruiterIdList    []string                        `json:"recruiter_id_list,omitempty"`
	DirectLeaderIdList []string                        `json:"direct_leader_id_list,omitempty"`
	StartTime          *string                         `json:"start_time,omitempty"`
	Deadline           *string                         `json:"deadline,omitempty"`
	Priority           *int                            `json:"priority,omitempty"`
	RequiredDegree     *int                            `json:"required_degree,omitempty"`
	MaxSalary          *string                         `json:"max_salary,omitempty"`
	MinSalary          *string                         `json:"min_salary,omitempty"`
	AddressId          *string                         `json:"address_id,omitempty"`
	Description        *string                         `json:"description,omitempty"`
	CustomizedDataList []*JobRequirementCustomizedData `json:"customized_data_list,omitempty"`
}

// builder开始
type JobRequirementBuilder struct {
	shortCode              string
	shortCodeFlag          bool
	name                   string
	nameFlag               bool
	displayProgress        int
	displayProgressFlag    bool
	headCount              int
	headCountFlag          bool
	recruitmentTypeId      string
	recruitmentTypeIdFlag  bool
	maxLevelId             string
	maxLevelIdFlag         bool
	minLevelId             string
	minLevelIdFlag         bool
	sequenceId             string
	sequenceIdFlag         bool
	category               int
	categoryFlag           bool
	departmentId           string
	departmentIdFlag       bool
	recruiterIdList        []string
	recruiterIdListFlag    bool
	directLeaderIdList     []string
	directLeaderIdListFlag bool
	startTime              string
	startTimeFlag          bool
	deadline               string
	deadlineFlag           bool
	priority               int
	priorityFlag           bool
	requiredDegree         int
	requiredDegreeFlag     bool
	maxSalary              string
	maxSalaryFlag          bool
	minSalary              string
	minSalaryFlag          bool
	addressId              string
	addressIdFlag          bool
	description            string
	descriptionFlag        bool
	customizedDataList     []*JobRequirementCustomizedData
	customizedDataListFlag bool
}

func NewJobRequirementBuilder() *JobRequirementBuilder {
	builder := &JobRequirementBuilder{}
	return builder
}

func (builder *JobRequirementBuilder) ShortCode(shortCode string) *JobRequirementBuilder {
	builder.shortCode = shortCode
	builder.shortCodeFlag = true
	return builder
}
func (builder *JobRequirementBuilder) Name(name string) *JobRequirementBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *JobRequirementBuilder) DisplayProgress(displayProgress int) *JobRequirementBuilder {
	builder.displayProgress = displayProgress
	builder.displayProgressFlag = true
	return builder
}
func (builder *JobRequirementBuilder) HeadCount(headCount int) *JobRequirementBuilder {
	builder.headCount = headCount
	builder.headCountFlag = true
	return builder
}
func (builder *JobRequirementBuilder) RecruitmentTypeId(recruitmentTypeId string) *JobRequirementBuilder {
	builder.recruitmentTypeId = recruitmentTypeId
	builder.recruitmentTypeIdFlag = true
	return builder
}
func (builder *JobRequirementBuilder) MaxLevelId(maxLevelId string) *JobRequirementBuilder {
	builder.maxLevelId = maxLevelId
	builder.maxLevelIdFlag = true
	return builder
}
func (builder *JobRequirementBuilder) MinLevelId(minLevelId string) *JobRequirementBuilder {
	builder.minLevelId = minLevelId
	builder.minLevelIdFlag = true
	return builder
}
func (builder *JobRequirementBuilder) SequenceId(sequenceId string) *JobRequirementBuilder {
	builder.sequenceId = sequenceId
	builder.sequenceIdFlag = true
	return builder
}
func (builder *JobRequirementBuilder) Category(category int) *JobRequirementBuilder {
	builder.category = category
	builder.categoryFlag = true
	return builder
}
func (builder *JobRequirementBuilder) DepartmentId(departmentId string) *JobRequirementBuilder {
	builder.departmentId = departmentId
	builder.departmentIdFlag = true
	return builder
}
func (builder *JobRequirementBuilder) RecruiterIdList(recruiterIdList []string) *JobRequirementBuilder {
	builder.recruiterIdList = recruiterIdList
	builder.recruiterIdListFlag = true
	return builder
}
func (builder *JobRequirementBuilder) DirectLeaderIdList(directLeaderIdList []string) *JobRequirementBuilder {
	builder.directLeaderIdList = directLeaderIdList
	builder.directLeaderIdListFlag = true
	return builder
}
func (builder *JobRequirementBuilder) StartTime(startTime string) *JobRequirementBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}
func (builder *JobRequirementBuilder) Deadline(deadline string) *JobRequirementBuilder {
	builder.deadline = deadline
	builder.deadlineFlag = true
	return builder
}
func (builder *JobRequirementBuilder) Priority(priority int) *JobRequirementBuilder {
	builder.priority = priority
	builder.priorityFlag = true
	return builder
}
func (builder *JobRequirementBuilder) RequiredDegree(requiredDegree int) *JobRequirementBuilder {
	builder.requiredDegree = requiredDegree
	builder.requiredDegreeFlag = true
	return builder
}
func (builder *JobRequirementBuilder) MaxSalary(maxSalary string) *JobRequirementBuilder {
	builder.maxSalary = maxSalary
	builder.maxSalaryFlag = true
	return builder
}
func (builder *JobRequirementBuilder) MinSalary(minSalary string) *JobRequirementBuilder {
	builder.minSalary = minSalary
	builder.minSalaryFlag = true
	return builder
}
func (builder *JobRequirementBuilder) AddressId(addressId string) *JobRequirementBuilder {
	builder.addressId = addressId
	builder.addressIdFlag = true
	return builder
}
func (builder *JobRequirementBuilder) Description(description string) *JobRequirementBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}
func (builder *JobRequirementBuilder) CustomizedDataList(customizedDataList []*JobRequirementCustomizedData) *JobRequirementBuilder {
	builder.customizedDataList = customizedDataList
	builder.customizedDataListFlag = true
	return builder
}

func (builder *JobRequirementBuilder) Build() *JobRequirement {
	req := &JobRequirement{}
	if builder.shortCodeFlag {
		req.ShortCode = &builder.shortCode

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.displayProgressFlag {
		req.DisplayProgress = &builder.displayProgress

	}
	if builder.headCountFlag {
		req.HeadCount = &builder.headCount

	}
	if builder.recruitmentTypeIdFlag {
		req.RecruitmentTypeId = &builder.recruitmentTypeId

	}
	if builder.maxLevelIdFlag {
		req.MaxLevelId = &builder.maxLevelId

	}
	if builder.minLevelIdFlag {
		req.MinLevelId = &builder.minLevelId

	}
	if builder.sequenceIdFlag {
		req.SequenceId = &builder.sequenceId

	}
	if builder.categoryFlag {
		req.Category = &builder.category

	}
	if builder.departmentIdFlag {
		req.DepartmentId = &builder.departmentId

	}
	if builder.recruiterIdListFlag {
		req.RecruiterIdList = builder.recruiterIdList
	}
	if builder.directLeaderIdListFlag {
		req.DirectLeaderIdList = builder.directLeaderIdList
	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.deadlineFlag {
		req.Deadline = &builder.deadline

	}
	if builder.priorityFlag {
		req.Priority = &builder.priority

	}
	if builder.requiredDegreeFlag {
		req.RequiredDegree = &builder.requiredDegree

	}
	if builder.maxSalaryFlag {
		req.MaxSalary = &builder.maxSalary

	}
	if builder.minSalaryFlag {
		req.MinSalary = &builder.minSalary

	}
	if builder.addressIdFlag {
		req.AddressId = &builder.addressId

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	if builder.customizedDataListFlag {
		req.CustomizedDataList = builder.customizedDataList
	}
	return req
}

// builder结束

type JobRequirementCustomizedData struct {
	ObjectId *string `json:"object_id,omitempty"`
	Value    *string `json:"value,omitempty"`
}

// builder开始
type JobRequirementCustomizedDataBuilder struct {
	objectId     string
	objectIdFlag bool
	value        string
	valueFlag    bool
}

func NewJobRequirementCustomizedDataBuilder() *JobRequirementCustomizedDataBuilder {
	builder := &JobRequirementCustomizedDataBuilder{}
	return builder
}

func (builder *JobRequirementCustomizedDataBuilder) ObjectId(objectId string) *JobRequirementCustomizedDataBuilder {
	builder.objectId = objectId
	builder.objectIdFlag = true
	return builder
}
func (builder *JobRequirementCustomizedDataBuilder) Value(value string) *JobRequirementCustomizedDataBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}

func (builder *JobRequirementCustomizedDataBuilder) Build() *JobRequirementCustomizedData {
	req := &JobRequirementCustomizedData{}
	if builder.objectIdFlag {
		req.ObjectId = &builder.objectId

	}
	if builder.valueFlag {
		req.Value = &builder.value

	}
	return req
}

// builder结束

type JobRequirementCustomizedDataDto struct {
	ObjectId   *string                        `json:"object_id,omitempty"`
	Name       *I18n                          `json:"name,omitempty"`
	ObjectType *int                           `json:"object_type,omitempty"`
	Value      *JobRequirementCustomizedValue `json:"value,omitempty"`
}

// builder开始
type JobRequirementCustomizedDataDtoBuilder struct {
	objectId       string
	objectIdFlag   bool
	name           *I18n
	nameFlag       bool
	objectType     int
	objectTypeFlag bool
	value          *JobRequirementCustomizedValue
	valueFlag      bool
}

func NewJobRequirementCustomizedDataDtoBuilder() *JobRequirementCustomizedDataDtoBuilder {
	builder := &JobRequirementCustomizedDataDtoBuilder{}
	return builder
}

func (builder *JobRequirementCustomizedDataDtoBuilder) ObjectId(objectId string) *JobRequirementCustomizedDataDtoBuilder {
	builder.objectId = objectId
	builder.objectIdFlag = true
	return builder
}
func (builder *JobRequirementCustomizedDataDtoBuilder) Name(name *I18n) *JobRequirementCustomizedDataDtoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *JobRequirementCustomizedDataDtoBuilder) ObjectType(objectType int) *JobRequirementCustomizedDataDtoBuilder {
	builder.objectType = objectType
	builder.objectTypeFlag = true
	return builder
}
func (builder *JobRequirementCustomizedDataDtoBuilder) Value(value *JobRequirementCustomizedValue) *JobRequirementCustomizedDataDtoBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}

func (builder *JobRequirementCustomizedDataDtoBuilder) Build() *JobRequirementCustomizedDataDto {
	req := &JobRequirementCustomizedDataDto{}
	if builder.objectIdFlag {
		req.ObjectId = &builder.objectId

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.objectTypeFlag {
		req.ObjectType = &builder.objectType

	}
	if builder.valueFlag {
		req.Value = builder.value
	}
	return req
}

// builder结束

type JobRequirementCustomizedOption struct {
	Key  *string `json:"key,omitempty"`
	Name *I18n   `json:"name,omitempty"`
}

// builder开始
type JobRequirementCustomizedOptionBuilder struct {
	key      string
	keyFlag  bool
	name     *I18n
	nameFlag bool
}

func NewJobRequirementCustomizedOptionBuilder() *JobRequirementCustomizedOptionBuilder {
	builder := &JobRequirementCustomizedOptionBuilder{}
	return builder
}

func (builder *JobRequirementCustomizedOptionBuilder) Key(key string) *JobRequirementCustomizedOptionBuilder {
	builder.key = key
	builder.keyFlag = true
	return builder
}
func (builder *JobRequirementCustomizedOptionBuilder) Name(name *I18n) *JobRequirementCustomizedOptionBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *JobRequirementCustomizedOptionBuilder) Build() *JobRequirementCustomizedOption {
	req := &JobRequirementCustomizedOption{}
	if builder.keyFlag {
		req.Key = &builder.key

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	return req
}

// builder结束

type JobRequirementCustomizedTimeRange struct {
	StartTime *string `json:"start_time,omitempty"`
	EndTime   *string `json:"end_time,omitempty"`
}

// builder开始
type JobRequirementCustomizedTimeRangeBuilder struct {
	startTime     string
	startTimeFlag bool
	endTime       string
	endTimeFlag   bool
}

func NewJobRequirementCustomizedTimeRangeBuilder() *JobRequirementCustomizedTimeRangeBuilder {
	builder := &JobRequirementCustomizedTimeRangeBuilder{}
	return builder
}

func (builder *JobRequirementCustomizedTimeRangeBuilder) StartTime(startTime string) *JobRequirementCustomizedTimeRangeBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}
func (builder *JobRequirementCustomizedTimeRangeBuilder) EndTime(endTime string) *JobRequirementCustomizedTimeRangeBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

func (builder *JobRequirementCustomizedTimeRangeBuilder) Build() *JobRequirementCustomizedTimeRange {
	req := &JobRequirementCustomizedTimeRange{}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	return req
}

// builder结束

type JobRequirementCustomizedValue struct {
	Content    *string                            `json:"content,omitempty"`
	Option     *JobRequirementCustomizedOption    `json:"option,omitempty"`
	OptionList []*JobRequirementCustomizedOption  `json:"option_list,omitempty"`
	TimeRange  *JobRequirementCustomizedTimeRange `json:"time_range,omitempty"`
	Time       *string                            `json:"time,omitempty"`
	Number     *string                            `json:"number,omitempty"`
}

// builder开始
type JobRequirementCustomizedValueBuilder struct {
	content        string
	contentFlag    bool
	option         *JobRequirementCustomizedOption
	optionFlag     bool
	optionList     []*JobRequirementCustomizedOption
	optionListFlag bool
	timeRange      *JobRequirementCustomizedTimeRange
	timeRangeFlag  bool
	time           string
	timeFlag       bool
	number         string
	numberFlag     bool
}

func NewJobRequirementCustomizedValueBuilder() *JobRequirementCustomizedValueBuilder {
	builder := &JobRequirementCustomizedValueBuilder{}
	return builder
}

func (builder *JobRequirementCustomizedValueBuilder) Content(content string) *JobRequirementCustomizedValueBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}
func (builder *JobRequirementCustomizedValueBuilder) Option(option *JobRequirementCustomizedOption) *JobRequirementCustomizedValueBuilder {
	builder.option = option
	builder.optionFlag = true
	return builder
}
func (builder *JobRequirementCustomizedValueBuilder) OptionList(optionList []*JobRequirementCustomizedOption) *JobRequirementCustomizedValueBuilder {
	builder.optionList = optionList
	builder.optionListFlag = true
	return builder
}
func (builder *JobRequirementCustomizedValueBuilder) TimeRange(timeRange *JobRequirementCustomizedTimeRange) *JobRequirementCustomizedValueBuilder {
	builder.timeRange = timeRange
	builder.timeRangeFlag = true
	return builder
}
func (builder *JobRequirementCustomizedValueBuilder) Time(time string) *JobRequirementCustomizedValueBuilder {
	builder.time = time
	builder.timeFlag = true
	return builder
}
func (builder *JobRequirementCustomizedValueBuilder) Number(number string) *JobRequirementCustomizedValueBuilder {
	builder.number = number
	builder.numberFlag = true
	return builder
}

func (builder *JobRequirementCustomizedValueBuilder) Build() *JobRequirementCustomizedValue {
	req := &JobRequirementCustomizedValue{}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.optionFlag {
		req.Option = builder.option
	}
	if builder.optionListFlag {
		req.OptionList = builder.optionList
	}
	if builder.timeRangeFlag {
		req.TimeRange = builder.timeRange
	}
	if builder.timeFlag {
		req.Time = &builder.time

	}
	if builder.numberFlag {
		req.Number = &builder.number

	}
	return req
}

// builder结束

type JobRequirementDto struct {
	Id                 *string                            `json:"id,omitempty"`
	ShortCode          *string                            `json:"short_code,omitempty"`
	Name               *string                            `json:"name,omitempty"`
	DisplayProgress    *int                               `json:"display_progress,omitempty"`
	HeadCount          *int                               `json:"head_count,omitempty"`
	RecruitmentType    *IdNameObject                      `json:"recruitment_type,omitempty"`
	MaxLevel           *IdNameObject                      `json:"max_level,omitempty"`
	MinLevel           *IdNameObject                      `json:"min_level,omitempty"`
	Sequence           *IdNameObject                      `json:"sequence,omitempty"`
	Category           *int                               `json:"category,omitempty"`
	Department         *IdNameObject                      `json:"department,omitempty"`
	RecruiterList      []*IdNameObject                    `json:"recruiter_list,omitempty"`
	DirectLeaderList   []*IdNameObject                    `json:"direct_leader_list,omitempty"`
	StartTime          *string                            `json:"start_time,omitempty"`
	Deadline           *string                            `json:"deadline,omitempty"`
	Priority           *int                               `json:"priority,omitempty"`
	RequiredDegree     *int                               `json:"required_degree,omitempty"`
	MaxSalary          *string                            `json:"max_salary,omitempty"`
	MinSalary          *string                            `json:"min_salary,omitempty"`
	Address            *IdNameObject                      `json:"address,omitempty"`
	Description        *string                            `json:"description,omitempty"`
	CustomizedDataList []*JobRequirementCustomizedDataDto `json:"customized_data_list,omitempty"`
	JobIdList          []string                           `json:"job_id_list,omitempty"`
}

// builder开始
type JobRequirementDtoBuilder struct {
	id                     string
	idFlag                 bool
	shortCode              string
	shortCodeFlag          bool
	name                   string
	nameFlag               bool
	displayProgress        int
	displayProgressFlag    bool
	headCount              int
	headCountFlag          bool
	recruitmentType        *IdNameObject
	recruitmentTypeFlag    bool
	maxLevel               *IdNameObject
	maxLevelFlag           bool
	minLevel               *IdNameObject
	minLevelFlag           bool
	sequence               *IdNameObject
	sequenceFlag           bool
	category               int
	categoryFlag           bool
	department             *IdNameObject
	departmentFlag         bool
	recruiterList          []*IdNameObject
	recruiterListFlag      bool
	directLeaderList       []*IdNameObject
	directLeaderListFlag   bool
	startTime              string
	startTimeFlag          bool
	deadline               string
	deadlineFlag           bool
	priority               int
	priorityFlag           bool
	requiredDegree         int
	requiredDegreeFlag     bool
	maxSalary              string
	maxSalaryFlag          bool
	minSalary              string
	minSalaryFlag          bool
	address                *IdNameObject
	addressFlag            bool
	description            string
	descriptionFlag        bool
	customizedDataList     []*JobRequirementCustomizedDataDto
	customizedDataListFlag bool
	jobIdList              []string
	jobIdListFlag          bool
}

func NewJobRequirementDtoBuilder() *JobRequirementDtoBuilder {
	builder := &JobRequirementDtoBuilder{}
	return builder
}

func (builder *JobRequirementDtoBuilder) Id(id string) *JobRequirementDtoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *JobRequirementDtoBuilder) ShortCode(shortCode string) *JobRequirementDtoBuilder {
	builder.shortCode = shortCode
	builder.shortCodeFlag = true
	return builder
}
func (builder *JobRequirementDtoBuilder) Name(name string) *JobRequirementDtoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *JobRequirementDtoBuilder) DisplayProgress(displayProgress int) *JobRequirementDtoBuilder {
	builder.displayProgress = displayProgress
	builder.displayProgressFlag = true
	return builder
}
func (builder *JobRequirementDtoBuilder) HeadCount(headCount int) *JobRequirementDtoBuilder {
	builder.headCount = headCount
	builder.headCountFlag = true
	return builder
}
func (builder *JobRequirementDtoBuilder) RecruitmentType(recruitmentType *IdNameObject) *JobRequirementDtoBuilder {
	builder.recruitmentType = recruitmentType
	builder.recruitmentTypeFlag = true
	return builder
}
func (builder *JobRequirementDtoBuilder) MaxLevel(maxLevel *IdNameObject) *JobRequirementDtoBuilder {
	builder.maxLevel = maxLevel
	builder.maxLevelFlag = true
	return builder
}
func (builder *JobRequirementDtoBuilder) MinLevel(minLevel *IdNameObject) *JobRequirementDtoBuilder {
	builder.minLevel = minLevel
	builder.minLevelFlag = true
	return builder
}
func (builder *JobRequirementDtoBuilder) Sequence(sequence *IdNameObject) *JobRequirementDtoBuilder {
	builder.sequence = sequence
	builder.sequenceFlag = true
	return builder
}
func (builder *JobRequirementDtoBuilder) Category(category int) *JobRequirementDtoBuilder {
	builder.category = category
	builder.categoryFlag = true
	return builder
}
func (builder *JobRequirementDtoBuilder) Department(department *IdNameObject) *JobRequirementDtoBuilder {
	builder.department = department
	builder.departmentFlag = true
	return builder
}
func (builder *JobRequirementDtoBuilder) RecruiterList(recruiterList []*IdNameObject) *JobRequirementDtoBuilder {
	builder.recruiterList = recruiterList
	builder.recruiterListFlag = true
	return builder
}
func (builder *JobRequirementDtoBuilder) DirectLeaderList(directLeaderList []*IdNameObject) *JobRequirementDtoBuilder {
	builder.directLeaderList = directLeaderList
	builder.directLeaderListFlag = true
	return builder
}
func (builder *JobRequirementDtoBuilder) StartTime(startTime string) *JobRequirementDtoBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}
func (builder *JobRequirementDtoBuilder) Deadline(deadline string) *JobRequirementDtoBuilder {
	builder.deadline = deadline
	builder.deadlineFlag = true
	return builder
}
func (builder *JobRequirementDtoBuilder) Priority(priority int) *JobRequirementDtoBuilder {
	builder.priority = priority
	builder.priorityFlag = true
	return builder
}
func (builder *JobRequirementDtoBuilder) RequiredDegree(requiredDegree int) *JobRequirementDtoBuilder {
	builder.requiredDegree = requiredDegree
	builder.requiredDegreeFlag = true
	return builder
}
func (builder *JobRequirementDtoBuilder) MaxSalary(maxSalary string) *JobRequirementDtoBuilder {
	builder.maxSalary = maxSalary
	builder.maxSalaryFlag = true
	return builder
}
func (builder *JobRequirementDtoBuilder) MinSalary(minSalary string) *JobRequirementDtoBuilder {
	builder.minSalary = minSalary
	builder.minSalaryFlag = true
	return builder
}
func (builder *JobRequirementDtoBuilder) Address(address *IdNameObject) *JobRequirementDtoBuilder {
	builder.address = address
	builder.addressFlag = true
	return builder
}
func (builder *JobRequirementDtoBuilder) Description(description string) *JobRequirementDtoBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}
func (builder *JobRequirementDtoBuilder) CustomizedDataList(customizedDataList []*JobRequirementCustomizedDataDto) *JobRequirementDtoBuilder {
	builder.customizedDataList = customizedDataList
	builder.customizedDataListFlag = true
	return builder
}
func (builder *JobRequirementDtoBuilder) JobIdList(jobIdList []string) *JobRequirementDtoBuilder {
	builder.jobIdList = jobIdList
	builder.jobIdListFlag = true
	return builder
}

func (builder *JobRequirementDtoBuilder) Build() *JobRequirementDto {
	req := &JobRequirementDto{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.shortCodeFlag {
		req.ShortCode = &builder.shortCode

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.displayProgressFlag {
		req.DisplayProgress = &builder.displayProgress

	}
	if builder.headCountFlag {
		req.HeadCount = &builder.headCount

	}
	if builder.recruitmentTypeFlag {
		req.RecruitmentType = builder.recruitmentType
	}
	if builder.maxLevelFlag {
		req.MaxLevel = builder.maxLevel
	}
	if builder.minLevelFlag {
		req.MinLevel = builder.minLevel
	}
	if builder.sequenceFlag {
		req.Sequence = builder.sequence
	}
	if builder.categoryFlag {
		req.Category = &builder.category

	}
	if builder.departmentFlag {
		req.Department = builder.department
	}
	if builder.recruiterListFlag {
		req.RecruiterList = builder.recruiterList
	}
	if builder.directLeaderListFlag {
		req.DirectLeaderList = builder.directLeaderList
	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.deadlineFlag {
		req.Deadline = &builder.deadline

	}
	if builder.priorityFlag {
		req.Priority = &builder.priority

	}
	if builder.requiredDegreeFlag {
		req.RequiredDegree = &builder.requiredDegree

	}
	if builder.maxSalaryFlag {
		req.MaxSalary = &builder.maxSalary

	}
	if builder.minSalaryFlag {
		req.MinSalary = &builder.minSalary

	}
	if builder.addressFlag {
		req.Address = builder.address
	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	if builder.customizedDataListFlag {
		req.CustomizedDataList = builder.customizedDataList
	}
	if builder.jobIdListFlag {
		req.JobIdList = builder.jobIdList
	}
	return req
}

// builder结束

type JobRequirementSchema struct {
	Id         *string         `json:"id,omitempty"`
	Name       *I18n           `json:"name,omitempty"`
	ObjectList []*CommonSchema `json:"object_list,omitempty"`
}

// builder开始
type JobRequirementSchemaBuilder struct {
	id             string
	idFlag         bool
	name           *I18n
	nameFlag       bool
	objectList     []*CommonSchema
	objectListFlag bool
}

func NewJobRequirementSchemaBuilder() *JobRequirementSchemaBuilder {
	builder := &JobRequirementSchemaBuilder{}
	return builder
}

func (builder *JobRequirementSchemaBuilder) Id(id string) *JobRequirementSchemaBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *JobRequirementSchemaBuilder) Name(name *I18n) *JobRequirementSchemaBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *JobRequirementSchemaBuilder) ObjectList(objectList []*CommonSchema) *JobRequirementSchemaBuilder {
	builder.objectList = objectList
	builder.objectListFlag = true
	return builder
}

func (builder *JobRequirementSchemaBuilder) Build() *JobRequirementSchema {
	req := &JobRequirementSchema{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.objectListFlag {
		req.ObjectList = builder.objectList
	}
	return req
}

// builder结束

type JobSchema struct {
	Id           *string         `json:"id,omitempty"`
	Name         *I18n           `json:"name,omitempty"`
	ScenarioType *int            `json:"scenario_type,omitempty"`
	ObjectList   []*CommonSchema `json:"object_list,omitempty"`
}

// builder开始
type JobSchemaBuilder struct {
	id               string
	idFlag           bool
	name             *I18n
	nameFlag         bool
	scenarioType     int
	scenarioTypeFlag bool
	objectList       []*CommonSchema
	objectListFlag   bool
}

func NewJobSchemaBuilder() *JobSchemaBuilder {
	builder := &JobSchemaBuilder{}
	return builder
}

func (builder *JobSchemaBuilder) Id(id string) *JobSchemaBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *JobSchemaBuilder) Name(name *I18n) *JobSchemaBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *JobSchemaBuilder) ScenarioType(scenarioType int) *JobSchemaBuilder {
	builder.scenarioType = scenarioType
	builder.scenarioTypeFlag = true
	return builder
}
func (builder *JobSchemaBuilder) ObjectList(objectList []*CommonSchema) *JobSchemaBuilder {
	builder.objectList = objectList
	builder.objectListFlag = true
	return builder
}

func (builder *JobSchemaBuilder) Build() *JobSchema {
	req := &JobSchema{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.scenarioTypeFlag {
		req.ScenarioType = &builder.scenarioType

	}
	if builder.objectListFlag {
		req.ObjectList = builder.objectList
	}
	return req
}

// builder结束

type JobType struct {
	Id     *string `json:"id,omitempty"`
	ZhName *string `json:"zh_name,omitempty"`
	EnName *string `json:"en_name,omitempty"`
}

// builder开始
type JobTypeBuilder struct {
	id         string
	idFlag     bool
	zhName     string
	zhNameFlag bool
	enName     string
	enNameFlag bool
}

func NewJobTypeBuilder() *JobTypeBuilder {
	builder := &JobTypeBuilder{}
	return builder
}

func (builder *JobTypeBuilder) Id(id string) *JobTypeBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *JobTypeBuilder) ZhName(zhName string) *JobTypeBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}
func (builder *JobTypeBuilder) EnName(enName string) *JobTypeBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

func (builder *JobTypeBuilder) Build() *JobType {
	req := &JobType{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	return req
}

// builder结束

type LanguageInfo struct {
	Language    *int `json:"language,omitempty"`
	Proficiency *int `json:"proficiency,omitempty"`
}

// builder开始
type LanguageInfoBuilder struct {
	language        int
	languageFlag    bool
	proficiency     int
	proficiencyFlag bool
}

func NewLanguageInfoBuilder() *LanguageInfoBuilder {
	builder := &LanguageInfoBuilder{}
	return builder
}

func (builder *LanguageInfoBuilder) Language(language int) *LanguageInfoBuilder {
	builder.language = language
	builder.languageFlag = true
	return builder
}
func (builder *LanguageInfoBuilder) Proficiency(proficiency int) *LanguageInfoBuilder {
	builder.proficiency = proficiency
	builder.proficiencyFlag = true
	return builder
}

func (builder *LanguageInfoBuilder) Build() *LanguageInfo {
	req := &LanguageInfo{}
	if builder.languageFlag {
		req.Language = &builder.language

	}
	if builder.proficiencyFlag {
		req.Proficiency = &builder.proficiency

	}
	return req
}

// builder结束

type Level struct {
	Id     *string `json:"id,omitempty"`
	Name   *string `json:"name,omitempty"`
	EnName *string `json:"en_name,omitempty"`
}

// builder开始
type LevelBuilder struct {
	id         string
	idFlag     bool
	name       string
	nameFlag   bool
	enName     string
	enNameFlag bool
}

func NewLevelBuilder() *LevelBuilder {
	builder := &LevelBuilder{}
	return builder
}

func (builder *LevelBuilder) Id(id string) *LevelBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *LevelBuilder) Name(name string) *LevelBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *LevelBuilder) EnName(enName string) *LevelBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

func (builder *LevelBuilder) Build() *Level {
	req := &Level{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	return req
}

// builder结束

type Location struct {
	Id           *string         `json:"id,omitempty"`
	Name         *I18n           `json:"name,omitempty"`
	District     *CodeNameObject `json:"district,omitempty"`
	City         *CodeNameObject `json:"city,omitempty"`
	State        *CodeNameObject `json:"state,omitempty"`
	Country      *CodeNameObject `json:"country,omitempty"`
	ActiveStatus *int            `json:"active_status,omitempty"`
}

// builder开始
type LocationBuilder struct {
	id               string
	idFlag           bool
	name             *I18n
	nameFlag         bool
	district         *CodeNameObject
	districtFlag     bool
	city             *CodeNameObject
	cityFlag         bool
	state            *CodeNameObject
	stateFlag        bool
	country          *CodeNameObject
	countryFlag      bool
	activeStatus     int
	activeStatusFlag bool
}

func NewLocationBuilder() *LocationBuilder {
	builder := &LocationBuilder{}
	return builder
}

func (builder *LocationBuilder) Id(id string) *LocationBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *LocationBuilder) Name(name *I18n) *LocationBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *LocationBuilder) District(district *CodeNameObject) *LocationBuilder {
	builder.district = district
	builder.districtFlag = true
	return builder
}
func (builder *LocationBuilder) City(city *CodeNameObject) *LocationBuilder {
	builder.city = city
	builder.cityFlag = true
	return builder
}
func (builder *LocationBuilder) State(state *CodeNameObject) *LocationBuilder {
	builder.state = state
	builder.stateFlag = true
	return builder
}
func (builder *LocationBuilder) Country(country *CodeNameObject) *LocationBuilder {
	builder.country = country
	builder.countryFlag = true
	return builder
}
func (builder *LocationBuilder) ActiveStatus(activeStatus int) *LocationBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}

func (builder *LocationBuilder) Build() *Location {
	req := &Location{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.districtFlag {
		req.District = builder.district
	}
	if builder.cityFlag {
		req.City = builder.city
	}
	if builder.stateFlag {
		req.State = builder.state
	}
	if builder.countryFlag {
		req.Country = builder.country
	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	return req
}

// builder结束

type LocationBaseInfo struct {
	Code         *string `json:"code,omitempty"`
	Name         *string `json:"name,omitempty"`
	EnName       *string `json:"en_name,omitempty"`
	LocationType *int    `json:"location_type,omitempty"`
	I18nName     *string `json:"i18n_name,omitempty"`
	PyName       *string `json:"py_name,omitempty"`
}

// builder开始
type LocationBaseInfoBuilder struct {
	code             string
	codeFlag         bool
	name             string
	nameFlag         bool
	enName           string
	enNameFlag       bool
	locationType     int
	locationTypeFlag bool
	i18nName         string
	i18nNameFlag     bool
	pyName           string
	pyNameFlag       bool
}

func NewLocationBaseInfoBuilder() *LocationBaseInfoBuilder {
	builder := &LocationBaseInfoBuilder{}
	return builder
}

func (builder *LocationBaseInfoBuilder) Code(code string) *LocationBaseInfoBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}
func (builder *LocationBaseInfoBuilder) Name(name string) *LocationBaseInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *LocationBaseInfoBuilder) EnName(enName string) *LocationBaseInfoBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}
func (builder *LocationBaseInfoBuilder) LocationType(locationType int) *LocationBaseInfoBuilder {
	builder.locationType = locationType
	builder.locationTypeFlag = true
	return builder
}
func (builder *LocationBaseInfoBuilder) I18nName(i18nName string) *LocationBaseInfoBuilder {
	builder.i18nName = i18nName
	builder.i18nNameFlag = true
	return builder
}
func (builder *LocationBaseInfoBuilder) PyName(pyName string) *LocationBaseInfoBuilder {
	builder.pyName = pyName
	builder.pyNameFlag = true
	return builder
}

func (builder *LocationBaseInfoBuilder) Build() *LocationBaseInfo {
	req := &LocationBaseInfo{}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.locationTypeFlag {
		req.LocationType = &builder.locationType

	}
	if builder.i18nNameFlag {
		req.I18nName = &builder.i18nName

	}
	if builder.pyNameFlag {
		req.PyName = &builder.pyName

	}
	return req
}

// builder结束

type Nationality struct {
	NationalityCode *string `json:"nationality_code,omitempty"`
	Name            *string `json:"name,omitempty"`
	EnName          *string `json:"en_name,omitempty"`
}

// builder开始
type NationalityBuilder struct {
	nationalityCode     string
	nationalityCodeFlag bool
	name                string
	nameFlag            bool
	enName              string
	enNameFlag          bool
}

func NewNationalityBuilder() *NationalityBuilder {
	builder := &NationalityBuilder{}
	return builder
}

func (builder *NationalityBuilder) NationalityCode(nationalityCode string) *NationalityBuilder {
	builder.nationalityCode = nationalityCode
	builder.nationalityCodeFlag = true
	return builder
}
func (builder *NationalityBuilder) Name(name string) *NationalityBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *NationalityBuilder) EnName(enName string) *NationalityBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

func (builder *NationalityBuilder) Build() *Nationality {
	req := &Nationality{}
	if builder.nationalityCodeFlag {
		req.NationalityCode = &builder.nationalityCode

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	return req
}

// builder结束

type Note struct {
	Id            *string `json:"id,omitempty"`
	TalentId      *string `json:"talent_id,omitempty"`
	ApplicationId *string `json:"application_id,omitempty"`
	IsPrivate     *bool   `json:"is_private,omitempty"`
	CreateTime    *int    `json:"create_time,omitempty"`
	ModifyTime    *int    `json:"modify_time,omitempty"`
	CreatorId     *string `json:"creator_id,omitempty"`
	Content       *string `json:"content,omitempty"`
	Privacy       *int    `json:"privacy,omitempty"`
}

// builder开始
type NoteBuilder struct {
	id                string
	idFlag            bool
	talentId          string
	talentIdFlag      bool
	applicationId     string
	applicationIdFlag bool
	isPrivate         bool
	isPrivateFlag     bool
	createTime        int
	createTimeFlag    bool
	modifyTime        int
	modifyTimeFlag    bool
	creatorId         string
	creatorIdFlag     bool
	content           string
	contentFlag       bool
	privacy           int
	privacyFlag       bool
}

func NewNoteBuilder() *NoteBuilder {
	builder := &NoteBuilder{}
	return builder
}

func (builder *NoteBuilder) Id(id string) *NoteBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *NoteBuilder) TalentId(talentId string) *NoteBuilder {
	builder.talentId = talentId
	builder.talentIdFlag = true
	return builder
}
func (builder *NoteBuilder) ApplicationId(applicationId string) *NoteBuilder {
	builder.applicationId = applicationId
	builder.applicationIdFlag = true
	return builder
}
func (builder *NoteBuilder) IsPrivate(isPrivate bool) *NoteBuilder {
	builder.isPrivate = isPrivate
	builder.isPrivateFlag = true
	return builder
}
func (builder *NoteBuilder) CreateTime(createTime int) *NoteBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}
func (builder *NoteBuilder) ModifyTime(modifyTime int) *NoteBuilder {
	builder.modifyTime = modifyTime
	builder.modifyTimeFlag = true
	return builder
}
func (builder *NoteBuilder) CreatorId(creatorId string) *NoteBuilder {
	builder.creatorId = creatorId
	builder.creatorIdFlag = true
	return builder
}
func (builder *NoteBuilder) Content(content string) *NoteBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}
func (builder *NoteBuilder) Privacy(privacy int) *NoteBuilder {
	builder.privacy = privacy
	builder.privacyFlag = true
	return builder
}

func (builder *NoteBuilder) Build() *Note {
	req := &Note{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.talentIdFlag {
		req.TalentId = &builder.talentId

	}
	if builder.applicationIdFlag {
		req.ApplicationId = &builder.applicationId

	}
	if builder.isPrivateFlag {
		req.IsPrivate = &builder.isPrivate

	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.modifyTimeFlag {
		req.ModifyTime = &builder.modifyTime

	}
	if builder.creatorIdFlag {
		req.CreatorId = &builder.creatorId

	}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.privacyFlag {
		req.Privacy = &builder.privacy

	}
	return req
}

// builder结束

type Offer struct {
	Id            *string                     `json:"id,omitempty"`
	ApplicationId *string                     `json:"application_id,omitempty"`
	BasicInfo     *ApplicationOfferBasicInfo  `json:"basic_info,omitempty"`
	SalaryPlan    *ApplicationOfferSalaryPlan `json:"salary_plan,omitempty"`
	SchemaId      *string                     `json:"schema_id,omitempty"`
	OfferStatus   *int                        `json:"offer_status,omitempty"`
	JobInfo       *OfferJobInfo               `json:"job_info,omitempty"`
}

// builder开始
type OfferBuilder struct {
	id                string
	idFlag            bool
	applicationId     string
	applicationIdFlag bool
	basicInfo         *ApplicationOfferBasicInfo
	basicInfoFlag     bool
	salaryPlan        *ApplicationOfferSalaryPlan
	salaryPlanFlag    bool
	schemaId          string
	schemaIdFlag      bool
	offerStatus       int
	offerStatusFlag   bool
	jobInfo           *OfferJobInfo
	jobInfoFlag       bool
}

func NewOfferBuilder() *OfferBuilder {
	builder := &OfferBuilder{}
	return builder
}

func (builder *OfferBuilder) Id(id string) *OfferBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *OfferBuilder) ApplicationId(applicationId string) *OfferBuilder {
	builder.applicationId = applicationId
	builder.applicationIdFlag = true
	return builder
}
func (builder *OfferBuilder) BasicInfo(basicInfo *ApplicationOfferBasicInfo) *OfferBuilder {
	builder.basicInfo = basicInfo
	builder.basicInfoFlag = true
	return builder
}
func (builder *OfferBuilder) SalaryPlan(salaryPlan *ApplicationOfferSalaryPlan) *OfferBuilder {
	builder.salaryPlan = salaryPlan
	builder.salaryPlanFlag = true
	return builder
}
func (builder *OfferBuilder) SchemaId(schemaId string) *OfferBuilder {
	builder.schemaId = schemaId
	builder.schemaIdFlag = true
	return builder
}
func (builder *OfferBuilder) OfferStatus(offerStatus int) *OfferBuilder {
	builder.offerStatus = offerStatus
	builder.offerStatusFlag = true
	return builder
}
func (builder *OfferBuilder) JobInfo(jobInfo *OfferJobInfo) *OfferBuilder {
	builder.jobInfo = jobInfo
	builder.jobInfoFlag = true
	return builder
}

func (builder *OfferBuilder) Build() *Offer {
	req := &Offer{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.applicationIdFlag {
		req.ApplicationId = &builder.applicationId

	}
	if builder.basicInfoFlag {
		req.BasicInfo = builder.basicInfo
	}
	if builder.salaryPlanFlag {
		req.SalaryPlan = builder.salaryPlan
	}
	if builder.schemaIdFlag {
		req.SchemaId = &builder.schemaId

	}
	if builder.offerStatusFlag {
		req.OfferStatus = &builder.offerStatus

	}
	if builder.jobInfoFlag {
		req.JobInfo = builder.jobInfo
	}
	return req
}

// builder结束

type OfferApplyForm struct {
	Id         *string `json:"id,omitempty"`
	Name       *I18n   `json:"name,omitempty"`
	CreateTime *string `json:"create_time,omitempty"`
}

// builder开始
type OfferApplyFormBuilder struct {
	id             string
	idFlag         bool
	name           *I18n
	nameFlag       bool
	createTime     string
	createTimeFlag bool
}

func NewOfferApplyFormBuilder() *OfferApplyFormBuilder {
	builder := &OfferApplyFormBuilder{}
	return builder
}

func (builder *OfferApplyFormBuilder) Id(id string) *OfferApplyFormBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *OfferApplyFormBuilder) Name(name *I18n) *OfferApplyFormBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *OfferApplyFormBuilder) CreateTime(createTime string) *OfferApplyFormBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}

func (builder *OfferApplyFormBuilder) Build() *OfferApplyForm {
	req := &OfferApplyForm{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	return req
}

// builder结束

type OfferApplyFormConfigFormulaInfo struct {
	Value    *string                              `json:"value,omitempty"`
	Result   *int                                 `json:"result,omitempty"`
	ExtraMap []*OfferApplyFormFormulaExtraMapInfo `json:"extra_map,omitempty"`
}

// builder开始
type OfferApplyFormConfigFormulaInfoBuilder struct {
	value        string
	valueFlag    bool
	result       int
	resultFlag   bool
	extraMap     []*OfferApplyFormFormulaExtraMapInfo
	extraMapFlag bool
}

func NewOfferApplyFormConfigFormulaInfoBuilder() *OfferApplyFormConfigFormulaInfoBuilder {
	builder := &OfferApplyFormConfigFormulaInfoBuilder{}
	return builder
}

func (builder *OfferApplyFormConfigFormulaInfoBuilder) Value(value string) *OfferApplyFormConfigFormulaInfoBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}
func (builder *OfferApplyFormConfigFormulaInfoBuilder) Result(result int) *OfferApplyFormConfigFormulaInfoBuilder {
	builder.result = result
	builder.resultFlag = true
	return builder
}
func (builder *OfferApplyFormConfigFormulaInfoBuilder) ExtraMap(extraMap []*OfferApplyFormFormulaExtraMapInfo) *OfferApplyFormConfigFormulaInfoBuilder {
	builder.extraMap = extraMap
	builder.extraMapFlag = true
	return builder
}

func (builder *OfferApplyFormConfigFormulaInfoBuilder) Build() *OfferApplyFormConfigFormulaInfo {
	req := &OfferApplyFormConfigFormulaInfo{}
	if builder.valueFlag {
		req.Value = &builder.value

	}
	if builder.resultFlag {
		req.Result = &builder.result

	}
	if builder.extraMapFlag {
		req.ExtraMap = builder.extraMap
	}
	return req
}

// builder结束

type OfferApplyFormConfigOptionInfo struct {
	Id          *string `json:"id,omitempty"`
	Name        *I18n   `json:"name,omitempty"`
	Description *I18n   `json:"description,omitempty"`
}

// builder开始
type OfferApplyFormConfigOptionInfoBuilder struct {
	id              string
	idFlag          bool
	name            *I18n
	nameFlag        bool
	description     *I18n
	descriptionFlag bool
}

func NewOfferApplyFormConfigOptionInfoBuilder() *OfferApplyFormConfigOptionInfoBuilder {
	builder := &OfferApplyFormConfigOptionInfoBuilder{}
	return builder
}

func (builder *OfferApplyFormConfigOptionInfoBuilder) Id(id string) *OfferApplyFormConfigOptionInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *OfferApplyFormConfigOptionInfoBuilder) Name(name *I18n) *OfferApplyFormConfigOptionInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *OfferApplyFormConfigOptionInfoBuilder) Description(description *I18n) *OfferApplyFormConfigOptionInfoBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

func (builder *OfferApplyFormConfigOptionInfoBuilder) Build() *OfferApplyFormConfigOptionInfo {
	req := &OfferApplyFormConfigOptionInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.descriptionFlag {
		req.Description = builder.description
	}
	return req
}

// builder结束

type OfferApplyFormFormulaExtraMapInfo struct {
	Key   *string `json:"key,omitempty"`
	Value *I18n   `json:"value,omitempty"`
}

// builder开始
type OfferApplyFormFormulaExtraMapInfoBuilder struct {
	key       string
	keyFlag   bool
	value     *I18n
	valueFlag bool
}

func NewOfferApplyFormFormulaExtraMapInfoBuilder() *OfferApplyFormFormulaExtraMapInfoBuilder {
	builder := &OfferApplyFormFormulaExtraMapInfoBuilder{}
	return builder
}

func (builder *OfferApplyFormFormulaExtraMapInfoBuilder) Key(key string) *OfferApplyFormFormulaExtraMapInfoBuilder {
	builder.key = key
	builder.keyFlag = true
	return builder
}
func (builder *OfferApplyFormFormulaExtraMapInfoBuilder) Value(value *I18n) *OfferApplyFormFormulaExtraMapInfoBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}

func (builder *OfferApplyFormFormulaExtraMapInfoBuilder) Build() *OfferApplyFormFormulaExtraMapInfo {
	req := &OfferApplyFormFormulaExtraMapInfo{}
	if builder.keyFlag {
		req.Key = &builder.key

	}
	if builder.valueFlag {
		req.Value = builder.value
	}
	return req
}

// builder结束

type OfferApplyFormInfo struct {
	Id     *string               `json:"id,omitempty"`
	Name   *I18n                 `json:"name,omitempty"`
	Schema *OfferApplyFormSchema `json:"schema,omitempty"`
}

// builder开始
type OfferApplyFormInfoBuilder struct {
	id         string
	idFlag     bool
	name       *I18n
	nameFlag   bool
	schema     *OfferApplyFormSchema
	schemaFlag bool
}

func NewOfferApplyFormInfoBuilder() *OfferApplyFormInfoBuilder {
	builder := &OfferApplyFormInfoBuilder{}
	return builder
}

func (builder *OfferApplyFormInfoBuilder) Id(id string) *OfferApplyFormInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *OfferApplyFormInfoBuilder) Name(name *I18n) *OfferApplyFormInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *OfferApplyFormInfoBuilder) Schema(schema *OfferApplyFormSchema) *OfferApplyFormInfoBuilder {
	builder.schema = schema
	builder.schemaFlag = true
	return builder
}

func (builder *OfferApplyFormInfoBuilder) Build() *OfferApplyFormInfo {
	req := &OfferApplyFormInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.schemaFlag {
		req.Schema = builder.schema
	}
	return req
}

// builder结束

type OfferApplyFormModuleInfo struct {
	Id           *string                     `json:"id,omitempty"`
	Name         *I18n                       `json:"name,omitempty"`
	IsCustomized *bool                       `json:"is_customized,omitempty"`
	ActiveStatus *int                        `json:"active_status,omitempty"`
	Hint         *I18n                       `json:"hint,omitempty"`
	ObjectList   []*OfferApplyFormObjectInfo `json:"object_list,omitempty"`
}

// builder开始
type OfferApplyFormModuleInfoBuilder struct {
	id               string
	idFlag           bool
	name             *I18n
	nameFlag         bool
	isCustomized     bool
	isCustomizedFlag bool
	activeStatus     int
	activeStatusFlag bool
	hint             *I18n
	hintFlag         bool
	objectList       []*OfferApplyFormObjectInfo
	objectListFlag   bool
}

func NewOfferApplyFormModuleInfoBuilder() *OfferApplyFormModuleInfoBuilder {
	builder := &OfferApplyFormModuleInfoBuilder{}
	return builder
}

func (builder *OfferApplyFormModuleInfoBuilder) Id(id string) *OfferApplyFormModuleInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *OfferApplyFormModuleInfoBuilder) Name(name *I18n) *OfferApplyFormModuleInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *OfferApplyFormModuleInfoBuilder) IsCustomized(isCustomized bool) *OfferApplyFormModuleInfoBuilder {
	builder.isCustomized = isCustomized
	builder.isCustomizedFlag = true
	return builder
}
func (builder *OfferApplyFormModuleInfoBuilder) ActiveStatus(activeStatus int) *OfferApplyFormModuleInfoBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}
func (builder *OfferApplyFormModuleInfoBuilder) Hint(hint *I18n) *OfferApplyFormModuleInfoBuilder {
	builder.hint = hint
	builder.hintFlag = true
	return builder
}
func (builder *OfferApplyFormModuleInfoBuilder) ObjectList(objectList []*OfferApplyFormObjectInfo) *OfferApplyFormModuleInfoBuilder {
	builder.objectList = objectList
	builder.objectListFlag = true
	return builder
}

func (builder *OfferApplyFormModuleInfoBuilder) Build() *OfferApplyFormModuleInfo {
	req := &OfferApplyFormModuleInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.isCustomizedFlag {
		req.IsCustomized = &builder.isCustomized

	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	if builder.hintFlag {
		req.Hint = builder.hint
	}
	if builder.objectListFlag {
		req.ObjectList = builder.objectList
	}
	return req
}

// builder结束

type OfferApplyFormObjectConfigInfo struct {
	Options             []*OfferApplyFormConfigOptionInfo      `json:"options,omitempty"`
	Formula             *OfferApplyFormConfigFormulaInfo       `json:"formula,omitempty"`
	ObjectDisplayConfig *OfferApplyFormObjectDisplayConfigInfo `json:"object_display_config,omitempty"`
}

// builder开始
type OfferApplyFormObjectConfigInfoBuilder struct {
	options                 []*OfferApplyFormConfigOptionInfo
	optionsFlag             bool
	formula                 *OfferApplyFormConfigFormulaInfo
	formulaFlag             bool
	objectDisplayConfig     *OfferApplyFormObjectDisplayConfigInfo
	objectDisplayConfigFlag bool
}

func NewOfferApplyFormObjectConfigInfoBuilder() *OfferApplyFormObjectConfigInfoBuilder {
	builder := &OfferApplyFormObjectConfigInfoBuilder{}
	return builder
}

func (builder *OfferApplyFormObjectConfigInfoBuilder) Options(options []*OfferApplyFormConfigOptionInfo) *OfferApplyFormObjectConfigInfoBuilder {
	builder.options = options
	builder.optionsFlag = true
	return builder
}
func (builder *OfferApplyFormObjectConfigInfoBuilder) Formula(formula *OfferApplyFormConfigFormulaInfo) *OfferApplyFormObjectConfigInfoBuilder {
	builder.formula = formula
	builder.formulaFlag = true
	return builder
}
func (builder *OfferApplyFormObjectConfigInfoBuilder) ObjectDisplayConfig(objectDisplayConfig *OfferApplyFormObjectDisplayConfigInfo) *OfferApplyFormObjectConfigInfoBuilder {
	builder.objectDisplayConfig = objectDisplayConfig
	builder.objectDisplayConfigFlag = true
	return builder
}

func (builder *OfferApplyFormObjectConfigInfoBuilder) Build() *OfferApplyFormObjectConfigInfo {
	req := &OfferApplyFormObjectConfigInfo{}
	if builder.optionsFlag {
		req.Options = builder.options
	}
	if builder.formulaFlag {
		req.Formula = builder.formula
	}
	if builder.objectDisplayConfigFlag {
		req.ObjectDisplayConfig = builder.objectDisplayConfig
	}
	return req
}

// builder结束

type OfferApplyFormObjectDisplayConfigInfo struct {
	DisplayCondition    *int                                 `json:"display_condition,omitempty"`
	PreObjectConfigList []*OfferApplyFormPreObjectConfigInfo `json:"pre_object_config_list,omitempty"`
}

// builder开始
type OfferApplyFormObjectDisplayConfigInfoBuilder struct {
	displayCondition        int
	displayConditionFlag    bool
	preObjectConfigList     []*OfferApplyFormPreObjectConfigInfo
	preObjectConfigListFlag bool
}

func NewOfferApplyFormObjectDisplayConfigInfoBuilder() *OfferApplyFormObjectDisplayConfigInfoBuilder {
	builder := &OfferApplyFormObjectDisplayConfigInfoBuilder{}
	return builder
}

func (builder *OfferApplyFormObjectDisplayConfigInfoBuilder) DisplayCondition(displayCondition int) *OfferApplyFormObjectDisplayConfigInfoBuilder {
	builder.displayCondition = displayCondition
	builder.displayConditionFlag = true
	return builder
}
func (builder *OfferApplyFormObjectDisplayConfigInfoBuilder) PreObjectConfigList(preObjectConfigList []*OfferApplyFormPreObjectConfigInfo) *OfferApplyFormObjectDisplayConfigInfoBuilder {
	builder.preObjectConfigList = preObjectConfigList
	builder.preObjectConfigListFlag = true
	return builder
}

func (builder *OfferApplyFormObjectDisplayConfigInfoBuilder) Build() *OfferApplyFormObjectDisplayConfigInfo {
	req := &OfferApplyFormObjectDisplayConfigInfo{}
	if builder.displayConditionFlag {
		req.DisplayCondition = &builder.displayCondition

	}
	if builder.preObjectConfigListFlag {
		req.PreObjectConfigList = builder.preObjectConfigList
	}
	return req
}

// builder结束

type OfferApplyFormObjectInfo struct {
	Id           *string                         `json:"id,omitempty"`
	Name         *I18n                           `json:"name,omitempty"`
	Description  *I18n                           `json:"description,omitempty"`
	ModuleId     *string                         `json:"module_id,omitempty"`
	IsCustomized *bool                           `json:"is_customized,omitempty"`
	IsRequired   *bool                           `json:"is_required,omitempty"`
	ActiveStatus *int                            `json:"active_status,omitempty"`
	NeedApprove  *bool                           `json:"need_approve,omitempty"`
	IsSensitive  *bool                           `json:"is_sensitive,omitempty"`
	ObjectType   *int                            `json:"object_type,omitempty"`
	Config       *OfferApplyFormObjectConfigInfo `json:"config,omitempty"`
}

// builder开始
type OfferApplyFormObjectInfoBuilder struct {
	id               string
	idFlag           bool
	name             *I18n
	nameFlag         bool
	description      *I18n
	descriptionFlag  bool
	moduleId         string
	moduleIdFlag     bool
	isCustomized     bool
	isCustomizedFlag bool
	isRequired       bool
	isRequiredFlag   bool
	activeStatus     int
	activeStatusFlag bool
	needApprove      bool
	needApproveFlag  bool
	isSensitive      bool
	isSensitiveFlag  bool
	objectType       int
	objectTypeFlag   bool
	config           *OfferApplyFormObjectConfigInfo
	configFlag       bool
}

func NewOfferApplyFormObjectInfoBuilder() *OfferApplyFormObjectInfoBuilder {
	builder := &OfferApplyFormObjectInfoBuilder{}
	return builder
}

func (builder *OfferApplyFormObjectInfoBuilder) Id(id string) *OfferApplyFormObjectInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *OfferApplyFormObjectInfoBuilder) Name(name *I18n) *OfferApplyFormObjectInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *OfferApplyFormObjectInfoBuilder) Description(description *I18n) *OfferApplyFormObjectInfoBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}
func (builder *OfferApplyFormObjectInfoBuilder) ModuleId(moduleId string) *OfferApplyFormObjectInfoBuilder {
	builder.moduleId = moduleId
	builder.moduleIdFlag = true
	return builder
}
func (builder *OfferApplyFormObjectInfoBuilder) IsCustomized(isCustomized bool) *OfferApplyFormObjectInfoBuilder {
	builder.isCustomized = isCustomized
	builder.isCustomizedFlag = true
	return builder
}
func (builder *OfferApplyFormObjectInfoBuilder) IsRequired(isRequired bool) *OfferApplyFormObjectInfoBuilder {
	builder.isRequired = isRequired
	builder.isRequiredFlag = true
	return builder
}
func (builder *OfferApplyFormObjectInfoBuilder) ActiveStatus(activeStatus int) *OfferApplyFormObjectInfoBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}
func (builder *OfferApplyFormObjectInfoBuilder) NeedApprove(needApprove bool) *OfferApplyFormObjectInfoBuilder {
	builder.needApprove = needApprove
	builder.needApproveFlag = true
	return builder
}
func (builder *OfferApplyFormObjectInfoBuilder) IsSensitive(isSensitive bool) *OfferApplyFormObjectInfoBuilder {
	builder.isSensitive = isSensitive
	builder.isSensitiveFlag = true
	return builder
}
func (builder *OfferApplyFormObjectInfoBuilder) ObjectType(objectType int) *OfferApplyFormObjectInfoBuilder {
	builder.objectType = objectType
	builder.objectTypeFlag = true
	return builder
}
func (builder *OfferApplyFormObjectInfoBuilder) Config(config *OfferApplyFormObjectConfigInfo) *OfferApplyFormObjectInfoBuilder {
	builder.config = config
	builder.configFlag = true
	return builder
}

func (builder *OfferApplyFormObjectInfoBuilder) Build() *OfferApplyFormObjectInfo {
	req := &OfferApplyFormObjectInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.descriptionFlag {
		req.Description = builder.description
	}
	if builder.moduleIdFlag {
		req.ModuleId = &builder.moduleId

	}
	if builder.isCustomizedFlag {
		req.IsCustomized = &builder.isCustomized

	}
	if builder.isRequiredFlag {
		req.IsRequired = &builder.isRequired

	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	if builder.needApproveFlag {
		req.NeedApprove = &builder.needApprove

	}
	if builder.isSensitiveFlag {
		req.IsSensitive = &builder.isSensitive

	}
	if builder.objectTypeFlag {
		req.ObjectType = &builder.objectType

	}
	if builder.configFlag {
		req.Config = builder.config
	}
	return req
}

// builder结束

type OfferApplyFormPreObjectConfigInfo struct {
	Id       *string  `json:"id,omitempty"`
	Operator *int     `json:"operator,omitempty"`
	Value    []string `json:"value,omitempty"`
}

// builder开始
type OfferApplyFormPreObjectConfigInfoBuilder struct {
	id           string
	idFlag       bool
	operator     int
	operatorFlag bool
	value        []string
	valueFlag    bool
}

func NewOfferApplyFormPreObjectConfigInfoBuilder() *OfferApplyFormPreObjectConfigInfoBuilder {
	builder := &OfferApplyFormPreObjectConfigInfoBuilder{}
	return builder
}

func (builder *OfferApplyFormPreObjectConfigInfoBuilder) Id(id string) *OfferApplyFormPreObjectConfigInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *OfferApplyFormPreObjectConfigInfoBuilder) Operator(operator int) *OfferApplyFormPreObjectConfigInfoBuilder {
	builder.operator = operator
	builder.operatorFlag = true
	return builder
}
func (builder *OfferApplyFormPreObjectConfigInfoBuilder) Value(value []string) *OfferApplyFormPreObjectConfigInfoBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}

func (builder *OfferApplyFormPreObjectConfigInfoBuilder) Build() *OfferApplyFormPreObjectConfigInfo {
	req := &OfferApplyFormPreObjectConfigInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.operatorFlag {
		req.Operator = &builder.operator

	}
	if builder.valueFlag {
		req.Value = builder.value
	}
	return req
}

// builder结束

type OfferApplyFormSchema struct {
	Id         *string                     `json:"id,omitempty"`
	ModuleList []*OfferApplyFormModuleInfo `json:"module_list,omitempty"`
}

// builder开始
type OfferApplyFormSchemaBuilder struct {
	id             string
	idFlag         bool
	moduleList     []*OfferApplyFormModuleInfo
	moduleListFlag bool
}

func NewOfferApplyFormSchemaBuilder() *OfferApplyFormSchemaBuilder {
	builder := &OfferApplyFormSchemaBuilder{}
	return builder
}

func (builder *OfferApplyFormSchemaBuilder) Id(id string) *OfferApplyFormSchemaBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *OfferApplyFormSchemaBuilder) ModuleList(moduleList []*OfferApplyFormModuleInfo) *OfferApplyFormSchemaBuilder {
	builder.moduleList = moduleList
	builder.moduleListFlag = true
	return builder
}

func (builder *OfferApplyFormSchemaBuilder) Build() *OfferApplyFormSchema {
	req := &OfferApplyFormSchema{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.moduleListFlag {
		req.ModuleList = builder.moduleList
	}
	return req
}

// builder结束

type OfferApprovalTemplate struct {
	Id             *string       `json:"id,omitempty"`
	Name           *I18n         `json:"name,omitempty"`
	CreateTime     *string       `json:"create_time,omitempty"`
	Remark         *string       `json:"remark,omitempty"`
	DepartmentList []*Department `json:"department_list,omitempty"`
}

// builder开始
type OfferApprovalTemplateBuilder struct {
	id                 string
	idFlag             bool
	name               *I18n
	nameFlag           bool
	createTime         string
	createTimeFlag     bool
	remark             string
	remarkFlag         bool
	departmentList     []*Department
	departmentListFlag bool
}

func NewOfferApprovalTemplateBuilder() *OfferApprovalTemplateBuilder {
	builder := &OfferApprovalTemplateBuilder{}
	return builder
}

func (builder *OfferApprovalTemplateBuilder) Id(id string) *OfferApprovalTemplateBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *OfferApprovalTemplateBuilder) Name(name *I18n) *OfferApprovalTemplateBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *OfferApprovalTemplateBuilder) CreateTime(createTime string) *OfferApprovalTemplateBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}
func (builder *OfferApprovalTemplateBuilder) Remark(remark string) *OfferApprovalTemplateBuilder {
	builder.remark = remark
	builder.remarkFlag = true
	return builder
}
func (builder *OfferApprovalTemplateBuilder) DepartmentList(departmentList []*Department) *OfferApprovalTemplateBuilder {
	builder.departmentList = departmentList
	builder.departmentListFlag = true
	return builder
}

func (builder *OfferApprovalTemplateBuilder) Build() *OfferApprovalTemplate {
	req := &OfferApprovalTemplate{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.remarkFlag {
		req.Remark = &builder.remark

	}
	if builder.departmentListFlag {
		req.DepartmentList = builder.departmentList
	}
	return req
}

// builder结束

type OfferBasicInfo struct {
	DepartmentId          *string  `json:"department_id,omitempty"`
	LeaderUserId          *string  `json:"leader_user_id,omitempty"`
	EmploymentJobId       *string  `json:"employment_job_id,omitempty"`
	EmployeeTypeId        *string  `json:"employee_type_id,omitempty"`
	JobFamilyId           *string  `json:"job_family_id,omitempty"`
	JobLevelId            *string  `json:"job_level_id,omitempty"`
	ProbationMonth        *int     `json:"probation_month,omitempty"`
	ContractYear          *int     `json:"contract_year,omitempty"`
	ExpectedOnboardDate   *string  `json:"expected_onboard_date,omitempty"`
	OnboardAddressId      *string  `json:"onboard_address_id,omitempty"`
	WorkAddressId         *string  `json:"work_address_id,omitempty"`
	OwnerUserId           *string  `json:"owner_user_id,omitempty"`
	RecommendedWords      *string  `json:"recommended_words,omitempty"`
	JobRequirementId      *string  `json:"job_requirement_id,omitempty"`
	JobProcessTypeId      *int     `json:"job_process_type_id,omitempty"`
	AttachmentIdList      []string `json:"attachment_id_list,omitempty"`
	AttachmentDescription *string  `json:"attachment_description,omitempty"`
	OperatorUserId        *string  `json:"operator_user_id,omitempty"`
}

// builder开始
type OfferBasicInfoBuilder struct {
	departmentId              string
	departmentIdFlag          bool
	leaderUserId              string
	leaderUserIdFlag          bool
	employmentJobId           string
	employmentJobIdFlag       bool
	employeeTypeId            string
	employeeTypeIdFlag        bool
	jobFamilyId               string
	jobFamilyIdFlag           bool
	jobLevelId                string
	jobLevelIdFlag            bool
	probationMonth            int
	probationMonthFlag        bool
	contractYear              int
	contractYearFlag          bool
	expectedOnboardDate       string
	expectedOnboardDateFlag   bool
	onboardAddressId          string
	onboardAddressIdFlag      bool
	workAddressId             string
	workAddressIdFlag         bool
	ownerUserId               string
	ownerUserIdFlag           bool
	recommendedWords          string
	recommendedWordsFlag      bool
	jobRequirementId          string
	jobRequirementIdFlag      bool
	jobProcessTypeId          int
	jobProcessTypeIdFlag      bool
	attachmentIdList          []string
	attachmentIdListFlag      bool
	attachmentDescription     string
	attachmentDescriptionFlag bool
	operatorUserId            string
	operatorUserIdFlag        bool
}

func NewOfferBasicInfoBuilder() *OfferBasicInfoBuilder {
	builder := &OfferBasicInfoBuilder{}
	return builder
}

func (builder *OfferBasicInfoBuilder) DepartmentId(departmentId string) *OfferBasicInfoBuilder {
	builder.departmentId = departmentId
	builder.departmentIdFlag = true
	return builder
}
func (builder *OfferBasicInfoBuilder) LeaderUserId(leaderUserId string) *OfferBasicInfoBuilder {
	builder.leaderUserId = leaderUserId
	builder.leaderUserIdFlag = true
	return builder
}
func (builder *OfferBasicInfoBuilder) EmploymentJobId(employmentJobId string) *OfferBasicInfoBuilder {
	builder.employmentJobId = employmentJobId
	builder.employmentJobIdFlag = true
	return builder
}
func (builder *OfferBasicInfoBuilder) EmployeeTypeId(employeeTypeId string) *OfferBasicInfoBuilder {
	builder.employeeTypeId = employeeTypeId
	builder.employeeTypeIdFlag = true
	return builder
}
func (builder *OfferBasicInfoBuilder) JobFamilyId(jobFamilyId string) *OfferBasicInfoBuilder {
	builder.jobFamilyId = jobFamilyId
	builder.jobFamilyIdFlag = true
	return builder
}
func (builder *OfferBasicInfoBuilder) JobLevelId(jobLevelId string) *OfferBasicInfoBuilder {
	builder.jobLevelId = jobLevelId
	builder.jobLevelIdFlag = true
	return builder
}
func (builder *OfferBasicInfoBuilder) ProbationMonth(probationMonth int) *OfferBasicInfoBuilder {
	builder.probationMonth = probationMonth
	builder.probationMonthFlag = true
	return builder
}
func (builder *OfferBasicInfoBuilder) ContractYear(contractYear int) *OfferBasicInfoBuilder {
	builder.contractYear = contractYear
	builder.contractYearFlag = true
	return builder
}
func (builder *OfferBasicInfoBuilder) ExpectedOnboardDate(expectedOnboardDate string) *OfferBasicInfoBuilder {
	builder.expectedOnboardDate = expectedOnboardDate
	builder.expectedOnboardDateFlag = true
	return builder
}
func (builder *OfferBasicInfoBuilder) OnboardAddressId(onboardAddressId string) *OfferBasicInfoBuilder {
	builder.onboardAddressId = onboardAddressId
	builder.onboardAddressIdFlag = true
	return builder
}
func (builder *OfferBasicInfoBuilder) WorkAddressId(workAddressId string) *OfferBasicInfoBuilder {
	builder.workAddressId = workAddressId
	builder.workAddressIdFlag = true
	return builder
}
func (builder *OfferBasicInfoBuilder) OwnerUserId(ownerUserId string) *OfferBasicInfoBuilder {
	builder.ownerUserId = ownerUserId
	builder.ownerUserIdFlag = true
	return builder
}
func (builder *OfferBasicInfoBuilder) RecommendedWords(recommendedWords string) *OfferBasicInfoBuilder {
	builder.recommendedWords = recommendedWords
	builder.recommendedWordsFlag = true
	return builder
}
func (builder *OfferBasicInfoBuilder) JobRequirementId(jobRequirementId string) *OfferBasicInfoBuilder {
	builder.jobRequirementId = jobRequirementId
	builder.jobRequirementIdFlag = true
	return builder
}
func (builder *OfferBasicInfoBuilder) JobProcessTypeId(jobProcessTypeId int) *OfferBasicInfoBuilder {
	builder.jobProcessTypeId = jobProcessTypeId
	builder.jobProcessTypeIdFlag = true
	return builder
}
func (builder *OfferBasicInfoBuilder) AttachmentIdList(attachmentIdList []string) *OfferBasicInfoBuilder {
	builder.attachmentIdList = attachmentIdList
	builder.attachmentIdListFlag = true
	return builder
}
func (builder *OfferBasicInfoBuilder) AttachmentDescription(attachmentDescription string) *OfferBasicInfoBuilder {
	builder.attachmentDescription = attachmentDescription
	builder.attachmentDescriptionFlag = true
	return builder
}
func (builder *OfferBasicInfoBuilder) OperatorUserId(operatorUserId string) *OfferBasicInfoBuilder {
	builder.operatorUserId = operatorUserId
	builder.operatorUserIdFlag = true
	return builder
}

func (builder *OfferBasicInfoBuilder) Build() *OfferBasicInfo {
	req := &OfferBasicInfo{}
	if builder.departmentIdFlag {
		req.DepartmentId = &builder.departmentId

	}
	if builder.leaderUserIdFlag {
		req.LeaderUserId = &builder.leaderUserId

	}
	if builder.employmentJobIdFlag {
		req.EmploymentJobId = &builder.employmentJobId

	}
	if builder.employeeTypeIdFlag {
		req.EmployeeTypeId = &builder.employeeTypeId

	}
	if builder.jobFamilyIdFlag {
		req.JobFamilyId = &builder.jobFamilyId

	}
	if builder.jobLevelIdFlag {
		req.JobLevelId = &builder.jobLevelId

	}
	if builder.probationMonthFlag {
		req.ProbationMonth = &builder.probationMonth

	}
	if builder.contractYearFlag {
		req.ContractYear = &builder.contractYear

	}
	if builder.expectedOnboardDateFlag {
		req.ExpectedOnboardDate = &builder.expectedOnboardDate

	}
	if builder.onboardAddressIdFlag {
		req.OnboardAddressId = &builder.onboardAddressId

	}
	if builder.workAddressIdFlag {
		req.WorkAddressId = &builder.workAddressId

	}
	if builder.ownerUserIdFlag {
		req.OwnerUserId = &builder.ownerUserId

	}
	if builder.recommendedWordsFlag {
		req.RecommendedWords = &builder.recommendedWords

	}
	if builder.jobRequirementIdFlag {
		req.JobRequirementId = &builder.jobRequirementId

	}
	if builder.jobProcessTypeIdFlag {
		req.JobProcessTypeId = &builder.jobProcessTypeId

	}
	if builder.attachmentIdListFlag {
		req.AttachmentIdList = builder.attachmentIdList
	}
	if builder.attachmentDescriptionFlag {
		req.AttachmentDescription = &builder.attachmentDescription

	}
	if builder.operatorUserIdFlag {
		req.OperatorUserId = &builder.operatorUserId

	}
	return req
}

// builder结束

type OfferCustomField struct {
	Id     *string                 `json:"id,omitempty"`
	Name   *I18n                   `json:"name,omitempty"`
	Config *OfferCustomFieldConfig `json:"config,omitempty"`
}

// builder开始
type OfferCustomFieldBuilder struct {
	id         string
	idFlag     bool
	name       *I18n
	nameFlag   bool
	config     *OfferCustomFieldConfig
	configFlag bool
}

func NewOfferCustomFieldBuilder() *OfferCustomFieldBuilder {
	builder := &OfferCustomFieldBuilder{}
	return builder
}

func (builder *OfferCustomFieldBuilder) Id(id string) *OfferCustomFieldBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *OfferCustomFieldBuilder) Name(name *I18n) *OfferCustomFieldBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *OfferCustomFieldBuilder) Config(config *OfferCustomFieldConfig) *OfferCustomFieldBuilder {
	builder.config = config
	builder.configFlag = true
	return builder
}

func (builder *OfferCustomFieldBuilder) Build() *OfferCustomField {
	req := &OfferCustomField{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.configFlag {
		req.Config = builder.config
	}
	return req
}

// builder结束

type OfferCustomFieldConfig struct {
	Options []*OfferCustomFieldConfigOption `json:"options,omitempty"`
}

// builder开始
type OfferCustomFieldConfigBuilder struct {
	options     []*OfferCustomFieldConfigOption
	optionsFlag bool
}

func NewOfferCustomFieldConfigBuilder() *OfferCustomFieldConfigBuilder {
	builder := &OfferCustomFieldConfigBuilder{}
	return builder
}

func (builder *OfferCustomFieldConfigBuilder) Options(options []*OfferCustomFieldConfigOption) *OfferCustomFieldConfigBuilder {
	builder.options = options
	builder.optionsFlag = true
	return builder
}

func (builder *OfferCustomFieldConfigBuilder) Build() *OfferCustomFieldConfig {
	req := &OfferCustomFieldConfig{}
	if builder.optionsFlag {
		req.Options = builder.options
	}
	return req
}

// builder结束

type OfferCustomFieldConfigOption struct {
	Name *I18n `json:"name,omitempty"`
}

// builder开始
type OfferCustomFieldConfigOptionBuilder struct {
	name     *I18n
	nameFlag bool
}

func NewOfferCustomFieldConfigOptionBuilder() *OfferCustomFieldConfigOptionBuilder {
	builder := &OfferCustomFieldConfigOptionBuilder{}
	return builder
}

func (builder *OfferCustomFieldConfigOptionBuilder) Name(name *I18n) *OfferCustomFieldConfigOptionBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *OfferCustomFieldConfigOptionBuilder) Build() *OfferCustomFieldConfigOption {
	req := &OfferCustomFieldConfigOption{}
	if builder.nameFlag {
		req.Name = builder.name
	}
	return req
}

// builder结束

type OfferCustomizedInfo struct {
	Id    *string `json:"id,omitempty"`
	Value *string `json:"value,omitempty"`
}

// builder开始
type OfferCustomizedInfoBuilder struct {
	id        string
	idFlag    bool
	value     string
	valueFlag bool
}

func NewOfferCustomizedInfoBuilder() *OfferCustomizedInfoBuilder {
	builder := &OfferCustomizedInfoBuilder{}
	return builder
}

func (builder *OfferCustomizedInfoBuilder) Id(id string) *OfferCustomizedInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *OfferCustomizedInfoBuilder) Value(value string) *OfferCustomizedInfoBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}

func (builder *OfferCustomizedInfoBuilder) Build() *OfferCustomizedInfo {
	req := &OfferCustomizedInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.valueFlag {
		req.Value = &builder.value

	}
	return req
}

// builder结束

type OfferInfo struct {
	OfferId            *string                `json:"offer_id,omitempty"`
	ApplicationId      *string                `json:"application_id,omitempty"`
	SchemaId           *string                `json:"schema_id,omitempty"`
	BasicInfo          *OfferBasicInfo        `json:"basic_info,omitempty"`
	SalaryInfo         *OfferSalaryInfo       `json:"salary_info,omitempty"`
	CustomizedInfoList []*OfferCustomizedInfo `json:"customized_info_list,omitempty"`
}

// builder开始
type OfferInfoBuilder struct {
	offerId                string
	offerIdFlag            bool
	applicationId          string
	applicationIdFlag      bool
	schemaId               string
	schemaIdFlag           bool
	basicInfo              *OfferBasicInfo
	basicInfoFlag          bool
	salaryInfo             *OfferSalaryInfo
	salaryInfoFlag         bool
	customizedInfoList     []*OfferCustomizedInfo
	customizedInfoListFlag bool
}

func NewOfferInfoBuilder() *OfferInfoBuilder {
	builder := &OfferInfoBuilder{}
	return builder
}

func (builder *OfferInfoBuilder) OfferId(offerId string) *OfferInfoBuilder {
	builder.offerId = offerId
	builder.offerIdFlag = true
	return builder
}
func (builder *OfferInfoBuilder) ApplicationId(applicationId string) *OfferInfoBuilder {
	builder.applicationId = applicationId
	builder.applicationIdFlag = true
	return builder
}
func (builder *OfferInfoBuilder) SchemaId(schemaId string) *OfferInfoBuilder {
	builder.schemaId = schemaId
	builder.schemaIdFlag = true
	return builder
}
func (builder *OfferInfoBuilder) BasicInfo(basicInfo *OfferBasicInfo) *OfferInfoBuilder {
	builder.basicInfo = basicInfo
	builder.basicInfoFlag = true
	return builder
}
func (builder *OfferInfoBuilder) SalaryInfo(salaryInfo *OfferSalaryInfo) *OfferInfoBuilder {
	builder.salaryInfo = salaryInfo
	builder.salaryInfoFlag = true
	return builder
}
func (builder *OfferInfoBuilder) CustomizedInfoList(customizedInfoList []*OfferCustomizedInfo) *OfferInfoBuilder {
	builder.customizedInfoList = customizedInfoList
	builder.customizedInfoListFlag = true
	return builder
}

func (builder *OfferInfoBuilder) Build() *OfferInfo {
	req := &OfferInfo{}
	if builder.offerIdFlag {
		req.OfferId = &builder.offerId

	}
	if builder.applicationIdFlag {
		req.ApplicationId = &builder.applicationId

	}
	if builder.schemaIdFlag {
		req.SchemaId = &builder.schemaId

	}
	if builder.basicInfoFlag {
		req.BasicInfo = builder.basicInfo
	}
	if builder.salaryInfoFlag {
		req.SalaryInfo = builder.salaryInfo
	}
	if builder.customizedInfoListFlag {
		req.CustomizedInfoList = builder.customizedInfoList
	}
	return req
}

// builder结束

type OfferJobInfo struct {
	JobId   *string `json:"job_id,omitempty"`
	JobName *string `json:"job_name,omitempty"`
}

// builder开始
type OfferJobInfoBuilder struct {
	jobId       string
	jobIdFlag   bool
	jobName     string
	jobNameFlag bool
}

func NewOfferJobInfoBuilder() *OfferJobInfoBuilder {
	builder := &OfferJobInfoBuilder{}
	return builder
}

func (builder *OfferJobInfoBuilder) JobId(jobId string) *OfferJobInfoBuilder {
	builder.jobId = jobId
	builder.jobIdFlag = true
	return builder
}
func (builder *OfferJobInfoBuilder) JobName(jobName string) *OfferJobInfoBuilder {
	builder.jobName = jobName
	builder.jobNameFlag = true
	return builder
}

func (builder *OfferJobInfoBuilder) Build() *OfferJobInfo {
	req := &OfferJobInfo{}
	if builder.jobIdFlag {
		req.JobId = &builder.jobId

	}
	if builder.jobNameFlag {
		req.JobName = &builder.jobName

	}
	return req
}

// builder结束

type OfferListInfo struct {
	Id            *string              `json:"id,omitempty"`
	JobInfo       *OfferJobInfo        `json:"job_info,omitempty"`
	CreateTime    *string              `json:"create_time,omitempty"`
	OfferStatus   *int                 `json:"offer_status,omitempty"`
	EmployeeType  *BaseBilingualWithId `json:"employee_type,omitempty"`
	ApplicationId *string              `json:"application_id,omitempty"`
}

// builder开始
type OfferListInfoBuilder struct {
	id                string
	idFlag            bool
	jobInfo           *OfferJobInfo
	jobInfoFlag       bool
	createTime        string
	createTimeFlag    bool
	offerStatus       int
	offerStatusFlag   bool
	employeeType      *BaseBilingualWithId
	employeeTypeFlag  bool
	applicationId     string
	applicationIdFlag bool
}

func NewOfferListInfoBuilder() *OfferListInfoBuilder {
	builder := &OfferListInfoBuilder{}
	return builder
}

func (builder *OfferListInfoBuilder) Id(id string) *OfferListInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *OfferListInfoBuilder) JobInfo(jobInfo *OfferJobInfo) *OfferListInfoBuilder {
	builder.jobInfo = jobInfo
	builder.jobInfoFlag = true
	return builder
}
func (builder *OfferListInfoBuilder) CreateTime(createTime string) *OfferListInfoBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}
func (builder *OfferListInfoBuilder) OfferStatus(offerStatus int) *OfferListInfoBuilder {
	builder.offerStatus = offerStatus
	builder.offerStatusFlag = true
	return builder
}
func (builder *OfferListInfoBuilder) EmployeeType(employeeType *BaseBilingualWithId) *OfferListInfoBuilder {
	builder.employeeType = employeeType
	builder.employeeTypeFlag = true
	return builder
}
func (builder *OfferListInfoBuilder) ApplicationId(applicationId string) *OfferListInfoBuilder {
	builder.applicationId = applicationId
	builder.applicationIdFlag = true
	return builder
}

func (builder *OfferListInfoBuilder) Build() *OfferListInfo {
	req := &OfferListInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.jobInfoFlag {
		req.JobInfo = builder.jobInfo
	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.offerStatusFlag {
		req.OfferStatus = &builder.offerStatus

	}
	if builder.employeeTypeFlag {
		req.EmployeeType = builder.employeeType
	}
	if builder.applicationIdFlag {
		req.ApplicationId = &builder.applicationId

	}
	return req
}

// builder结束

type OfferSalaryInfo struct {
	Currency                  *string `json:"currency,omitempty"`
	BasicSalary               *string `json:"basic_salary,omitempty"`
	ProbationSalaryPercentage *string `json:"probation_salary_percentage,omitempty"`
	AwardSalaryMultiple       *string `json:"award_salary_multiple,omitempty"`
	OptionShares              *string `json:"option_shares,omitempty"`
	QuarterlyBonus            *string `json:"quarterly_bonus,omitempty"`
	HalfYearBonus             *string `json:"half_year_bonus,omitempty"`
}

// builder开始
type OfferSalaryInfoBuilder struct {
	currency                      string
	currencyFlag                  bool
	basicSalary                   string
	basicSalaryFlag               bool
	probationSalaryPercentage     string
	probationSalaryPercentageFlag bool
	awardSalaryMultiple           string
	awardSalaryMultipleFlag       bool
	optionShares                  string
	optionSharesFlag              bool
	quarterlyBonus                string
	quarterlyBonusFlag            bool
	halfYearBonus                 string
	halfYearBonusFlag             bool
}

func NewOfferSalaryInfoBuilder() *OfferSalaryInfoBuilder {
	builder := &OfferSalaryInfoBuilder{}
	return builder
}

func (builder *OfferSalaryInfoBuilder) Currency(currency string) *OfferSalaryInfoBuilder {
	builder.currency = currency
	builder.currencyFlag = true
	return builder
}
func (builder *OfferSalaryInfoBuilder) BasicSalary(basicSalary string) *OfferSalaryInfoBuilder {
	builder.basicSalary = basicSalary
	builder.basicSalaryFlag = true
	return builder
}
func (builder *OfferSalaryInfoBuilder) ProbationSalaryPercentage(probationSalaryPercentage string) *OfferSalaryInfoBuilder {
	builder.probationSalaryPercentage = probationSalaryPercentage
	builder.probationSalaryPercentageFlag = true
	return builder
}
func (builder *OfferSalaryInfoBuilder) AwardSalaryMultiple(awardSalaryMultiple string) *OfferSalaryInfoBuilder {
	builder.awardSalaryMultiple = awardSalaryMultiple
	builder.awardSalaryMultipleFlag = true
	return builder
}
func (builder *OfferSalaryInfoBuilder) OptionShares(optionShares string) *OfferSalaryInfoBuilder {
	builder.optionShares = optionShares
	builder.optionSharesFlag = true
	return builder
}
func (builder *OfferSalaryInfoBuilder) QuarterlyBonus(quarterlyBonus string) *OfferSalaryInfoBuilder {
	builder.quarterlyBonus = quarterlyBonus
	builder.quarterlyBonusFlag = true
	return builder
}
func (builder *OfferSalaryInfoBuilder) HalfYearBonus(halfYearBonus string) *OfferSalaryInfoBuilder {
	builder.halfYearBonus = halfYearBonus
	builder.halfYearBonusFlag = true
	return builder
}

func (builder *OfferSalaryInfoBuilder) Build() *OfferSalaryInfo {
	req := &OfferSalaryInfo{}
	if builder.currencyFlag {
		req.Currency = &builder.currency

	}
	if builder.basicSalaryFlag {
		req.BasicSalary = &builder.basicSalary

	}
	if builder.probationSalaryPercentageFlag {
		req.ProbationSalaryPercentage = &builder.probationSalaryPercentage

	}
	if builder.awardSalaryMultipleFlag {
		req.AwardSalaryMultiple = &builder.awardSalaryMultiple

	}
	if builder.optionSharesFlag {
		req.OptionShares = &builder.optionShares

	}
	if builder.quarterlyBonusFlag {
		req.QuarterlyBonus = &builder.quarterlyBonus

	}
	if builder.halfYearBonusFlag {
		req.HalfYearBonus = &builder.halfYearBonus

	}
	return req
}

// builder结束

type OfferSchema struct {
	Id         *string              `json:"id,omitempty"`
	Scenario   *int                 `json:"scenario,omitempty"`
	Version    *int                 `json:"version,omitempty"`
	ObjectList []*OfferSchemaDetail `json:"object_list,omitempty"`
}

// builder开始
type OfferSchemaBuilder struct {
	id             string
	idFlag         bool
	scenario       int
	scenarioFlag   bool
	version        int
	versionFlag    bool
	objectList     []*OfferSchemaDetail
	objectListFlag bool
}

func NewOfferSchemaBuilder() *OfferSchemaBuilder {
	builder := &OfferSchemaBuilder{}
	return builder
}

func (builder *OfferSchemaBuilder) Id(id string) *OfferSchemaBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *OfferSchemaBuilder) Scenario(scenario int) *OfferSchemaBuilder {
	builder.scenario = scenario
	builder.scenarioFlag = true
	return builder
}
func (builder *OfferSchemaBuilder) Version(version int) *OfferSchemaBuilder {
	builder.version = version
	builder.versionFlag = true
	return builder
}
func (builder *OfferSchemaBuilder) ObjectList(objectList []*OfferSchemaDetail) *OfferSchemaBuilder {
	builder.objectList = objectList
	builder.objectListFlag = true
	return builder
}

func (builder *OfferSchemaBuilder) Build() *OfferSchema {
	req := &OfferSchema{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.scenarioFlag {
		req.Scenario = &builder.scenario

	}
	if builder.versionFlag {
		req.Version = &builder.version

	}
	if builder.objectListFlag {
		req.ObjectList = builder.objectList
	}
	return req
}

// builder结束

type OfferSchemaChild struct {
	Id         *string              `json:"id,omitempty"`
	Scenario   *int                 `json:"scenario,omitempty"`
	Version    *int                 `json:"version,omitempty"`
	ObjectList []*OfferSchemaDetail `json:"object_list,omitempty"`
}

// builder开始
type OfferSchemaChildBuilder struct {
	id             string
	idFlag         bool
	scenario       int
	scenarioFlag   bool
	version        int
	versionFlag    bool
	objectList     []*OfferSchemaDetail
	objectListFlag bool
}

func NewOfferSchemaChildBuilder() *OfferSchemaChildBuilder {
	builder := &OfferSchemaChildBuilder{}
	return builder
}

func (builder *OfferSchemaChildBuilder) Id(id string) *OfferSchemaChildBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *OfferSchemaChildBuilder) Scenario(scenario int) *OfferSchemaChildBuilder {
	builder.scenario = scenario
	builder.scenarioFlag = true
	return builder
}
func (builder *OfferSchemaChildBuilder) Version(version int) *OfferSchemaChildBuilder {
	builder.version = version
	builder.versionFlag = true
	return builder
}
func (builder *OfferSchemaChildBuilder) ObjectList(objectList []*OfferSchemaDetail) *OfferSchemaChildBuilder {
	builder.objectList = objectList
	builder.objectListFlag = true
	return builder
}

func (builder *OfferSchemaChildBuilder) Build() *OfferSchemaChild {
	req := &OfferSchemaChild{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.scenarioFlag {
		req.Scenario = &builder.scenario

	}
	if builder.versionFlag {
		req.Version = &builder.version

	}
	if builder.objectListFlag {
		req.ObjectList = builder.objectList
	}
	return req
}

// builder结束

type OfferSchemaDetail struct {
	Id           *string                    `json:"id,omitempty"`
	Name         *OfferSchemaName           `json:"name,omitempty"`
	Type         *string                    `json:"type,omitempty"`
	IsCustomized *bool                      `json:"is_customized,omitempty"`
	OptionList   []*OfferSchemaDetailOption `json:"option_list,omitempty"`
}

// builder开始
type OfferSchemaDetailBuilder struct {
	id               string
	idFlag           bool
	name             *OfferSchemaName
	nameFlag         bool
	type_            string
	typeFlag         bool
	isCustomized     bool
	isCustomizedFlag bool
	optionList       []*OfferSchemaDetailOption
	optionListFlag   bool
}

func NewOfferSchemaDetailBuilder() *OfferSchemaDetailBuilder {
	builder := &OfferSchemaDetailBuilder{}
	return builder
}

func (builder *OfferSchemaDetailBuilder) Id(id string) *OfferSchemaDetailBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *OfferSchemaDetailBuilder) Name(name *OfferSchemaName) *OfferSchemaDetailBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *OfferSchemaDetailBuilder) Type(type_ string) *OfferSchemaDetailBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}
func (builder *OfferSchemaDetailBuilder) IsCustomized(isCustomized bool) *OfferSchemaDetailBuilder {
	builder.isCustomized = isCustomized
	builder.isCustomizedFlag = true
	return builder
}
func (builder *OfferSchemaDetailBuilder) OptionList(optionList []*OfferSchemaDetailOption) *OfferSchemaDetailBuilder {
	builder.optionList = optionList
	builder.optionListFlag = true
	return builder
}

func (builder *OfferSchemaDetailBuilder) Build() *OfferSchemaDetail {
	req := &OfferSchemaDetail{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	if builder.isCustomizedFlag {
		req.IsCustomized = &builder.isCustomized

	}
	if builder.optionListFlag {
		req.OptionList = builder.optionList
	}
	return req
}

// builder结束

type OfferSchemaDetailOption struct {
	Name         *OfferSchemaName `json:"name,omitempty"`
	Index        *int             `json:"index,omitempty"`
	ActiveStatus *int             `json:"active_status,omitempty"`
}

// builder开始
type OfferSchemaDetailOptionBuilder struct {
	name             *OfferSchemaName
	nameFlag         bool
	index            int
	indexFlag        bool
	activeStatus     int
	activeStatusFlag bool
}

func NewOfferSchemaDetailOptionBuilder() *OfferSchemaDetailOptionBuilder {
	builder := &OfferSchemaDetailOptionBuilder{}
	return builder
}

func (builder *OfferSchemaDetailOptionBuilder) Name(name *OfferSchemaName) *OfferSchemaDetailOptionBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *OfferSchemaDetailOptionBuilder) Index(index int) *OfferSchemaDetailOptionBuilder {
	builder.index = index
	builder.indexFlag = true
	return builder
}
func (builder *OfferSchemaDetailOptionBuilder) ActiveStatus(activeStatus int) *OfferSchemaDetailOptionBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}

func (builder *OfferSchemaDetailOptionBuilder) Build() *OfferSchemaDetailOption {
	req := &OfferSchemaDetailOption{}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.indexFlag {
		req.Index = &builder.index

	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	return req
}

// builder结束

type OfferSchemaListInfo struct {
	SchemaList []*OfferSchemaChild `json:"schema_list,omitempty"`
}

// builder开始
type OfferSchemaListInfoBuilder struct {
	schemaList     []*OfferSchemaChild
	schemaListFlag bool
}

func NewOfferSchemaListInfoBuilder() *OfferSchemaListInfoBuilder {
	builder := &OfferSchemaListInfoBuilder{}
	return builder
}

func (builder *OfferSchemaListInfoBuilder) SchemaList(schemaList []*OfferSchemaChild) *OfferSchemaListInfoBuilder {
	builder.schemaList = schemaList
	builder.schemaListFlag = true
	return builder
}

func (builder *OfferSchemaListInfoBuilder) Build() *OfferSchemaListInfo {
	req := &OfferSchemaListInfo{}
	if builder.schemaListFlag {
		req.SchemaList = builder.schemaList
	}
	return req
}

// builder结束

type OfferSchemaName struct {
	ZhCn *string `json:"zh_cn,omitempty"`
	EnUs *string `json:"en_us,omitempty"`
}

// builder开始
type OfferSchemaNameBuilder struct {
	zhCn     string
	zhCnFlag bool
	enUs     string
	enUsFlag bool
}

func NewOfferSchemaNameBuilder() *OfferSchemaNameBuilder {
	builder := &OfferSchemaNameBuilder{}
	return builder
}

func (builder *OfferSchemaNameBuilder) ZhCn(zhCn string) *OfferSchemaNameBuilder {
	builder.zhCn = zhCn
	builder.zhCnFlag = true
	return builder
}
func (builder *OfferSchemaNameBuilder) EnUs(enUs string) *OfferSchemaNameBuilder {
	builder.enUs = enUs
	builder.enUsFlag = true
	return builder
}

func (builder *OfferSchemaNameBuilder) Build() *OfferSchemaName {
	req := &OfferSchemaName{}
	if builder.zhCnFlag {
		req.ZhCn = &builder.zhCn

	}
	if builder.enUsFlag {
		req.EnUs = &builder.enUs

	}
	return req
}

// builder结束

type OfferSelectionObject struct {
	SchemaVersion *int                       `json:"schema_version,omitempty"`
	OptionList    []*OfferSchemaDetailOption `json:"option_list,omitempty"`
}

// builder开始
type OfferSelectionObjectBuilder struct {
	schemaVersion     int
	schemaVersionFlag bool
	optionList        []*OfferSchemaDetailOption
	optionListFlag    bool
}

func NewOfferSelectionObjectBuilder() *OfferSelectionObjectBuilder {
	builder := &OfferSelectionObjectBuilder{}
	return builder
}

func (builder *OfferSelectionObjectBuilder) SchemaVersion(schemaVersion int) *OfferSelectionObjectBuilder {
	builder.schemaVersion = schemaVersion
	builder.schemaVersionFlag = true
	return builder
}
func (builder *OfferSelectionObjectBuilder) OptionList(optionList []*OfferSchemaDetailOption) *OfferSelectionObjectBuilder {
	builder.optionList = optionList
	builder.optionListFlag = true
	return builder
}

func (builder *OfferSelectionObjectBuilder) Build() *OfferSelectionObject {
	req := &OfferSelectionObject{}
	if builder.schemaVersionFlag {
		req.SchemaVersion = &builder.schemaVersion

	}
	if builder.optionListFlag {
		req.OptionList = builder.optionList
	}
	return req
}

// builder结束

type ProjectInfo struct {
	Desc      *string `json:"desc,omitempty"`
	EndTime   *int    `json:"end_time,omitempty"`
	Link      *string `json:"link,omitempty"`
	Name      *string `json:"name,omitempty"`
	Role      *string `json:"role,omitempty"`
	StartTime *int    `json:"start_time,omitempty"`
}

// builder开始
type ProjectInfoBuilder struct {
	desc          string
	descFlag      bool
	endTime       int
	endTimeFlag   bool
	link          string
	linkFlag      bool
	name          string
	nameFlag      bool
	role          string
	roleFlag      bool
	startTime     int
	startTimeFlag bool
}

func NewProjectInfoBuilder() *ProjectInfoBuilder {
	builder := &ProjectInfoBuilder{}
	return builder
}

func (builder *ProjectInfoBuilder) Desc(desc string) *ProjectInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}
func (builder *ProjectInfoBuilder) EndTime(endTime int) *ProjectInfoBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}
func (builder *ProjectInfoBuilder) Link(link string) *ProjectInfoBuilder {
	builder.link = link
	builder.linkFlag = true
	return builder
}
func (builder *ProjectInfoBuilder) Name(name string) *ProjectInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *ProjectInfoBuilder) Role(role string) *ProjectInfoBuilder {
	builder.role = role
	builder.roleFlag = true
	return builder
}
func (builder *ProjectInfoBuilder) StartTime(startTime int) *ProjectInfoBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}

func (builder *ProjectInfoBuilder) Build() *ProjectInfo {
	req := &ProjectInfo{}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.linkFlag {
		req.Link = &builder.link

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.roleFlag {
		req.Role = &builder.role

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	return req
}

// builder结束

type PushStage struct {
}

// builder开始
// builder结束

type Question struct {
	QuestionId             *string                 `json:"question_id,omitempty"`
	QuestionName           *string                 `json:"question_name,omitempty"`
	QuestionEnName         *string                 `json:"question_en_name,omitempty"`
	QuestionDesc           *string                 `json:"question_desc,omitempty"`
	QuestionEnDesc         *string                 `json:"question_en_desc,omitempty"`
	QuestionType           *int                    `json:"question_type,omitempty"`
	IsRequired             *bool                   `json:"is_required,omitempty"`
	SelectOptionResultList []*SelectOptionResult   `json:"select_option_result_list,omitempty"`
	FiveStartScoringResult *FiveStartScoringResult `json:"five_start_scoring_result,omitempty"`
	DescriptionResult      *string                 `json:"description_result,omitempty"`
}

// builder开始
type QuestionBuilder struct {
	questionId                 string
	questionIdFlag             bool
	questionName               string
	questionNameFlag           bool
	questionEnName             string
	questionEnNameFlag         bool
	questionDesc               string
	questionDescFlag           bool
	questionEnDesc             string
	questionEnDescFlag         bool
	questionType               int
	questionTypeFlag           bool
	isRequired                 bool
	isRequiredFlag             bool
	selectOptionResultList     []*SelectOptionResult
	selectOptionResultListFlag bool
	fiveStartScoringResult     *FiveStartScoringResult
	fiveStartScoringResultFlag bool
	descriptionResult          string
	descriptionResultFlag      bool
}

func NewQuestionBuilder() *QuestionBuilder {
	builder := &QuestionBuilder{}
	return builder
}

func (builder *QuestionBuilder) QuestionId(questionId string) *QuestionBuilder {
	builder.questionId = questionId
	builder.questionIdFlag = true
	return builder
}
func (builder *QuestionBuilder) QuestionName(questionName string) *QuestionBuilder {
	builder.questionName = questionName
	builder.questionNameFlag = true
	return builder
}
func (builder *QuestionBuilder) QuestionEnName(questionEnName string) *QuestionBuilder {
	builder.questionEnName = questionEnName
	builder.questionEnNameFlag = true
	return builder
}
func (builder *QuestionBuilder) QuestionDesc(questionDesc string) *QuestionBuilder {
	builder.questionDesc = questionDesc
	builder.questionDescFlag = true
	return builder
}
func (builder *QuestionBuilder) QuestionEnDesc(questionEnDesc string) *QuestionBuilder {
	builder.questionEnDesc = questionEnDesc
	builder.questionEnDescFlag = true
	return builder
}
func (builder *QuestionBuilder) QuestionType(questionType int) *QuestionBuilder {
	builder.questionType = questionType
	builder.questionTypeFlag = true
	return builder
}
func (builder *QuestionBuilder) IsRequired(isRequired bool) *QuestionBuilder {
	builder.isRequired = isRequired
	builder.isRequiredFlag = true
	return builder
}
func (builder *QuestionBuilder) SelectOptionResultList(selectOptionResultList []*SelectOptionResult) *QuestionBuilder {
	builder.selectOptionResultList = selectOptionResultList
	builder.selectOptionResultListFlag = true
	return builder
}
func (builder *QuestionBuilder) FiveStartScoringResult(fiveStartScoringResult *FiveStartScoringResult) *QuestionBuilder {
	builder.fiveStartScoringResult = fiveStartScoringResult
	builder.fiveStartScoringResultFlag = true
	return builder
}
func (builder *QuestionBuilder) DescriptionResult(descriptionResult string) *QuestionBuilder {
	builder.descriptionResult = descriptionResult
	builder.descriptionResultFlag = true
	return builder
}

func (builder *QuestionBuilder) Build() *Question {
	req := &Question{}
	if builder.questionIdFlag {
		req.QuestionId = &builder.questionId

	}
	if builder.questionNameFlag {
		req.QuestionName = &builder.questionName

	}
	if builder.questionEnNameFlag {
		req.QuestionEnName = &builder.questionEnName

	}
	if builder.questionDescFlag {
		req.QuestionDesc = &builder.questionDesc

	}
	if builder.questionEnDescFlag {
		req.QuestionEnDesc = &builder.questionEnDesc

	}
	if builder.questionTypeFlag {
		req.QuestionType = &builder.questionType

	}
	if builder.isRequiredFlag {
		req.IsRequired = &builder.isRequired

	}
	if builder.selectOptionResultListFlag {
		req.SelectOptionResultList = builder.selectOptionResultList
	}
	if builder.fiveStartScoringResultFlag {
		req.FiveStartScoringResult = builder.fiveStartScoringResult
	}
	if builder.descriptionResultFlag {
		req.DescriptionResult = &builder.descriptionResult

	}
	return req
}

// builder结束

type Questionnaire struct {
	QuestionnaireId *string     `json:"questionnaire_id,omitempty"`
	ApplicationId   *string     `json:"application_id,omitempty"`
	InterviewId     *string     `json:"interview_id,omitempty"`
	Version         *int        `json:"version,omitempty"`
	Questions       []*Question `json:"questions,omitempty"`
	HasAnswers      *bool       `json:"has_answers,omitempty"`
	UpdateTime      *string     `json:"update_time,omitempty"`
}

// builder开始
type QuestionnaireBuilder struct {
	questionnaireId     string
	questionnaireIdFlag bool
	applicationId       string
	applicationIdFlag   bool
	interviewId         string
	interviewIdFlag     bool
	version             int
	versionFlag         bool
	questions           []*Question
	questionsFlag       bool
	hasAnswers          bool
	hasAnswersFlag      bool
	updateTime          string
	updateTimeFlag      bool
}

func NewQuestionnaireBuilder() *QuestionnaireBuilder {
	builder := &QuestionnaireBuilder{}
	return builder
}

func (builder *QuestionnaireBuilder) QuestionnaireId(questionnaireId string) *QuestionnaireBuilder {
	builder.questionnaireId = questionnaireId
	builder.questionnaireIdFlag = true
	return builder
}
func (builder *QuestionnaireBuilder) ApplicationId(applicationId string) *QuestionnaireBuilder {
	builder.applicationId = applicationId
	builder.applicationIdFlag = true
	return builder
}
func (builder *QuestionnaireBuilder) InterviewId(interviewId string) *QuestionnaireBuilder {
	builder.interviewId = interviewId
	builder.interviewIdFlag = true
	return builder
}
func (builder *QuestionnaireBuilder) Version(version int) *QuestionnaireBuilder {
	builder.version = version
	builder.versionFlag = true
	return builder
}
func (builder *QuestionnaireBuilder) Questions(questions []*Question) *QuestionnaireBuilder {
	builder.questions = questions
	builder.questionsFlag = true
	return builder
}
func (builder *QuestionnaireBuilder) HasAnswers(hasAnswers bool) *QuestionnaireBuilder {
	builder.hasAnswers = hasAnswers
	builder.hasAnswersFlag = true
	return builder
}
func (builder *QuestionnaireBuilder) UpdateTime(updateTime string) *QuestionnaireBuilder {
	builder.updateTime = updateTime
	builder.updateTimeFlag = true
	return builder
}

func (builder *QuestionnaireBuilder) Build() *Questionnaire {
	req := &Questionnaire{}
	if builder.questionnaireIdFlag {
		req.QuestionnaireId = &builder.questionnaireId

	}
	if builder.applicationIdFlag {
		req.ApplicationId = &builder.applicationId

	}
	if builder.interviewIdFlag {
		req.InterviewId = &builder.interviewId

	}
	if builder.versionFlag {
		req.Version = &builder.version

	}
	if builder.questionsFlag {
		req.Questions = builder.questions
	}
	if builder.hasAnswersFlag {
		req.HasAnswers = &builder.hasAnswers

	}
	if builder.updateTimeFlag {
		req.UpdateTime = &builder.updateTime

	}
	return req
}

// builder结束

type RecruitmentType struct {
	Id     *string `json:"id,omitempty"`
	Name   *string `json:"name,omitempty"`
	EnName *string `json:"en_name,omitempty"`
}

// builder开始
type RecruitmentTypeBuilder struct {
	id         string
	idFlag     bool
	name       string
	nameFlag   bool
	enName     string
	enNameFlag bool
}

func NewRecruitmentTypeBuilder() *RecruitmentTypeBuilder {
	builder := &RecruitmentTypeBuilder{}
	return builder
}

func (builder *RecruitmentTypeBuilder) Id(id string) *RecruitmentTypeBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *RecruitmentTypeBuilder) Name(name string) *RecruitmentTypeBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *RecruitmentTypeBuilder) EnName(enName string) *RecruitmentTypeBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

func (builder *RecruitmentTypeBuilder) Build() *RecruitmentType {
	req := &RecruitmentType{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	return req
}

// builder结束

type Referral struct {
	Id             *string       `json:"id,omitempty"`
	ApplicationId  *string       `json:"application_id,omitempty"`
	CreateTime     *int          `json:"create_time,omitempty"`
	ReferralUserId *string       `json:"referral_user_id,omitempty"`
	ReferralUser   *IdNameObject `json:"referral_user,omitempty"`
}

// builder开始
type ReferralBuilder struct {
	id                 string
	idFlag             bool
	applicationId      string
	applicationIdFlag  bool
	createTime         int
	createTimeFlag     bool
	referralUserId     string
	referralUserIdFlag bool
	referralUser       *IdNameObject
	referralUserFlag   bool
}

func NewReferralBuilder() *ReferralBuilder {
	builder := &ReferralBuilder{}
	return builder
}

func (builder *ReferralBuilder) Id(id string) *ReferralBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *ReferralBuilder) ApplicationId(applicationId string) *ReferralBuilder {
	builder.applicationId = applicationId
	builder.applicationIdFlag = true
	return builder
}
func (builder *ReferralBuilder) CreateTime(createTime int) *ReferralBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}
func (builder *ReferralBuilder) ReferralUserId(referralUserId string) *ReferralBuilder {
	builder.referralUserId = referralUserId
	builder.referralUserIdFlag = true
	return builder
}
func (builder *ReferralBuilder) ReferralUser(referralUser *IdNameObject) *ReferralBuilder {
	builder.referralUser = referralUser
	builder.referralUserFlag = true
	return builder
}

func (builder *ReferralBuilder) Build() *Referral {
	req := &Referral{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.applicationIdFlag {
		req.ApplicationId = &builder.applicationId

	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.referralUserIdFlag {
		req.ReferralUserId = &builder.referralUserId

	}
	if builder.referralUserFlag {
		req.ReferralUser = builder.referralUser
	}
	return req
}

// builder结束

type ResumeSource struct {
	Id               *string `json:"id,omitempty"`
	ZhName           *string `json:"zh_name,omitempty"`
	EnName           *string `json:"en_name,omitempty"`
	ActiveStatus     *int    `json:"active_status,omitempty"`
	ResumeSourceType *int    `json:"resume_source_type,omitempty"`
}

// builder开始
type ResumeSourceBuilder struct {
	id                   string
	idFlag               bool
	zhName               string
	zhNameFlag           bool
	enName               string
	enNameFlag           bool
	activeStatus         int
	activeStatusFlag     bool
	resumeSourceType     int
	resumeSourceTypeFlag bool
}

func NewResumeSourceBuilder() *ResumeSourceBuilder {
	builder := &ResumeSourceBuilder{}
	return builder
}

func (builder *ResumeSourceBuilder) Id(id string) *ResumeSourceBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *ResumeSourceBuilder) ZhName(zhName string) *ResumeSourceBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}
func (builder *ResumeSourceBuilder) EnName(enName string) *ResumeSourceBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}
func (builder *ResumeSourceBuilder) ActiveStatus(activeStatus int) *ResumeSourceBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}
func (builder *ResumeSourceBuilder) ResumeSourceType(resumeSourceType int) *ResumeSourceBuilder {
	builder.resumeSourceType = resumeSourceType
	builder.resumeSourceTypeFlag = true
	return builder
}

func (builder *ResumeSourceBuilder) Build() *ResumeSource {
	req := &ResumeSource{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	if builder.resumeSourceTypeFlag {
		req.ResumeSourceType = &builder.resumeSourceType

	}
	return req
}

// builder结束

type Role struct {
	Id          *string `json:"id,omitempty"`
	Name        *I18n   `json:"name,omitempty"`
	Description *I18n   `json:"description,omitempty"`
}

// builder开始
type RoleBuilder struct {
	id              string
	idFlag          bool
	name            *I18n
	nameFlag        bool
	description     *I18n
	descriptionFlag bool
}

func NewRoleBuilder() *RoleBuilder {
	builder := &RoleBuilder{}
	return builder
}

func (builder *RoleBuilder) Id(id string) *RoleBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *RoleBuilder) Name(name *I18n) *RoleBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *RoleBuilder) Description(description *I18n) *RoleBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

func (builder *RoleBuilder) Build() *Role {
	req := &Role{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.descriptionFlag {
		req.Description = builder.description
	}
	return req
}

// builder结束

type Salary struct {
	OperateTime  *string `json:"operate_time,omitempty"`
	SalaryStatus *int    `json:"salary_status,omitempty"`
	OfferId      *string `json:"offer_id,omitempty"`
	SalayId      *string `json:"salay_id,omitempty"`
	OperatorId   *string `json:"operator_id,omitempty"`
}

// builder开始
type SalaryBuilder struct {
	operateTime      string
	operateTimeFlag  bool
	salaryStatus     int
	salaryStatusFlag bool
	offerId          string
	offerIdFlag      bool
	salayId          string
	salayIdFlag      bool
	operatorId       string
	operatorIdFlag   bool
}

func NewSalaryBuilder() *SalaryBuilder {
	builder := &SalaryBuilder{}
	return builder
}

func (builder *SalaryBuilder) OperateTime(operateTime string) *SalaryBuilder {
	builder.operateTime = operateTime
	builder.operateTimeFlag = true
	return builder
}
func (builder *SalaryBuilder) SalaryStatus(salaryStatus int) *SalaryBuilder {
	builder.salaryStatus = salaryStatus
	builder.salaryStatusFlag = true
	return builder
}
func (builder *SalaryBuilder) OfferId(offerId string) *SalaryBuilder {
	builder.offerId = offerId
	builder.offerIdFlag = true
	return builder
}
func (builder *SalaryBuilder) SalayId(salayId string) *SalaryBuilder {
	builder.salayId = salayId
	builder.salayIdFlag = true
	return builder
}
func (builder *SalaryBuilder) OperatorId(operatorId string) *SalaryBuilder {
	builder.operatorId = operatorId
	builder.operatorIdFlag = true
	return builder
}

func (builder *SalaryBuilder) Build() *Salary {
	req := &Salary{}
	if builder.operateTimeFlag {
		req.OperateTime = &builder.operateTime

	}
	if builder.salaryStatusFlag {
		req.SalaryStatus = &builder.salaryStatus

	}
	if builder.offerIdFlag {
		req.OfferId = &builder.offerId

	}
	if builder.salayIdFlag {
		req.SalayId = &builder.salayId

	}
	if builder.operatorIdFlag {
		req.OperatorId = &builder.operatorId

	}
	return req
}

// builder结束

type SelectOptionResult struct {
	OptionId     *string `json:"option_id,omitempty"`
	OptionName   *string `json:"option_name,omitempty"`
	OptionEnName *string `json:"option_en_name,omitempty"`
	OptionDesc   *string `json:"option_desc,omitempty"`
	OptionEnDesc *string `json:"option_en_desc,omitempty"`
	IsSelected   *bool   `json:"is_selected,omitempty"`
}

// builder开始
type SelectOptionResultBuilder struct {
	optionId         string
	optionIdFlag     bool
	optionName       string
	optionNameFlag   bool
	optionEnName     string
	optionEnNameFlag bool
	optionDesc       string
	optionDescFlag   bool
	optionEnDesc     string
	optionEnDescFlag bool
	isSelected       bool
	isSelectedFlag   bool
}

func NewSelectOptionResultBuilder() *SelectOptionResultBuilder {
	builder := &SelectOptionResultBuilder{}
	return builder
}

func (builder *SelectOptionResultBuilder) OptionId(optionId string) *SelectOptionResultBuilder {
	builder.optionId = optionId
	builder.optionIdFlag = true
	return builder
}
func (builder *SelectOptionResultBuilder) OptionName(optionName string) *SelectOptionResultBuilder {
	builder.optionName = optionName
	builder.optionNameFlag = true
	return builder
}
func (builder *SelectOptionResultBuilder) OptionEnName(optionEnName string) *SelectOptionResultBuilder {
	builder.optionEnName = optionEnName
	builder.optionEnNameFlag = true
	return builder
}
func (builder *SelectOptionResultBuilder) OptionDesc(optionDesc string) *SelectOptionResultBuilder {
	builder.optionDesc = optionDesc
	builder.optionDescFlag = true
	return builder
}
func (builder *SelectOptionResultBuilder) OptionEnDesc(optionEnDesc string) *SelectOptionResultBuilder {
	builder.optionEnDesc = optionEnDesc
	builder.optionEnDescFlag = true
	return builder
}
func (builder *SelectOptionResultBuilder) IsSelected(isSelected bool) *SelectOptionResultBuilder {
	builder.isSelected = isSelected
	builder.isSelectedFlag = true
	return builder
}

func (builder *SelectOptionResultBuilder) Build() *SelectOptionResult {
	req := &SelectOptionResult{}
	if builder.optionIdFlag {
		req.OptionId = &builder.optionId

	}
	if builder.optionNameFlag {
		req.OptionName = &builder.optionName

	}
	if builder.optionEnNameFlag {
		req.OptionEnName = &builder.optionEnName

	}
	if builder.optionDescFlag {
		req.OptionDesc = &builder.optionDesc

	}
	if builder.optionEnDescFlag {
		req.OptionEnDesc = &builder.optionEnDesc

	}
	if builder.isSelectedFlag {
		req.IsSelected = &builder.isSelected

	}
	return req
}

// builder结束

type Sequence struct {
	Id     *string `json:"id,omitempty"`
	Name   *string `json:"name,omitempty"`
	EnName *string `json:"en_name,omitempty"`
}

// builder开始
type SequenceBuilder struct {
	id         string
	idFlag     bool
	name       string
	nameFlag   bool
	enName     string
	enNameFlag bool
}

func NewSequenceBuilder() *SequenceBuilder {
	builder := &SequenceBuilder{}
	return builder
}

func (builder *SequenceBuilder) Id(id string) *SequenceBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *SequenceBuilder) Name(name string) *SequenceBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *SequenceBuilder) EnName(enName string) *SequenceBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

func (builder *SequenceBuilder) Build() *Sequence {
	req := &Sequence{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	return req
}

// builder结束

type Site struct {
	Id   *string   `json:"id,omitempty"`
	Name *SiteName `json:"name,omitempty"`
}

// builder开始
type SiteBuilder struct {
	id       string
	idFlag   bool
	name     *SiteName
	nameFlag bool
}

func NewSiteBuilder() *SiteBuilder {
	builder := &SiteBuilder{}
	return builder
}

func (builder *SiteBuilder) Id(id string) *SiteBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *SiteBuilder) Name(name *SiteName) *SiteBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *SiteBuilder) Build() *Site {
	req := &Site{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	return req
}

// builder结束

type SiteApplication struct {
	ExternalId *string                `json:"external_id,omitempty"`
	JobPostId  *string                `json:"job_post_id,omitempty"`
	Resume     *SiteApplicationResume `json:"resume,omitempty"`
	Status     *string                `json:"status,omitempty"`
}

// builder开始
type SiteApplicationBuilder struct {
	externalId     string
	externalIdFlag bool
	jobPostId      string
	jobPostIdFlag  bool
	resume         *SiteApplicationResume
	resumeFlag     bool
	status         string
	statusFlag     bool
}

func NewSiteApplicationBuilder() *SiteApplicationBuilder {
	builder := &SiteApplicationBuilder{}
	return builder
}

func (builder *SiteApplicationBuilder) ExternalId(externalId string) *SiteApplicationBuilder {
	builder.externalId = externalId
	builder.externalIdFlag = true
	return builder
}
func (builder *SiteApplicationBuilder) JobPostId(jobPostId string) *SiteApplicationBuilder {
	builder.jobPostId = jobPostId
	builder.jobPostIdFlag = true
	return builder
}
func (builder *SiteApplicationBuilder) Resume(resume *SiteApplicationResume) *SiteApplicationBuilder {
	builder.resume = resume
	builder.resumeFlag = true
	return builder
}
func (builder *SiteApplicationBuilder) Status(status string) *SiteApplicationBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}

func (builder *SiteApplicationBuilder) Build() *SiteApplication {
	req := &SiteApplication{}
	if builder.externalIdFlag {
		req.ExternalId = &builder.externalId

	}
	if builder.jobPostIdFlag {
		req.JobPostId = &builder.jobPostId

	}
	if builder.resumeFlag {
		req.Resume = builder.resume
	}
	if builder.statusFlag {
		req.Status = &builder.status

	}
	return req
}

// builder结束

type SiteJobCity struct {
	CityCode *string   `json:"city_code,omitempty"`
	Name     *SiteName `json:"name,omitempty"`
}

// builder开始
type SiteJobCityBuilder struct {
	cityCode     string
	cityCodeFlag bool
	name         *SiteName
	nameFlag     bool
}

func NewSiteJobCityBuilder() *SiteJobCityBuilder {
	builder := &SiteJobCityBuilder{}
	return builder
}

func (builder *SiteJobCityBuilder) CityCode(cityCode string) *SiteJobCityBuilder {
	builder.cityCode = cityCode
	builder.cityCodeFlag = true
	return builder
}
func (builder *SiteJobCityBuilder) Name(name *SiteName) *SiteJobCityBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *SiteJobCityBuilder) Build() *SiteJobCity {
	req := &SiteJobCity{}
	if builder.cityCodeFlag {
		req.CityCode = &builder.cityCode

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	return req
}

// builder结束

type SiteJobPost struct {
	Id              *string                 `json:"id,omitempty"`
	Title           *string                 `json:"title,omitempty"`
	Description     *string                 `json:"description,omitempty"`
	Requirement     *string                 `json:"requirement,omitempty"`
	JobTypeInfo     *SiteJobType            `json:"job_type_info,omitempty"`
	CityInfo        *SiteJobCity            `json:"city_info,omitempty"`
	RecruitmentType *SiteJobRecruitmentType `json:"recruitment_type,omitempty"`
	PublishTime     *int                    `json:"publish_time,omitempty"`
}

// builder开始
type SiteJobPostBuilder struct {
	id                  string
	idFlag              bool
	title               string
	titleFlag           bool
	description         string
	descriptionFlag     bool
	requirement         string
	requirementFlag     bool
	jobTypeInfo         *SiteJobType
	jobTypeInfoFlag     bool
	cityInfo            *SiteJobCity
	cityInfoFlag        bool
	recruitmentType     *SiteJobRecruitmentType
	recruitmentTypeFlag bool
	publishTime         int
	publishTimeFlag     bool
}

func NewSiteJobPostBuilder() *SiteJobPostBuilder {
	builder := &SiteJobPostBuilder{}
	return builder
}

func (builder *SiteJobPostBuilder) Id(id string) *SiteJobPostBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *SiteJobPostBuilder) Title(title string) *SiteJobPostBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}
func (builder *SiteJobPostBuilder) Description(description string) *SiteJobPostBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}
func (builder *SiteJobPostBuilder) Requirement(requirement string) *SiteJobPostBuilder {
	builder.requirement = requirement
	builder.requirementFlag = true
	return builder
}
func (builder *SiteJobPostBuilder) JobTypeInfo(jobTypeInfo *SiteJobType) *SiteJobPostBuilder {
	builder.jobTypeInfo = jobTypeInfo
	builder.jobTypeInfoFlag = true
	return builder
}
func (builder *SiteJobPostBuilder) CityInfo(cityInfo *SiteJobCity) *SiteJobPostBuilder {
	builder.cityInfo = cityInfo
	builder.cityInfoFlag = true
	return builder
}
func (builder *SiteJobPostBuilder) RecruitmentType(recruitmentType *SiteJobRecruitmentType) *SiteJobPostBuilder {
	builder.recruitmentType = recruitmentType
	builder.recruitmentTypeFlag = true
	return builder
}
func (builder *SiteJobPostBuilder) PublishTime(publishTime int) *SiteJobPostBuilder {
	builder.publishTime = publishTime
	builder.publishTimeFlag = true
	return builder
}

func (builder *SiteJobPostBuilder) Build() *SiteJobPost {
	req := &SiteJobPost{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	if builder.requirementFlag {
		req.Requirement = &builder.requirement

	}
	if builder.jobTypeInfoFlag {
		req.JobTypeInfo = builder.jobTypeInfo
	}
	if builder.cityInfoFlag {
		req.CityInfo = builder.cityInfo
	}
	if builder.recruitmentTypeFlag {
		req.RecruitmentType = builder.recruitmentType
	}
	if builder.publishTimeFlag {
		req.PublishTime = &builder.publishTime

	}
	return req
}

// builder结束

type SiteJobType struct {
	Id   *string   `json:"id,omitempty"`
	Name *SiteName `json:"name,omitempty"`
}

// builder开始
type SiteJobTypeBuilder struct {
	id       string
	idFlag   bool
	name     *SiteName
	nameFlag bool
}

func NewSiteJobTypeBuilder() *SiteJobTypeBuilder {
	builder := &SiteJobTypeBuilder{}
	return builder
}

func (builder *SiteJobTypeBuilder) Id(id string) *SiteJobTypeBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *SiteJobTypeBuilder) Name(name *SiteName) *SiteJobTypeBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *SiteJobTypeBuilder) Build() *SiteJobType {
	req := &SiteJobType{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	return req
}

// builder结束

type SiteApplicationResume struct {
	Name              *string                    `json:"name,omitempty"`
	MobileNumber      *string                    `json:"mobile_number,omitempty"`
	MoblieCode        *string                    `json:"moblie_code,omitempty"`
	Email             *string                    `json:"email,omitempty"`
	SiteAttachmentId  *string                    `json:"site_attachment_id,omitempty"`
	SelfEvaluation    *string                    `json:"self_evaluation,omitempty"`
	Age               *string                    `json:"age,omitempty"`
	WorkingYear       *string                    `json:"working_year,omitempty"`
	EducationList     []*SiteResumeEducation     `json:"education_list,omitempty"`
	CareerList        []*SiteResumeCareer        `json:"career_list,omitempty"`
	ProjectList       []*SiteResumeProject       `json:"project_list,omitempty"`
	InternshipList    []*SiteResumeInternship    `json:"internship_list,omitempty"`
	WorkList          []*SiteResumeWork          `json:"work_list,omitempty"`
	AwardList         []*SiteResumeAward         `json:"award_list,omitempty"`
	LanguageSkillList []*SiteResumeLanguageSkill `json:"language_skill_list,omitempty"`
	SnsList           []*SiteResumeSns           `json:"sns_list,omitempty"`
	Identification    *SiteResumeIdentification  `json:"identification,omitempty"`
	CompetitionList   []*SiteResumeCompetition   `json:"competition_list,omitempty"`
	CertificateList   []*SiteResumeCertificate   `json:"certificate_list,omitempty"`
}

// builder开始
type SiteApplicationResumeBuilder struct {
	name                  string
	nameFlag              bool
	mobileNumber          string
	mobileNumberFlag      bool
	moblieCode            string
	moblieCodeFlag        bool
	email                 string
	emailFlag             bool
	siteAttachmentId      string
	siteAttachmentIdFlag  bool
	selfEvaluation        string
	selfEvaluationFlag    bool
	age                   string
	ageFlag               bool
	workingYear           string
	workingYearFlag       bool
	educationList         []*SiteResumeEducation
	educationListFlag     bool
	careerList            []*SiteResumeCareer
	careerListFlag        bool
	projectList           []*SiteResumeProject
	projectListFlag       bool
	internshipList        []*SiteResumeInternship
	internshipListFlag    bool
	workList              []*SiteResumeWork
	workListFlag          bool
	awardList             []*SiteResumeAward
	awardListFlag         bool
	languageSkillList     []*SiteResumeLanguageSkill
	languageSkillListFlag bool
	snsList               []*SiteResumeSns
	snsListFlag           bool
	identification        *SiteResumeIdentification
	identificationFlag    bool
	competitionList       []*SiteResumeCompetition
	competitionListFlag   bool
	certificateList       []*SiteResumeCertificate
	certificateListFlag   bool
}

func NewSiteApplicationResumeBuilder() *SiteApplicationResumeBuilder {
	builder := &SiteApplicationResumeBuilder{}
	return builder
}

func (builder *SiteApplicationResumeBuilder) Name(name string) *SiteApplicationResumeBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *SiteApplicationResumeBuilder) MobileNumber(mobileNumber string) *SiteApplicationResumeBuilder {
	builder.mobileNumber = mobileNumber
	builder.mobileNumberFlag = true
	return builder
}
func (builder *SiteApplicationResumeBuilder) MoblieCode(moblieCode string) *SiteApplicationResumeBuilder {
	builder.moblieCode = moblieCode
	builder.moblieCodeFlag = true
	return builder
}
func (builder *SiteApplicationResumeBuilder) Email(email string) *SiteApplicationResumeBuilder {
	builder.email = email
	builder.emailFlag = true
	return builder
}
func (builder *SiteApplicationResumeBuilder) SiteAttachmentId(siteAttachmentId string) *SiteApplicationResumeBuilder {
	builder.siteAttachmentId = siteAttachmentId
	builder.siteAttachmentIdFlag = true
	return builder
}
func (builder *SiteApplicationResumeBuilder) SelfEvaluation(selfEvaluation string) *SiteApplicationResumeBuilder {
	builder.selfEvaluation = selfEvaluation
	builder.selfEvaluationFlag = true
	return builder
}
func (builder *SiteApplicationResumeBuilder) Age(age string) *SiteApplicationResumeBuilder {
	builder.age = age
	builder.ageFlag = true
	return builder
}
func (builder *SiteApplicationResumeBuilder) WorkingYear(workingYear string) *SiteApplicationResumeBuilder {
	builder.workingYear = workingYear
	builder.workingYearFlag = true
	return builder
}
func (builder *SiteApplicationResumeBuilder) EducationList(educationList []*SiteResumeEducation) *SiteApplicationResumeBuilder {
	builder.educationList = educationList
	builder.educationListFlag = true
	return builder
}
func (builder *SiteApplicationResumeBuilder) CareerList(careerList []*SiteResumeCareer) *SiteApplicationResumeBuilder {
	builder.careerList = careerList
	builder.careerListFlag = true
	return builder
}
func (builder *SiteApplicationResumeBuilder) ProjectList(projectList []*SiteResumeProject) *SiteApplicationResumeBuilder {
	builder.projectList = projectList
	builder.projectListFlag = true
	return builder
}
func (builder *SiteApplicationResumeBuilder) InternshipList(internshipList []*SiteResumeInternship) *SiteApplicationResumeBuilder {
	builder.internshipList = internshipList
	builder.internshipListFlag = true
	return builder
}
func (builder *SiteApplicationResumeBuilder) WorkList(workList []*SiteResumeWork) *SiteApplicationResumeBuilder {
	builder.workList = workList
	builder.workListFlag = true
	return builder
}
func (builder *SiteApplicationResumeBuilder) AwardList(awardList []*SiteResumeAward) *SiteApplicationResumeBuilder {
	builder.awardList = awardList
	builder.awardListFlag = true
	return builder
}
func (builder *SiteApplicationResumeBuilder) LanguageSkillList(languageSkillList []*SiteResumeLanguageSkill) *SiteApplicationResumeBuilder {
	builder.languageSkillList = languageSkillList
	builder.languageSkillListFlag = true
	return builder
}
func (builder *SiteApplicationResumeBuilder) SnsList(snsList []*SiteResumeSns) *SiteApplicationResumeBuilder {
	builder.snsList = snsList
	builder.snsListFlag = true
	return builder
}
func (builder *SiteApplicationResumeBuilder) Identification(identification *SiteResumeIdentification) *SiteApplicationResumeBuilder {
	builder.identification = identification
	builder.identificationFlag = true
	return builder
}
func (builder *SiteApplicationResumeBuilder) CompetitionList(competitionList []*SiteResumeCompetition) *SiteApplicationResumeBuilder {
	builder.competitionList = competitionList
	builder.competitionListFlag = true
	return builder
}
func (builder *SiteApplicationResumeBuilder) CertificateList(certificateList []*SiteResumeCertificate) *SiteApplicationResumeBuilder {
	builder.certificateList = certificateList
	builder.certificateListFlag = true
	return builder
}

func (builder *SiteApplicationResumeBuilder) Build() *SiteApplicationResume {
	req := &SiteApplicationResume{}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.mobileNumberFlag {
		req.MobileNumber = &builder.mobileNumber

	}
	if builder.moblieCodeFlag {
		req.MoblieCode = &builder.moblieCode

	}
	if builder.emailFlag {
		req.Email = &builder.email

	}
	if builder.siteAttachmentIdFlag {
		req.SiteAttachmentId = &builder.siteAttachmentId

	}
	if builder.selfEvaluationFlag {
		req.SelfEvaluation = &builder.selfEvaluation

	}
	if builder.ageFlag {
		req.Age = &builder.age

	}
	if builder.workingYearFlag {
		req.WorkingYear = &builder.workingYear

	}
	if builder.educationListFlag {
		req.EducationList = builder.educationList
	}
	if builder.careerListFlag {
		req.CareerList = builder.careerList
	}
	if builder.projectListFlag {
		req.ProjectList = builder.projectList
	}
	if builder.internshipListFlag {
		req.InternshipList = builder.internshipList
	}
	if builder.workListFlag {
		req.WorkList = builder.workList
	}
	if builder.awardListFlag {
		req.AwardList = builder.awardList
	}
	if builder.languageSkillListFlag {
		req.LanguageSkillList = builder.languageSkillList
	}
	if builder.snsListFlag {
		req.SnsList = builder.snsList
	}
	if builder.identificationFlag {
		req.Identification = builder.identification
	}
	if builder.competitionListFlag {
		req.CompetitionList = builder.competitionList
	}
	if builder.certificateListFlag {
		req.CertificateList = builder.certificateList
	}
	return req
}

// builder结束

type SiteJobPostSearchInfo struct {
	JobPostInfo []*SiteJobPost `json:"job_post_info,omitempty"`
	Count       *int           `json:"count,omitempty"`
}

// builder开始
type SiteJobPostSearchInfoBuilder struct {
	jobPostInfo     []*SiteJobPost
	jobPostInfoFlag bool
	count           int
	countFlag       bool
}

func NewSiteJobPostSearchInfoBuilder() *SiteJobPostSearchInfoBuilder {
	builder := &SiteJobPostSearchInfoBuilder{}
	return builder
}

func (builder *SiteJobPostSearchInfoBuilder) JobPostInfo(jobPostInfo []*SiteJobPost) *SiteJobPostSearchInfoBuilder {
	builder.jobPostInfo = jobPostInfo
	builder.jobPostInfoFlag = true
	return builder
}
func (builder *SiteJobPostSearchInfoBuilder) Count(count int) *SiteJobPostSearchInfoBuilder {
	builder.count = count
	builder.countFlag = true
	return builder
}

func (builder *SiteJobPostSearchInfoBuilder) Build() *SiteJobPostSearchInfo {
	req := &SiteJobPostSearchInfo{}
	if builder.jobPostInfoFlag {
		req.JobPostInfo = builder.jobPostInfo
	}
	if builder.countFlag {
		req.Count = &builder.count

	}
	return req
}

// builder结束

type SiteJobPostSearchRequest struct {
	Keyword       *string  `json:"keyword,omitempty"`
	Offset        *int     `json:"offset,omitempty"`
	Limit         *int     `json:"limit,omitempty"`
	JobTypeIdList []string `json:"job_type_id_list,omitempty"`
	CityCodeList  []string `json:"city_code_list,omitempty"`
	SiteId        *string  `json:"site_id,omitempty"`
}

// builder开始
type SiteJobPostSearchRequestBuilder struct {
	keyword           string
	keywordFlag       bool
	offset            int
	offsetFlag        bool
	limit             int
	limitFlag         bool
	jobTypeIdList     []string
	jobTypeIdListFlag bool
	cityCodeList      []string
	cityCodeListFlag  bool
	siteId            string
	siteIdFlag        bool
}

func NewSiteJobPostSearchRequestBuilder() *SiteJobPostSearchRequestBuilder {
	builder := &SiteJobPostSearchRequestBuilder{}
	return builder
}

func (builder *SiteJobPostSearchRequestBuilder) Keyword(keyword string) *SiteJobPostSearchRequestBuilder {
	builder.keyword = keyword
	builder.keywordFlag = true
	return builder
}
func (builder *SiteJobPostSearchRequestBuilder) Offset(offset int) *SiteJobPostSearchRequestBuilder {
	builder.offset = offset
	builder.offsetFlag = true
	return builder
}
func (builder *SiteJobPostSearchRequestBuilder) Limit(limit int) *SiteJobPostSearchRequestBuilder {
	builder.limit = limit
	builder.limitFlag = true
	return builder
}
func (builder *SiteJobPostSearchRequestBuilder) JobTypeIdList(jobTypeIdList []string) *SiteJobPostSearchRequestBuilder {
	builder.jobTypeIdList = jobTypeIdList
	builder.jobTypeIdListFlag = true
	return builder
}
func (builder *SiteJobPostSearchRequestBuilder) CityCodeList(cityCodeList []string) *SiteJobPostSearchRequestBuilder {
	builder.cityCodeList = cityCodeList
	builder.cityCodeListFlag = true
	return builder
}
func (builder *SiteJobPostSearchRequestBuilder) SiteId(siteId string) *SiteJobPostSearchRequestBuilder {
	builder.siteId = siteId
	builder.siteIdFlag = true
	return builder
}

func (builder *SiteJobPostSearchRequestBuilder) Build() *SiteJobPostSearchRequest {
	req := &SiteJobPostSearchRequest{}
	if builder.keywordFlag {
		req.Keyword = &builder.keyword

	}
	if builder.offsetFlag {
		req.Offset = &builder.offset

	}
	if builder.limitFlag {
		req.Limit = &builder.limit

	}
	if builder.jobTypeIdListFlag {
		req.JobTypeIdList = builder.jobTypeIdList
	}
	if builder.cityCodeListFlag {
		req.CityCodeList = builder.cityCodeList
	}
	if builder.siteIdFlag {
		req.SiteId = &builder.siteId

	}
	return req
}

// builder结束

type SiteJobRecruitmentType struct {
	Id   *string   `json:"id,omitempty"`
	Name *SiteName `json:"name,omitempty"`
}

// builder开始
type SiteJobRecruitmentTypeBuilder struct {
	id       string
	idFlag   bool
	name     *SiteName
	nameFlag bool
}

func NewSiteJobRecruitmentTypeBuilder() *SiteJobRecruitmentTypeBuilder {
	builder := &SiteJobRecruitmentTypeBuilder{}
	return builder
}

func (builder *SiteJobRecruitmentTypeBuilder) Id(id string) *SiteJobRecruitmentTypeBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *SiteJobRecruitmentTypeBuilder) Name(name *SiteName) *SiteJobRecruitmentTypeBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *SiteJobRecruitmentTypeBuilder) Build() *SiteJobRecruitmentType {
	req := &SiteJobRecruitmentType{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	return req
}

// builder结束

type SiteName struct {
	ZhCn *string `json:"zh_cn,omitempty"`
	EnUs *string `json:"en_us,omitempty"`
}

// builder开始
type SiteNameBuilder struct {
	zhCn     string
	zhCnFlag bool
	enUs     string
	enUsFlag bool
}

func NewSiteNameBuilder() *SiteNameBuilder {
	builder := &SiteNameBuilder{}
	return builder
}

func (builder *SiteNameBuilder) ZhCn(zhCn string) *SiteNameBuilder {
	builder.zhCn = zhCn
	builder.zhCnFlag = true
	return builder
}
func (builder *SiteNameBuilder) EnUs(enUs string) *SiteNameBuilder {
	builder.enUs = enUs
	builder.enUsFlag = true
	return builder
}

func (builder *SiteNameBuilder) Build() *SiteName {
	req := &SiteName{}
	if builder.zhCnFlag {
		req.ZhCn = &builder.zhCn

	}
	if builder.enUsFlag {
		req.EnUs = &builder.enUs

	}
	return req
}

// builder结束

type SiteResumeAward struct {
	Title       *string `json:"title,omitempty"`
	AwardTime   *string `json:"award_time,omitempty"`
	Description *string `json:"description,omitempty"`
}

// builder开始
type SiteResumeAwardBuilder struct {
	title           string
	titleFlag       bool
	awardTime       string
	awardTimeFlag   bool
	description     string
	descriptionFlag bool
}

func NewSiteResumeAwardBuilder() *SiteResumeAwardBuilder {
	builder := &SiteResumeAwardBuilder{}
	return builder
}

func (builder *SiteResumeAwardBuilder) Title(title string) *SiteResumeAwardBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}
func (builder *SiteResumeAwardBuilder) AwardTime(awardTime string) *SiteResumeAwardBuilder {
	builder.awardTime = awardTime
	builder.awardTimeFlag = true
	return builder
}
func (builder *SiteResumeAwardBuilder) Description(description string) *SiteResumeAwardBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

func (builder *SiteResumeAwardBuilder) Build() *SiteResumeAward {
	req := &SiteResumeAward{}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.awardTimeFlag {
		req.AwardTime = &builder.awardTime

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	return req
}

// builder结束

type SiteResumeCareer struct {
	Company     *string `json:"company,omitempty"`
	Title       *string `json:"title,omitempty"`
	CareerType  *string `json:"career_type,omitempty"`
	Description *string `json:"description,omitempty"`
	StartTime   *string `json:"start_time,omitempty"`
	EndTime     *string `json:"end_time,omitempty"`
}

// builder开始
type SiteResumeCareerBuilder struct {
	company         string
	companyFlag     bool
	title           string
	titleFlag       bool
	careerType      string
	careerTypeFlag  bool
	description     string
	descriptionFlag bool
	startTime       string
	startTimeFlag   bool
	endTime         string
	endTimeFlag     bool
}

func NewSiteResumeCareerBuilder() *SiteResumeCareerBuilder {
	builder := &SiteResumeCareerBuilder{}
	return builder
}

func (builder *SiteResumeCareerBuilder) Company(company string) *SiteResumeCareerBuilder {
	builder.company = company
	builder.companyFlag = true
	return builder
}
func (builder *SiteResumeCareerBuilder) Title(title string) *SiteResumeCareerBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}
func (builder *SiteResumeCareerBuilder) CareerType(careerType string) *SiteResumeCareerBuilder {
	builder.careerType = careerType
	builder.careerTypeFlag = true
	return builder
}
func (builder *SiteResumeCareerBuilder) Description(description string) *SiteResumeCareerBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}
func (builder *SiteResumeCareerBuilder) StartTime(startTime string) *SiteResumeCareerBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}
func (builder *SiteResumeCareerBuilder) EndTime(endTime string) *SiteResumeCareerBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

func (builder *SiteResumeCareerBuilder) Build() *SiteResumeCareer {
	req := &SiteResumeCareer{}
	if builder.companyFlag {
		req.Company = &builder.company

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.careerTypeFlag {
		req.CareerType = &builder.careerType

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	return req
}

// builder结束

type SiteResumeCertificate struct {
	Name        *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
}

// builder开始
type SiteResumeCertificateBuilder struct {
	name            string
	nameFlag        bool
	description     string
	descriptionFlag bool
}

func NewSiteResumeCertificateBuilder() *SiteResumeCertificateBuilder {
	builder := &SiteResumeCertificateBuilder{}
	return builder
}

func (builder *SiteResumeCertificateBuilder) Name(name string) *SiteResumeCertificateBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *SiteResumeCertificateBuilder) Description(description string) *SiteResumeCertificateBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

func (builder *SiteResumeCertificateBuilder) Build() *SiteResumeCertificate {
	req := &SiteResumeCertificate{}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	return req
}

// builder结束

type SiteResumeCompetition struct {
	Name        *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
}

// builder开始
type SiteResumeCompetitionBuilder struct {
	name            string
	nameFlag        bool
	description     string
	descriptionFlag bool
}

func NewSiteResumeCompetitionBuilder() *SiteResumeCompetitionBuilder {
	builder := &SiteResumeCompetitionBuilder{}
	return builder
}

func (builder *SiteResumeCompetitionBuilder) Name(name string) *SiteResumeCompetitionBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *SiteResumeCompetitionBuilder) Description(description string) *SiteResumeCompetitionBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

func (builder *SiteResumeCompetitionBuilder) Build() *SiteResumeCompetition {
	req := &SiteResumeCompetition{}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	return req
}

// builder结束

type SiteResumeEducation struct {
	Degree          *string `json:"degree,omitempty"`
	School          *string `json:"school,omitempty"`
	Major           *string `json:"major,omitempty"`
	StartTime       *string `json:"start_time,omitempty"`
	EndTime         *string `json:"end_time,omitempty"`
	EducationType   *string `json:"education_type,omitempty"`
	AcademicRanking *string `json:"academic_ranking,omitempty"`
}

// builder开始
type SiteResumeEducationBuilder struct {
	degree              string
	degreeFlag          bool
	school              string
	schoolFlag          bool
	major               string
	majorFlag           bool
	startTime           string
	startTimeFlag       bool
	endTime             string
	endTimeFlag         bool
	educationType       string
	educationTypeFlag   bool
	academicRanking     string
	academicRankingFlag bool
}

func NewSiteResumeEducationBuilder() *SiteResumeEducationBuilder {
	builder := &SiteResumeEducationBuilder{}
	return builder
}

func (builder *SiteResumeEducationBuilder) Degree(degree string) *SiteResumeEducationBuilder {
	builder.degree = degree
	builder.degreeFlag = true
	return builder
}
func (builder *SiteResumeEducationBuilder) School(school string) *SiteResumeEducationBuilder {
	builder.school = school
	builder.schoolFlag = true
	return builder
}
func (builder *SiteResumeEducationBuilder) Major(major string) *SiteResumeEducationBuilder {
	builder.major = major
	builder.majorFlag = true
	return builder
}
func (builder *SiteResumeEducationBuilder) StartTime(startTime string) *SiteResumeEducationBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}
func (builder *SiteResumeEducationBuilder) EndTime(endTime string) *SiteResumeEducationBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}
func (builder *SiteResumeEducationBuilder) EducationType(educationType string) *SiteResumeEducationBuilder {
	builder.educationType = educationType
	builder.educationTypeFlag = true
	return builder
}
func (builder *SiteResumeEducationBuilder) AcademicRanking(academicRanking string) *SiteResumeEducationBuilder {
	builder.academicRanking = academicRanking
	builder.academicRankingFlag = true
	return builder
}

func (builder *SiteResumeEducationBuilder) Build() *SiteResumeEducation {
	req := &SiteResumeEducation{}
	if builder.degreeFlag {
		req.Degree = &builder.degree

	}
	if builder.schoolFlag {
		req.School = &builder.school

	}
	if builder.majorFlag {
		req.Major = &builder.major

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.educationTypeFlag {
		req.EducationType = &builder.educationType

	}
	if builder.academicRankingFlag {
		req.AcademicRanking = &builder.academicRanking

	}
	return req
}

// builder结束

type SiteResumeIdentification struct {
	IdentificationType *string `json:"identification_type,omitempty"`
	Code               *string `json:"code,omitempty"`
}

// builder开始
type SiteResumeIdentificationBuilder struct {
	identificationType     string
	identificationTypeFlag bool
	code                   string
	codeFlag               bool
}

func NewSiteResumeIdentificationBuilder() *SiteResumeIdentificationBuilder {
	builder := &SiteResumeIdentificationBuilder{}
	return builder
}

func (builder *SiteResumeIdentificationBuilder) IdentificationType(identificationType string) *SiteResumeIdentificationBuilder {
	builder.identificationType = identificationType
	builder.identificationTypeFlag = true
	return builder
}
func (builder *SiteResumeIdentificationBuilder) Code(code string) *SiteResumeIdentificationBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}

func (builder *SiteResumeIdentificationBuilder) Build() *SiteResumeIdentification {
	req := &SiteResumeIdentification{}
	if builder.identificationTypeFlag {
		req.IdentificationType = &builder.identificationType

	}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	return req
}

// builder结束

type SiteResumeInternship struct {
	Company     *string `json:"company,omitempty"`
	Position    *string `json:"position,omitempty"`
	Description *string `json:"description,omitempty"`
	StartTime   *string `json:"start_time,omitempty"`
	EndTime     *string `json:"end_time,omitempty"`
}

// builder开始
type SiteResumeInternshipBuilder struct {
	company         string
	companyFlag     bool
	position        string
	positionFlag    bool
	description     string
	descriptionFlag bool
	startTime       string
	startTimeFlag   bool
	endTime         string
	endTimeFlag     bool
}

func NewSiteResumeInternshipBuilder() *SiteResumeInternshipBuilder {
	builder := &SiteResumeInternshipBuilder{}
	return builder
}

func (builder *SiteResumeInternshipBuilder) Company(company string) *SiteResumeInternshipBuilder {
	builder.company = company
	builder.companyFlag = true
	return builder
}
func (builder *SiteResumeInternshipBuilder) Position(position string) *SiteResumeInternshipBuilder {
	builder.position = position
	builder.positionFlag = true
	return builder
}
func (builder *SiteResumeInternshipBuilder) Description(description string) *SiteResumeInternshipBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}
func (builder *SiteResumeInternshipBuilder) StartTime(startTime string) *SiteResumeInternshipBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}
func (builder *SiteResumeInternshipBuilder) EndTime(endTime string) *SiteResumeInternshipBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

func (builder *SiteResumeInternshipBuilder) Build() *SiteResumeInternship {
	req := &SiteResumeInternship{}
	if builder.companyFlag {
		req.Company = &builder.company

	}
	if builder.positionFlag {
		req.Position = &builder.position

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	return req
}

// builder结束

type SiteResumeLanguageSkill struct {
	Language    *string `json:"language,omitempty"`
	Proficiency *string `json:"proficiency,omitempty"`
}

// builder开始
type SiteResumeLanguageSkillBuilder struct {
	language        string
	languageFlag    bool
	proficiency     string
	proficiencyFlag bool
}

func NewSiteResumeLanguageSkillBuilder() *SiteResumeLanguageSkillBuilder {
	builder := &SiteResumeLanguageSkillBuilder{}
	return builder
}

func (builder *SiteResumeLanguageSkillBuilder) Language(language string) *SiteResumeLanguageSkillBuilder {
	builder.language = language
	builder.languageFlag = true
	return builder
}
func (builder *SiteResumeLanguageSkillBuilder) Proficiency(proficiency string) *SiteResumeLanguageSkillBuilder {
	builder.proficiency = proficiency
	builder.proficiencyFlag = true
	return builder
}

func (builder *SiteResumeLanguageSkillBuilder) Build() *SiteResumeLanguageSkill {
	req := &SiteResumeLanguageSkill{}
	if builder.languageFlag {
		req.Language = &builder.language

	}
	if builder.proficiencyFlag {
		req.Proficiency = &builder.proficiency

	}
	return req
}

// builder结束

type SiteResumeProject struct {
	Name        *string `json:"name,omitempty"`
	Role        *string `json:"role,omitempty"`
	Description *string `json:"description,omitempty"`
	StartTime   *string `json:"start_time,omitempty"`
	EndTime     *string `json:"end_time,omitempty"`
}

// builder开始
type SiteResumeProjectBuilder struct {
	name            string
	nameFlag        bool
	role            string
	roleFlag        bool
	description     string
	descriptionFlag bool
	startTime       string
	startTimeFlag   bool
	endTime         string
	endTimeFlag     bool
}

func NewSiteResumeProjectBuilder() *SiteResumeProjectBuilder {
	builder := &SiteResumeProjectBuilder{}
	return builder
}

func (builder *SiteResumeProjectBuilder) Name(name string) *SiteResumeProjectBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *SiteResumeProjectBuilder) Role(role string) *SiteResumeProjectBuilder {
	builder.role = role
	builder.roleFlag = true
	return builder
}
func (builder *SiteResumeProjectBuilder) Description(description string) *SiteResumeProjectBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}
func (builder *SiteResumeProjectBuilder) StartTime(startTime string) *SiteResumeProjectBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}
func (builder *SiteResumeProjectBuilder) EndTime(endTime string) *SiteResumeProjectBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

func (builder *SiteResumeProjectBuilder) Build() *SiteResumeProject {
	req := &SiteResumeProject{}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.roleFlag {
		req.Role = &builder.role

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	return req
}

// builder结束

type SiteResumeSns struct {
	SnsType *string `json:"sns_type,omitempty"`
	Link    *string `json:"link,omitempty"`
}

// builder开始
type SiteResumeSnsBuilder struct {
	snsType     string
	snsTypeFlag bool
	link        string
	linkFlag    bool
}

func NewSiteResumeSnsBuilder() *SiteResumeSnsBuilder {
	builder := &SiteResumeSnsBuilder{}
	return builder
}

func (builder *SiteResumeSnsBuilder) SnsType(snsType string) *SiteResumeSnsBuilder {
	builder.snsType = snsType
	builder.snsTypeFlag = true
	return builder
}
func (builder *SiteResumeSnsBuilder) Link(link string) *SiteResumeSnsBuilder {
	builder.link = link
	builder.linkFlag = true
	return builder
}

func (builder *SiteResumeSnsBuilder) Build() *SiteResumeSns {
	req := &SiteResumeSns{}
	if builder.snsTypeFlag {
		req.SnsType = &builder.snsType

	}
	if builder.linkFlag {
		req.Link = &builder.link

	}
	return req
}

// builder结束

type SiteResumeWork struct {
	Link             *string `json:"link,omitempty"`
	Description      *string `json:"description,omitempty"`
	SiteAttachmentId *string `json:"site_attachment_id,omitempty"`
}

// builder开始
type SiteResumeWorkBuilder struct {
	link                 string
	linkFlag             bool
	description          string
	descriptionFlag      bool
	siteAttachmentId     string
	siteAttachmentIdFlag bool
}

func NewSiteResumeWorkBuilder() *SiteResumeWorkBuilder {
	builder := &SiteResumeWorkBuilder{}
	return builder
}

func (builder *SiteResumeWorkBuilder) Link(link string) *SiteResumeWorkBuilder {
	builder.link = link
	builder.linkFlag = true
	return builder
}
func (builder *SiteResumeWorkBuilder) Description(description string) *SiteResumeWorkBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}
func (builder *SiteResumeWorkBuilder) SiteAttachmentId(siteAttachmentId string) *SiteResumeWorkBuilder {
	builder.siteAttachmentId = siteAttachmentId
	builder.siteAttachmentIdFlag = true
	return builder
}

func (builder *SiteResumeWorkBuilder) Build() *SiteResumeWork {
	req := &SiteResumeWork{}
	if builder.linkFlag {
		req.Link = &builder.link

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	if builder.siteAttachmentIdFlag {
		req.SiteAttachmentId = &builder.siteAttachmentId

	}
	return req
}

// builder结束

type SnsInfo struct {
	Link    *string `json:"link,omitempty"`
	SnsType *int    `json:"sns_type,omitempty"`
}

// builder开始
type SnsInfoBuilder struct {
	link        string
	linkFlag    bool
	snsType     int
	snsTypeFlag bool
}

func NewSnsInfoBuilder() *SnsInfoBuilder {
	builder := &SnsInfoBuilder{}
	return builder
}

func (builder *SnsInfoBuilder) Link(link string) *SnsInfoBuilder {
	builder.link = link
	builder.linkFlag = true
	return builder
}
func (builder *SnsInfoBuilder) SnsType(snsType int) *SnsInfoBuilder {
	builder.snsType = snsType
	builder.snsTypeFlag = true
	return builder
}

func (builder *SnsInfoBuilder) Build() *SnsInfo {
	req := &SnsInfo{}
	if builder.linkFlag {
		req.Link = &builder.link

	}
	if builder.snsTypeFlag {
		req.SnsType = &builder.snsType

	}
	return req
}

// builder结束

type Subject struct {
	Id               *string       `json:"id,omitempty"`
	Name             *I18n         `json:"name,omitempty"`
	CreateTime       *string       `json:"create_time,omitempty"`
	ActiveStatus     *int          `json:"active_status,omitempty"`
	ApplicationLimit *int          `json:"application_limit,omitempty"`
	Creator          *IdNameObject `json:"creator,omitempty"`
}

// builder开始
type SubjectBuilder struct {
	id                   string
	idFlag               bool
	name                 *I18n
	nameFlag             bool
	createTime           string
	createTimeFlag       bool
	activeStatus         int
	activeStatusFlag     bool
	applicationLimit     int
	applicationLimitFlag bool
	creator              *IdNameObject
	creatorFlag          bool
}

func NewSubjectBuilder() *SubjectBuilder {
	builder := &SubjectBuilder{}
	return builder
}

func (builder *SubjectBuilder) Id(id string) *SubjectBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *SubjectBuilder) Name(name *I18n) *SubjectBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *SubjectBuilder) CreateTime(createTime string) *SubjectBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}
func (builder *SubjectBuilder) ActiveStatus(activeStatus int) *SubjectBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}
func (builder *SubjectBuilder) ApplicationLimit(applicationLimit int) *SubjectBuilder {
	builder.applicationLimit = applicationLimit
	builder.applicationLimitFlag = true
	return builder
}
func (builder *SubjectBuilder) Creator(creator *IdNameObject) *SubjectBuilder {
	builder.creator = creator
	builder.creatorFlag = true
	return builder
}

func (builder *SubjectBuilder) Build() *Subject {
	req := &Subject{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	if builder.applicationLimitFlag {
		req.ApplicationLimit = &builder.applicationLimit

	}
	if builder.creatorFlag {
		req.Creator = builder.creator
	}
	return req
}

// builder结束

type Talent struct {
	Id                        *string                              `json:"id,omitempty"`
	IsInAgencyPeriod          *bool                                `json:"is_in_agency_period,omitempty"`
	BasicInfo                 *TalentBasicInfo                     `json:"basic_info,omitempty"`
	EducationList             []*TalentEducationInfo               `json:"education_list,omitempty"`
	CareerList                []*TalentCareerInfo                  `json:"career_list,omitempty"`
	ProjectList               []*TalentProjectInfo                 `json:"project_list,omitempty"`
	WorksList                 []*TalentWorksInfo                   `json:"works_list,omitempty"`
	AwardList                 []*TalentAwardInfo                   `json:"award_list,omitempty"`
	LanguageList              []*TalentLanguageInfo                `json:"language_list,omitempty"`
	SnsList                   []*TalentSnsInfo                     `json:"sns_list,omitempty"`
	ResumeSourceList          []*TalentResumeSource                `json:"resume_source_list,omitempty"`
	InterviewRegistrationList []*TalentInterviewRegistrationSimple `json:"interview_registration_list,omitempty"`
	ResumeAttachmentIdList    []string                             `json:"resume_attachment_id_list,omitempty"`
	CustomizedDataList        []*TalentCustomizedData              `json:"customized_data_list,omitempty"`
	TopDegree                 *int                                 `json:"top_degree,omitempty"`
}

// builder开始
type TalentBuilder struct {
	id                            string
	idFlag                        bool
	isInAgencyPeriod              bool
	isInAgencyPeriodFlag          bool
	basicInfo                     *TalentBasicInfo
	basicInfoFlag                 bool
	educationList                 []*TalentEducationInfo
	educationListFlag             bool
	careerList                    []*TalentCareerInfo
	careerListFlag                bool
	projectList                   []*TalentProjectInfo
	projectListFlag               bool
	worksList                     []*TalentWorksInfo
	worksListFlag                 bool
	awardList                     []*TalentAwardInfo
	awardListFlag                 bool
	languageList                  []*TalentLanguageInfo
	languageListFlag              bool
	snsList                       []*TalentSnsInfo
	snsListFlag                   bool
	resumeSourceList              []*TalentResumeSource
	resumeSourceListFlag          bool
	interviewRegistrationList     []*TalentInterviewRegistrationSimple
	interviewRegistrationListFlag bool
	resumeAttachmentIdList        []string
	resumeAttachmentIdListFlag    bool
	customizedDataList            []*TalentCustomizedData
	customizedDataListFlag        bool
	topDegree                     int
	topDegreeFlag                 bool
}

func NewTalentBuilder() *TalentBuilder {
	builder := &TalentBuilder{}
	return builder
}

func (builder *TalentBuilder) Id(id string) *TalentBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *TalentBuilder) IsInAgencyPeriod(isInAgencyPeriod bool) *TalentBuilder {
	builder.isInAgencyPeriod = isInAgencyPeriod
	builder.isInAgencyPeriodFlag = true
	return builder
}
func (builder *TalentBuilder) BasicInfo(basicInfo *TalentBasicInfo) *TalentBuilder {
	builder.basicInfo = basicInfo
	builder.basicInfoFlag = true
	return builder
}
func (builder *TalentBuilder) EducationList(educationList []*TalentEducationInfo) *TalentBuilder {
	builder.educationList = educationList
	builder.educationListFlag = true
	return builder
}
func (builder *TalentBuilder) CareerList(careerList []*TalentCareerInfo) *TalentBuilder {
	builder.careerList = careerList
	builder.careerListFlag = true
	return builder
}
func (builder *TalentBuilder) ProjectList(projectList []*TalentProjectInfo) *TalentBuilder {
	builder.projectList = projectList
	builder.projectListFlag = true
	return builder
}
func (builder *TalentBuilder) WorksList(worksList []*TalentWorksInfo) *TalentBuilder {
	builder.worksList = worksList
	builder.worksListFlag = true
	return builder
}
func (builder *TalentBuilder) AwardList(awardList []*TalentAwardInfo) *TalentBuilder {
	builder.awardList = awardList
	builder.awardListFlag = true
	return builder
}
func (builder *TalentBuilder) LanguageList(languageList []*TalentLanguageInfo) *TalentBuilder {
	builder.languageList = languageList
	builder.languageListFlag = true
	return builder
}
func (builder *TalentBuilder) SnsList(snsList []*TalentSnsInfo) *TalentBuilder {
	builder.snsList = snsList
	builder.snsListFlag = true
	return builder
}
func (builder *TalentBuilder) ResumeSourceList(resumeSourceList []*TalentResumeSource) *TalentBuilder {
	builder.resumeSourceList = resumeSourceList
	builder.resumeSourceListFlag = true
	return builder
}
func (builder *TalentBuilder) InterviewRegistrationList(interviewRegistrationList []*TalentInterviewRegistrationSimple) *TalentBuilder {
	builder.interviewRegistrationList = interviewRegistrationList
	builder.interviewRegistrationListFlag = true
	return builder
}
func (builder *TalentBuilder) ResumeAttachmentIdList(resumeAttachmentIdList []string) *TalentBuilder {
	builder.resumeAttachmentIdList = resumeAttachmentIdList
	builder.resumeAttachmentIdListFlag = true
	return builder
}
func (builder *TalentBuilder) CustomizedDataList(customizedDataList []*TalentCustomizedData) *TalentBuilder {
	builder.customizedDataList = customizedDataList
	builder.customizedDataListFlag = true
	return builder
}
func (builder *TalentBuilder) TopDegree(topDegree int) *TalentBuilder {
	builder.topDegree = topDegree
	builder.topDegreeFlag = true
	return builder
}

func (builder *TalentBuilder) Build() *Talent {
	req := &Talent{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.isInAgencyPeriodFlag {
		req.IsInAgencyPeriod = &builder.isInAgencyPeriod

	}
	if builder.basicInfoFlag {
		req.BasicInfo = builder.basicInfo
	}
	if builder.educationListFlag {
		req.EducationList = builder.educationList
	}
	if builder.careerListFlag {
		req.CareerList = builder.careerList
	}
	if builder.projectListFlag {
		req.ProjectList = builder.projectList
	}
	if builder.worksListFlag {
		req.WorksList = builder.worksList
	}
	if builder.awardListFlag {
		req.AwardList = builder.awardList
	}
	if builder.languageListFlag {
		req.LanguageList = builder.languageList
	}
	if builder.snsListFlag {
		req.SnsList = builder.snsList
	}
	if builder.resumeSourceListFlag {
		req.ResumeSourceList = builder.resumeSourceList
	}
	if builder.interviewRegistrationListFlag {
		req.InterviewRegistrationList = builder.interviewRegistrationList
	}
	if builder.resumeAttachmentIdListFlag {
		req.ResumeAttachmentIdList = builder.resumeAttachmentIdList
	}
	if builder.customizedDataListFlag {
		req.CustomizedDataList = builder.customizedDataList
	}
	if builder.topDegreeFlag {
		req.TopDegree = &builder.topDegree

	}
	return req
}

// builder结束

type TalentInterviewRegistration struct {
}

// builder开始
// builder结束

type TalentAwardInfo struct {
	Id                 *string                      `json:"id,omitempty"`
	Title              *string                      `json:"title,omitempty"`
	AwardTime          *string                      `json:"award_time,omitempty"`
	Desc               *string                      `json:"desc,omitempty"`
	CustomizedDataList []*TalentCustomizedDataChild `json:"customized_data_list,omitempty"`
}

// builder开始
type TalentAwardInfoBuilder struct {
	id                     string
	idFlag                 bool
	title                  string
	titleFlag              bool
	awardTime              string
	awardTimeFlag          bool
	desc                   string
	descFlag               bool
	customizedDataList     []*TalentCustomizedDataChild
	customizedDataListFlag bool
}

func NewTalentAwardInfoBuilder() *TalentAwardInfoBuilder {
	builder := &TalentAwardInfoBuilder{}
	return builder
}

func (builder *TalentAwardInfoBuilder) Id(id string) *TalentAwardInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *TalentAwardInfoBuilder) Title(title string) *TalentAwardInfoBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}
func (builder *TalentAwardInfoBuilder) AwardTime(awardTime string) *TalentAwardInfoBuilder {
	builder.awardTime = awardTime
	builder.awardTimeFlag = true
	return builder
}
func (builder *TalentAwardInfoBuilder) Desc(desc string) *TalentAwardInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}
func (builder *TalentAwardInfoBuilder) CustomizedDataList(customizedDataList []*TalentCustomizedDataChild) *TalentAwardInfoBuilder {
	builder.customizedDataList = customizedDataList
	builder.customizedDataListFlag = true
	return builder
}

func (builder *TalentAwardInfoBuilder) Build() *TalentAwardInfo {
	req := &TalentAwardInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.awardTimeFlag {
		req.AwardTime = &builder.awardTime

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.customizedDataListFlag {
		req.CustomizedDataList = builder.customizedDataList
	}
	return req
}

// builder结束

type TalentBasicInfo struct {
	Name                 *string                      `json:"name,omitempty"`
	Mobile               *string                      `json:"mobile,omitempty"`
	MobileCode           *string                      `json:"mobile_code,omitempty"`
	MobileCountryCode    *string                      `json:"mobile_country_code,omitempty"`
	Email                *string                      `json:"email,omitempty"`
	ExperienceYears      *int                         `json:"experience_years,omitempty"`
	Age                  *int                         `json:"age,omitempty"`
	Nationality          *TalentNationality           `json:"nationality,omitempty"`
	Gender               *int                         `json:"gender,omitempty"`
	CurrentCity          *TalentCityInfo              `json:"current_city,omitempty"`
	HometownCity         *TalentCityInfo              `json:"hometown_city,omitempty"`
	PreferredCityList    []*TalentCityInfo            `json:"preferred_city_list,omitempty"`
	IdentificationType   *int                         `json:"identification_type,omitempty"`
	IdentificationNumber *string                      `json:"identification_number,omitempty"`
	Birthday             *int                         `json:"birthday,omitempty"`
	CreatorId            *string                      `json:"creator_id,omitempty"`
	MaritalStatus        *int                         `json:"marital_status,omitempty"`
	CurrentHomeAddress   *string                      `json:"current_home_address,omitempty"`
	CustomizedDataList   []*TalentCustomizedDataChild `json:"customized_data_list,omitempty"`
	ModifyTime           *string                      `json:"modify_time,omitempty"`
}

// builder开始
type TalentBasicInfoBuilder struct {
	name                     string
	nameFlag                 bool
	mobile                   string
	mobileFlag               bool
	mobileCode               string
	mobileCodeFlag           bool
	mobileCountryCode        string
	mobileCountryCodeFlag    bool
	email                    string
	emailFlag                bool
	experienceYears          int
	experienceYearsFlag      bool
	age                      int
	ageFlag                  bool
	nationality              *TalentNationality
	nationalityFlag          bool
	gender                   int
	genderFlag               bool
	currentCity              *TalentCityInfo
	currentCityFlag          bool
	hometownCity             *TalentCityInfo
	hometownCityFlag         bool
	preferredCityList        []*TalentCityInfo
	preferredCityListFlag    bool
	identificationType       int
	identificationTypeFlag   bool
	identificationNumber     string
	identificationNumberFlag bool
	birthday                 int
	birthdayFlag             bool
	creatorId                string
	creatorIdFlag            bool
	maritalStatus            int
	maritalStatusFlag        bool
	currentHomeAddress       string
	currentHomeAddressFlag   bool
	customizedDataList       []*TalentCustomizedDataChild
	customizedDataListFlag   bool
	modifyTime               string
	modifyTimeFlag           bool
}

func NewTalentBasicInfoBuilder() *TalentBasicInfoBuilder {
	builder := &TalentBasicInfoBuilder{}
	return builder
}

func (builder *TalentBasicInfoBuilder) Name(name string) *TalentBasicInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *TalentBasicInfoBuilder) Mobile(mobile string) *TalentBasicInfoBuilder {
	builder.mobile = mobile
	builder.mobileFlag = true
	return builder
}
func (builder *TalentBasicInfoBuilder) MobileCode(mobileCode string) *TalentBasicInfoBuilder {
	builder.mobileCode = mobileCode
	builder.mobileCodeFlag = true
	return builder
}
func (builder *TalentBasicInfoBuilder) MobileCountryCode(mobileCountryCode string) *TalentBasicInfoBuilder {
	builder.mobileCountryCode = mobileCountryCode
	builder.mobileCountryCodeFlag = true
	return builder
}
func (builder *TalentBasicInfoBuilder) Email(email string) *TalentBasicInfoBuilder {
	builder.email = email
	builder.emailFlag = true
	return builder
}
func (builder *TalentBasicInfoBuilder) ExperienceYears(experienceYears int) *TalentBasicInfoBuilder {
	builder.experienceYears = experienceYears
	builder.experienceYearsFlag = true
	return builder
}
func (builder *TalentBasicInfoBuilder) Age(age int) *TalentBasicInfoBuilder {
	builder.age = age
	builder.ageFlag = true
	return builder
}
func (builder *TalentBasicInfoBuilder) Nationality(nationality *TalentNationality) *TalentBasicInfoBuilder {
	builder.nationality = nationality
	builder.nationalityFlag = true
	return builder
}
func (builder *TalentBasicInfoBuilder) Gender(gender int) *TalentBasicInfoBuilder {
	builder.gender = gender
	builder.genderFlag = true
	return builder
}
func (builder *TalentBasicInfoBuilder) CurrentCity(currentCity *TalentCityInfo) *TalentBasicInfoBuilder {
	builder.currentCity = currentCity
	builder.currentCityFlag = true
	return builder
}
func (builder *TalentBasicInfoBuilder) HometownCity(hometownCity *TalentCityInfo) *TalentBasicInfoBuilder {
	builder.hometownCity = hometownCity
	builder.hometownCityFlag = true
	return builder
}
func (builder *TalentBasicInfoBuilder) PreferredCityList(preferredCityList []*TalentCityInfo) *TalentBasicInfoBuilder {
	builder.preferredCityList = preferredCityList
	builder.preferredCityListFlag = true
	return builder
}
func (builder *TalentBasicInfoBuilder) IdentificationType(identificationType int) *TalentBasicInfoBuilder {
	builder.identificationType = identificationType
	builder.identificationTypeFlag = true
	return builder
}
func (builder *TalentBasicInfoBuilder) IdentificationNumber(identificationNumber string) *TalentBasicInfoBuilder {
	builder.identificationNumber = identificationNumber
	builder.identificationNumberFlag = true
	return builder
}
func (builder *TalentBasicInfoBuilder) Birthday(birthday int) *TalentBasicInfoBuilder {
	builder.birthday = birthday
	builder.birthdayFlag = true
	return builder
}
func (builder *TalentBasicInfoBuilder) CreatorId(creatorId string) *TalentBasicInfoBuilder {
	builder.creatorId = creatorId
	builder.creatorIdFlag = true
	return builder
}
func (builder *TalentBasicInfoBuilder) MaritalStatus(maritalStatus int) *TalentBasicInfoBuilder {
	builder.maritalStatus = maritalStatus
	builder.maritalStatusFlag = true
	return builder
}
func (builder *TalentBasicInfoBuilder) CurrentHomeAddress(currentHomeAddress string) *TalentBasicInfoBuilder {
	builder.currentHomeAddress = currentHomeAddress
	builder.currentHomeAddressFlag = true
	return builder
}
func (builder *TalentBasicInfoBuilder) CustomizedDataList(customizedDataList []*TalentCustomizedDataChild) *TalentBasicInfoBuilder {
	builder.customizedDataList = customizedDataList
	builder.customizedDataListFlag = true
	return builder
}
func (builder *TalentBasicInfoBuilder) ModifyTime(modifyTime string) *TalentBasicInfoBuilder {
	builder.modifyTime = modifyTime
	builder.modifyTimeFlag = true
	return builder
}

func (builder *TalentBasicInfoBuilder) Build() *TalentBasicInfo {
	req := &TalentBasicInfo{}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.mobileFlag {
		req.Mobile = &builder.mobile

	}
	if builder.mobileCodeFlag {
		req.MobileCode = &builder.mobileCode

	}
	if builder.mobileCountryCodeFlag {
		req.MobileCountryCode = &builder.mobileCountryCode

	}
	if builder.emailFlag {
		req.Email = &builder.email

	}
	if builder.experienceYearsFlag {
		req.ExperienceYears = &builder.experienceYears

	}
	if builder.ageFlag {
		req.Age = &builder.age

	}
	if builder.nationalityFlag {
		req.Nationality = builder.nationality
	}
	if builder.genderFlag {
		req.Gender = &builder.gender

	}
	if builder.currentCityFlag {
		req.CurrentCity = builder.currentCity
	}
	if builder.hometownCityFlag {
		req.HometownCity = builder.hometownCity
	}
	if builder.preferredCityListFlag {
		req.PreferredCityList = builder.preferredCityList
	}
	if builder.identificationTypeFlag {
		req.IdentificationType = &builder.identificationType

	}
	if builder.identificationNumberFlag {
		req.IdentificationNumber = &builder.identificationNumber

	}
	if builder.birthdayFlag {
		req.Birthday = &builder.birthday

	}
	if builder.creatorIdFlag {
		req.CreatorId = &builder.creatorId

	}
	if builder.maritalStatusFlag {
		req.MaritalStatus = &builder.maritalStatus

	}
	if builder.currentHomeAddressFlag {
		req.CurrentHomeAddress = &builder.currentHomeAddress

	}
	if builder.customizedDataListFlag {
		req.CustomizedDataList = builder.customizedDataList
	}
	if builder.modifyTimeFlag {
		req.ModifyTime = &builder.modifyTime

	}
	return req
}

// builder结束

type TalentCareerInfo struct {
	Id                 *string                      `json:"id,omitempty"`
	Company            *string                      `json:"company,omitempty"`
	Title              *string                      `json:"title,omitempty"`
	Desc               *string                      `json:"desc,omitempty"`
	StartTime          *string                      `json:"start_time,omitempty"`
	EndTime            *string                      `json:"end_time,omitempty"`
	CareerType         *int                         `json:"career_type,omitempty"`
	TagList            []int                        `json:"tag_list,omitempty"`
	CustomizedDataList []*TalentCustomizedDataChild `json:"customized_data_list,omitempty"`
}

// builder开始
type TalentCareerInfoBuilder struct {
	id                     string
	idFlag                 bool
	company                string
	companyFlag            bool
	title                  string
	titleFlag              bool
	desc                   string
	descFlag               bool
	startTime              string
	startTimeFlag          bool
	endTime                string
	endTimeFlag            bool
	careerType             int
	careerTypeFlag         bool
	tagList                []int
	tagListFlag            bool
	customizedDataList     []*TalentCustomizedDataChild
	customizedDataListFlag bool
}

func NewTalentCareerInfoBuilder() *TalentCareerInfoBuilder {
	builder := &TalentCareerInfoBuilder{}
	return builder
}

func (builder *TalentCareerInfoBuilder) Id(id string) *TalentCareerInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *TalentCareerInfoBuilder) Company(company string) *TalentCareerInfoBuilder {
	builder.company = company
	builder.companyFlag = true
	return builder
}
func (builder *TalentCareerInfoBuilder) Title(title string) *TalentCareerInfoBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}
func (builder *TalentCareerInfoBuilder) Desc(desc string) *TalentCareerInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}
func (builder *TalentCareerInfoBuilder) StartTime(startTime string) *TalentCareerInfoBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}
func (builder *TalentCareerInfoBuilder) EndTime(endTime string) *TalentCareerInfoBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}
func (builder *TalentCareerInfoBuilder) CareerType(careerType int) *TalentCareerInfoBuilder {
	builder.careerType = careerType
	builder.careerTypeFlag = true
	return builder
}
func (builder *TalentCareerInfoBuilder) TagList(tagList []int) *TalentCareerInfoBuilder {
	builder.tagList = tagList
	builder.tagListFlag = true
	return builder
}
func (builder *TalentCareerInfoBuilder) CustomizedDataList(customizedDataList []*TalentCustomizedDataChild) *TalentCareerInfoBuilder {
	builder.customizedDataList = customizedDataList
	builder.customizedDataListFlag = true
	return builder
}

func (builder *TalentCareerInfoBuilder) Build() *TalentCareerInfo {
	req := &TalentCareerInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.companyFlag {
		req.Company = &builder.company

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.careerTypeFlag {
		req.CareerType = &builder.careerType

	}
	if builder.tagListFlag {
		req.TagList = builder.tagList
	}
	if builder.customizedDataListFlag {
		req.CustomizedDataList = builder.customizedDataList
	}
	return req
}

// builder结束

type TalentCertificateInfo struct {
	Id                 *string                      `json:"id,omitempty"`
	Name               *string                      `json:"name,omitempty"`
	Desc               *string                      `json:"desc,omitempty"`
	CustomizedDataList []*TalentCustomizedDataChild `json:"customized_data_list,omitempty"`
}

// builder开始
type TalentCertificateInfoBuilder struct {
	id                     string
	idFlag                 bool
	name                   string
	nameFlag               bool
	desc                   string
	descFlag               bool
	customizedDataList     []*TalentCustomizedDataChild
	customizedDataListFlag bool
}

func NewTalentCertificateInfoBuilder() *TalentCertificateInfoBuilder {
	builder := &TalentCertificateInfoBuilder{}
	return builder
}

func (builder *TalentCertificateInfoBuilder) Id(id string) *TalentCertificateInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *TalentCertificateInfoBuilder) Name(name string) *TalentCertificateInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *TalentCertificateInfoBuilder) Desc(desc string) *TalentCertificateInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}
func (builder *TalentCertificateInfoBuilder) CustomizedDataList(customizedDataList []*TalentCustomizedDataChild) *TalentCertificateInfoBuilder {
	builder.customizedDataList = customizedDataList
	builder.customizedDataListFlag = true
	return builder
}

func (builder *TalentCertificateInfoBuilder) Build() *TalentCertificateInfo {
	req := &TalentCertificateInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.customizedDataListFlag {
		req.CustomizedDataList = builder.customizedDataList
	}
	return req
}

// builder结束

type TalentCityInfo struct {
	CityCode *string `json:"city_code,omitempty"`
	ZhName   *string `json:"zh_name,omitempty"`
	EnName   *string `json:"en_name,omitempty"`
}

// builder开始
type TalentCityInfoBuilder struct {
	cityCode     string
	cityCodeFlag bool
	zhName       string
	zhNameFlag   bool
	enName       string
	enNameFlag   bool
}

func NewTalentCityInfoBuilder() *TalentCityInfoBuilder {
	builder := &TalentCityInfoBuilder{}
	return builder
}

func (builder *TalentCityInfoBuilder) CityCode(cityCode string) *TalentCityInfoBuilder {
	builder.cityCode = cityCode
	builder.cityCodeFlag = true
	return builder
}
func (builder *TalentCityInfoBuilder) ZhName(zhName string) *TalentCityInfoBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}
func (builder *TalentCityInfoBuilder) EnName(enName string) *TalentCityInfoBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

func (builder *TalentCityInfoBuilder) Build() *TalentCityInfo {
	req := &TalentCityInfo{}
	if builder.cityCodeFlag {
		req.CityCode = &builder.cityCode

	}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	return req
}

// builder结束

type TalentCombinedAwardInfo struct {
	Id             *string                            `json:"id,omitempty"`
	Title          *string                            `json:"title,omitempty"`
	AwardTime      *string                            `json:"award_time,omitempty"`
	Desc           *string                            `json:"desc,omitempty"`
	CustomizedData []*TalentCustomizedDataObjectValue `json:"customized_data,omitempty"`
}

// builder开始
type TalentCombinedAwardInfoBuilder struct {
	id                 string
	idFlag             bool
	title              string
	titleFlag          bool
	awardTime          string
	awardTimeFlag      bool
	desc               string
	descFlag           bool
	customizedData     []*TalentCustomizedDataObjectValue
	customizedDataFlag bool
}

func NewTalentCombinedAwardInfoBuilder() *TalentCombinedAwardInfoBuilder {
	builder := &TalentCombinedAwardInfoBuilder{}
	return builder
}

func (builder *TalentCombinedAwardInfoBuilder) Id(id string) *TalentCombinedAwardInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *TalentCombinedAwardInfoBuilder) Title(title string) *TalentCombinedAwardInfoBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}
func (builder *TalentCombinedAwardInfoBuilder) AwardTime(awardTime string) *TalentCombinedAwardInfoBuilder {
	builder.awardTime = awardTime
	builder.awardTimeFlag = true
	return builder
}
func (builder *TalentCombinedAwardInfoBuilder) Desc(desc string) *TalentCombinedAwardInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}
func (builder *TalentCombinedAwardInfoBuilder) CustomizedData(customizedData []*TalentCustomizedDataObjectValue) *TalentCombinedAwardInfoBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}

func (builder *TalentCombinedAwardInfoBuilder) Build() *TalentCombinedAwardInfo {
	req := &TalentCombinedAwardInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.awardTimeFlag {
		req.AwardTime = &builder.awardTime

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	return req
}

// builder结束

type TalentCombinedBasicInfo struct {
	Name                 *string                            `json:"name,omitempty"`
	Mobile               *string                            `json:"mobile,omitempty"`
	MobileCountryCode    *string                            `json:"mobile_country_code,omitempty"`
	Email                *string                            `json:"email,omitempty"`
	IdentificationType   *int                               `json:"identification_type,omitempty"`
	IdentificationNumber *string                            `json:"identification_number,omitempty"`
	StartWorkTime        *string                            `json:"start_work_time,omitempty"`
	Birthday             *string                            `json:"birthday,omitempty"`
	Gender               *int                               `json:"gender,omitempty"`
	NationalityId        *string                            `json:"nationality_id,omitempty"`
	CurrentCityCode      *string                            `json:"current_city_code,omitempty"`
	HometownCityCode     *string                            `json:"hometown_city_code,omitempty"`
	CustomizedData       []*TalentCustomizedDataObjectValue `json:"customized_data,omitempty"`
}

// builder开始
type TalentCombinedBasicInfoBuilder struct {
	name                     string
	nameFlag                 bool
	mobile                   string
	mobileFlag               bool
	mobileCountryCode        string
	mobileCountryCodeFlag    bool
	email                    string
	emailFlag                bool
	identificationType       int
	identificationTypeFlag   bool
	identificationNumber     string
	identificationNumberFlag bool
	startWorkTime            string
	startWorkTimeFlag        bool
	birthday                 string
	birthdayFlag             bool
	gender                   int
	genderFlag               bool
	nationalityId            string
	nationalityIdFlag        bool
	currentCityCode          string
	currentCityCodeFlag      bool
	hometownCityCode         string
	hometownCityCodeFlag     bool
	customizedData           []*TalentCustomizedDataObjectValue
	customizedDataFlag       bool
}

func NewTalentCombinedBasicInfoBuilder() *TalentCombinedBasicInfoBuilder {
	builder := &TalentCombinedBasicInfoBuilder{}
	return builder
}

func (builder *TalentCombinedBasicInfoBuilder) Name(name string) *TalentCombinedBasicInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *TalentCombinedBasicInfoBuilder) Mobile(mobile string) *TalentCombinedBasicInfoBuilder {
	builder.mobile = mobile
	builder.mobileFlag = true
	return builder
}
func (builder *TalentCombinedBasicInfoBuilder) MobileCountryCode(mobileCountryCode string) *TalentCombinedBasicInfoBuilder {
	builder.mobileCountryCode = mobileCountryCode
	builder.mobileCountryCodeFlag = true
	return builder
}
func (builder *TalentCombinedBasicInfoBuilder) Email(email string) *TalentCombinedBasicInfoBuilder {
	builder.email = email
	builder.emailFlag = true
	return builder
}
func (builder *TalentCombinedBasicInfoBuilder) IdentificationType(identificationType int) *TalentCombinedBasicInfoBuilder {
	builder.identificationType = identificationType
	builder.identificationTypeFlag = true
	return builder
}
func (builder *TalentCombinedBasicInfoBuilder) IdentificationNumber(identificationNumber string) *TalentCombinedBasicInfoBuilder {
	builder.identificationNumber = identificationNumber
	builder.identificationNumberFlag = true
	return builder
}
func (builder *TalentCombinedBasicInfoBuilder) StartWorkTime(startWorkTime string) *TalentCombinedBasicInfoBuilder {
	builder.startWorkTime = startWorkTime
	builder.startWorkTimeFlag = true
	return builder
}
func (builder *TalentCombinedBasicInfoBuilder) Birthday(birthday string) *TalentCombinedBasicInfoBuilder {
	builder.birthday = birthday
	builder.birthdayFlag = true
	return builder
}
func (builder *TalentCombinedBasicInfoBuilder) Gender(gender int) *TalentCombinedBasicInfoBuilder {
	builder.gender = gender
	builder.genderFlag = true
	return builder
}
func (builder *TalentCombinedBasicInfoBuilder) NationalityId(nationalityId string) *TalentCombinedBasicInfoBuilder {
	builder.nationalityId = nationalityId
	builder.nationalityIdFlag = true
	return builder
}
func (builder *TalentCombinedBasicInfoBuilder) CurrentCityCode(currentCityCode string) *TalentCombinedBasicInfoBuilder {
	builder.currentCityCode = currentCityCode
	builder.currentCityCodeFlag = true
	return builder
}
func (builder *TalentCombinedBasicInfoBuilder) HometownCityCode(hometownCityCode string) *TalentCombinedBasicInfoBuilder {
	builder.hometownCityCode = hometownCityCode
	builder.hometownCityCodeFlag = true
	return builder
}
func (builder *TalentCombinedBasicInfoBuilder) CustomizedData(customizedData []*TalentCustomizedDataObjectValue) *TalentCombinedBasicInfoBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}

func (builder *TalentCombinedBasicInfoBuilder) Build() *TalentCombinedBasicInfo {
	req := &TalentCombinedBasicInfo{}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.mobileFlag {
		req.Mobile = &builder.mobile

	}
	if builder.mobileCountryCodeFlag {
		req.MobileCountryCode = &builder.mobileCountryCode

	}
	if builder.emailFlag {
		req.Email = &builder.email

	}
	if builder.identificationTypeFlag {
		req.IdentificationType = &builder.identificationType

	}
	if builder.identificationNumberFlag {
		req.IdentificationNumber = &builder.identificationNumber

	}
	if builder.startWorkTimeFlag {
		req.StartWorkTime = &builder.startWorkTime

	}
	if builder.birthdayFlag {
		req.Birthday = &builder.birthday

	}
	if builder.genderFlag {
		req.Gender = &builder.gender

	}
	if builder.nationalityIdFlag {
		req.NationalityId = &builder.nationalityId

	}
	if builder.currentCityCodeFlag {
		req.CurrentCityCode = &builder.currentCityCode

	}
	if builder.hometownCityCodeFlag {
		req.HometownCityCode = &builder.hometownCityCode

	}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	return req
}

// builder结束

type TalentCombinedCareerInfo struct {
	Id             *string                            `json:"id,omitempty"`
	Company        *string                            `json:"company,omitempty"`
	Title          *string                            `json:"title,omitempty"`
	Desc           *string                            `json:"desc,omitempty"`
	StartTime      *string                            `json:"start_time,omitempty"`
	EndTime        *string                            `json:"end_time,omitempty"`
	CareerType     *int                               `json:"career_type,omitempty"`
	CustomizedData []*TalentCustomizedDataObjectValue `json:"customized_data,omitempty"`
}

// builder开始
type TalentCombinedCareerInfoBuilder struct {
	id                 string
	idFlag             bool
	company            string
	companyFlag        bool
	title              string
	titleFlag          bool
	desc               string
	descFlag           bool
	startTime          string
	startTimeFlag      bool
	endTime            string
	endTimeFlag        bool
	careerType         int
	careerTypeFlag     bool
	customizedData     []*TalentCustomizedDataObjectValue
	customizedDataFlag bool
}

func NewTalentCombinedCareerInfoBuilder() *TalentCombinedCareerInfoBuilder {
	builder := &TalentCombinedCareerInfoBuilder{}
	return builder
}

func (builder *TalentCombinedCareerInfoBuilder) Id(id string) *TalentCombinedCareerInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *TalentCombinedCareerInfoBuilder) Company(company string) *TalentCombinedCareerInfoBuilder {
	builder.company = company
	builder.companyFlag = true
	return builder
}
func (builder *TalentCombinedCareerInfoBuilder) Title(title string) *TalentCombinedCareerInfoBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}
func (builder *TalentCombinedCareerInfoBuilder) Desc(desc string) *TalentCombinedCareerInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}
func (builder *TalentCombinedCareerInfoBuilder) StartTime(startTime string) *TalentCombinedCareerInfoBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}
func (builder *TalentCombinedCareerInfoBuilder) EndTime(endTime string) *TalentCombinedCareerInfoBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}
func (builder *TalentCombinedCareerInfoBuilder) CareerType(careerType int) *TalentCombinedCareerInfoBuilder {
	builder.careerType = careerType
	builder.careerTypeFlag = true
	return builder
}
func (builder *TalentCombinedCareerInfoBuilder) CustomizedData(customizedData []*TalentCustomizedDataObjectValue) *TalentCombinedCareerInfoBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}

func (builder *TalentCombinedCareerInfoBuilder) Build() *TalentCombinedCareerInfo {
	req := &TalentCombinedCareerInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.companyFlag {
		req.Company = &builder.company

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.careerTypeFlag {
		req.CareerType = &builder.careerType

	}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	return req
}

// builder结束

type TalentCombinedEducationInfo struct {
	Id              *string                            `json:"id,omitempty"`
	Degree          *int                               `json:"degree,omitempty"`
	School          *string                            `json:"school,omitempty"`
	FieldOfStudy    *string                            `json:"field_of_study,omitempty"`
	StartTime       *string                            `json:"start_time,omitempty"`
	EndTime         *string                            `json:"end_time,omitempty"`
	EducationType   *int                               `json:"education_type,omitempty"`
	AcademicRanking *int                               `json:"academic_ranking,omitempty"`
	CustomizedData  []*TalentCustomizedDataObjectValue `json:"customized_data,omitempty"`
}

// builder开始
type TalentCombinedEducationInfoBuilder struct {
	id                  string
	idFlag              bool
	degree              int
	degreeFlag          bool
	school              string
	schoolFlag          bool
	fieldOfStudy        string
	fieldOfStudyFlag    bool
	startTime           string
	startTimeFlag       bool
	endTime             string
	endTimeFlag         bool
	educationType       int
	educationTypeFlag   bool
	academicRanking     int
	academicRankingFlag bool
	customizedData      []*TalentCustomizedDataObjectValue
	customizedDataFlag  bool
}

func NewTalentCombinedEducationInfoBuilder() *TalentCombinedEducationInfoBuilder {
	builder := &TalentCombinedEducationInfoBuilder{}
	return builder
}

func (builder *TalentCombinedEducationInfoBuilder) Id(id string) *TalentCombinedEducationInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *TalentCombinedEducationInfoBuilder) Degree(degree int) *TalentCombinedEducationInfoBuilder {
	builder.degree = degree
	builder.degreeFlag = true
	return builder
}
func (builder *TalentCombinedEducationInfoBuilder) School(school string) *TalentCombinedEducationInfoBuilder {
	builder.school = school
	builder.schoolFlag = true
	return builder
}
func (builder *TalentCombinedEducationInfoBuilder) FieldOfStudy(fieldOfStudy string) *TalentCombinedEducationInfoBuilder {
	builder.fieldOfStudy = fieldOfStudy
	builder.fieldOfStudyFlag = true
	return builder
}
func (builder *TalentCombinedEducationInfoBuilder) StartTime(startTime string) *TalentCombinedEducationInfoBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}
func (builder *TalentCombinedEducationInfoBuilder) EndTime(endTime string) *TalentCombinedEducationInfoBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}
func (builder *TalentCombinedEducationInfoBuilder) EducationType(educationType int) *TalentCombinedEducationInfoBuilder {
	builder.educationType = educationType
	builder.educationTypeFlag = true
	return builder
}
func (builder *TalentCombinedEducationInfoBuilder) AcademicRanking(academicRanking int) *TalentCombinedEducationInfoBuilder {
	builder.academicRanking = academicRanking
	builder.academicRankingFlag = true
	return builder
}
func (builder *TalentCombinedEducationInfoBuilder) CustomizedData(customizedData []*TalentCustomizedDataObjectValue) *TalentCombinedEducationInfoBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}

func (builder *TalentCombinedEducationInfoBuilder) Build() *TalentCombinedEducationInfo {
	req := &TalentCombinedEducationInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.degreeFlag {
		req.Degree = &builder.degree

	}
	if builder.schoolFlag {
		req.School = &builder.school

	}
	if builder.fieldOfStudyFlag {
		req.FieldOfStudy = &builder.fieldOfStudy

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.educationTypeFlag {
		req.EducationType = &builder.educationType

	}
	if builder.academicRankingFlag {
		req.AcademicRanking = &builder.academicRanking

	}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	return req
}

// builder结束

type TalentCombinedLanguageInfo struct {
	Id             *string                            `json:"id,omitempty"`
	Language       *int                               `json:"language,omitempty"`
	Proficiency    *int                               `json:"proficiency,omitempty"`
	CustomizedData []*TalentCustomizedDataObjectValue `json:"customized_data,omitempty"`
}

// builder开始
type TalentCombinedLanguageInfoBuilder struct {
	id                 string
	idFlag             bool
	language           int
	languageFlag       bool
	proficiency        int
	proficiencyFlag    bool
	customizedData     []*TalentCustomizedDataObjectValue
	customizedDataFlag bool
}

func NewTalentCombinedLanguageInfoBuilder() *TalentCombinedLanguageInfoBuilder {
	builder := &TalentCombinedLanguageInfoBuilder{}
	return builder
}

func (builder *TalentCombinedLanguageInfoBuilder) Id(id string) *TalentCombinedLanguageInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *TalentCombinedLanguageInfoBuilder) Language(language int) *TalentCombinedLanguageInfoBuilder {
	builder.language = language
	builder.languageFlag = true
	return builder
}
func (builder *TalentCombinedLanguageInfoBuilder) Proficiency(proficiency int) *TalentCombinedLanguageInfoBuilder {
	builder.proficiency = proficiency
	builder.proficiencyFlag = true
	return builder
}
func (builder *TalentCombinedLanguageInfoBuilder) CustomizedData(customizedData []*TalentCustomizedDataObjectValue) *TalentCombinedLanguageInfoBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}

func (builder *TalentCombinedLanguageInfoBuilder) Build() *TalentCombinedLanguageInfo {
	req := &TalentCombinedLanguageInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.languageFlag {
		req.Language = &builder.language

	}
	if builder.proficiencyFlag {
		req.Proficiency = &builder.proficiency

	}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	return req
}

// builder结束

type TalentCombinedProjectInfo struct {
	Id             *string                            `json:"id,omitempty"`
	Name           *string                            `json:"name,omitempty"`
	Role           *string                            `json:"role,omitempty"`
	Link           *string                            `json:"link,omitempty"`
	Desc           *string                            `json:"desc,omitempty"`
	StartTime      *string                            `json:"start_time,omitempty"`
	EndTime        *string                            `json:"end_time,omitempty"`
	CustomizedData []*TalentCustomizedDataObjectValue `json:"customized_data,omitempty"`
}

// builder开始
type TalentCombinedProjectInfoBuilder struct {
	id                 string
	idFlag             bool
	name               string
	nameFlag           bool
	role               string
	roleFlag           bool
	link               string
	linkFlag           bool
	desc               string
	descFlag           bool
	startTime          string
	startTimeFlag      bool
	endTime            string
	endTimeFlag        bool
	customizedData     []*TalentCustomizedDataObjectValue
	customizedDataFlag bool
}

func NewTalentCombinedProjectInfoBuilder() *TalentCombinedProjectInfoBuilder {
	builder := &TalentCombinedProjectInfoBuilder{}
	return builder
}

func (builder *TalentCombinedProjectInfoBuilder) Id(id string) *TalentCombinedProjectInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *TalentCombinedProjectInfoBuilder) Name(name string) *TalentCombinedProjectInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *TalentCombinedProjectInfoBuilder) Role(role string) *TalentCombinedProjectInfoBuilder {
	builder.role = role
	builder.roleFlag = true
	return builder
}
func (builder *TalentCombinedProjectInfoBuilder) Link(link string) *TalentCombinedProjectInfoBuilder {
	builder.link = link
	builder.linkFlag = true
	return builder
}
func (builder *TalentCombinedProjectInfoBuilder) Desc(desc string) *TalentCombinedProjectInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}
func (builder *TalentCombinedProjectInfoBuilder) StartTime(startTime string) *TalentCombinedProjectInfoBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}
func (builder *TalentCombinedProjectInfoBuilder) EndTime(endTime string) *TalentCombinedProjectInfoBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}
func (builder *TalentCombinedProjectInfoBuilder) CustomizedData(customizedData []*TalentCustomizedDataObjectValue) *TalentCombinedProjectInfoBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}

func (builder *TalentCombinedProjectInfoBuilder) Build() *TalentCombinedProjectInfo {
	req := &TalentCombinedProjectInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.roleFlag {
		req.Role = &builder.role

	}
	if builder.linkFlag {
		req.Link = &builder.link

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	return req
}

// builder结束

type TalentCombinedSnsInfo struct {
	Id             *string                            `json:"id,omitempty"`
	SnsType        *int                               `json:"sns_type,omitempty"`
	Link           *string                            `json:"link,omitempty"`
	CustomizedData []*TalentCustomizedDataObjectValue `json:"customized_data,omitempty"`
}

// builder开始
type TalentCombinedSnsInfoBuilder struct {
	id                 string
	idFlag             bool
	snsType            int
	snsTypeFlag        bool
	link               string
	linkFlag           bool
	customizedData     []*TalentCustomizedDataObjectValue
	customizedDataFlag bool
}

func NewTalentCombinedSnsInfoBuilder() *TalentCombinedSnsInfoBuilder {
	builder := &TalentCombinedSnsInfoBuilder{}
	return builder
}

func (builder *TalentCombinedSnsInfoBuilder) Id(id string) *TalentCombinedSnsInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *TalentCombinedSnsInfoBuilder) SnsType(snsType int) *TalentCombinedSnsInfoBuilder {
	builder.snsType = snsType
	builder.snsTypeFlag = true
	return builder
}
func (builder *TalentCombinedSnsInfoBuilder) Link(link string) *TalentCombinedSnsInfoBuilder {
	builder.link = link
	builder.linkFlag = true
	return builder
}
func (builder *TalentCombinedSnsInfoBuilder) CustomizedData(customizedData []*TalentCustomizedDataObjectValue) *TalentCombinedSnsInfoBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}

func (builder *TalentCombinedSnsInfoBuilder) Build() *TalentCombinedSnsInfo {
	req := &TalentCombinedSnsInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.snsTypeFlag {
		req.SnsType = &builder.snsType

	}
	if builder.linkFlag {
		req.Link = &builder.link

	}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	return req
}

// builder结束

type TalentCombinedWorkInfo struct {
	Id             *string                            `json:"id,omitempty"`
	Link           *string                            `json:"link,omitempty"`
	Desc           *string                            `json:"desc,omitempty"`
	AttachmentId   *string                            `json:"attachment_id,omitempty"`
	CustomizedData []*TalentCustomizedDataObjectValue `json:"customized_data,omitempty"`
}

// builder开始
type TalentCombinedWorkInfoBuilder struct {
	id                 string
	idFlag             bool
	link               string
	linkFlag           bool
	desc               string
	descFlag           bool
	attachmentId       string
	attachmentIdFlag   bool
	customizedData     []*TalentCustomizedDataObjectValue
	customizedDataFlag bool
}

func NewTalentCombinedWorkInfoBuilder() *TalentCombinedWorkInfoBuilder {
	builder := &TalentCombinedWorkInfoBuilder{}
	return builder
}

func (builder *TalentCombinedWorkInfoBuilder) Id(id string) *TalentCombinedWorkInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *TalentCombinedWorkInfoBuilder) Link(link string) *TalentCombinedWorkInfoBuilder {
	builder.link = link
	builder.linkFlag = true
	return builder
}
func (builder *TalentCombinedWorkInfoBuilder) Desc(desc string) *TalentCombinedWorkInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}
func (builder *TalentCombinedWorkInfoBuilder) AttachmentId(attachmentId string) *TalentCombinedWorkInfoBuilder {
	builder.attachmentId = attachmentId
	builder.attachmentIdFlag = true
	return builder
}
func (builder *TalentCombinedWorkInfoBuilder) CustomizedData(customizedData []*TalentCustomizedDataObjectValue) *TalentCombinedWorkInfoBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}

func (builder *TalentCombinedWorkInfoBuilder) Build() *TalentCombinedWorkInfo {
	req := &TalentCombinedWorkInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.linkFlag {
		req.Link = &builder.link

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.attachmentIdFlag {
		req.AttachmentId = &builder.attachmentId

	}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	return req
}

// builder结束

type TalentCompetitionInfo struct {
	Id                 *string                      `json:"id,omitempty"`
	Name               *string                      `json:"name,omitempty"`
	Desc               *string                      `json:"desc,omitempty"`
	CustomizedDataList []*TalentCustomizedDataChild `json:"customized_data_list,omitempty"`
}

// builder开始
type TalentCompetitionInfoBuilder struct {
	id                     string
	idFlag                 bool
	name                   string
	nameFlag               bool
	desc                   string
	descFlag               bool
	customizedDataList     []*TalentCustomizedDataChild
	customizedDataListFlag bool
}

func NewTalentCompetitionInfoBuilder() *TalentCompetitionInfoBuilder {
	builder := &TalentCompetitionInfoBuilder{}
	return builder
}

func (builder *TalentCompetitionInfoBuilder) Id(id string) *TalentCompetitionInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *TalentCompetitionInfoBuilder) Name(name string) *TalentCompetitionInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *TalentCompetitionInfoBuilder) Desc(desc string) *TalentCompetitionInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}
func (builder *TalentCompetitionInfoBuilder) CustomizedDataList(customizedDataList []*TalentCustomizedDataChild) *TalentCompetitionInfoBuilder {
	builder.customizedDataList = customizedDataList
	builder.customizedDataListFlag = true
	return builder
}

func (builder *TalentCompetitionInfoBuilder) Build() *TalentCompetitionInfo {
	req := &TalentCompetitionInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.customizedDataListFlag {
		req.CustomizedDataList = builder.customizedDataList
	}
	return req
}

// builder结束

type TalentCustomizedData struct {
	ObjectId   *string                      `json:"object_id,omitempty"`
	Name       *I18n                        `json:"name,omitempty"`
	ObjectType *int                         `json:"object_type,omitempty"`
	Children   []*TalentCustomizedDataChild `json:"children,omitempty"`
}

// builder开始
type TalentCustomizedDataBuilder struct {
	objectId       string
	objectIdFlag   bool
	name           *I18n
	nameFlag       bool
	objectType     int
	objectTypeFlag bool
	children       []*TalentCustomizedDataChild
	childrenFlag   bool
}

func NewTalentCustomizedDataBuilder() *TalentCustomizedDataBuilder {
	builder := &TalentCustomizedDataBuilder{}
	return builder
}

func (builder *TalentCustomizedDataBuilder) ObjectId(objectId string) *TalentCustomizedDataBuilder {
	builder.objectId = objectId
	builder.objectIdFlag = true
	return builder
}
func (builder *TalentCustomizedDataBuilder) Name(name *I18n) *TalentCustomizedDataBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *TalentCustomizedDataBuilder) ObjectType(objectType int) *TalentCustomizedDataBuilder {
	builder.objectType = objectType
	builder.objectTypeFlag = true
	return builder
}
func (builder *TalentCustomizedDataBuilder) Children(children []*TalentCustomizedDataChild) *TalentCustomizedDataBuilder {
	builder.children = children
	builder.childrenFlag = true
	return builder
}

func (builder *TalentCustomizedDataBuilder) Build() *TalentCustomizedData {
	req := &TalentCustomizedData{}
	if builder.objectIdFlag {
		req.ObjectId = &builder.objectId

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.objectTypeFlag {
		req.ObjectType = &builder.objectType

	}
	if builder.childrenFlag {
		req.Children = builder.children
	}
	return req
}

// builder结束

type TalentCustomizedDataChild struct {
	ObjectId   *string                `json:"object_id,omitempty"`
	Name       *I18n                  `json:"name,omitempty"`
	ObjectType *int                   `json:"object_type,omitempty"`
	Value      *TalentCustomizedValue `json:"value,omitempty"`
}

// builder开始
type TalentCustomizedDataChildBuilder struct {
	objectId       string
	objectIdFlag   bool
	name           *I18n
	nameFlag       bool
	objectType     int
	objectTypeFlag bool
	value          *TalentCustomizedValue
	valueFlag      bool
}

func NewTalentCustomizedDataChildBuilder() *TalentCustomizedDataChildBuilder {
	builder := &TalentCustomizedDataChildBuilder{}
	return builder
}

func (builder *TalentCustomizedDataChildBuilder) ObjectId(objectId string) *TalentCustomizedDataChildBuilder {
	builder.objectId = objectId
	builder.objectIdFlag = true
	return builder
}
func (builder *TalentCustomizedDataChildBuilder) Name(name *I18n) *TalentCustomizedDataChildBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *TalentCustomizedDataChildBuilder) ObjectType(objectType int) *TalentCustomizedDataChildBuilder {
	builder.objectType = objectType
	builder.objectTypeFlag = true
	return builder
}
func (builder *TalentCustomizedDataChildBuilder) Value(value *TalentCustomizedValue) *TalentCustomizedDataChildBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}

func (builder *TalentCustomizedDataChildBuilder) Build() *TalentCustomizedDataChild {
	req := &TalentCustomizedDataChild{}
	if builder.objectIdFlag {
		req.ObjectId = &builder.objectId

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.objectTypeFlag {
		req.ObjectType = &builder.objectType

	}
	if builder.valueFlag {
		req.Value = builder.value
	}
	return req
}

// builder结束

type TalentCustomizedDataObjectValue struct {
	ObjectId *string                                 `json:"object_id,omitempty"`
	Children []*TalentCustomizedDataObjectValueChild `json:"children,omitempty"`
}

// builder开始
type TalentCustomizedDataObjectValueBuilder struct {
	objectId     string
	objectIdFlag bool
	children     []*TalentCustomizedDataObjectValueChild
	childrenFlag bool
}

func NewTalentCustomizedDataObjectValueBuilder() *TalentCustomizedDataObjectValueBuilder {
	builder := &TalentCustomizedDataObjectValueBuilder{}
	return builder
}

func (builder *TalentCustomizedDataObjectValueBuilder) ObjectId(objectId string) *TalentCustomizedDataObjectValueBuilder {
	builder.objectId = objectId
	builder.objectIdFlag = true
	return builder
}
func (builder *TalentCustomizedDataObjectValueBuilder) Children(children []*TalentCustomizedDataObjectValueChild) *TalentCustomizedDataObjectValueBuilder {
	builder.children = children
	builder.childrenFlag = true
	return builder
}

func (builder *TalentCustomizedDataObjectValueBuilder) Build() *TalentCustomizedDataObjectValue {
	req := &TalentCustomizedDataObjectValue{}
	if builder.objectIdFlag {
		req.ObjectId = &builder.objectId

	}
	if builder.childrenFlag {
		req.Children = builder.children
	}
	return req
}

// builder结束

type TalentCustomizedDataObjectValueChild struct {
	ObjectId *string `json:"object_id,omitempty"`
	Value    *string `json:"value,omitempty"`
}

// builder开始
type TalentCustomizedDataObjectValueChildBuilder struct {
	objectId     string
	objectIdFlag bool
	value        string
	valueFlag    bool
}

func NewTalentCustomizedDataObjectValueChildBuilder() *TalentCustomizedDataObjectValueChildBuilder {
	builder := &TalentCustomizedDataObjectValueChildBuilder{}
	return builder
}

func (builder *TalentCustomizedDataObjectValueChildBuilder) ObjectId(objectId string) *TalentCustomizedDataObjectValueChildBuilder {
	builder.objectId = objectId
	builder.objectIdFlag = true
	return builder
}
func (builder *TalentCustomizedDataObjectValueChildBuilder) Value(value string) *TalentCustomizedDataObjectValueChildBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}

func (builder *TalentCustomizedDataObjectValueChildBuilder) Build() *TalentCustomizedDataObjectValueChild {
	req := &TalentCustomizedDataObjectValueChild{}
	if builder.objectIdFlag {
		req.ObjectId = &builder.objectId

	}
	if builder.valueFlag {
		req.Value = &builder.value

	}
	return req
}

// builder结束

type TalentCustomizedOption struct {
	Key  *string `json:"key,omitempty"`
	Name *I18n   `json:"name,omitempty"`
}

// builder开始
type TalentCustomizedOptionBuilder struct {
	key      string
	keyFlag  bool
	name     *I18n
	nameFlag bool
}

func NewTalentCustomizedOptionBuilder() *TalentCustomizedOptionBuilder {
	builder := &TalentCustomizedOptionBuilder{}
	return builder
}

func (builder *TalentCustomizedOptionBuilder) Key(key string) *TalentCustomizedOptionBuilder {
	builder.key = key
	builder.keyFlag = true
	return builder
}
func (builder *TalentCustomizedOptionBuilder) Name(name *I18n) *TalentCustomizedOptionBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *TalentCustomizedOptionBuilder) Build() *TalentCustomizedOption {
	req := &TalentCustomizedOption{}
	if builder.keyFlag {
		req.Key = &builder.key

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	return req
}

// builder结束

type TalentCustomizedTimeRange struct {
	StartTime *string `json:"start_time,omitempty"`
	EndTime   *string `json:"end_time,omitempty"`
}

// builder开始
type TalentCustomizedTimeRangeBuilder struct {
	startTime     string
	startTimeFlag bool
	endTime       string
	endTimeFlag   bool
}

func NewTalentCustomizedTimeRangeBuilder() *TalentCustomizedTimeRangeBuilder {
	builder := &TalentCustomizedTimeRangeBuilder{}
	return builder
}

func (builder *TalentCustomizedTimeRangeBuilder) StartTime(startTime string) *TalentCustomizedTimeRangeBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}
func (builder *TalentCustomizedTimeRangeBuilder) EndTime(endTime string) *TalentCustomizedTimeRangeBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

func (builder *TalentCustomizedTimeRangeBuilder) Build() *TalentCustomizedTimeRange {
	req := &TalentCustomizedTimeRange{}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	return req
}

// builder结束

type TalentCustomizedValue struct {
	Content    *string                    `json:"content,omitempty"`
	Option     *TalentCustomizedOption    `json:"option,omitempty"`
	OptionList []*TalentCustomizedOption  `json:"option_list,omitempty"`
	TimeRange  *TalentCustomizedTimeRange `json:"time_range,omitempty"`
	Time       *string                    `json:"time,omitempty"`
	Number     *string                    `json:"number,omitempty"`
}

// builder开始
type TalentCustomizedValueBuilder struct {
	content        string
	contentFlag    bool
	option         *TalentCustomizedOption
	optionFlag     bool
	optionList     []*TalentCustomizedOption
	optionListFlag bool
	timeRange      *TalentCustomizedTimeRange
	timeRangeFlag  bool
	time           string
	timeFlag       bool
	number         string
	numberFlag     bool
}

func NewTalentCustomizedValueBuilder() *TalentCustomizedValueBuilder {
	builder := &TalentCustomizedValueBuilder{}
	return builder
}

func (builder *TalentCustomizedValueBuilder) Content(content string) *TalentCustomizedValueBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}
func (builder *TalentCustomizedValueBuilder) Option(option *TalentCustomizedOption) *TalentCustomizedValueBuilder {
	builder.option = option
	builder.optionFlag = true
	return builder
}
func (builder *TalentCustomizedValueBuilder) OptionList(optionList []*TalentCustomizedOption) *TalentCustomizedValueBuilder {
	builder.optionList = optionList
	builder.optionListFlag = true
	return builder
}
func (builder *TalentCustomizedValueBuilder) TimeRange(timeRange *TalentCustomizedTimeRange) *TalentCustomizedValueBuilder {
	builder.timeRange = timeRange
	builder.timeRangeFlag = true
	return builder
}
func (builder *TalentCustomizedValueBuilder) Time(time string) *TalentCustomizedValueBuilder {
	builder.time = time
	builder.timeFlag = true
	return builder
}
func (builder *TalentCustomizedValueBuilder) Number(number string) *TalentCustomizedValueBuilder {
	builder.number = number
	builder.numberFlag = true
	return builder
}

func (builder *TalentCustomizedValueBuilder) Build() *TalentCustomizedValue {
	req := &TalentCustomizedValue{}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.optionFlag {
		req.Option = builder.option
	}
	if builder.optionListFlag {
		req.OptionList = builder.optionList
	}
	if builder.timeRangeFlag {
		req.TimeRange = builder.timeRange
	}
	if builder.timeFlag {
		req.Time = &builder.time

	}
	if builder.numberFlag {
		req.Number = &builder.number

	}
	return req
}

// builder结束

type TalentEducationInfo struct {
	Id                 *string                      `json:"id,omitempty"`
	Degree             *int                         `json:"degree,omitempty"`
	School             *string                      `json:"school,omitempty"`
	FieldOfStudy       *string                      `json:"field_of_study,omitempty"`
	StartTime          *string                      `json:"start_time,omitempty"`
	EndTime            *string                      `json:"end_time,omitempty"`
	EducationType      *int                         `json:"education_type,omitempty"`
	AcademicRanking    *int                         `json:"academic_ranking,omitempty"`
	TagList            []int                        `json:"tag_list,omitempty"`
	CustomizedDataList []*TalentCustomizedDataChild `json:"customized_data_list,omitempty"`
}

// builder开始
type TalentEducationInfoBuilder struct {
	id                     string
	idFlag                 bool
	degree                 int
	degreeFlag             bool
	school                 string
	schoolFlag             bool
	fieldOfStudy           string
	fieldOfStudyFlag       bool
	startTime              string
	startTimeFlag          bool
	endTime                string
	endTimeFlag            bool
	educationType          int
	educationTypeFlag      bool
	academicRanking        int
	academicRankingFlag    bool
	tagList                []int
	tagListFlag            bool
	customizedDataList     []*TalentCustomizedDataChild
	customizedDataListFlag bool
}

func NewTalentEducationInfoBuilder() *TalentEducationInfoBuilder {
	builder := &TalentEducationInfoBuilder{}
	return builder
}

func (builder *TalentEducationInfoBuilder) Id(id string) *TalentEducationInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *TalentEducationInfoBuilder) Degree(degree int) *TalentEducationInfoBuilder {
	builder.degree = degree
	builder.degreeFlag = true
	return builder
}
func (builder *TalentEducationInfoBuilder) School(school string) *TalentEducationInfoBuilder {
	builder.school = school
	builder.schoolFlag = true
	return builder
}
func (builder *TalentEducationInfoBuilder) FieldOfStudy(fieldOfStudy string) *TalentEducationInfoBuilder {
	builder.fieldOfStudy = fieldOfStudy
	builder.fieldOfStudyFlag = true
	return builder
}
func (builder *TalentEducationInfoBuilder) StartTime(startTime string) *TalentEducationInfoBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}
func (builder *TalentEducationInfoBuilder) EndTime(endTime string) *TalentEducationInfoBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}
func (builder *TalentEducationInfoBuilder) EducationType(educationType int) *TalentEducationInfoBuilder {
	builder.educationType = educationType
	builder.educationTypeFlag = true
	return builder
}
func (builder *TalentEducationInfoBuilder) AcademicRanking(academicRanking int) *TalentEducationInfoBuilder {
	builder.academicRanking = academicRanking
	builder.academicRankingFlag = true
	return builder
}
func (builder *TalentEducationInfoBuilder) TagList(tagList []int) *TalentEducationInfoBuilder {
	builder.tagList = tagList
	builder.tagListFlag = true
	return builder
}
func (builder *TalentEducationInfoBuilder) CustomizedDataList(customizedDataList []*TalentCustomizedDataChild) *TalentEducationInfoBuilder {
	builder.customizedDataList = customizedDataList
	builder.customizedDataListFlag = true
	return builder
}

func (builder *TalentEducationInfoBuilder) Build() *TalentEducationInfo {
	req := &TalentEducationInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.degreeFlag {
		req.Degree = &builder.degree

	}
	if builder.schoolFlag {
		req.School = &builder.school

	}
	if builder.fieldOfStudyFlag {
		req.FieldOfStudy = &builder.fieldOfStudy

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.educationTypeFlag {
		req.EducationType = &builder.educationType

	}
	if builder.academicRankingFlag {
		req.AcademicRanking = &builder.academicRanking

	}
	if builder.tagListFlag {
		req.TagList = builder.tagList
	}
	if builder.customizedDataListFlag {
		req.CustomizedDataList = builder.customizedDataList
	}
	return req
}

// builder结束

type TalentExternalInfo struct {
	TalentId           *string `json:"talent_id,omitempty"`
	ExternalCreateTime *string `json:"external_create_time,omitempty"`
}

// builder开始
type TalentExternalInfoBuilder struct {
	talentId               string
	talentIdFlag           bool
	externalCreateTime     string
	externalCreateTimeFlag bool
}

func NewTalentExternalInfoBuilder() *TalentExternalInfoBuilder {
	builder := &TalentExternalInfoBuilder{}
	return builder
}

func (builder *TalentExternalInfoBuilder) TalentId(talentId string) *TalentExternalInfoBuilder {
	builder.talentId = talentId
	builder.talentIdFlag = true
	return builder
}
func (builder *TalentExternalInfoBuilder) ExternalCreateTime(externalCreateTime string) *TalentExternalInfoBuilder {
	builder.externalCreateTime = externalCreateTime
	builder.externalCreateTimeFlag = true
	return builder
}

func (builder *TalentExternalInfoBuilder) Build() *TalentExternalInfo {
	req := &TalentExternalInfo{}
	if builder.talentIdFlag {
		req.TalentId = &builder.talentId

	}
	if builder.externalCreateTimeFlag {
		req.ExternalCreateTime = &builder.externalCreateTime

	}
	return req
}

// builder结束

type TalentFolder struct {
	ExternalId *string `json:"external_id,omitempty"`
	Name       *string `json:"name,omitempty"`
	ParentId   *string `json:"parent_id,omitempty"`
	CreatorId  *string `json:"creator_id,omitempty"`
	FolderId   *string `json:"folder_id,omitempty"`
	OwnerId    *string `json:"owner_id,omitempty"`
}

// builder开始
type TalentFolderBuilder struct {
	externalId     string
	externalIdFlag bool
	name           string
	nameFlag       bool
	parentId       string
	parentIdFlag   bool
	creatorId      string
	creatorIdFlag  bool
	folderId       string
	folderIdFlag   bool
	ownerId        string
	ownerIdFlag    bool
}

func NewTalentFolderBuilder() *TalentFolderBuilder {
	builder := &TalentFolderBuilder{}
	return builder
}

func (builder *TalentFolderBuilder) ExternalId(externalId string) *TalentFolderBuilder {
	builder.externalId = externalId
	builder.externalIdFlag = true
	return builder
}
func (builder *TalentFolderBuilder) Name(name string) *TalentFolderBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *TalentFolderBuilder) ParentId(parentId string) *TalentFolderBuilder {
	builder.parentId = parentId
	builder.parentIdFlag = true
	return builder
}
func (builder *TalentFolderBuilder) CreatorId(creatorId string) *TalentFolderBuilder {
	builder.creatorId = creatorId
	builder.creatorIdFlag = true
	return builder
}
func (builder *TalentFolderBuilder) FolderId(folderId string) *TalentFolderBuilder {
	builder.folderId = folderId
	builder.folderIdFlag = true
	return builder
}
func (builder *TalentFolderBuilder) OwnerId(ownerId string) *TalentFolderBuilder {
	builder.ownerId = ownerId
	builder.ownerIdFlag = true
	return builder
}

func (builder *TalentFolderBuilder) Build() *TalentFolder {
	req := &TalentFolder{}
	if builder.externalIdFlag {
		req.ExternalId = &builder.externalId

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.parentIdFlag {
		req.ParentId = &builder.parentId

	}
	if builder.creatorIdFlag {
		req.CreatorId = &builder.creatorId

	}
	if builder.folderIdFlag {
		req.FolderId = &builder.folderId

	}
	if builder.ownerIdFlag {
		req.OwnerId = &builder.ownerId

	}
	return req
}

// builder结束

type TalentInternshipInfo struct {
	Id        *string `json:"id,omitempty"`
	Company   *string `json:"company,omitempty"`
	Desc      *string `json:"desc,omitempty"`
	EndTime   *int    `json:"end_time,omitempty"`
	StartTime *int    `json:"start_time,omitempty"`
	Title     *string `json:"title,omitempty"`
	TagList   []int   `json:"tag_list,omitempty"`
}

// builder开始
type TalentInternshipInfoBuilder struct {
	id            string
	idFlag        bool
	company       string
	companyFlag   bool
	desc          string
	descFlag      bool
	endTime       int
	endTimeFlag   bool
	startTime     int
	startTimeFlag bool
	title         string
	titleFlag     bool
	tagList       []int
	tagListFlag   bool
}

func NewTalentInternshipInfoBuilder() *TalentInternshipInfoBuilder {
	builder := &TalentInternshipInfoBuilder{}
	return builder
}

func (builder *TalentInternshipInfoBuilder) Id(id string) *TalentInternshipInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *TalentInternshipInfoBuilder) Company(company string) *TalentInternshipInfoBuilder {
	builder.company = company
	builder.companyFlag = true
	return builder
}
func (builder *TalentInternshipInfoBuilder) Desc(desc string) *TalentInternshipInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}
func (builder *TalentInternshipInfoBuilder) EndTime(endTime int) *TalentInternshipInfoBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}
func (builder *TalentInternshipInfoBuilder) StartTime(startTime int) *TalentInternshipInfoBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}
func (builder *TalentInternshipInfoBuilder) Title(title string) *TalentInternshipInfoBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}
func (builder *TalentInternshipInfoBuilder) TagList(tagList []int) *TalentInternshipInfoBuilder {
	builder.tagList = tagList
	builder.tagListFlag = true
	return builder
}

func (builder *TalentInternshipInfoBuilder) Build() *TalentInternshipInfo {
	req := &TalentInternshipInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.companyFlag {
		req.Company = &builder.company

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.tagListFlag {
		req.TagList = builder.tagList
	}
	return req
}

// builder结束

type TalentInterview struct {
	ApplicationId *string            `json:"application_id,omitempty"`
	InterviewList []*InterviewExtend `json:"interview_list,omitempty"`
}

// builder开始
type TalentInterviewBuilder struct {
	applicationId     string
	applicationIdFlag bool
	interviewList     []*InterviewExtend
	interviewListFlag bool
}

func NewTalentInterviewBuilder() *TalentInterviewBuilder {
	builder := &TalentInterviewBuilder{}
	return builder
}

func (builder *TalentInterviewBuilder) ApplicationId(applicationId string) *TalentInterviewBuilder {
	builder.applicationId = applicationId
	builder.applicationIdFlag = true
	return builder
}
func (builder *TalentInterviewBuilder) InterviewList(interviewList []*InterviewExtend) *TalentInterviewBuilder {
	builder.interviewList = interviewList
	builder.interviewListFlag = true
	return builder
}

func (builder *TalentInterviewBuilder) Build() *TalentInterview {
	req := &TalentInterview{}
	if builder.applicationIdFlag {
		req.ApplicationId = &builder.applicationId

	}
	if builder.interviewListFlag {
		req.InterviewList = builder.interviewList
	}
	return req
}

// builder结束

type TalentInterviewRegistrationSimple struct {
	Id               *string `json:"id,omitempty"`
	RegistrationTime *int    `json:"registration_time,omitempty"`
}

// builder开始
type TalentInterviewRegistrationSimpleBuilder struct {
	id                   string
	idFlag               bool
	registrationTime     int
	registrationTimeFlag bool
}

func NewTalentInterviewRegistrationSimpleBuilder() *TalentInterviewRegistrationSimpleBuilder {
	builder := &TalentInterviewRegistrationSimpleBuilder{}
	return builder
}

func (builder *TalentInterviewRegistrationSimpleBuilder) Id(id string) *TalentInterviewRegistrationSimpleBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *TalentInterviewRegistrationSimpleBuilder) RegistrationTime(registrationTime int) *TalentInterviewRegistrationSimpleBuilder {
	builder.registrationTime = registrationTime
	builder.registrationTimeFlag = true
	return builder
}

func (builder *TalentInterviewRegistrationSimpleBuilder) Build() *TalentInterviewRegistrationSimple {
	req := &TalentInterviewRegistrationSimple{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.registrationTimeFlag {
		req.RegistrationTime = &builder.registrationTime

	}
	return req
}

// builder结束

type TalentLanguageInfo struct {
	Id                 *string                      `json:"id,omitempty"`
	Language           *int                         `json:"language,omitempty"`
	Proficiency        *int                         `json:"proficiency,omitempty"`
	CustomizedDataList []*TalentCustomizedDataChild `json:"customized_data_list,omitempty"`
}

// builder开始
type TalentLanguageInfoBuilder struct {
	id                     string
	idFlag                 bool
	language               int
	languageFlag           bool
	proficiency            int
	proficiencyFlag        bool
	customizedDataList     []*TalentCustomizedDataChild
	customizedDataListFlag bool
}

func NewTalentLanguageInfoBuilder() *TalentLanguageInfoBuilder {
	builder := &TalentLanguageInfoBuilder{}
	return builder
}

func (builder *TalentLanguageInfoBuilder) Id(id string) *TalentLanguageInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *TalentLanguageInfoBuilder) Language(language int) *TalentLanguageInfoBuilder {
	builder.language = language
	builder.languageFlag = true
	return builder
}
func (builder *TalentLanguageInfoBuilder) Proficiency(proficiency int) *TalentLanguageInfoBuilder {
	builder.proficiency = proficiency
	builder.proficiencyFlag = true
	return builder
}
func (builder *TalentLanguageInfoBuilder) CustomizedDataList(customizedDataList []*TalentCustomizedDataChild) *TalentLanguageInfoBuilder {
	builder.customizedDataList = customizedDataList
	builder.customizedDataListFlag = true
	return builder
}

func (builder *TalentLanguageInfoBuilder) Build() *TalentLanguageInfo {
	req := &TalentLanguageInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.languageFlag {
		req.Language = &builder.language

	}
	if builder.proficiencyFlag {
		req.Proficiency = &builder.proficiency

	}
	if builder.customizedDataListFlag {
		req.CustomizedDataList = builder.customizedDataList
	}
	return req
}

// builder结束

type TalentNationality struct {
	NationalityCode *string `json:"nationality_code,omitempty"`
	ZhName          *string `json:"zh_name,omitempty"`
	EnName          *string `json:"en_name,omitempty"`
}

// builder开始
type TalentNationalityBuilder struct {
	nationalityCode     string
	nationalityCodeFlag bool
	zhName              string
	zhNameFlag          bool
	enName              string
	enNameFlag          bool
}

func NewTalentNationalityBuilder() *TalentNationalityBuilder {
	builder := &TalentNationalityBuilder{}
	return builder
}

func (builder *TalentNationalityBuilder) NationalityCode(nationalityCode string) *TalentNationalityBuilder {
	builder.nationalityCode = nationalityCode
	builder.nationalityCodeFlag = true
	return builder
}
func (builder *TalentNationalityBuilder) ZhName(zhName string) *TalentNationalityBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}
func (builder *TalentNationalityBuilder) EnName(enName string) *TalentNationalityBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

func (builder *TalentNationalityBuilder) Build() *TalentNationality {
	req := &TalentNationality{}
	if builder.nationalityCodeFlag {
		req.NationalityCode = &builder.nationalityCode

	}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	return req
}

// builder结束

type TalentOperationLog struct {
	ApplicationId *string       `json:"application_id,omitempty"`
	TalentId      *string       `json:"talent_id,omitempty"`
	Operator      *IdNameObject `json:"operator,omitempty"`
	OperationType *int          `json:"operation_type,omitempty"`
	OperationTime *string       `json:"operation_time,omitempty"`
	OperatorType  *int          `json:"operator_type,omitempty"`
}

// builder开始
type TalentOperationLogBuilder struct {
	applicationId     string
	applicationIdFlag bool
	talentId          string
	talentIdFlag      bool
	operator          *IdNameObject
	operatorFlag      bool
	operationType     int
	operationTypeFlag bool
	operationTime     string
	operationTimeFlag bool
	operatorType      int
	operatorTypeFlag  bool
}

func NewTalentOperationLogBuilder() *TalentOperationLogBuilder {
	builder := &TalentOperationLogBuilder{}
	return builder
}

func (builder *TalentOperationLogBuilder) ApplicationId(applicationId string) *TalentOperationLogBuilder {
	builder.applicationId = applicationId
	builder.applicationIdFlag = true
	return builder
}
func (builder *TalentOperationLogBuilder) TalentId(talentId string) *TalentOperationLogBuilder {
	builder.talentId = talentId
	builder.talentIdFlag = true
	return builder
}
func (builder *TalentOperationLogBuilder) Operator(operator *IdNameObject) *TalentOperationLogBuilder {
	builder.operator = operator
	builder.operatorFlag = true
	return builder
}
func (builder *TalentOperationLogBuilder) OperationType(operationType int) *TalentOperationLogBuilder {
	builder.operationType = operationType
	builder.operationTypeFlag = true
	return builder
}
func (builder *TalentOperationLogBuilder) OperationTime(operationTime string) *TalentOperationLogBuilder {
	builder.operationTime = operationTime
	builder.operationTimeFlag = true
	return builder
}
func (builder *TalentOperationLogBuilder) OperatorType(operatorType int) *TalentOperationLogBuilder {
	builder.operatorType = operatorType
	builder.operatorTypeFlag = true
	return builder
}

func (builder *TalentOperationLogBuilder) Build() *TalentOperationLog {
	req := &TalentOperationLog{}
	if builder.applicationIdFlag {
		req.ApplicationId = &builder.applicationId

	}
	if builder.talentIdFlag {
		req.TalentId = &builder.talentId

	}
	if builder.operatorFlag {
		req.Operator = builder.operator
	}
	if builder.operationTypeFlag {
		req.OperationType = &builder.operationType

	}
	if builder.operationTimeFlag {
		req.OperationTime = &builder.operationTime

	}
	if builder.operatorTypeFlag {
		req.OperatorType = &builder.operatorType

	}
	return req
}

// builder结束

type TalentProjectInfo struct {
	Id                 *string                      `json:"id,omitempty"`
	Name               *string                      `json:"name,omitempty"`
	Role               *string                      `json:"role,omitempty"`
	Link               *string                      `json:"link,omitempty"`
	Desc               *string                      `json:"desc,omitempty"`
	StartTime          *string                      `json:"start_time,omitempty"`
	EndTime            *string                      `json:"end_time,omitempty"`
	CustomizedDataList []*TalentCustomizedDataChild `json:"customized_data_list,omitempty"`
}

// builder开始
type TalentProjectInfoBuilder struct {
	id                     string
	idFlag                 bool
	name                   string
	nameFlag               bool
	role                   string
	roleFlag               bool
	link                   string
	linkFlag               bool
	desc                   string
	descFlag               bool
	startTime              string
	startTimeFlag          bool
	endTime                string
	endTimeFlag            bool
	customizedDataList     []*TalentCustomizedDataChild
	customizedDataListFlag bool
}

func NewTalentProjectInfoBuilder() *TalentProjectInfoBuilder {
	builder := &TalentProjectInfoBuilder{}
	return builder
}

func (builder *TalentProjectInfoBuilder) Id(id string) *TalentProjectInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *TalentProjectInfoBuilder) Name(name string) *TalentProjectInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *TalentProjectInfoBuilder) Role(role string) *TalentProjectInfoBuilder {
	builder.role = role
	builder.roleFlag = true
	return builder
}
func (builder *TalentProjectInfoBuilder) Link(link string) *TalentProjectInfoBuilder {
	builder.link = link
	builder.linkFlag = true
	return builder
}
func (builder *TalentProjectInfoBuilder) Desc(desc string) *TalentProjectInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}
func (builder *TalentProjectInfoBuilder) StartTime(startTime string) *TalentProjectInfoBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}
func (builder *TalentProjectInfoBuilder) EndTime(endTime string) *TalentProjectInfoBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}
func (builder *TalentProjectInfoBuilder) CustomizedDataList(customizedDataList []*TalentCustomizedDataChild) *TalentProjectInfoBuilder {
	builder.customizedDataList = customizedDataList
	builder.customizedDataListFlag = true
	return builder
}

func (builder *TalentProjectInfoBuilder) Build() *TalentProjectInfo {
	req := &TalentProjectInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.roleFlag {
		req.Role = &builder.role

	}
	if builder.linkFlag {
		req.Link = &builder.link

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.customizedDataListFlag {
		req.CustomizedDataList = builder.customizedDataList
	}
	return req
}

// builder结束

type TalentResumeSource struct {
	Id     *string `json:"id,omitempty"`
	ZhName *string `json:"zh_name,omitempty"`
	EnName *string `json:"en_name,omitempty"`
}

// builder开始
type TalentResumeSourceBuilder struct {
	id         string
	idFlag     bool
	zhName     string
	zhNameFlag bool
	enName     string
	enNameFlag bool
}

func NewTalentResumeSourceBuilder() *TalentResumeSourceBuilder {
	builder := &TalentResumeSourceBuilder{}
	return builder
}

func (builder *TalentResumeSourceBuilder) Id(id string) *TalentResumeSourceBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *TalentResumeSourceBuilder) ZhName(zhName string) *TalentResumeSourceBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}
func (builder *TalentResumeSourceBuilder) EnName(enName string) *TalentResumeSourceBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

func (builder *TalentResumeSourceBuilder) Build() *TalentResumeSource {
	req := &TalentResumeSource{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	return req
}

// builder结束

type TalentSchema struct {
}

// builder开始
// builder结束

type TalentSchemaChildObject struct {
	Id           *string               `json:"id,omitempty"`
	ActiveStatus *int                  `json:"active_status,omitempty"`
	IsCustomized *bool                 `json:"is_customized,omitempty"`
	Name         *I18n                 `json:"name,omitempty"`
	OptionList   []*TalentSchemaOption `json:"option_list,omitempty"`
}

// builder开始
type TalentSchemaChildObjectBuilder struct {
	id               string
	idFlag           bool
	activeStatus     int
	activeStatusFlag bool
	isCustomized     bool
	isCustomizedFlag bool
	name             *I18n
	nameFlag         bool
	optionList       []*TalentSchemaOption
	optionListFlag   bool
}

func NewTalentSchemaChildObjectBuilder() *TalentSchemaChildObjectBuilder {
	builder := &TalentSchemaChildObjectBuilder{}
	return builder
}

func (builder *TalentSchemaChildObjectBuilder) Id(id string) *TalentSchemaChildObjectBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *TalentSchemaChildObjectBuilder) ActiveStatus(activeStatus int) *TalentSchemaChildObjectBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}
func (builder *TalentSchemaChildObjectBuilder) IsCustomized(isCustomized bool) *TalentSchemaChildObjectBuilder {
	builder.isCustomized = isCustomized
	builder.isCustomizedFlag = true
	return builder
}
func (builder *TalentSchemaChildObjectBuilder) Name(name *I18n) *TalentSchemaChildObjectBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *TalentSchemaChildObjectBuilder) OptionList(optionList []*TalentSchemaOption) *TalentSchemaChildObjectBuilder {
	builder.optionList = optionList
	builder.optionListFlag = true
	return builder
}

func (builder *TalentSchemaChildObjectBuilder) Build() *TalentSchemaChildObject {
	req := &TalentSchemaChildObject{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	if builder.isCustomizedFlag {
		req.IsCustomized = &builder.isCustomized

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.optionListFlag {
		req.OptionList = builder.optionList
	}
	return req
}

// builder结束

type TalentSchemaObject struct {
	Id           *string                    `json:"id,omitempty"`
	ActiveStatus *int                       `json:"active_status,omitempty"`
	IsCustomized *bool                      `json:"is_customized,omitempty"`
	Name         *I18n                      `json:"name,omitempty"`
	OptionList   []*TalentSchemaOption      `json:"option_list,omitempty"`
	Children     []*TalentSchemaChildObject `json:"children,omitempty"`
}

// builder开始
type TalentSchemaObjectBuilder struct {
	id               string
	idFlag           bool
	activeStatus     int
	activeStatusFlag bool
	isCustomized     bool
	isCustomizedFlag bool
	name             *I18n
	nameFlag         bool
	optionList       []*TalentSchemaOption
	optionListFlag   bool
	children         []*TalentSchemaChildObject
	childrenFlag     bool
}

func NewTalentSchemaObjectBuilder() *TalentSchemaObjectBuilder {
	builder := &TalentSchemaObjectBuilder{}
	return builder
}

func (builder *TalentSchemaObjectBuilder) Id(id string) *TalentSchemaObjectBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *TalentSchemaObjectBuilder) ActiveStatus(activeStatus int) *TalentSchemaObjectBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}
func (builder *TalentSchemaObjectBuilder) IsCustomized(isCustomized bool) *TalentSchemaObjectBuilder {
	builder.isCustomized = isCustomized
	builder.isCustomizedFlag = true
	return builder
}
func (builder *TalentSchemaObjectBuilder) Name(name *I18n) *TalentSchemaObjectBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *TalentSchemaObjectBuilder) OptionList(optionList []*TalentSchemaOption) *TalentSchemaObjectBuilder {
	builder.optionList = optionList
	builder.optionListFlag = true
	return builder
}
func (builder *TalentSchemaObjectBuilder) Children(children []*TalentSchemaChildObject) *TalentSchemaObjectBuilder {
	builder.children = children
	builder.childrenFlag = true
	return builder
}

func (builder *TalentSchemaObjectBuilder) Build() *TalentSchemaObject {
	req := &TalentSchemaObject{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	if builder.isCustomizedFlag {
		req.IsCustomized = &builder.isCustomized

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.optionListFlag {
		req.OptionList = builder.optionList
	}
	if builder.childrenFlag {
		req.Children = builder.children
	}
	return req
}

// builder结束

type TalentSchemaOption struct {
	ActiveStatus *int    `json:"active_status,omitempty"`
	Value        *string `json:"value,omitempty"`
	Name         *I18n   `json:"name,omitempty"`
}

// builder开始
type TalentSchemaOptionBuilder struct {
	activeStatus     int
	activeStatusFlag bool
	value            string
	valueFlag        bool
	name             *I18n
	nameFlag         bool
}

func NewTalentSchemaOptionBuilder() *TalentSchemaOptionBuilder {
	builder := &TalentSchemaOptionBuilder{}
	return builder
}

func (builder *TalentSchemaOptionBuilder) ActiveStatus(activeStatus int) *TalentSchemaOptionBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}
func (builder *TalentSchemaOptionBuilder) Value(value string) *TalentSchemaOptionBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}
func (builder *TalentSchemaOptionBuilder) Name(name *I18n) *TalentSchemaOptionBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *TalentSchemaOptionBuilder) Build() *TalentSchemaOption {
	req := &TalentSchemaOption{}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	if builder.valueFlag {
		req.Value = &builder.value

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	return req
}

// builder结束

type TalentSelfEvaluation struct {
	Id             *string                            `json:"id,omitempty"`
	Content        *string                            `json:"content,omitempty"`
	CustomizedData []*TalentCustomizedDataObjectValue `json:"customized_data,omitempty"`
}

// builder开始
type TalentSelfEvaluationBuilder struct {
	id                 string
	idFlag             bool
	content            string
	contentFlag        bool
	customizedData     []*TalentCustomizedDataObjectValue
	customizedDataFlag bool
}

func NewTalentSelfEvaluationBuilder() *TalentSelfEvaluationBuilder {
	builder := &TalentSelfEvaluationBuilder{}
	return builder
}

func (builder *TalentSelfEvaluationBuilder) Id(id string) *TalentSelfEvaluationBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *TalentSelfEvaluationBuilder) Content(content string) *TalentSelfEvaluationBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}
func (builder *TalentSelfEvaluationBuilder) CustomizedData(customizedData []*TalentCustomizedDataObjectValue) *TalentSelfEvaluationBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}

func (builder *TalentSelfEvaluationBuilder) Build() *TalentSelfEvaluation {
	req := &TalentSelfEvaluation{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	return req
}

// builder结束

type TalentSnsInfo struct {
	Id                 *string                      `json:"id,omitempty"`
	SnsType            *int                         `json:"sns_type,omitempty"`
	Link               *string                      `json:"link,omitempty"`
	CustomizedDataList []*TalentCustomizedDataChild `json:"customized_data_list,omitempty"`
}

// builder开始
type TalentSnsInfoBuilder struct {
	id                     string
	idFlag                 bool
	snsType                int
	snsTypeFlag            bool
	link                   string
	linkFlag               bool
	customizedDataList     []*TalentCustomizedDataChild
	customizedDataListFlag bool
}

func NewTalentSnsInfoBuilder() *TalentSnsInfoBuilder {
	builder := &TalentSnsInfoBuilder{}
	return builder
}

func (builder *TalentSnsInfoBuilder) Id(id string) *TalentSnsInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *TalentSnsInfoBuilder) SnsType(snsType int) *TalentSnsInfoBuilder {
	builder.snsType = snsType
	builder.snsTypeFlag = true
	return builder
}
func (builder *TalentSnsInfoBuilder) Link(link string) *TalentSnsInfoBuilder {
	builder.link = link
	builder.linkFlag = true
	return builder
}
func (builder *TalentSnsInfoBuilder) CustomizedDataList(customizedDataList []*TalentCustomizedDataChild) *TalentSnsInfoBuilder {
	builder.customizedDataList = customizedDataList
	builder.customizedDataListFlag = true
	return builder
}

func (builder *TalentSnsInfoBuilder) Build() *TalentSnsInfo {
	req := &TalentSnsInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.snsTypeFlag {
		req.SnsType = &builder.snsType

	}
	if builder.linkFlag {
		req.Link = &builder.link

	}
	if builder.customizedDataListFlag {
		req.CustomizedDataList = builder.customizedDataList
	}
	return req
}

// builder结束

type TalentWorksInfo struct {
	Id                 *string                      `json:"id,omitempty"`
	Link               *string                      `json:"link,omitempty"`
	Desc               *string                      `json:"desc,omitempty"`
	Name               *string                      `json:"name,omitempty"`
	CustomizedDataList []*TalentCustomizedDataChild `json:"customized_data_list,omitempty"`
}

// builder开始
type TalentWorksInfoBuilder struct {
	id                     string
	idFlag                 bool
	link                   string
	linkFlag               bool
	desc                   string
	descFlag               bool
	name                   string
	nameFlag               bool
	customizedDataList     []*TalentCustomizedDataChild
	customizedDataListFlag bool
}

func NewTalentWorksInfoBuilder() *TalentWorksInfoBuilder {
	builder := &TalentWorksInfoBuilder{}
	return builder
}

func (builder *TalentWorksInfoBuilder) Id(id string) *TalentWorksInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *TalentWorksInfoBuilder) Link(link string) *TalentWorksInfoBuilder {
	builder.link = link
	builder.linkFlag = true
	return builder
}
func (builder *TalentWorksInfoBuilder) Desc(desc string) *TalentWorksInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}
func (builder *TalentWorksInfoBuilder) Name(name string) *TalentWorksInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *TalentWorksInfoBuilder) CustomizedDataList(customizedDataList []*TalentCustomizedDataChild) *TalentWorksInfoBuilder {
	builder.customizedDataList = customizedDataList
	builder.customizedDataListFlag = true
	return builder
}

func (builder *TalentWorksInfoBuilder) Build() *TalentWorksInfo {
	req := &TalentWorksInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.linkFlag {
		req.Link = &builder.link

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.customizedDataListFlag {
		req.CustomizedDataList = builder.customizedDataList
	}
	return req
}

// builder结束

type TerminationReason struct {
	Id                 *string `json:"id,omitempty"`
	Name               *I18n   `json:"name,omitempty"`
	ReferralName       *I18n   `json:"referral_name,omitempty"`
	TerminationType    *int    `json:"termination_type,omitempty"`
	IsUsedAsEvaluation *bool   `json:"is_used_as_evaluation,omitempty"`
	ActiveStatus       *int    `json:"active_status,omitempty"`
}

// builder开始
type TerminationReasonBuilder struct {
	id                     string
	idFlag                 bool
	name                   *I18n
	nameFlag               bool
	referralName           *I18n
	referralNameFlag       bool
	terminationType        int
	terminationTypeFlag    bool
	isUsedAsEvaluation     bool
	isUsedAsEvaluationFlag bool
	activeStatus           int
	activeStatusFlag       bool
}

func NewTerminationReasonBuilder() *TerminationReasonBuilder {
	builder := &TerminationReasonBuilder{}
	return builder
}

func (builder *TerminationReasonBuilder) Id(id string) *TerminationReasonBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *TerminationReasonBuilder) Name(name *I18n) *TerminationReasonBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *TerminationReasonBuilder) ReferralName(referralName *I18n) *TerminationReasonBuilder {
	builder.referralName = referralName
	builder.referralNameFlag = true
	return builder
}
func (builder *TerminationReasonBuilder) TerminationType(terminationType int) *TerminationReasonBuilder {
	builder.terminationType = terminationType
	builder.terminationTypeFlag = true
	return builder
}
func (builder *TerminationReasonBuilder) IsUsedAsEvaluation(isUsedAsEvaluation bool) *TerminationReasonBuilder {
	builder.isUsedAsEvaluation = isUsedAsEvaluation
	builder.isUsedAsEvaluationFlag = true
	return builder
}
func (builder *TerminationReasonBuilder) ActiveStatus(activeStatus int) *TerminationReasonBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}

func (builder *TerminationReasonBuilder) Build() *TerminationReason {
	req := &TerminationReason{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.referralNameFlag {
		req.ReferralName = builder.referralName
	}
	if builder.terminationTypeFlag {
		req.TerminationType = &builder.terminationType

	}
	if builder.isUsedAsEvaluationFlag {
		req.IsUsedAsEvaluation = &builder.isUsedAsEvaluation

	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	return req
}

// builder结束

type Todo struct {
	Evaluation *TodoCommon `json:"evaluation,omitempty"`
	Offer      *TodoCommon `json:"offer,omitempty"`
	Exam       *TodoCommon `json:"exam,omitempty"`
	Interview  *TodoCommon `json:"interview,omitempty"`
}

// builder开始
type TodoBuilder struct {
	evaluation     *TodoCommon
	evaluationFlag bool
	offer          *TodoCommon
	offerFlag      bool
	exam           *TodoCommon
	examFlag       bool
	interview      *TodoCommon
	interviewFlag  bool
}

func NewTodoBuilder() *TodoBuilder {
	builder := &TodoBuilder{}
	return builder
}

func (builder *TodoBuilder) Evaluation(evaluation *TodoCommon) *TodoBuilder {
	builder.evaluation = evaluation
	builder.evaluationFlag = true
	return builder
}
func (builder *TodoBuilder) Offer(offer *TodoCommon) *TodoBuilder {
	builder.offer = offer
	builder.offerFlag = true
	return builder
}
func (builder *TodoBuilder) Exam(exam *TodoCommon) *TodoBuilder {
	builder.exam = exam
	builder.examFlag = true
	return builder
}
func (builder *TodoBuilder) Interview(interview *TodoCommon) *TodoBuilder {
	builder.interview = interview
	builder.interviewFlag = true
	return builder
}

func (builder *TodoBuilder) Build() *Todo {
	req := &Todo{}
	if builder.evaluationFlag {
		req.Evaluation = builder.evaluation
	}
	if builder.offerFlag {
		req.Offer = builder.offer
	}
	if builder.examFlag {
		req.Exam = builder.exam
	}
	if builder.interviewFlag {
		req.Interview = builder.interview
	}
	return req
}

// builder结束

type TodoCommon struct {
	TalentId      *string `json:"talent_id,omitempty"`
	JobId         *string `json:"job_id,omitempty"`
	ApplicationId *string `json:"application_id,omitempty"`
	Id            *string `json:"id,omitempty"`
}

// builder开始
type TodoCommonBuilder struct {
	talentId          string
	talentIdFlag      bool
	jobId             string
	jobIdFlag         bool
	applicationId     string
	applicationIdFlag bool
	id                string
	idFlag            bool
}

func NewTodoCommonBuilder() *TodoCommonBuilder {
	builder := &TodoCommonBuilder{}
	return builder
}

func (builder *TodoCommonBuilder) TalentId(talentId string) *TodoCommonBuilder {
	builder.talentId = talentId
	builder.talentIdFlag = true
	return builder
}
func (builder *TodoCommonBuilder) JobId(jobId string) *TodoCommonBuilder {
	builder.jobId = jobId
	builder.jobIdFlag = true
	return builder
}
func (builder *TodoCommonBuilder) ApplicationId(applicationId string) *TodoCommonBuilder {
	builder.applicationId = applicationId
	builder.applicationIdFlag = true
	return builder
}
func (builder *TodoCommonBuilder) Id(id string) *TodoCommonBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

func (builder *TodoCommonBuilder) Build() *TodoCommon {
	req := &TodoCommon{}
	if builder.talentIdFlag {
		req.TalentId = &builder.talentId

	}
	if builder.jobIdFlag {
		req.JobId = &builder.jobId

	}
	if builder.applicationIdFlag {
		req.ApplicationId = &builder.applicationId

	}
	if builder.idFlag {
		req.Id = &builder.id

	}
	return req
}

// builder结束

type UserRole struct {
	UserId     *string `json:"user_id,omitempty"`
	RoleId     *string `json:"role_id,omitempty"`
	ModifyTime *string `json:"modify_time,omitempty"`
}

// builder开始
type UserRoleBuilder struct {
	userId         string
	userIdFlag     bool
	roleId         string
	roleIdFlag     bool
	modifyTime     string
	modifyTimeFlag bool
}

func NewUserRoleBuilder() *UserRoleBuilder {
	builder := &UserRoleBuilder{}
	return builder
}

func (builder *UserRoleBuilder) UserId(userId string) *UserRoleBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}
func (builder *UserRoleBuilder) RoleId(roleId string) *UserRoleBuilder {
	builder.roleId = roleId
	builder.roleIdFlag = true
	return builder
}
func (builder *UserRoleBuilder) ModifyTime(modifyTime string) *UserRoleBuilder {
	builder.modifyTime = modifyTime
	builder.modifyTimeFlag = true
	return builder
}

func (builder *UserRoleBuilder) Build() *UserRole {
	req := &UserRole{}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.roleIdFlag {
		req.RoleId = &builder.roleId

	}
	if builder.modifyTimeFlag {
		req.ModifyTime = &builder.modifyTime

	}
	return req
}

// builder结束

type Website struct {
	Id              *string  `json:"id,omitempty"`
	Name            *I18n    `json:"name,omitempty"`
	ProcessTypeList []string `json:"process_type_list,omitempty"`
	JobChannelId    *string  `json:"job_channel_id,omitempty"`
}

// builder开始
type WebsiteBuilder struct {
	id                  string
	idFlag              bool
	name                *I18n
	nameFlag            bool
	processTypeList     []string
	processTypeListFlag bool
	jobChannelId        string
	jobChannelIdFlag    bool
}

func NewWebsiteBuilder() *WebsiteBuilder {
	builder := &WebsiteBuilder{}
	return builder
}

func (builder *WebsiteBuilder) Id(id string) *WebsiteBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *WebsiteBuilder) Name(name *I18n) *WebsiteBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *WebsiteBuilder) ProcessTypeList(processTypeList []string) *WebsiteBuilder {
	builder.processTypeList = processTypeList
	builder.processTypeListFlag = true
	return builder
}
func (builder *WebsiteBuilder) JobChannelId(jobChannelId string) *WebsiteBuilder {
	builder.jobChannelId = jobChannelId
	builder.jobChannelIdFlag = true
	return builder
}

func (builder *WebsiteBuilder) Build() *Website {
	req := &Website{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.processTypeListFlag {
		req.ProcessTypeList = builder.processTypeList
	}
	if builder.jobChannelIdFlag {
		req.JobChannelId = &builder.jobChannelId

	}
	return req
}

// builder结束

type WebsiteChannelInfo struct {
	Id   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Link *string `json:"link,omitempty"`
	Code *string `json:"code,omitempty"`
}

// builder开始
type WebsiteChannelInfoBuilder struct {
	id       string
	idFlag   bool
	name     string
	nameFlag bool
	link     string
	linkFlag bool
	code     string
	codeFlag bool
}

func NewWebsiteChannelInfoBuilder() *WebsiteChannelInfoBuilder {
	builder := &WebsiteChannelInfoBuilder{}
	return builder
}

func (builder *WebsiteChannelInfoBuilder) Id(id string) *WebsiteChannelInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *WebsiteChannelInfoBuilder) Name(name string) *WebsiteChannelInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *WebsiteChannelInfoBuilder) Link(link string) *WebsiteChannelInfoBuilder {
	builder.link = link
	builder.linkFlag = true
	return builder
}
func (builder *WebsiteChannelInfoBuilder) Code(code string) *WebsiteChannelInfoBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}

func (builder *WebsiteChannelInfoBuilder) Build() *WebsiteChannelInfo {
	req := &WebsiteChannelInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.linkFlag {
		req.Link = &builder.link

	}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	return req
}

// builder结束

type WebsiteDelivery struct {
	JobPostId                        *string                `json:"job_post_id,omitempty"`
	Resume                           *WebsiteDeliveryResume `json:"resume,omitempty"`
	UserId                           *string                `json:"user_id,omitempty"`
	ApplicationPreferredCityCodeList []string               `json:"application_preferred_city_code_list,omitempty"`
	ChannelId                        *string                `json:"channel_id,omitempty"`
}

// builder开始
type WebsiteDeliveryBuilder struct {
	jobPostId                            string
	jobPostIdFlag                        bool
	resume                               *WebsiteDeliveryResume
	resumeFlag                           bool
	userId                               string
	userIdFlag                           bool
	applicationPreferredCityCodeList     []string
	applicationPreferredCityCodeListFlag bool
	channelId                            string
	channelIdFlag                        bool
}

func NewWebsiteDeliveryBuilder() *WebsiteDeliveryBuilder {
	builder := &WebsiteDeliveryBuilder{}
	return builder
}

func (builder *WebsiteDeliveryBuilder) JobPostId(jobPostId string) *WebsiteDeliveryBuilder {
	builder.jobPostId = jobPostId
	builder.jobPostIdFlag = true
	return builder
}
func (builder *WebsiteDeliveryBuilder) Resume(resume *WebsiteDeliveryResume) *WebsiteDeliveryBuilder {
	builder.resume = resume
	builder.resumeFlag = true
	return builder
}
func (builder *WebsiteDeliveryBuilder) UserId(userId string) *WebsiteDeliveryBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}
func (builder *WebsiteDeliveryBuilder) ApplicationPreferredCityCodeList(applicationPreferredCityCodeList []string) *WebsiteDeliveryBuilder {
	builder.applicationPreferredCityCodeList = applicationPreferredCityCodeList
	builder.applicationPreferredCityCodeListFlag = true
	return builder
}
func (builder *WebsiteDeliveryBuilder) ChannelId(channelId string) *WebsiteDeliveryBuilder {
	builder.channelId = channelId
	builder.channelIdFlag = true
	return builder
}

func (builder *WebsiteDeliveryBuilder) Build() *WebsiteDelivery {
	req := &WebsiteDelivery{}
	if builder.jobPostIdFlag {
		req.JobPostId = &builder.jobPostId

	}
	if builder.resumeFlag {
		req.Resume = builder.resume
	}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.applicationPreferredCityCodeListFlag {
		req.ApplicationPreferredCityCodeList = builder.applicationPreferredCityCodeList
	}
	if builder.channelIdFlag {
		req.ChannelId = &builder.channelId

	}
	return req
}

// builder结束

type WebsiteDeliveryAttachment struct {
	JobPostId                        *string  `json:"job_post_id,omitempty"`
	UserId                           *string  `json:"user_id,omitempty"`
	ResumeFileId                     *string  `json:"resume_file_id,omitempty"`
	ChannelId                        *string  `json:"channel_id,omitempty"`
	ApplicationPreferredCityCodeList []string `json:"application_preferred_city_code_list,omitempty"`
}

// builder开始
type WebsiteDeliveryAttachmentBuilder struct {
	jobPostId                            string
	jobPostIdFlag                        bool
	userId                               string
	userIdFlag                           bool
	resumeFileId                         string
	resumeFileIdFlag                     bool
	channelId                            string
	channelIdFlag                        bool
	applicationPreferredCityCodeList     []string
	applicationPreferredCityCodeListFlag bool
}

func NewWebsiteDeliveryAttachmentBuilder() *WebsiteDeliveryAttachmentBuilder {
	builder := &WebsiteDeliveryAttachmentBuilder{}
	return builder
}

func (builder *WebsiteDeliveryAttachmentBuilder) JobPostId(jobPostId string) *WebsiteDeliveryAttachmentBuilder {
	builder.jobPostId = jobPostId
	builder.jobPostIdFlag = true
	return builder
}
func (builder *WebsiteDeliveryAttachmentBuilder) UserId(userId string) *WebsiteDeliveryAttachmentBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}
func (builder *WebsiteDeliveryAttachmentBuilder) ResumeFileId(resumeFileId string) *WebsiteDeliveryAttachmentBuilder {
	builder.resumeFileId = resumeFileId
	builder.resumeFileIdFlag = true
	return builder
}
func (builder *WebsiteDeliveryAttachmentBuilder) ChannelId(channelId string) *WebsiteDeliveryAttachmentBuilder {
	builder.channelId = channelId
	builder.channelIdFlag = true
	return builder
}
func (builder *WebsiteDeliveryAttachmentBuilder) ApplicationPreferredCityCodeList(applicationPreferredCityCodeList []string) *WebsiteDeliveryAttachmentBuilder {
	builder.applicationPreferredCityCodeList = applicationPreferredCityCodeList
	builder.applicationPreferredCityCodeListFlag = true
	return builder
}

func (builder *WebsiteDeliveryAttachmentBuilder) Build() *WebsiteDeliveryAttachment {
	req := &WebsiteDeliveryAttachment{}
	if builder.jobPostIdFlag {
		req.JobPostId = &builder.jobPostId

	}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.resumeFileIdFlag {
		req.ResumeFileId = &builder.resumeFileId

	}
	if builder.channelIdFlag {
		req.ChannelId = &builder.channelId

	}
	if builder.applicationPreferredCityCodeListFlag {
		req.ApplicationPreferredCityCodeList = builder.applicationPreferredCityCodeList
	}
	return req
}

// builder结束

type WebsiteDeliveryAward struct {
	CustomizedData []*WebsiteDeliveryCustomizedData `json:"customized_data,omitempty"`
	Desc           *string                          `json:"desc,omitempty"`
	Title          *string                          `json:"title,omitempty"`
	AwardTime      *int                             `json:"award_time,omitempty"`
}

// builder开始
type WebsiteDeliveryAwardBuilder struct {
	customizedData     []*WebsiteDeliveryCustomizedData
	customizedDataFlag bool
	desc               string
	descFlag           bool
	title              string
	titleFlag          bool
	awardTime          int
	awardTimeFlag      bool
}

func NewWebsiteDeliveryAwardBuilder() *WebsiteDeliveryAwardBuilder {
	builder := &WebsiteDeliveryAwardBuilder{}
	return builder
}

func (builder *WebsiteDeliveryAwardBuilder) CustomizedData(customizedData []*WebsiteDeliveryCustomizedData) *WebsiteDeliveryAwardBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}
func (builder *WebsiteDeliveryAwardBuilder) Desc(desc string) *WebsiteDeliveryAwardBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}
func (builder *WebsiteDeliveryAwardBuilder) Title(title string) *WebsiteDeliveryAwardBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}
func (builder *WebsiteDeliveryAwardBuilder) AwardTime(awardTime int) *WebsiteDeliveryAwardBuilder {
	builder.awardTime = awardTime
	builder.awardTimeFlag = true
	return builder
}

func (builder *WebsiteDeliveryAwardBuilder) Build() *WebsiteDeliveryAward {
	req := &WebsiteDeliveryAward{}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.awardTimeFlag {
		req.AwardTime = &builder.awardTime

	}
	return req
}

// builder结束

type WebsiteDeliveryBasicInfo struct {
	NationalityId         *string                          `json:"nationality_id,omitempty"`
	StartWorkTime         *int                             `json:"start_work_time,omitempty"`
	CurrentHomeAddress    *string                          `json:"current_home_address,omitempty"`
	HometownCityCode      *string                          `json:"hometown_city_code,omitempty"`
	MobileCountryCode     *string                          `json:"mobile_country_code,omitempty"`
	Identification        *WebsiteDeliveryIdentification   `json:"identification,omitempty"`
	MaritalStatus         *int                             `json:"marital_status,omitempty"`
	Mobile                *string                          `json:"mobile,omitempty"`
	CurrentCityCode       *string                          `json:"current_city_code,omitempty"`
	ExperienceYears       *int                             `json:"experience_years,omitempty"`
	Gender                *int                             `json:"gender,omitempty"`
	Birthday              *int                             `json:"birthday,omitempty"`
	Name                  *string                          `json:"name,omitempty"`
	PreferredCityCodeList []string                         `json:"preferred_city_code_list,omitempty"`
	ResumeSourceId        *string                          `json:"resume_source_id,omitempty"`
	Age                   *int                             `json:"age,omitempty"`
	CustomizedData        []*WebsiteDeliveryCustomizedData `json:"customized_data,omitempty"`
	Email                 *string                          `json:"email,omitempty"`
}

// builder开始
type WebsiteDeliveryBasicInfoBuilder struct {
	nationalityId             string
	nationalityIdFlag         bool
	startWorkTime             int
	startWorkTimeFlag         bool
	currentHomeAddress        string
	currentHomeAddressFlag    bool
	hometownCityCode          string
	hometownCityCodeFlag      bool
	mobileCountryCode         string
	mobileCountryCodeFlag     bool
	identification            *WebsiteDeliveryIdentification
	identificationFlag        bool
	maritalStatus             int
	maritalStatusFlag         bool
	mobile                    string
	mobileFlag                bool
	currentCityCode           string
	currentCityCodeFlag       bool
	experienceYears           int
	experienceYearsFlag       bool
	gender                    int
	genderFlag                bool
	birthday                  int
	birthdayFlag              bool
	name                      string
	nameFlag                  bool
	preferredCityCodeList     []string
	preferredCityCodeListFlag bool
	resumeSourceId            string
	resumeSourceIdFlag        bool
	age                       int
	ageFlag                   bool
	customizedData            []*WebsiteDeliveryCustomizedData
	customizedDataFlag        bool
	email                     string
	emailFlag                 bool
}

func NewWebsiteDeliveryBasicInfoBuilder() *WebsiteDeliveryBasicInfoBuilder {
	builder := &WebsiteDeliveryBasicInfoBuilder{}
	return builder
}

func (builder *WebsiteDeliveryBasicInfoBuilder) NationalityId(nationalityId string) *WebsiteDeliveryBasicInfoBuilder {
	builder.nationalityId = nationalityId
	builder.nationalityIdFlag = true
	return builder
}
func (builder *WebsiteDeliveryBasicInfoBuilder) StartWorkTime(startWorkTime int) *WebsiteDeliveryBasicInfoBuilder {
	builder.startWorkTime = startWorkTime
	builder.startWorkTimeFlag = true
	return builder
}
func (builder *WebsiteDeliveryBasicInfoBuilder) CurrentHomeAddress(currentHomeAddress string) *WebsiteDeliveryBasicInfoBuilder {
	builder.currentHomeAddress = currentHomeAddress
	builder.currentHomeAddressFlag = true
	return builder
}
func (builder *WebsiteDeliveryBasicInfoBuilder) HometownCityCode(hometownCityCode string) *WebsiteDeliveryBasicInfoBuilder {
	builder.hometownCityCode = hometownCityCode
	builder.hometownCityCodeFlag = true
	return builder
}
func (builder *WebsiteDeliveryBasicInfoBuilder) MobileCountryCode(mobileCountryCode string) *WebsiteDeliveryBasicInfoBuilder {
	builder.mobileCountryCode = mobileCountryCode
	builder.mobileCountryCodeFlag = true
	return builder
}
func (builder *WebsiteDeliveryBasicInfoBuilder) Identification(identification *WebsiteDeliveryIdentification) *WebsiteDeliveryBasicInfoBuilder {
	builder.identification = identification
	builder.identificationFlag = true
	return builder
}
func (builder *WebsiteDeliveryBasicInfoBuilder) MaritalStatus(maritalStatus int) *WebsiteDeliveryBasicInfoBuilder {
	builder.maritalStatus = maritalStatus
	builder.maritalStatusFlag = true
	return builder
}
func (builder *WebsiteDeliveryBasicInfoBuilder) Mobile(mobile string) *WebsiteDeliveryBasicInfoBuilder {
	builder.mobile = mobile
	builder.mobileFlag = true
	return builder
}
func (builder *WebsiteDeliveryBasicInfoBuilder) CurrentCityCode(currentCityCode string) *WebsiteDeliveryBasicInfoBuilder {
	builder.currentCityCode = currentCityCode
	builder.currentCityCodeFlag = true
	return builder
}
func (builder *WebsiteDeliveryBasicInfoBuilder) ExperienceYears(experienceYears int) *WebsiteDeliveryBasicInfoBuilder {
	builder.experienceYears = experienceYears
	builder.experienceYearsFlag = true
	return builder
}
func (builder *WebsiteDeliveryBasicInfoBuilder) Gender(gender int) *WebsiteDeliveryBasicInfoBuilder {
	builder.gender = gender
	builder.genderFlag = true
	return builder
}
func (builder *WebsiteDeliveryBasicInfoBuilder) Birthday(birthday int) *WebsiteDeliveryBasicInfoBuilder {
	builder.birthday = birthday
	builder.birthdayFlag = true
	return builder
}
func (builder *WebsiteDeliveryBasicInfoBuilder) Name(name string) *WebsiteDeliveryBasicInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *WebsiteDeliveryBasicInfoBuilder) PreferredCityCodeList(preferredCityCodeList []string) *WebsiteDeliveryBasicInfoBuilder {
	builder.preferredCityCodeList = preferredCityCodeList
	builder.preferredCityCodeListFlag = true
	return builder
}
func (builder *WebsiteDeliveryBasicInfoBuilder) ResumeSourceId(resumeSourceId string) *WebsiteDeliveryBasicInfoBuilder {
	builder.resumeSourceId = resumeSourceId
	builder.resumeSourceIdFlag = true
	return builder
}
func (builder *WebsiteDeliveryBasicInfoBuilder) Age(age int) *WebsiteDeliveryBasicInfoBuilder {
	builder.age = age
	builder.ageFlag = true
	return builder
}
func (builder *WebsiteDeliveryBasicInfoBuilder) CustomizedData(customizedData []*WebsiteDeliveryCustomizedData) *WebsiteDeliveryBasicInfoBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}
func (builder *WebsiteDeliveryBasicInfoBuilder) Email(email string) *WebsiteDeliveryBasicInfoBuilder {
	builder.email = email
	builder.emailFlag = true
	return builder
}

func (builder *WebsiteDeliveryBasicInfoBuilder) Build() *WebsiteDeliveryBasicInfo {
	req := &WebsiteDeliveryBasicInfo{}
	if builder.nationalityIdFlag {
		req.NationalityId = &builder.nationalityId

	}
	if builder.startWorkTimeFlag {
		req.StartWorkTime = &builder.startWorkTime

	}
	if builder.currentHomeAddressFlag {
		req.CurrentHomeAddress = &builder.currentHomeAddress

	}
	if builder.hometownCityCodeFlag {
		req.HometownCityCode = &builder.hometownCityCode

	}
	if builder.mobileCountryCodeFlag {
		req.MobileCountryCode = &builder.mobileCountryCode

	}
	if builder.identificationFlag {
		req.Identification = builder.identification
	}
	if builder.maritalStatusFlag {
		req.MaritalStatus = &builder.maritalStatus

	}
	if builder.mobileFlag {
		req.Mobile = &builder.mobile

	}
	if builder.currentCityCodeFlag {
		req.CurrentCityCode = &builder.currentCityCode

	}
	if builder.experienceYearsFlag {
		req.ExperienceYears = &builder.experienceYears

	}
	if builder.genderFlag {
		req.Gender = &builder.gender

	}
	if builder.birthdayFlag {
		req.Birthday = &builder.birthday

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.preferredCityCodeListFlag {
		req.PreferredCityCodeList = builder.preferredCityCodeList
	}
	if builder.resumeSourceIdFlag {
		req.ResumeSourceId = &builder.resumeSourceId

	}
	if builder.ageFlag {
		req.Age = &builder.age

	}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	if builder.emailFlag {
		req.Email = &builder.email

	}
	return req
}

// builder结束

type WebsiteDeliveryCareer struct {
	Desc           *string                          `json:"desc,omitempty"`
	EndTime        *int                             `json:"end_time,omitempty"`
	StartTime      *int                             `json:"start_time,omitempty"`
	Title          *string                          `json:"title,omitempty"`
	Company        *string                          `json:"company,omitempty"`
	CustomizedData []*WebsiteDeliveryCustomizedData `json:"customized_data,omitempty"`
}

// builder开始
type WebsiteDeliveryCareerBuilder struct {
	desc               string
	descFlag           bool
	endTime            int
	endTimeFlag        bool
	startTime          int
	startTimeFlag      bool
	title              string
	titleFlag          bool
	company            string
	companyFlag        bool
	customizedData     []*WebsiteDeliveryCustomizedData
	customizedDataFlag bool
}

func NewWebsiteDeliveryCareerBuilder() *WebsiteDeliveryCareerBuilder {
	builder := &WebsiteDeliveryCareerBuilder{}
	return builder
}

func (builder *WebsiteDeliveryCareerBuilder) Desc(desc string) *WebsiteDeliveryCareerBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}
func (builder *WebsiteDeliveryCareerBuilder) EndTime(endTime int) *WebsiteDeliveryCareerBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}
func (builder *WebsiteDeliveryCareerBuilder) StartTime(startTime int) *WebsiteDeliveryCareerBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}
func (builder *WebsiteDeliveryCareerBuilder) Title(title string) *WebsiteDeliveryCareerBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}
func (builder *WebsiteDeliveryCareerBuilder) Company(company string) *WebsiteDeliveryCareerBuilder {
	builder.company = company
	builder.companyFlag = true
	return builder
}
func (builder *WebsiteDeliveryCareerBuilder) CustomizedData(customizedData []*WebsiteDeliveryCustomizedData) *WebsiteDeliveryCareerBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}

func (builder *WebsiteDeliveryCareerBuilder) Build() *WebsiteDeliveryCareer {
	req := &WebsiteDeliveryCareer{}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.companyFlag {
		req.Company = &builder.company

	}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	return req
}

// builder结束

type WebsiteDeliveryCertificate struct {
	CustomizedData []*WebsiteDeliveryCustomizedData `json:"customized_data,omitempty"`
	Desc           *string                          `json:"desc,omitempty"`
	Name           *string                          `json:"name,omitempty"`
}

// builder开始
type WebsiteDeliveryCertificateBuilder struct {
	customizedData     []*WebsiteDeliveryCustomizedData
	customizedDataFlag bool
	desc               string
	descFlag           bool
	name               string
	nameFlag           bool
}

func NewWebsiteDeliveryCertificateBuilder() *WebsiteDeliveryCertificateBuilder {
	builder := &WebsiteDeliveryCertificateBuilder{}
	return builder
}

func (builder *WebsiteDeliveryCertificateBuilder) CustomizedData(customizedData []*WebsiteDeliveryCustomizedData) *WebsiteDeliveryCertificateBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}
func (builder *WebsiteDeliveryCertificateBuilder) Desc(desc string) *WebsiteDeliveryCertificateBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}
func (builder *WebsiteDeliveryCertificateBuilder) Name(name string) *WebsiteDeliveryCertificateBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *WebsiteDeliveryCertificateBuilder) Build() *WebsiteDeliveryCertificate {
	req := &WebsiteDeliveryCertificate{}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	return req
}

// builder结束

type WebsiteDeliveryCompetition struct {
	CustomizedData []*WebsiteDeliveryCustomizedData `json:"customized_data,omitempty"`
	Desc           *string                          `json:"desc,omitempty"`
	Name           *string                          `json:"name,omitempty"`
}

// builder开始
type WebsiteDeliveryCompetitionBuilder struct {
	customizedData     []*WebsiteDeliveryCustomizedData
	customizedDataFlag bool
	desc               string
	descFlag           bool
	name               string
	nameFlag           bool
}

func NewWebsiteDeliveryCompetitionBuilder() *WebsiteDeliveryCompetitionBuilder {
	builder := &WebsiteDeliveryCompetitionBuilder{}
	return builder
}

func (builder *WebsiteDeliveryCompetitionBuilder) CustomizedData(customizedData []*WebsiteDeliveryCustomizedData) *WebsiteDeliveryCompetitionBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}
func (builder *WebsiteDeliveryCompetitionBuilder) Desc(desc string) *WebsiteDeliveryCompetitionBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}
func (builder *WebsiteDeliveryCompetitionBuilder) Name(name string) *WebsiteDeliveryCompetitionBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *WebsiteDeliveryCompetitionBuilder) Build() *WebsiteDeliveryCompetition {
	req := &WebsiteDeliveryCompetition{}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	return req
}

// builder结束

type WebsiteDeliveryCustomizedData struct {
	ObjectId *string `json:"object_id,omitempty"`
	Value    *string `json:"value,omitempty"`
}

// builder开始
type WebsiteDeliveryCustomizedDataBuilder struct {
	objectId     string
	objectIdFlag bool
	value        string
	valueFlag    bool
}

func NewWebsiteDeliveryCustomizedDataBuilder() *WebsiteDeliveryCustomizedDataBuilder {
	builder := &WebsiteDeliveryCustomizedDataBuilder{}
	return builder
}

func (builder *WebsiteDeliveryCustomizedDataBuilder) ObjectId(objectId string) *WebsiteDeliveryCustomizedDataBuilder {
	builder.objectId = objectId
	builder.objectIdFlag = true
	return builder
}
func (builder *WebsiteDeliveryCustomizedDataBuilder) Value(value string) *WebsiteDeliveryCustomizedDataBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}

func (builder *WebsiteDeliveryCustomizedDataBuilder) Build() *WebsiteDeliveryCustomizedData {
	req := &WebsiteDeliveryCustomizedData{}
	if builder.objectIdFlag {
		req.ObjectId = &builder.objectId

	}
	if builder.valueFlag {
		req.Value = &builder.value

	}
	return req
}

// builder结束

type WebsiteDeliveryCustomizedDataParent struct {
	ObjectId *string                          `json:"object_id,omitempty"`
	Children []*WebsiteDeliveryCustomizedData `json:"children,omitempty"`
}

// builder开始
type WebsiteDeliveryCustomizedDataParentBuilder struct {
	objectId     string
	objectIdFlag bool
	children     []*WebsiteDeliveryCustomizedData
	childrenFlag bool
}

func NewWebsiteDeliveryCustomizedDataParentBuilder() *WebsiteDeliveryCustomizedDataParentBuilder {
	builder := &WebsiteDeliveryCustomizedDataParentBuilder{}
	return builder
}

func (builder *WebsiteDeliveryCustomizedDataParentBuilder) ObjectId(objectId string) *WebsiteDeliveryCustomizedDataParentBuilder {
	builder.objectId = objectId
	builder.objectIdFlag = true
	return builder
}
func (builder *WebsiteDeliveryCustomizedDataParentBuilder) Children(children []*WebsiteDeliveryCustomizedData) *WebsiteDeliveryCustomizedDataParentBuilder {
	builder.children = children
	builder.childrenFlag = true
	return builder
}

func (builder *WebsiteDeliveryCustomizedDataParentBuilder) Build() *WebsiteDeliveryCustomizedDataParent {
	req := &WebsiteDeliveryCustomizedDataParent{}
	if builder.objectIdFlag {
		req.ObjectId = &builder.objectId

	}
	if builder.childrenFlag {
		req.Children = builder.children
	}
	return req
}

// builder结束

type WebsiteDeliveryDto struct {
	ApplicationId  *string `json:"application_id,omitempty"`
	Id             *string `json:"id,omitempty"`
	JobId          *string `json:"job_id,omitempty"`
	JobPostId      *string `json:"job_post_id,omitempty"`
	PortalResumeId *string `json:"portal_resume_id,omitempty"`
	UserId         *string `json:"user_id,omitempty"`
	TalentId       *string `json:"talent_id,omitempty"`
}

// builder开始
type WebsiteDeliveryDtoBuilder struct {
	applicationId      string
	applicationIdFlag  bool
	id                 string
	idFlag             bool
	jobId              string
	jobIdFlag          bool
	jobPostId          string
	jobPostIdFlag      bool
	portalResumeId     string
	portalResumeIdFlag bool
	userId             string
	userIdFlag         bool
	talentId           string
	talentIdFlag       bool
}

func NewWebsiteDeliveryDtoBuilder() *WebsiteDeliveryDtoBuilder {
	builder := &WebsiteDeliveryDtoBuilder{}
	return builder
}

func (builder *WebsiteDeliveryDtoBuilder) ApplicationId(applicationId string) *WebsiteDeliveryDtoBuilder {
	builder.applicationId = applicationId
	builder.applicationIdFlag = true
	return builder
}
func (builder *WebsiteDeliveryDtoBuilder) Id(id string) *WebsiteDeliveryDtoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *WebsiteDeliveryDtoBuilder) JobId(jobId string) *WebsiteDeliveryDtoBuilder {
	builder.jobId = jobId
	builder.jobIdFlag = true
	return builder
}
func (builder *WebsiteDeliveryDtoBuilder) JobPostId(jobPostId string) *WebsiteDeliveryDtoBuilder {
	builder.jobPostId = jobPostId
	builder.jobPostIdFlag = true
	return builder
}
func (builder *WebsiteDeliveryDtoBuilder) PortalResumeId(portalResumeId string) *WebsiteDeliveryDtoBuilder {
	builder.portalResumeId = portalResumeId
	builder.portalResumeIdFlag = true
	return builder
}
func (builder *WebsiteDeliveryDtoBuilder) UserId(userId string) *WebsiteDeliveryDtoBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}
func (builder *WebsiteDeliveryDtoBuilder) TalentId(talentId string) *WebsiteDeliveryDtoBuilder {
	builder.talentId = talentId
	builder.talentIdFlag = true
	return builder
}

func (builder *WebsiteDeliveryDtoBuilder) Build() *WebsiteDeliveryDto {
	req := &WebsiteDeliveryDto{}
	if builder.applicationIdFlag {
		req.ApplicationId = &builder.applicationId

	}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.jobIdFlag {
		req.JobId = &builder.jobId

	}
	if builder.jobPostIdFlag {
		req.JobPostId = &builder.jobPostId

	}
	if builder.portalResumeIdFlag {
		req.PortalResumeId = &builder.portalResumeId

	}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.talentIdFlag {
		req.TalentId = &builder.talentId

	}
	return req
}

// builder结束

type WebsiteDeliveryEducation struct {
	EducationType   *int                             `json:"education_type,omitempty"`
	EndTime         *int                             `json:"end_time,omitempty"`
	FieldOfStudy    *string                          `json:"field_of_study,omitempty"`
	School          *string                          `json:"school,omitempty"`
	StartTime       *int                             `json:"start_time,omitempty"`
	AcademicRanking *int                             `json:"academic_ranking,omitempty"`
	CustomizedData  []*WebsiteDeliveryCustomizedData `json:"customized_data,omitempty"`
	Degree          *int                             `json:"degree,omitempty"`
}

// builder开始
type WebsiteDeliveryEducationBuilder struct {
	educationType       int
	educationTypeFlag   bool
	endTime             int
	endTimeFlag         bool
	fieldOfStudy        string
	fieldOfStudyFlag    bool
	school              string
	schoolFlag          bool
	startTime           int
	startTimeFlag       bool
	academicRanking     int
	academicRankingFlag bool
	customizedData      []*WebsiteDeliveryCustomizedData
	customizedDataFlag  bool
	degree              int
	degreeFlag          bool
}

func NewWebsiteDeliveryEducationBuilder() *WebsiteDeliveryEducationBuilder {
	builder := &WebsiteDeliveryEducationBuilder{}
	return builder
}

func (builder *WebsiteDeliveryEducationBuilder) EducationType(educationType int) *WebsiteDeliveryEducationBuilder {
	builder.educationType = educationType
	builder.educationTypeFlag = true
	return builder
}
func (builder *WebsiteDeliveryEducationBuilder) EndTime(endTime int) *WebsiteDeliveryEducationBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}
func (builder *WebsiteDeliveryEducationBuilder) FieldOfStudy(fieldOfStudy string) *WebsiteDeliveryEducationBuilder {
	builder.fieldOfStudy = fieldOfStudy
	builder.fieldOfStudyFlag = true
	return builder
}
func (builder *WebsiteDeliveryEducationBuilder) School(school string) *WebsiteDeliveryEducationBuilder {
	builder.school = school
	builder.schoolFlag = true
	return builder
}
func (builder *WebsiteDeliveryEducationBuilder) StartTime(startTime int) *WebsiteDeliveryEducationBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}
func (builder *WebsiteDeliveryEducationBuilder) AcademicRanking(academicRanking int) *WebsiteDeliveryEducationBuilder {
	builder.academicRanking = academicRanking
	builder.academicRankingFlag = true
	return builder
}
func (builder *WebsiteDeliveryEducationBuilder) CustomizedData(customizedData []*WebsiteDeliveryCustomizedData) *WebsiteDeliveryEducationBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}
func (builder *WebsiteDeliveryEducationBuilder) Degree(degree int) *WebsiteDeliveryEducationBuilder {
	builder.degree = degree
	builder.degreeFlag = true
	return builder
}

func (builder *WebsiteDeliveryEducationBuilder) Build() *WebsiteDeliveryEducation {
	req := &WebsiteDeliveryEducation{}
	if builder.educationTypeFlag {
		req.EducationType = &builder.educationType

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.fieldOfStudyFlag {
		req.FieldOfStudy = &builder.fieldOfStudy

	}
	if builder.schoolFlag {
		req.School = &builder.school

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.academicRankingFlag {
		req.AcademicRanking = &builder.academicRanking

	}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	if builder.degreeFlag {
		req.Degree = &builder.degree

	}
	return req
}

// builder结束

type WebsiteDeliveryIdentification struct {
	IdentificationNumber *string `json:"identification_number,omitempty"`
	IdentificationType   *int    `json:"identification_type,omitempty"`
}

// builder开始
type WebsiteDeliveryIdentificationBuilder struct {
	identificationNumber     string
	identificationNumberFlag bool
	identificationType       int
	identificationTypeFlag   bool
}

func NewWebsiteDeliveryIdentificationBuilder() *WebsiteDeliveryIdentificationBuilder {
	builder := &WebsiteDeliveryIdentificationBuilder{}
	return builder
}

func (builder *WebsiteDeliveryIdentificationBuilder) IdentificationNumber(identificationNumber string) *WebsiteDeliveryIdentificationBuilder {
	builder.identificationNumber = identificationNumber
	builder.identificationNumberFlag = true
	return builder
}
func (builder *WebsiteDeliveryIdentificationBuilder) IdentificationType(identificationType int) *WebsiteDeliveryIdentificationBuilder {
	builder.identificationType = identificationType
	builder.identificationTypeFlag = true
	return builder
}

func (builder *WebsiteDeliveryIdentificationBuilder) Build() *WebsiteDeliveryIdentification {
	req := &WebsiteDeliveryIdentification{}
	if builder.identificationNumberFlag {
		req.IdentificationNumber = &builder.identificationNumber

	}
	if builder.identificationTypeFlag {
		req.IdentificationType = &builder.identificationType

	}
	return req
}

// builder结束

type WebsiteDeliveryInternship struct {
	Desc           *string                          `json:"desc,omitempty"`
	EndTime        *int                             `json:"end_time,omitempty"`
	StartTime      *int                             `json:"start_time,omitempty"`
	Title          *string                          `json:"title,omitempty"`
	Company        *string                          `json:"company,omitempty"`
	CustomizedData []*WebsiteDeliveryCustomizedData `json:"customized_data,omitempty"`
}

// builder开始
type WebsiteDeliveryInternshipBuilder struct {
	desc               string
	descFlag           bool
	endTime            int
	endTimeFlag        bool
	startTime          int
	startTimeFlag      bool
	title              string
	titleFlag          bool
	company            string
	companyFlag        bool
	customizedData     []*WebsiteDeliveryCustomizedData
	customizedDataFlag bool
}

func NewWebsiteDeliveryInternshipBuilder() *WebsiteDeliveryInternshipBuilder {
	builder := &WebsiteDeliveryInternshipBuilder{}
	return builder
}

func (builder *WebsiteDeliveryInternshipBuilder) Desc(desc string) *WebsiteDeliveryInternshipBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}
func (builder *WebsiteDeliveryInternshipBuilder) EndTime(endTime int) *WebsiteDeliveryInternshipBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}
func (builder *WebsiteDeliveryInternshipBuilder) StartTime(startTime int) *WebsiteDeliveryInternshipBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}
func (builder *WebsiteDeliveryInternshipBuilder) Title(title string) *WebsiteDeliveryInternshipBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}
func (builder *WebsiteDeliveryInternshipBuilder) Company(company string) *WebsiteDeliveryInternshipBuilder {
	builder.company = company
	builder.companyFlag = true
	return builder
}
func (builder *WebsiteDeliveryInternshipBuilder) CustomizedData(customizedData []*WebsiteDeliveryCustomizedData) *WebsiteDeliveryInternshipBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}

func (builder *WebsiteDeliveryInternshipBuilder) Build() *WebsiteDeliveryInternship {
	req := &WebsiteDeliveryInternship{}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.companyFlag {
		req.Company = &builder.company

	}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	return req
}

// builder结束

type WebsiteDeliveryLanguage struct {
	CustomizedData []*WebsiteDeliveryCustomizedData `json:"customized_data,omitempty"`
	Language       *int                             `json:"language,omitempty"`
	Proficiency    *int                             `json:"proficiency,omitempty"`
}

// builder开始
type WebsiteDeliveryLanguageBuilder struct {
	customizedData     []*WebsiteDeliveryCustomizedData
	customizedDataFlag bool
	language           int
	languageFlag       bool
	proficiency        int
	proficiencyFlag    bool
}

func NewWebsiteDeliveryLanguageBuilder() *WebsiteDeliveryLanguageBuilder {
	builder := &WebsiteDeliveryLanguageBuilder{}
	return builder
}

func (builder *WebsiteDeliveryLanguageBuilder) CustomizedData(customizedData []*WebsiteDeliveryCustomizedData) *WebsiteDeliveryLanguageBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}
func (builder *WebsiteDeliveryLanguageBuilder) Language(language int) *WebsiteDeliveryLanguageBuilder {
	builder.language = language
	builder.languageFlag = true
	return builder
}
func (builder *WebsiteDeliveryLanguageBuilder) Proficiency(proficiency int) *WebsiteDeliveryLanguageBuilder {
	builder.proficiency = proficiency
	builder.proficiencyFlag = true
	return builder
}

func (builder *WebsiteDeliveryLanguageBuilder) Build() *WebsiteDeliveryLanguage {
	req := &WebsiteDeliveryLanguage{}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	if builder.languageFlag {
		req.Language = &builder.language

	}
	if builder.proficiencyFlag {
		req.Proficiency = &builder.proficiency

	}
	return req
}

// builder结束

type WebsiteDeliveryProject struct {
	CustomizedData []*WebsiteDeliveryCustomizedData `json:"customized_data,omitempty"`
	Desc           *string                          `json:"desc,omitempty"`
	EndTime        *int                             `json:"end_time,omitempty"`
	Link           *string                          `json:"link,omitempty"`
	Name           *string                          `json:"name,omitempty"`
	Role           *string                          `json:"role,omitempty"`
	StartTime      *int                             `json:"start_time,omitempty"`
}

// builder开始
type WebsiteDeliveryProjectBuilder struct {
	customizedData     []*WebsiteDeliveryCustomizedData
	customizedDataFlag bool
	desc               string
	descFlag           bool
	endTime            int
	endTimeFlag        bool
	link               string
	linkFlag           bool
	name               string
	nameFlag           bool
	role               string
	roleFlag           bool
	startTime          int
	startTimeFlag      bool
}

func NewWebsiteDeliveryProjectBuilder() *WebsiteDeliveryProjectBuilder {
	builder := &WebsiteDeliveryProjectBuilder{}
	return builder
}

func (builder *WebsiteDeliveryProjectBuilder) CustomizedData(customizedData []*WebsiteDeliveryCustomizedData) *WebsiteDeliveryProjectBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}
func (builder *WebsiteDeliveryProjectBuilder) Desc(desc string) *WebsiteDeliveryProjectBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}
func (builder *WebsiteDeliveryProjectBuilder) EndTime(endTime int) *WebsiteDeliveryProjectBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}
func (builder *WebsiteDeliveryProjectBuilder) Link(link string) *WebsiteDeliveryProjectBuilder {
	builder.link = link
	builder.linkFlag = true
	return builder
}
func (builder *WebsiteDeliveryProjectBuilder) Name(name string) *WebsiteDeliveryProjectBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *WebsiteDeliveryProjectBuilder) Role(role string) *WebsiteDeliveryProjectBuilder {
	builder.role = role
	builder.roleFlag = true
	return builder
}
func (builder *WebsiteDeliveryProjectBuilder) StartTime(startTime int) *WebsiteDeliveryProjectBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}

func (builder *WebsiteDeliveryProjectBuilder) Build() *WebsiteDeliveryProject {
	req := &WebsiteDeliveryProject{}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.linkFlag {
		req.Link = &builder.link

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.roleFlag {
		req.Role = &builder.role

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	return req
}

// builder结束

type WebsiteDeliveryResume struct {
	InternshipList     []*WebsiteDeliveryInternship           `json:"internship_list,omitempty"`
	BasicInfo          *WebsiteDeliveryBasicInfo              `json:"basic_info,omitempty"`
	EducationList      []*WebsiteDeliveryEducation            `json:"education_list,omitempty"`
	SelfEvaluation     *WebsiteDeliverySelfEvaluation         `json:"self_evaluation,omitempty"`
	CareerList         []*WebsiteDeliveryCareer               `json:"career_list,omitempty"`
	CustomizedData     []*WebsiteDeliveryCustomizedDataParent `json:"customized_data,omitempty"`
	ResumeAttachmentId *string                                `json:"resume_attachment_id,omitempty"`
	SnsList            []*WebsiteDeliverySns                  `json:"sns_list,omitempty"`
	WorksList          []*WebsiteDeliveryWorks                `json:"works_list,omitempty"`
	AwardList          []*WebsiteDeliveryAward                `json:"award_list,omitempty"`
	ProjectList        []*WebsiteDeliveryProject              `json:"project_list,omitempty"`
	LanguageList       []*WebsiteDeliveryLanguage             `json:"language_list,omitempty"`
}

// builder开始
type WebsiteDeliveryResumeBuilder struct {
	internshipList         []*WebsiteDeliveryInternship
	internshipListFlag     bool
	basicInfo              *WebsiteDeliveryBasicInfo
	basicInfoFlag          bool
	educationList          []*WebsiteDeliveryEducation
	educationListFlag      bool
	selfEvaluation         *WebsiteDeliverySelfEvaluation
	selfEvaluationFlag     bool
	careerList             []*WebsiteDeliveryCareer
	careerListFlag         bool
	customizedData         []*WebsiteDeliveryCustomizedDataParent
	customizedDataFlag     bool
	resumeAttachmentId     string
	resumeAttachmentIdFlag bool
	snsList                []*WebsiteDeliverySns
	snsListFlag            bool
	worksList              []*WebsiteDeliveryWorks
	worksListFlag          bool
	awardList              []*WebsiteDeliveryAward
	awardListFlag          bool
	projectList            []*WebsiteDeliveryProject
	projectListFlag        bool
	languageList           []*WebsiteDeliveryLanguage
	languageListFlag       bool
}

func NewWebsiteDeliveryResumeBuilder() *WebsiteDeliveryResumeBuilder {
	builder := &WebsiteDeliveryResumeBuilder{}
	return builder
}

func (builder *WebsiteDeliveryResumeBuilder) InternshipList(internshipList []*WebsiteDeliveryInternship) *WebsiteDeliveryResumeBuilder {
	builder.internshipList = internshipList
	builder.internshipListFlag = true
	return builder
}
func (builder *WebsiteDeliveryResumeBuilder) BasicInfo(basicInfo *WebsiteDeliveryBasicInfo) *WebsiteDeliveryResumeBuilder {
	builder.basicInfo = basicInfo
	builder.basicInfoFlag = true
	return builder
}
func (builder *WebsiteDeliveryResumeBuilder) EducationList(educationList []*WebsiteDeliveryEducation) *WebsiteDeliveryResumeBuilder {
	builder.educationList = educationList
	builder.educationListFlag = true
	return builder
}
func (builder *WebsiteDeliveryResumeBuilder) SelfEvaluation(selfEvaluation *WebsiteDeliverySelfEvaluation) *WebsiteDeliveryResumeBuilder {
	builder.selfEvaluation = selfEvaluation
	builder.selfEvaluationFlag = true
	return builder
}
func (builder *WebsiteDeliveryResumeBuilder) CareerList(careerList []*WebsiteDeliveryCareer) *WebsiteDeliveryResumeBuilder {
	builder.careerList = careerList
	builder.careerListFlag = true
	return builder
}
func (builder *WebsiteDeliveryResumeBuilder) CustomizedData(customizedData []*WebsiteDeliveryCustomizedDataParent) *WebsiteDeliveryResumeBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}
func (builder *WebsiteDeliveryResumeBuilder) ResumeAttachmentId(resumeAttachmentId string) *WebsiteDeliveryResumeBuilder {
	builder.resumeAttachmentId = resumeAttachmentId
	builder.resumeAttachmentIdFlag = true
	return builder
}
func (builder *WebsiteDeliveryResumeBuilder) SnsList(snsList []*WebsiteDeliverySns) *WebsiteDeliveryResumeBuilder {
	builder.snsList = snsList
	builder.snsListFlag = true
	return builder
}
func (builder *WebsiteDeliveryResumeBuilder) WorksList(worksList []*WebsiteDeliveryWorks) *WebsiteDeliveryResumeBuilder {
	builder.worksList = worksList
	builder.worksListFlag = true
	return builder
}
func (builder *WebsiteDeliveryResumeBuilder) AwardList(awardList []*WebsiteDeliveryAward) *WebsiteDeliveryResumeBuilder {
	builder.awardList = awardList
	builder.awardListFlag = true
	return builder
}
func (builder *WebsiteDeliveryResumeBuilder) ProjectList(projectList []*WebsiteDeliveryProject) *WebsiteDeliveryResumeBuilder {
	builder.projectList = projectList
	builder.projectListFlag = true
	return builder
}
func (builder *WebsiteDeliveryResumeBuilder) LanguageList(languageList []*WebsiteDeliveryLanguage) *WebsiteDeliveryResumeBuilder {
	builder.languageList = languageList
	builder.languageListFlag = true
	return builder
}

func (builder *WebsiteDeliveryResumeBuilder) Build() *WebsiteDeliveryResume {
	req := &WebsiteDeliveryResume{}
	if builder.internshipListFlag {
		req.InternshipList = builder.internshipList
	}
	if builder.basicInfoFlag {
		req.BasicInfo = builder.basicInfo
	}
	if builder.educationListFlag {
		req.EducationList = builder.educationList
	}
	if builder.selfEvaluationFlag {
		req.SelfEvaluation = builder.selfEvaluation
	}
	if builder.careerListFlag {
		req.CareerList = builder.careerList
	}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	if builder.resumeAttachmentIdFlag {
		req.ResumeAttachmentId = &builder.resumeAttachmentId

	}
	if builder.snsListFlag {
		req.SnsList = builder.snsList
	}
	if builder.worksListFlag {
		req.WorksList = builder.worksList
	}
	if builder.awardListFlag {
		req.AwardList = builder.awardList
	}
	if builder.projectListFlag {
		req.ProjectList = builder.projectList
	}
	if builder.languageListFlag {
		req.LanguageList = builder.languageList
	}
	return req
}

// builder结束

type WebsiteDeliverySelfEvaluation struct {
	Content        *string                          `json:"content,omitempty"`
	CustomizedData []*WebsiteDeliveryCustomizedData `json:"customized_data,omitempty"`
}

// builder开始
type WebsiteDeliverySelfEvaluationBuilder struct {
	content            string
	contentFlag        bool
	customizedData     []*WebsiteDeliveryCustomizedData
	customizedDataFlag bool
}

func NewWebsiteDeliverySelfEvaluationBuilder() *WebsiteDeliverySelfEvaluationBuilder {
	builder := &WebsiteDeliverySelfEvaluationBuilder{}
	return builder
}

func (builder *WebsiteDeliverySelfEvaluationBuilder) Content(content string) *WebsiteDeliverySelfEvaluationBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}
func (builder *WebsiteDeliverySelfEvaluationBuilder) CustomizedData(customizedData []*WebsiteDeliveryCustomizedData) *WebsiteDeliverySelfEvaluationBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}

func (builder *WebsiteDeliverySelfEvaluationBuilder) Build() *WebsiteDeliverySelfEvaluation {
	req := &WebsiteDeliverySelfEvaluation{}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	return req
}

// builder结束

type WebsiteDeliverySns struct {
	SnsType        *int                             `json:"sns_type,omitempty"`
	CustomizedData []*WebsiteDeliveryCustomizedData `json:"customized_data,omitempty"`
	Link           *string                          `json:"link,omitempty"`
}

// builder开始
type WebsiteDeliverySnsBuilder struct {
	snsType            int
	snsTypeFlag        bool
	customizedData     []*WebsiteDeliveryCustomizedData
	customizedDataFlag bool
	link               string
	linkFlag           bool
}

func NewWebsiteDeliverySnsBuilder() *WebsiteDeliverySnsBuilder {
	builder := &WebsiteDeliverySnsBuilder{}
	return builder
}

func (builder *WebsiteDeliverySnsBuilder) SnsType(snsType int) *WebsiteDeliverySnsBuilder {
	builder.snsType = snsType
	builder.snsTypeFlag = true
	return builder
}
func (builder *WebsiteDeliverySnsBuilder) CustomizedData(customizedData []*WebsiteDeliveryCustomizedData) *WebsiteDeliverySnsBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}
func (builder *WebsiteDeliverySnsBuilder) Link(link string) *WebsiteDeliverySnsBuilder {
	builder.link = link
	builder.linkFlag = true
	return builder
}

func (builder *WebsiteDeliverySnsBuilder) Build() *WebsiteDeliverySns {
	req := &WebsiteDeliverySns{}
	if builder.snsTypeFlag {
		req.SnsType = &builder.snsType

	}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	if builder.linkFlag {
		req.Link = &builder.link

	}
	return req
}

// builder结束

type WebsiteDeliveryWorks struct {
	Desc           *string                          `json:"desc,omitempty"`
	Link           *string                          `json:"link,omitempty"`
	Attachment     *WebsiteDeliveryWorksAttachment  `json:"attachment,omitempty"`
	CustomizedData []*WebsiteDeliveryCustomizedData `json:"customized_data,omitempty"`
}

// builder开始
type WebsiteDeliveryWorksBuilder struct {
	desc               string
	descFlag           bool
	link               string
	linkFlag           bool
	attachment         *WebsiteDeliveryWorksAttachment
	attachmentFlag     bool
	customizedData     []*WebsiteDeliveryCustomizedData
	customizedDataFlag bool
}

func NewWebsiteDeliveryWorksBuilder() *WebsiteDeliveryWorksBuilder {
	builder := &WebsiteDeliveryWorksBuilder{}
	return builder
}

func (builder *WebsiteDeliveryWorksBuilder) Desc(desc string) *WebsiteDeliveryWorksBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}
func (builder *WebsiteDeliveryWorksBuilder) Link(link string) *WebsiteDeliveryWorksBuilder {
	builder.link = link
	builder.linkFlag = true
	return builder
}
func (builder *WebsiteDeliveryWorksBuilder) Attachment(attachment *WebsiteDeliveryWorksAttachment) *WebsiteDeliveryWorksBuilder {
	builder.attachment = attachment
	builder.attachmentFlag = true
	return builder
}
func (builder *WebsiteDeliveryWorksBuilder) CustomizedData(customizedData []*WebsiteDeliveryCustomizedData) *WebsiteDeliveryWorksBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}

func (builder *WebsiteDeliveryWorksBuilder) Build() *WebsiteDeliveryWorks {
	req := &WebsiteDeliveryWorks{}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.linkFlag {
		req.Link = &builder.link

	}
	if builder.attachmentFlag {
		req.Attachment = builder.attachment
	}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	return req
}

// builder结束

type WebsiteDeliveryWorksAttachment struct {
	FileId *string `json:"file_id,omitempty"`
}

// builder开始
type WebsiteDeliveryWorksAttachmentBuilder struct {
	fileId     string
	fileIdFlag bool
}

func NewWebsiteDeliveryWorksAttachmentBuilder() *WebsiteDeliveryWorksAttachmentBuilder {
	builder := &WebsiteDeliveryWorksAttachmentBuilder{}
	return builder
}

func (builder *WebsiteDeliveryWorksAttachmentBuilder) FileId(fileId string) *WebsiteDeliveryWorksAttachmentBuilder {
	builder.fileId = fileId
	builder.fileIdFlag = true
	return builder
}

func (builder *WebsiteDeliveryWorksAttachmentBuilder) Build() *WebsiteDeliveryWorksAttachment {
	req := &WebsiteDeliveryWorksAttachment{}
	if builder.fileIdFlag {
		req.FileId = &builder.fileId

	}
	return req
}

// builder结束

type WebsiteJobPost struct {
	Id                 *string                         `json:"id,omitempty"`
	Title              *string                         `json:"title,omitempty"`
	JobId              *string                         `json:"job_id,omitempty"`
	JobCode            *string                         `json:"job_code,omitempty"`
	JobExpireTime      *string                         `json:"job_expire_time,omitempty"`
	JobActiveStatus    *int                            `json:"job_active_status,omitempty"`
	JobProcessType     *int                            `json:"job_process_type,omitempty"`
	JobRecruitmentType *IdNameObject                   `json:"job_recruitment_type,omitempty"`
	JobDepartment      *IdNameObject                   `json:"job_department,omitempty"`
	JobType            *IdNameObject                   `json:"job_type,omitempty"`
	Address            *CommonAddress                  `json:"address,omitempty"`
	MinSalary          *string                         `json:"min_salary,omitempty"`
	MaxSalary          *string                         `json:"max_salary,omitempty"`
	RequiredDegree     *int                            `json:"required_degree,omitempty"`
	Experience         *int                            `json:"experience,omitempty"`
	Headcount          *int                            `json:"headcount,omitempty"`
	HighLightList      []*IdNameObject                 `json:"high_light_list,omitempty"`
	Description        *string                         `json:"description,omitempty"`
	Requirement        *string                         `json:"requirement,omitempty"`
	Creator            *IdNameObject                   `json:"creator,omitempty"`
	CreateTime         *string                         `json:"create_time,omitempty"`
	ModifyTime         *string                         `json:"modify_time,omitempty"`
	PublishTime        *string                         `json:"publish_time,omitempty"`
	CustomizedDataList []*WebsiteJobPostCustomizedData `json:"customized_data_list,omitempty"`
	JobFunction        *IdNameObject                   `json:"job_function,omitempty"`
	Subject            *IdNameObject                   `json:"subject,omitempty"`
	AddressList        []*CommonAddress                `json:"address_list,omitempty"`
}

// builder开始
type WebsiteJobPostBuilder struct {
	id                     string
	idFlag                 bool
	title                  string
	titleFlag              bool
	jobId                  string
	jobIdFlag              bool
	jobCode                string
	jobCodeFlag            bool
	jobExpireTime          string
	jobExpireTimeFlag      bool
	jobActiveStatus        int
	jobActiveStatusFlag    bool
	jobProcessType         int
	jobProcessTypeFlag     bool
	jobRecruitmentType     *IdNameObject
	jobRecruitmentTypeFlag bool
	jobDepartment          *IdNameObject
	jobDepartmentFlag      bool
	jobType                *IdNameObject
	jobTypeFlag            bool
	address                *CommonAddress
	addressFlag            bool
	minSalary              string
	minSalaryFlag          bool
	maxSalary              string
	maxSalaryFlag          bool
	requiredDegree         int
	requiredDegreeFlag     bool
	experience             int
	experienceFlag         bool
	headcount              int
	headcountFlag          bool
	highLightList          []*IdNameObject
	highLightListFlag      bool
	description            string
	descriptionFlag        bool
	requirement            string
	requirementFlag        bool
	creator                *IdNameObject
	creatorFlag            bool
	createTime             string
	createTimeFlag         bool
	modifyTime             string
	modifyTimeFlag         bool
	publishTime            string
	publishTimeFlag        bool
	customizedDataList     []*WebsiteJobPostCustomizedData
	customizedDataListFlag bool
	jobFunction            *IdNameObject
	jobFunctionFlag        bool
	subject                *IdNameObject
	subjectFlag            bool
	addressList            []*CommonAddress
	addressListFlag        bool
}

func NewWebsiteJobPostBuilder() *WebsiteJobPostBuilder {
	builder := &WebsiteJobPostBuilder{}
	return builder
}

func (builder *WebsiteJobPostBuilder) Id(id string) *WebsiteJobPostBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *WebsiteJobPostBuilder) Title(title string) *WebsiteJobPostBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}
func (builder *WebsiteJobPostBuilder) JobId(jobId string) *WebsiteJobPostBuilder {
	builder.jobId = jobId
	builder.jobIdFlag = true
	return builder
}
func (builder *WebsiteJobPostBuilder) JobCode(jobCode string) *WebsiteJobPostBuilder {
	builder.jobCode = jobCode
	builder.jobCodeFlag = true
	return builder
}
func (builder *WebsiteJobPostBuilder) JobExpireTime(jobExpireTime string) *WebsiteJobPostBuilder {
	builder.jobExpireTime = jobExpireTime
	builder.jobExpireTimeFlag = true
	return builder
}
func (builder *WebsiteJobPostBuilder) JobActiveStatus(jobActiveStatus int) *WebsiteJobPostBuilder {
	builder.jobActiveStatus = jobActiveStatus
	builder.jobActiveStatusFlag = true
	return builder
}
func (builder *WebsiteJobPostBuilder) JobProcessType(jobProcessType int) *WebsiteJobPostBuilder {
	builder.jobProcessType = jobProcessType
	builder.jobProcessTypeFlag = true
	return builder
}
func (builder *WebsiteJobPostBuilder) JobRecruitmentType(jobRecruitmentType *IdNameObject) *WebsiteJobPostBuilder {
	builder.jobRecruitmentType = jobRecruitmentType
	builder.jobRecruitmentTypeFlag = true
	return builder
}
func (builder *WebsiteJobPostBuilder) JobDepartment(jobDepartment *IdNameObject) *WebsiteJobPostBuilder {
	builder.jobDepartment = jobDepartment
	builder.jobDepartmentFlag = true
	return builder
}
func (builder *WebsiteJobPostBuilder) JobType(jobType *IdNameObject) *WebsiteJobPostBuilder {
	builder.jobType = jobType
	builder.jobTypeFlag = true
	return builder
}
func (builder *WebsiteJobPostBuilder) Address(address *CommonAddress) *WebsiteJobPostBuilder {
	builder.address = address
	builder.addressFlag = true
	return builder
}
func (builder *WebsiteJobPostBuilder) MinSalary(minSalary string) *WebsiteJobPostBuilder {
	builder.minSalary = minSalary
	builder.minSalaryFlag = true
	return builder
}
func (builder *WebsiteJobPostBuilder) MaxSalary(maxSalary string) *WebsiteJobPostBuilder {
	builder.maxSalary = maxSalary
	builder.maxSalaryFlag = true
	return builder
}
func (builder *WebsiteJobPostBuilder) RequiredDegree(requiredDegree int) *WebsiteJobPostBuilder {
	builder.requiredDegree = requiredDegree
	builder.requiredDegreeFlag = true
	return builder
}
func (builder *WebsiteJobPostBuilder) Experience(experience int) *WebsiteJobPostBuilder {
	builder.experience = experience
	builder.experienceFlag = true
	return builder
}
func (builder *WebsiteJobPostBuilder) Headcount(headcount int) *WebsiteJobPostBuilder {
	builder.headcount = headcount
	builder.headcountFlag = true
	return builder
}
func (builder *WebsiteJobPostBuilder) HighLightList(highLightList []*IdNameObject) *WebsiteJobPostBuilder {
	builder.highLightList = highLightList
	builder.highLightListFlag = true
	return builder
}
func (builder *WebsiteJobPostBuilder) Description(description string) *WebsiteJobPostBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}
func (builder *WebsiteJobPostBuilder) Requirement(requirement string) *WebsiteJobPostBuilder {
	builder.requirement = requirement
	builder.requirementFlag = true
	return builder
}
func (builder *WebsiteJobPostBuilder) Creator(creator *IdNameObject) *WebsiteJobPostBuilder {
	builder.creator = creator
	builder.creatorFlag = true
	return builder
}
func (builder *WebsiteJobPostBuilder) CreateTime(createTime string) *WebsiteJobPostBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}
func (builder *WebsiteJobPostBuilder) ModifyTime(modifyTime string) *WebsiteJobPostBuilder {
	builder.modifyTime = modifyTime
	builder.modifyTimeFlag = true
	return builder
}
func (builder *WebsiteJobPostBuilder) PublishTime(publishTime string) *WebsiteJobPostBuilder {
	builder.publishTime = publishTime
	builder.publishTimeFlag = true
	return builder
}
func (builder *WebsiteJobPostBuilder) CustomizedDataList(customizedDataList []*WebsiteJobPostCustomizedData) *WebsiteJobPostBuilder {
	builder.customizedDataList = customizedDataList
	builder.customizedDataListFlag = true
	return builder
}
func (builder *WebsiteJobPostBuilder) JobFunction(jobFunction *IdNameObject) *WebsiteJobPostBuilder {
	builder.jobFunction = jobFunction
	builder.jobFunctionFlag = true
	return builder
}
func (builder *WebsiteJobPostBuilder) Subject(subject *IdNameObject) *WebsiteJobPostBuilder {
	builder.subject = subject
	builder.subjectFlag = true
	return builder
}
func (builder *WebsiteJobPostBuilder) AddressList(addressList []*CommonAddress) *WebsiteJobPostBuilder {
	builder.addressList = addressList
	builder.addressListFlag = true
	return builder
}

func (builder *WebsiteJobPostBuilder) Build() *WebsiteJobPost {
	req := &WebsiteJobPost{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.jobIdFlag {
		req.JobId = &builder.jobId

	}
	if builder.jobCodeFlag {
		req.JobCode = &builder.jobCode

	}
	if builder.jobExpireTimeFlag {
		req.JobExpireTime = &builder.jobExpireTime

	}
	if builder.jobActiveStatusFlag {
		req.JobActiveStatus = &builder.jobActiveStatus

	}
	if builder.jobProcessTypeFlag {
		req.JobProcessType = &builder.jobProcessType

	}
	if builder.jobRecruitmentTypeFlag {
		req.JobRecruitmentType = builder.jobRecruitmentType
	}
	if builder.jobDepartmentFlag {
		req.JobDepartment = builder.jobDepartment
	}
	if builder.jobTypeFlag {
		req.JobType = builder.jobType
	}
	if builder.addressFlag {
		req.Address = builder.address
	}
	if builder.minSalaryFlag {
		req.MinSalary = &builder.minSalary

	}
	if builder.maxSalaryFlag {
		req.MaxSalary = &builder.maxSalary

	}
	if builder.requiredDegreeFlag {
		req.RequiredDegree = &builder.requiredDegree

	}
	if builder.experienceFlag {
		req.Experience = &builder.experience

	}
	if builder.headcountFlag {
		req.Headcount = &builder.headcount

	}
	if builder.highLightListFlag {
		req.HighLightList = builder.highLightList
	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	if builder.requirementFlag {
		req.Requirement = &builder.requirement

	}
	if builder.creatorFlag {
		req.Creator = builder.creator
	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.modifyTimeFlag {
		req.ModifyTime = &builder.modifyTime

	}
	if builder.publishTimeFlag {
		req.PublishTime = &builder.publishTime

	}
	if builder.customizedDataListFlag {
		req.CustomizedDataList = builder.customizedDataList
	}
	if builder.jobFunctionFlag {
		req.JobFunction = builder.jobFunction
	}
	if builder.subjectFlag {
		req.Subject = builder.subject
	}
	if builder.addressListFlag {
		req.AddressList = builder.addressList
	}
	return req
}

// builder结束

type WebsiteJobPostCustomizedData struct {
	ObjectId   *string                        `json:"object_id,omitempty"`
	Name       *I18n                          `json:"name,omitempty"`
	ObjectType *int                           `json:"object_type,omitempty"`
	Value      *WebsiteJobPostCustomizedValue `json:"value,omitempty"`
}

// builder开始
type WebsiteJobPostCustomizedDataBuilder struct {
	objectId       string
	objectIdFlag   bool
	name           *I18n
	nameFlag       bool
	objectType     int
	objectTypeFlag bool
	value          *WebsiteJobPostCustomizedValue
	valueFlag      bool
}

func NewWebsiteJobPostCustomizedDataBuilder() *WebsiteJobPostCustomizedDataBuilder {
	builder := &WebsiteJobPostCustomizedDataBuilder{}
	return builder
}

func (builder *WebsiteJobPostCustomizedDataBuilder) ObjectId(objectId string) *WebsiteJobPostCustomizedDataBuilder {
	builder.objectId = objectId
	builder.objectIdFlag = true
	return builder
}
func (builder *WebsiteJobPostCustomizedDataBuilder) Name(name *I18n) *WebsiteJobPostCustomizedDataBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *WebsiteJobPostCustomizedDataBuilder) ObjectType(objectType int) *WebsiteJobPostCustomizedDataBuilder {
	builder.objectType = objectType
	builder.objectTypeFlag = true
	return builder
}
func (builder *WebsiteJobPostCustomizedDataBuilder) Value(value *WebsiteJobPostCustomizedValue) *WebsiteJobPostCustomizedDataBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}

func (builder *WebsiteJobPostCustomizedDataBuilder) Build() *WebsiteJobPostCustomizedData {
	req := &WebsiteJobPostCustomizedData{}
	if builder.objectIdFlag {
		req.ObjectId = &builder.objectId

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.objectTypeFlag {
		req.ObjectType = &builder.objectType

	}
	if builder.valueFlag {
		req.Value = builder.value
	}
	return req
}

// builder结束

type WebsiteJobPostCustomizedOption struct {
	Key  *string `json:"key,omitempty"`
	Name *I18n   `json:"name,omitempty"`
}

// builder开始
type WebsiteJobPostCustomizedOptionBuilder struct {
	key      string
	keyFlag  bool
	name     *I18n
	nameFlag bool
}

func NewWebsiteJobPostCustomizedOptionBuilder() *WebsiteJobPostCustomizedOptionBuilder {
	builder := &WebsiteJobPostCustomizedOptionBuilder{}
	return builder
}

func (builder *WebsiteJobPostCustomizedOptionBuilder) Key(key string) *WebsiteJobPostCustomizedOptionBuilder {
	builder.key = key
	builder.keyFlag = true
	return builder
}
func (builder *WebsiteJobPostCustomizedOptionBuilder) Name(name *I18n) *WebsiteJobPostCustomizedOptionBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *WebsiteJobPostCustomizedOptionBuilder) Build() *WebsiteJobPostCustomizedOption {
	req := &WebsiteJobPostCustomizedOption{}
	if builder.keyFlag {
		req.Key = &builder.key

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	return req
}

// builder结束

type WebsiteJobPostCustomizedTimeRange struct {
	StartTime *string `json:"start_time,omitempty"`
	EndTime   *string `json:"end_time,omitempty"`
}

// builder开始
type WebsiteJobPostCustomizedTimeRangeBuilder struct {
	startTime     string
	startTimeFlag bool
	endTime       string
	endTimeFlag   bool
}

func NewWebsiteJobPostCustomizedTimeRangeBuilder() *WebsiteJobPostCustomizedTimeRangeBuilder {
	builder := &WebsiteJobPostCustomizedTimeRangeBuilder{}
	return builder
}

func (builder *WebsiteJobPostCustomizedTimeRangeBuilder) StartTime(startTime string) *WebsiteJobPostCustomizedTimeRangeBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}
func (builder *WebsiteJobPostCustomizedTimeRangeBuilder) EndTime(endTime string) *WebsiteJobPostCustomizedTimeRangeBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

func (builder *WebsiteJobPostCustomizedTimeRangeBuilder) Build() *WebsiteJobPostCustomizedTimeRange {
	req := &WebsiteJobPostCustomizedTimeRange{}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	return req
}

// builder结束

type WebsiteJobPostCustomizedValue struct {
	Content    *string                            `json:"content,omitempty"`
	Option     *WebsiteJobPostCustomizedOption    `json:"option,omitempty"`
	OptionList []*WebsiteJobPostCustomizedOption  `json:"option_list,omitempty"`
	TimeRange  *WebsiteJobPostCustomizedTimeRange `json:"time_range,omitempty"`
	Time       *string                            `json:"time,omitempty"`
	Number     *string                            `json:"number,omitempty"`
}

// builder开始
type WebsiteJobPostCustomizedValueBuilder struct {
	content        string
	contentFlag    bool
	option         *WebsiteJobPostCustomizedOption
	optionFlag     bool
	optionList     []*WebsiteJobPostCustomizedOption
	optionListFlag bool
	timeRange      *WebsiteJobPostCustomizedTimeRange
	timeRangeFlag  bool
	time           string
	timeFlag       bool
	number         string
	numberFlag     bool
}

func NewWebsiteJobPostCustomizedValueBuilder() *WebsiteJobPostCustomizedValueBuilder {
	builder := &WebsiteJobPostCustomizedValueBuilder{}
	return builder
}

func (builder *WebsiteJobPostCustomizedValueBuilder) Content(content string) *WebsiteJobPostCustomizedValueBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}
func (builder *WebsiteJobPostCustomizedValueBuilder) Option(option *WebsiteJobPostCustomizedOption) *WebsiteJobPostCustomizedValueBuilder {
	builder.option = option
	builder.optionFlag = true
	return builder
}
func (builder *WebsiteJobPostCustomizedValueBuilder) OptionList(optionList []*WebsiteJobPostCustomizedOption) *WebsiteJobPostCustomizedValueBuilder {
	builder.optionList = optionList
	builder.optionListFlag = true
	return builder
}
func (builder *WebsiteJobPostCustomizedValueBuilder) TimeRange(timeRange *WebsiteJobPostCustomizedTimeRange) *WebsiteJobPostCustomizedValueBuilder {
	builder.timeRange = timeRange
	builder.timeRangeFlag = true
	return builder
}
func (builder *WebsiteJobPostCustomizedValueBuilder) Time(time string) *WebsiteJobPostCustomizedValueBuilder {
	builder.time = time
	builder.timeFlag = true
	return builder
}
func (builder *WebsiteJobPostCustomizedValueBuilder) Number(number string) *WebsiteJobPostCustomizedValueBuilder {
	builder.number = number
	builder.numberFlag = true
	return builder
}

func (builder *WebsiteJobPostCustomizedValueBuilder) Build() *WebsiteJobPostCustomizedValue {
	req := &WebsiteJobPostCustomizedValue{}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.optionFlag {
		req.Option = builder.option
	}
	if builder.optionListFlag {
		req.OptionList = builder.optionList
	}
	if builder.timeRangeFlag {
		req.TimeRange = builder.timeRange
	}
	if builder.timeFlag {
		req.Time = &builder.time

	}
	if builder.numberFlag {
		req.Number = &builder.number

	}
	return req
}

// builder结束

type WebsiteUser struct {
	Id                *string `json:"id,omitempty"`
	Name              *string `json:"name,omitempty"`
	Email             *string `json:"email,omitempty"`
	ExternalId        *string `json:"external_id,omitempty"`
	Mobile            *string `json:"mobile,omitempty"`
	MobileCountryCode *string `json:"mobile_country_code,omitempty"`
}

// builder开始
type WebsiteUserBuilder struct {
	id                    string
	idFlag                bool
	name                  string
	nameFlag              bool
	email                 string
	emailFlag             bool
	externalId            string
	externalIdFlag        bool
	mobile                string
	mobileFlag            bool
	mobileCountryCode     string
	mobileCountryCodeFlag bool
}

func NewWebsiteUserBuilder() *WebsiteUserBuilder {
	builder := &WebsiteUserBuilder{}
	return builder
}

func (builder *WebsiteUserBuilder) Id(id string) *WebsiteUserBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *WebsiteUserBuilder) Name(name string) *WebsiteUserBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *WebsiteUserBuilder) Email(email string) *WebsiteUserBuilder {
	builder.email = email
	builder.emailFlag = true
	return builder
}
func (builder *WebsiteUserBuilder) ExternalId(externalId string) *WebsiteUserBuilder {
	builder.externalId = externalId
	builder.externalIdFlag = true
	return builder
}
func (builder *WebsiteUserBuilder) Mobile(mobile string) *WebsiteUserBuilder {
	builder.mobile = mobile
	builder.mobileFlag = true
	return builder
}
func (builder *WebsiteUserBuilder) MobileCountryCode(mobileCountryCode string) *WebsiteUserBuilder {
	builder.mobileCountryCode = mobileCountryCode
	builder.mobileCountryCodeFlag = true
	return builder
}

func (builder *WebsiteUserBuilder) Build() *WebsiteUser {
	req := &WebsiteUser{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.emailFlag {
		req.Email = &builder.email

	}
	if builder.externalIdFlag {
		req.ExternalId = &builder.externalId

	}
	if builder.mobileFlag {
		req.Mobile = &builder.mobile

	}
	if builder.mobileCountryCodeFlag {
		req.MobileCountryCode = &builder.mobileCountryCode

	}
	return req
}

// builder结束

type WorksInfo struct {
	AttachmentId *string `json:"attachment_id,omitempty"`
	Desc         *string `json:"desc,omitempty"`
	Link         *string `json:"link,omitempty"`
}

// builder开始
type WorksInfoBuilder struct {
	attachmentId     string
	attachmentIdFlag bool
	desc             string
	descFlag         bool
	link             string
	linkFlag         bool
}

func NewWorksInfoBuilder() *WorksInfoBuilder {
	builder := &WorksInfoBuilder{}
	return builder
}

func (builder *WorksInfoBuilder) AttachmentId(attachmentId string) *WorksInfoBuilder {
	builder.attachmentId = attachmentId
	builder.attachmentIdFlag = true
	return builder
}
func (builder *WorksInfoBuilder) Desc(desc string) *WorksInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}
func (builder *WorksInfoBuilder) Link(link string) *WorksInfoBuilder {
	builder.link = link
	builder.linkFlag = true
	return builder
}

func (builder *WorksInfoBuilder) Build() *WorksInfo {
	req := &WorksInfo{}
	if builder.attachmentIdFlag {
		req.AttachmentId = &builder.attachmentId

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.linkFlag {
		req.Link = &builder.link

	}
	return req
}

// builder结束

// 生成请求和响应结果类型，以及请求对象的Builder构造器

type CreateApplicationReqBodyBuilder struct {
	talentId                             string
	talentIdFlag                         bool
	jobId                                string
	jobIdFlag                            bool
	applicationPreferredCityCodeList     []string
	applicationPreferredCityCodeListFlag bool
}

// 生成body的New构造器
func NewCreateApplicationReqBodyBuilder() *CreateApplicationReqBodyBuilder {
	builder := &CreateApplicationReqBodyBuilder{}
	return builder
}

// 1.2 生成body的builder属性方法
func (builder *CreateApplicationReqBodyBuilder) TalentId(talentId string) *CreateApplicationReqBodyBuilder {
	builder.talentId = talentId
	builder.talentIdFlag = true
	return builder
}
func (builder *CreateApplicationReqBodyBuilder) JobId(jobId string) *CreateApplicationReqBodyBuilder {
	builder.jobId = jobId
	builder.jobIdFlag = true
	return builder
}
func (builder *CreateApplicationReqBodyBuilder) ApplicationPreferredCityCodeList(applicationPreferredCityCodeList []string) *CreateApplicationReqBodyBuilder {
	builder.applicationPreferredCityCodeList = applicationPreferredCityCodeList
	builder.applicationPreferredCityCodeListFlag = true
	return builder
}

// 1.3 生成body的build方法
func (builder *CreateApplicationReqBodyBuilder) Build() *CreateApplicationReqBody {
	req := &CreateApplicationReqBody{}
	if builder.talentIdFlag {
		req.TalentId = &builder.talentId
	}
	if builder.jobIdFlag {
		req.JobId = &builder.jobId
	}
	if builder.applicationPreferredCityCodeListFlag {
		req.ApplicationPreferredCityCodeList = builder.applicationPreferredCityCodeList
	}
	return req
}

// 上传文件path开始
type CreateApplicationPathReqBodyBuilder struct {
	talentId                             string
	talentIdFlag                         bool
	jobId                                string
	jobIdFlag                            bool
	applicationPreferredCityCodeList     []string
	applicationPreferredCityCodeListFlag bool
}

func NewCreateApplicationPathReqBodyBuilder() *CreateApplicationPathReqBodyBuilder {
	builder := &CreateApplicationPathReqBodyBuilder{}
	return builder
}
func (builder *CreateApplicationPathReqBodyBuilder) TalentId(talentId string) *CreateApplicationPathReqBodyBuilder {
	builder.talentId = talentId
	builder.talentIdFlag = true
	return builder
}
func (builder *CreateApplicationPathReqBodyBuilder) JobId(jobId string) *CreateApplicationPathReqBodyBuilder {
	builder.jobId = jobId
	builder.jobIdFlag = true
	return builder
}
func (builder *CreateApplicationPathReqBodyBuilder) ApplicationPreferredCityCodeList(applicationPreferredCityCodeList []string) *CreateApplicationPathReqBodyBuilder {
	builder.applicationPreferredCityCodeList = applicationPreferredCityCodeList
	builder.applicationPreferredCityCodeListFlag = true
	return builder
}

func (builder *CreateApplicationPathReqBodyBuilder) Build() (*CreateApplicationReqBody, error) {
	req := &CreateApplicationReqBody{}
	if builder.talentIdFlag {
		req.TalentId = &builder.talentId
	}
	if builder.jobIdFlag {
		req.JobId = &builder.jobId
	}
	if builder.applicationPreferredCityCodeListFlag {
		req.ApplicationPreferredCityCodeList = builder.applicationPreferredCityCodeList
	}
	return req, nil
}

// 上传文件path结束

// 1.4 生成请求的builder结构体
type CreateApplicationReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *CreateApplicationReqBody
}

// 生成请求的New构造器
func NewCreateApplicationReqBuilder() *CreateApplicationReqBuilder {
	builder := &CreateApplicationReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *CreateApplicationReqBuilder) Body(body *CreateApplicationReqBody) *CreateApplicationReqBuilder {
	builder.body = body
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *CreateApplicationReqBuilder) Build() *CreateApplicationReq {
	req := &CreateApplicationReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.Body = builder.body
	return req
}

type CreateApplicationReqBody struct {
	TalentId                         *string  `json:"talent_id,omitempty"`
	JobId                            *string  `json:"job_id,omitempty"`
	ApplicationPreferredCityCodeList []string `json:"application_preferred_city_code_list,omitempty"`
}

type CreateApplicationReq struct {
	apiReq *larkcore.ApiReq
	Body   *CreateApplicationReqBody `body:""`
}

type CreateApplicationRespData struct {
	Id *string `json:"id,omitempty"`
}

type CreateApplicationResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateApplicationRespData `json:"data"`
}

func (resp *CreateApplicationResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type GetApplicationReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewGetApplicationReqBuilder() *GetApplicationReqBuilder {
	builder := &GetApplicationReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *GetApplicationReqBuilder) ApplicationId(applicationId string) *GetApplicationReqBuilder {
	builder.apiReq.PathParams.Set("application_id", fmt.Sprint(applicationId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *GetApplicationReqBuilder) Build() *GetApplicationReq {
	req := &GetApplicationReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type GetApplicationReq struct {
	apiReq *larkcore.ApiReq
}

type GetApplicationRespData struct {
	Application *Application `json:"application,omitempty"`
}

type GetApplicationResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetApplicationRespData `json:"data"`
}

func (resp *GetApplicationResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type ListApplicationReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewListApplicationReqBuilder() *ListApplicationReqBuilder {
	builder := &ListApplicationReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *ListApplicationReqBuilder) ProcessId(processId string) *ListApplicationReqBuilder {
	builder.apiReq.QueryParams.Set("process_id", fmt.Sprint(processId))
	return builder
}
func (builder *ListApplicationReqBuilder) StageId(stageId string) *ListApplicationReqBuilder {
	builder.apiReq.QueryParams.Set("stage_id", fmt.Sprint(stageId))
	return builder
}
func (builder *ListApplicationReqBuilder) TalentId(talentId string) *ListApplicationReqBuilder {
	builder.apiReq.QueryParams.Set("talent_id", fmt.Sprint(talentId))
	return builder
}
func (builder *ListApplicationReqBuilder) ActiveStatus(activeStatus string) *ListApplicationReqBuilder {
	builder.apiReq.QueryParams.Set("active_status", fmt.Sprint(activeStatus))
	return builder
}
func (builder *ListApplicationReqBuilder) JobId(jobId string) *ListApplicationReqBuilder {
	builder.apiReq.QueryParams.Set("job_id", fmt.Sprint(jobId))
	return builder
}
func (builder *ListApplicationReqBuilder) PageToken(pageToken string) *ListApplicationReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}
func (builder *ListApplicationReqBuilder) PageSize(pageSize int) *ListApplicationReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}
func (builder *ListApplicationReqBuilder) UpdateStartTime(updateStartTime string) *ListApplicationReqBuilder {
	builder.apiReq.QueryParams.Set("update_start_time", fmt.Sprint(updateStartTime))
	return builder
}
func (builder *ListApplicationReqBuilder) UpdateEndTime(updateEndTime string) *ListApplicationReqBuilder {
	builder.apiReq.QueryParams.Set("update_end_time", fmt.Sprint(updateEndTime))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *ListApplicationReqBuilder) Build() *ListApplicationReq {
	req := &ListApplicationReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListApplicationReq struct {
	apiReq *larkcore.ApiReq
}

type ListApplicationRespData struct {
	Items     []string `json:"items,omitempty"`
	PageToken *string  `json:"page_token,omitempty"`
	HasMore   *bool    `json:"has_more,omitempty"`
}

type ListApplicationResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListApplicationRespData `json:"data"`
}

func (resp *ListApplicationResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type OfferApplicationReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewOfferApplicationReqBuilder() *OfferApplicationReqBuilder {
	builder := &OfferApplicationReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *OfferApplicationReqBuilder) ApplicationId(applicationId string) *OfferApplicationReqBuilder {
	builder.apiReq.PathParams.Set("application_id", fmt.Sprint(applicationId))
	return builder
}
func (builder *OfferApplicationReqBuilder) UserIdType(userIdType string) *OfferApplicationReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *OfferApplicationReqBuilder) Build() *OfferApplicationReq {
	req := &OfferApplicationReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type OfferApplicationReq struct {
	apiReq *larkcore.ApiReq
}

type OfferApplicationRespData struct {
	Offer *ApplicationOffer `json:"offer,omitempty"`
}

type OfferApplicationResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *OfferApplicationRespData `json:"data"`
}

func (resp *OfferApplicationResp) Success() bool {
	return resp.Code == 0
}

type TerminateApplicationReqBodyBuilder struct {
	terminationType           int
	terminationTypeFlag       bool
	terminationReasonList     []string
	terminationReasonListFlag bool
	terminationReasonNote     string
	terminationReasonNoteFlag bool
}

// 生成body的New构造器
func NewTerminateApplicationReqBodyBuilder() *TerminateApplicationReqBodyBuilder {
	builder := &TerminateApplicationReqBodyBuilder{}
	return builder
}

// 1.2 生成body的builder属性方法
func (builder *TerminateApplicationReqBodyBuilder) TerminationType(terminationType int) *TerminateApplicationReqBodyBuilder {
	builder.terminationType = terminationType
	builder.terminationTypeFlag = true
	return builder
}
func (builder *TerminateApplicationReqBodyBuilder) TerminationReasonList(terminationReasonList []string) *TerminateApplicationReqBodyBuilder {
	builder.terminationReasonList = terminationReasonList
	builder.terminationReasonListFlag = true
	return builder
}
func (builder *TerminateApplicationReqBodyBuilder) TerminationReasonNote(terminationReasonNote string) *TerminateApplicationReqBodyBuilder {
	builder.terminationReasonNote = terminationReasonNote
	builder.terminationReasonNoteFlag = true
	return builder
}

// 1.3 生成body的build方法
func (builder *TerminateApplicationReqBodyBuilder) Build() *TerminateApplicationReqBody {
	req := &TerminateApplicationReqBody{}
	if builder.terminationTypeFlag {
		req.TerminationType = &builder.terminationType
	}
	if builder.terminationReasonListFlag {
		req.TerminationReasonList = builder.terminationReasonList
	}
	if builder.terminationReasonNoteFlag {
		req.TerminationReasonNote = &builder.terminationReasonNote
	}
	return req
}

// 上传文件path开始
type TerminateApplicationPathReqBodyBuilder struct {
	terminationType           int
	terminationTypeFlag       bool
	terminationReasonList     []string
	terminationReasonListFlag bool
	terminationReasonNote     string
	terminationReasonNoteFlag bool
}

func NewTerminateApplicationPathReqBodyBuilder() *TerminateApplicationPathReqBodyBuilder {
	builder := &TerminateApplicationPathReqBodyBuilder{}
	return builder
}
func (builder *TerminateApplicationPathReqBodyBuilder) TerminationType(terminationType int) *TerminateApplicationPathReqBodyBuilder {
	builder.terminationType = terminationType
	builder.terminationTypeFlag = true
	return builder
}
func (builder *TerminateApplicationPathReqBodyBuilder) TerminationReasonList(terminationReasonList []string) *TerminateApplicationPathReqBodyBuilder {
	builder.terminationReasonList = terminationReasonList
	builder.terminationReasonListFlag = true
	return builder
}
func (builder *TerminateApplicationPathReqBodyBuilder) TerminationReasonNote(terminationReasonNote string) *TerminateApplicationPathReqBodyBuilder {
	builder.terminationReasonNote = terminationReasonNote
	builder.terminationReasonNoteFlag = true
	return builder
}

func (builder *TerminateApplicationPathReqBodyBuilder) Build() (*TerminateApplicationReqBody, error) {
	req := &TerminateApplicationReqBody{}
	if builder.terminationTypeFlag {
		req.TerminationType = &builder.terminationType
	}
	if builder.terminationReasonListFlag {
		req.TerminationReasonList = builder.terminationReasonList
	}
	if builder.terminationReasonNoteFlag {
		req.TerminationReasonNote = &builder.terminationReasonNote
	}
	return req, nil
}

// 上传文件path结束

// 1.4 生成请求的builder结构体
type TerminateApplicationReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *TerminateApplicationReqBody
}

// 生成请求的New构造器
func NewTerminateApplicationReqBuilder() *TerminateApplicationReqBuilder {
	builder := &TerminateApplicationReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *TerminateApplicationReqBuilder) ApplicationId(applicationId string) *TerminateApplicationReqBuilder {
	builder.apiReq.PathParams.Set("application_id", fmt.Sprint(applicationId))
	return builder
}
func (builder *TerminateApplicationReqBuilder) Body(body *TerminateApplicationReqBody) *TerminateApplicationReqBuilder {
	builder.body = body
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *TerminateApplicationReqBuilder) Build() *TerminateApplicationReq {
	req := &TerminateApplicationReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.body
	return req
}

type TerminateApplicationReqBody struct {
	TerminationType       *int     `json:"termination_type,omitempty"`
	TerminationReasonList []string `json:"termination_reason_list,omitempty"`
	TerminationReasonNote *string  `json:"termination_reason_note,omitempty"`
}

type TerminateApplicationReq struct {
	apiReq *larkcore.ApiReq
	Body   *TerminateApplicationReqBody `body:""`
}

type TerminateApplicationResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *TerminateApplicationResp) Success() bool {
	return resp.Code == 0
}

type TransferOnboardApplicationReqBodyBuilder struct {
	actualOnboardTime          int
	actualOnboardTimeFlag      bool
	expectedConversionTime     int
	expectedConversionTimeFlag bool
	jobRequirementId           string
	jobRequirementIdFlag       bool
	operatorId                 string
	operatorIdFlag             bool
	onboardCityCode            string
	onboardCityCodeFlag        bool
	department                 string
	departmentFlag             bool
	leader                     string
	leaderFlag                 bool
	sequence                   string
	sequenceFlag               bool
	level                      string
	levelFlag                  bool
	employeeType               string
	employeeTypeFlag           bool
}

// 生成body的New构造器
func NewTransferOnboardApplicationReqBodyBuilder() *TransferOnboardApplicationReqBodyBuilder {
	builder := &TransferOnboardApplicationReqBodyBuilder{}
	return builder
}

// 1.2 生成body的builder属性方法
func (builder *TransferOnboardApplicationReqBodyBuilder) ActualOnboardTime(actualOnboardTime int) *TransferOnboardApplicationReqBodyBuilder {
	builder.actualOnboardTime = actualOnboardTime
	builder.actualOnboardTimeFlag = true
	return builder
}
func (builder *TransferOnboardApplicationReqBodyBuilder) ExpectedConversionTime(expectedConversionTime int) *TransferOnboardApplicationReqBodyBuilder {
	builder.expectedConversionTime = expectedConversionTime
	builder.expectedConversionTimeFlag = true
	return builder
}
func (builder *TransferOnboardApplicationReqBodyBuilder) JobRequirementId(jobRequirementId string) *TransferOnboardApplicationReqBodyBuilder {
	builder.jobRequirementId = jobRequirementId
	builder.jobRequirementIdFlag = true
	return builder
}
func (builder *TransferOnboardApplicationReqBodyBuilder) OperatorId(operatorId string) *TransferOnboardApplicationReqBodyBuilder {
	builder.operatorId = operatorId
	builder.operatorIdFlag = true
	return builder
}
func (builder *TransferOnboardApplicationReqBodyBuilder) OnboardCityCode(onboardCityCode string) *TransferOnboardApplicationReqBodyBuilder {
	builder.onboardCityCode = onboardCityCode
	builder.onboardCityCodeFlag = true
	return builder
}
func (builder *TransferOnboardApplicationReqBodyBuilder) Department(department string) *TransferOnboardApplicationReqBodyBuilder {
	builder.department = department
	builder.departmentFlag = true
	return builder
}
func (builder *TransferOnboardApplicationReqBodyBuilder) Leader(leader string) *TransferOnboardApplicationReqBodyBuilder {
	builder.leader = leader
	builder.leaderFlag = true
	return builder
}
func (builder *TransferOnboardApplicationReqBodyBuilder) Sequence(sequence string) *TransferOnboardApplicationReqBodyBuilder {
	builder.sequence = sequence
	builder.sequenceFlag = true
	return builder
}
func (builder *TransferOnboardApplicationReqBodyBuilder) Level(level string) *TransferOnboardApplicationReqBodyBuilder {
	builder.level = level
	builder.levelFlag = true
	return builder
}
func (builder *TransferOnboardApplicationReqBodyBuilder) EmployeeType(employeeType string) *TransferOnboardApplicationReqBodyBuilder {
	builder.employeeType = employeeType
	builder.employeeTypeFlag = true
	return builder
}

// 1.3 生成body的build方法
func (builder *TransferOnboardApplicationReqBodyBuilder) Build() *TransferOnboardApplicationReqBody {
	req := &TransferOnboardApplicationReqBody{}
	if builder.actualOnboardTimeFlag {
		req.ActualOnboardTime = &builder.actualOnboardTime
	}
	if builder.expectedConversionTimeFlag {
		req.ExpectedConversionTime = &builder.expectedConversionTime
	}
	if builder.jobRequirementIdFlag {
		req.JobRequirementId = &builder.jobRequirementId
	}
	if builder.operatorIdFlag {
		req.OperatorId = &builder.operatorId
	}
	if builder.onboardCityCodeFlag {
		req.OnboardCityCode = &builder.onboardCityCode
	}
	if builder.departmentFlag {
		req.Department = &builder.department
	}
	if builder.leaderFlag {
		req.Leader = &builder.leader
	}
	if builder.sequenceFlag {
		req.Sequence = &builder.sequence
	}
	if builder.levelFlag {
		req.Level = &builder.level
	}
	if builder.employeeTypeFlag {
		req.EmployeeType = &builder.employeeType
	}
	return req
}

// 上传文件path开始
type TransferOnboardApplicationPathReqBodyBuilder struct {
	actualOnboardTime          int
	actualOnboardTimeFlag      bool
	expectedConversionTime     int
	expectedConversionTimeFlag bool
	jobRequirementId           string
	jobRequirementIdFlag       bool
	operatorId                 string
	operatorIdFlag             bool
	onboardCityCode            string
	onboardCityCodeFlag        bool
	department                 string
	departmentFlag             bool
	leader                     string
	leaderFlag                 bool
	sequence                   string
	sequenceFlag               bool
	level                      string
	levelFlag                  bool
	employeeType               string
	employeeTypeFlag           bool
}

func NewTransferOnboardApplicationPathReqBodyBuilder() *TransferOnboardApplicationPathReqBodyBuilder {
	builder := &TransferOnboardApplicationPathReqBodyBuilder{}
	return builder
}
func (builder *TransferOnboardApplicationPathReqBodyBuilder) ActualOnboardTime(actualOnboardTime int) *TransferOnboardApplicationPathReqBodyBuilder {
	builder.actualOnboardTime = actualOnboardTime
	builder.actualOnboardTimeFlag = true
	return builder
}
func (builder *TransferOnboardApplicationPathReqBodyBuilder) ExpectedConversionTime(expectedConversionTime int) *TransferOnboardApplicationPathReqBodyBuilder {
	builder.expectedConversionTime = expectedConversionTime
	builder.expectedConversionTimeFlag = true
	return builder
}
func (builder *TransferOnboardApplicationPathReqBodyBuilder) JobRequirementId(jobRequirementId string) *TransferOnboardApplicationPathReqBodyBuilder {
	builder.jobRequirementId = jobRequirementId
	builder.jobRequirementIdFlag = true
	return builder
}
func (builder *TransferOnboardApplicationPathReqBodyBuilder) OperatorId(operatorId string) *TransferOnboardApplicationPathReqBodyBuilder {
	builder.operatorId = operatorId
	builder.operatorIdFlag = true
	return builder
}
func (builder *TransferOnboardApplicationPathReqBodyBuilder) OnboardCityCode(onboardCityCode string) *TransferOnboardApplicationPathReqBodyBuilder {
	builder.onboardCityCode = onboardCityCode
	builder.onboardCityCodeFlag = true
	return builder
}
func (builder *TransferOnboardApplicationPathReqBodyBuilder) Department(department string) *TransferOnboardApplicationPathReqBodyBuilder {
	builder.department = department
	builder.departmentFlag = true
	return builder
}
func (builder *TransferOnboardApplicationPathReqBodyBuilder) Leader(leader string) *TransferOnboardApplicationPathReqBodyBuilder {
	builder.leader = leader
	builder.leaderFlag = true
	return builder
}
func (builder *TransferOnboardApplicationPathReqBodyBuilder) Sequence(sequence string) *TransferOnboardApplicationPathReqBodyBuilder {
	builder.sequence = sequence
	builder.sequenceFlag = true
	return builder
}
func (builder *TransferOnboardApplicationPathReqBodyBuilder) Level(level string) *TransferOnboardApplicationPathReqBodyBuilder {
	builder.level = level
	builder.levelFlag = true
	return builder
}
func (builder *TransferOnboardApplicationPathReqBodyBuilder) EmployeeType(employeeType string) *TransferOnboardApplicationPathReqBodyBuilder {
	builder.employeeType = employeeType
	builder.employeeTypeFlag = true
	return builder
}

func (builder *TransferOnboardApplicationPathReqBodyBuilder) Build() (*TransferOnboardApplicationReqBody, error) {
	req := &TransferOnboardApplicationReqBody{}
	if builder.actualOnboardTimeFlag {
		req.ActualOnboardTime = &builder.actualOnboardTime
	}
	if builder.expectedConversionTimeFlag {
		req.ExpectedConversionTime = &builder.expectedConversionTime
	}
	if builder.jobRequirementIdFlag {
		req.JobRequirementId = &builder.jobRequirementId
	}
	if builder.operatorIdFlag {
		req.OperatorId = &builder.operatorId
	}
	if builder.onboardCityCodeFlag {
		req.OnboardCityCode = &builder.onboardCityCode
	}
	if builder.departmentFlag {
		req.Department = &builder.department
	}
	if builder.leaderFlag {
		req.Leader = &builder.leader
	}
	if builder.sequenceFlag {
		req.Sequence = &builder.sequence
	}
	if builder.levelFlag {
		req.Level = &builder.level
	}
	if builder.employeeTypeFlag {
		req.EmployeeType = &builder.employeeType
	}
	return req, nil
}

// 上传文件path结束

// 1.4 生成请求的builder结构体
type TransferOnboardApplicationReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *TransferOnboardApplicationReqBody
}

// 生成请求的New构造器
func NewTransferOnboardApplicationReqBuilder() *TransferOnboardApplicationReqBuilder {
	builder := &TransferOnboardApplicationReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *TransferOnboardApplicationReqBuilder) ApplicationId(applicationId string) *TransferOnboardApplicationReqBuilder {
	builder.apiReq.PathParams.Set("application_id", fmt.Sprint(applicationId))
	return builder
}
func (builder *TransferOnboardApplicationReqBuilder) UserIdType(userIdType string) *TransferOnboardApplicationReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}
func (builder *TransferOnboardApplicationReqBuilder) Body(body *TransferOnboardApplicationReqBody) *TransferOnboardApplicationReqBuilder {
	builder.body = body
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *TransferOnboardApplicationReqBuilder) Build() *TransferOnboardApplicationReq {
	req := &TransferOnboardApplicationReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.body
	return req
}

type TransferOnboardApplicationReqBody struct {
	ActualOnboardTime      *int    `json:"actual_onboard_time,omitempty"`
	ExpectedConversionTime *int    `json:"expected_conversion_time,omitempty"`
	JobRequirementId       *string `json:"job_requirement_id,omitempty"`
	OperatorId             *string `json:"operator_id,omitempty"`
	OnboardCityCode        *string `json:"onboard_city_code,omitempty"`
	Department             *string `json:"department,omitempty"`
	Leader                 *string `json:"leader,omitempty"`
	Sequence               *string `json:"sequence,omitempty"`
	Level                  *string `json:"level,omitempty"`
	EmployeeType           *string `json:"employee_type,omitempty"`
}

type TransferOnboardApplicationReq struct {
	apiReq *larkcore.ApiReq
	Body   *TransferOnboardApplicationReqBody `body:""`
}

type TransferOnboardApplicationRespData struct {
	Employee *Employee `json:"employee,omitempty"`
}

type TransferOnboardApplicationResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *TransferOnboardApplicationRespData `json:"data"`
}

func (resp *TransferOnboardApplicationResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type ListApplicationInterviewReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewListApplicationInterviewReqBuilder() *ListApplicationInterviewReqBuilder {
	builder := &ListApplicationInterviewReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *ListApplicationInterviewReqBuilder) ApplicationId(applicationId string) *ListApplicationInterviewReqBuilder {
	builder.apiReq.PathParams.Set("application_id", fmt.Sprint(applicationId))
	return builder
}
func (builder *ListApplicationInterviewReqBuilder) PageSize(pageSize int) *ListApplicationInterviewReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}
func (builder *ListApplicationInterviewReqBuilder) PageToken(pageToken string) *ListApplicationInterviewReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}
func (builder *ListApplicationInterviewReqBuilder) UserIdType(userIdType string) *ListApplicationInterviewReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *ListApplicationInterviewReqBuilder) Build() *ListApplicationInterviewReq {
	req := &ListApplicationInterviewReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListApplicationInterviewReq struct {
	apiReq *larkcore.ApiReq
}

type ListApplicationInterviewRespData struct {
	PageToken *string      `json:"page_token,omitempty"`
	HasMore   *bool        `json:"has_more,omitempty"`
	Items     []*Interview `json:"items,omitempty"`
}

type ListApplicationInterviewResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListApplicationInterviewRespData `json:"data"`
}

func (resp *ListApplicationInterviewResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type GetAttachmentReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewGetAttachmentReqBuilder() *GetAttachmentReqBuilder {
	builder := &GetAttachmentReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *GetAttachmentReqBuilder) AttachmentId(attachmentId string) *GetAttachmentReqBuilder {
	builder.apiReq.PathParams.Set("attachment_id", fmt.Sprint(attachmentId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *GetAttachmentReqBuilder) Build() *GetAttachmentReq {
	req := &GetAttachmentReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type GetAttachmentReq struct {
	apiReq *larkcore.ApiReq
}

type GetAttachmentRespData struct {
	Attachment *Attachment `json:"attachment,omitempty"`
}

type GetAttachmentResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetAttachmentRespData `json:"data"`
}

func (resp *GetAttachmentResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type PreviewAttachmentReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewPreviewAttachmentReqBuilder() *PreviewAttachmentReqBuilder {
	builder := &PreviewAttachmentReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *PreviewAttachmentReqBuilder) AttachmentId(attachmentId string) *PreviewAttachmentReqBuilder {
	builder.apiReq.PathParams.Set("attachment_id", fmt.Sprint(attachmentId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *PreviewAttachmentReqBuilder) Build() *PreviewAttachmentReq {
	req := &PreviewAttachmentReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type PreviewAttachmentReq struct {
	apiReq *larkcore.ApiReq
}

type PreviewAttachmentRespData struct {
	Url *string `json:"url,omitempty"`
}

type PreviewAttachmentResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *PreviewAttachmentRespData `json:"data"`
}

func (resp *PreviewAttachmentResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type GetEmployeeReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewGetEmployeeReqBuilder() *GetEmployeeReqBuilder {
	builder := &GetEmployeeReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *GetEmployeeReqBuilder) EmployeeId(employeeId string) *GetEmployeeReqBuilder {
	builder.apiReq.PathParams.Set("employee_id", fmt.Sprint(employeeId))
	return builder
}
func (builder *GetEmployeeReqBuilder) UserIdType(userIdType string) *GetEmployeeReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *GetEmployeeReqBuilder) Build() *GetEmployeeReq {
	req := &GetEmployeeReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type GetEmployeeReq struct {
	apiReq *larkcore.ApiReq
}

type GetEmployeeRespData struct {
	Employee *Employee `json:"employee,omitempty"`
}

type GetEmployeeResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetEmployeeRespData `json:"data"`
}

func (resp *GetEmployeeResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type GetByApplicationEmployeeReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewGetByApplicationEmployeeReqBuilder() *GetByApplicationEmployeeReqBuilder {
	builder := &GetByApplicationEmployeeReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *GetByApplicationEmployeeReqBuilder) ApplicationId(applicationId string) *GetByApplicationEmployeeReqBuilder {
	builder.apiReq.QueryParams.Set("application_id", fmt.Sprint(applicationId))
	return builder
}
func (builder *GetByApplicationEmployeeReqBuilder) UserIdType(userIdType string) *GetByApplicationEmployeeReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *GetByApplicationEmployeeReqBuilder) Build() *GetByApplicationEmployeeReq {
	req := &GetByApplicationEmployeeReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type GetByApplicationEmployeeReq struct {
	apiReq *larkcore.ApiReq
}

type GetByApplicationEmployeeRespData struct {
	Employee *Employee `json:"employee,omitempty"`
}

type GetByApplicationEmployeeResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetByApplicationEmployeeRespData `json:"data"`
}

func (resp *GetByApplicationEmployeeResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type PatchEmployeeReqBuilder struct {
	apiReq              *larkcore.ApiReq
	changeEmployeeStage *ChangeEmployeeStage
}

// 生成请求的New构造器
func NewPatchEmployeeReqBuilder() *PatchEmployeeReqBuilder {
	builder := &PatchEmployeeReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *PatchEmployeeReqBuilder) EmployeeId(employeeId string) *PatchEmployeeReqBuilder {
	builder.apiReq.PathParams.Set("employee_id", fmt.Sprint(employeeId))
	return builder
}
func (builder *PatchEmployeeReqBuilder) UserIdType(userIdType string) *PatchEmployeeReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}
func (builder *PatchEmployeeReqBuilder) ChangeEmployeeStage(changeEmployeeStage *ChangeEmployeeStage) *PatchEmployeeReqBuilder {
	builder.changeEmployeeStage = changeEmployeeStage
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *PatchEmployeeReqBuilder) Build() *PatchEmployeeReq {
	req := &PatchEmployeeReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.changeEmployeeStage
	return req
}

type PatchEmployeeReq struct {
	apiReq              *larkcore.ApiReq
	ChangeEmployeeStage *ChangeEmployeeStage `body:""`
}

type PatchEmployeeRespData struct {
	Employee *Employee `json:"employee,omitempty"`
}

type PatchEmployeeResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *PatchEmployeeRespData `json:"data"`
}

func (resp *PatchEmployeeResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type GetJobReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewGetJobReqBuilder() *GetJobReqBuilder {
	builder := &GetJobReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *GetJobReqBuilder) JobId(jobId int) *GetJobReqBuilder {
	builder.apiReq.PathParams.Set("job_id", fmt.Sprint(jobId))
	return builder
}
func (builder *GetJobReqBuilder) UserIdType(userIdType string) *GetJobReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *GetJobReqBuilder) Build() *GetJobReq {
	req := &GetJobReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type GetJobReq struct {
	apiReq *larkcore.ApiReq
}

type GetJobRespData struct {
	Job *Job `json:"job,omitempty"`
}

type GetJobResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetJobRespData `json:"data"`
}

func (resp *GetJobResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type GetJobManagerReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewGetJobManagerReqBuilder() *GetJobManagerReqBuilder {
	builder := &GetJobManagerReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *GetJobManagerReqBuilder) JobId(jobId string) *GetJobManagerReqBuilder {
	builder.apiReq.PathParams.Set("job_id", fmt.Sprint(jobId))
	return builder
}
func (builder *GetJobManagerReqBuilder) ManagerId(managerId string) *GetJobManagerReqBuilder {
	builder.apiReq.PathParams.Set("manager_id", fmt.Sprint(managerId))
	return builder
}
func (builder *GetJobManagerReqBuilder) UserIdType(userIdType string) *GetJobManagerReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *GetJobManagerReqBuilder) Build() *GetJobManagerReq {
	req := &GetJobManagerReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type GetJobManagerReq struct {
	apiReq *larkcore.ApiReq
}

type GetJobManagerRespData struct {
	Info *JobManager `json:"info,omitempty"`
}

type GetJobManagerResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetJobManagerRespData `json:"data"`
}

func (resp *GetJobManagerResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type ListJobProcessReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewListJobProcessReqBuilder() *ListJobProcessReqBuilder {
	builder := &ListJobProcessReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *ListJobProcessReqBuilder) PageSize(pageSize int) *ListJobProcessReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}
func (builder *ListJobProcessReqBuilder) PageToken(pageToken string) *ListJobProcessReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *ListJobProcessReqBuilder) Build() *ListJobProcessReq {
	req := &ListJobProcessReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListJobProcessReq struct {
	apiReq *larkcore.ApiReq
}

type ListJobProcessRespData struct {
	HasMore   *bool           `json:"has_more,omitempty"`
	PageToken *string         `json:"page_token,omitempty"`
	Items     []*JobProcesses `json:"items,omitempty"`
}

type ListJobProcessResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListJobProcessRespData `json:"data"`
}

func (resp *ListJobProcessResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type CreateNoteReqBuilder struct {
	apiReq *larkcore.ApiReq
	note   *Note
}

// 生成请求的New构造器
func NewCreateNoteReqBuilder() *CreateNoteReqBuilder {
	builder := &CreateNoteReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *CreateNoteReqBuilder) UserIdType(userIdType string) *CreateNoteReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}
func (builder *CreateNoteReqBuilder) Note(note *Note) *CreateNoteReqBuilder {
	builder.note = note
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *CreateNoteReqBuilder) Build() *CreateNoteReq {
	req := &CreateNoteReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.note
	return req
}

type CreateNoteReq struct {
	apiReq *larkcore.ApiReq
	Note   *Note `body:""`
}

type CreateNoteRespData struct {
	Note *Note `json:"note,omitempty"`
}

type CreateNoteResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateNoteRespData `json:"data"`
}

func (resp *CreateNoteResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type GetNoteReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewGetNoteReqBuilder() *GetNoteReqBuilder {
	builder := &GetNoteReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *GetNoteReqBuilder) NoteId(noteId string) *GetNoteReqBuilder {
	builder.apiReq.PathParams.Set("note_id", fmt.Sprint(noteId))
	return builder
}
func (builder *GetNoteReqBuilder) UserIdType(userIdType string) *GetNoteReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *GetNoteReqBuilder) Build() *GetNoteReq {
	req := &GetNoteReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type GetNoteReq struct {
	apiReq *larkcore.ApiReq
}

type GetNoteRespData struct {
	Note *Note `json:"note,omitempty"`
}

type GetNoteResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetNoteRespData `json:"data"`
}

func (resp *GetNoteResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type ListNoteReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewListNoteReqBuilder() *ListNoteReqBuilder {
	builder := &ListNoteReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *ListNoteReqBuilder) PageSize(pageSize int) *ListNoteReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}
func (builder *ListNoteReqBuilder) PageToken(pageToken string) *ListNoteReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}
func (builder *ListNoteReqBuilder) TalentId(talentId string) *ListNoteReqBuilder {
	builder.apiReq.QueryParams.Set("talent_id", fmt.Sprint(talentId))
	return builder
}
func (builder *ListNoteReqBuilder) UserIdType(userIdType string) *ListNoteReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *ListNoteReqBuilder) Build() *ListNoteReq {
	req := &ListNoteReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListNoteReq struct {
	apiReq *larkcore.ApiReq
}

type ListNoteRespData struct {
	Items     []*Note `json:"items,omitempty"`
	HasMore   *bool   `json:"has_more,omitempty"`
	PageToken *string `json:"page_token,omitempty"`
}

type ListNoteResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListNoteRespData `json:"data"`
}

func (resp *ListNoteResp) Success() bool {
	return resp.Code == 0
}

type PatchNoteReqBodyBuilder struct {
	content     string
	contentFlag bool
}

// 生成body的New构造器
func NewPatchNoteReqBodyBuilder() *PatchNoteReqBodyBuilder {
	builder := &PatchNoteReqBodyBuilder{}
	return builder
}

// 1.2 生成body的builder属性方法
func (builder *PatchNoteReqBodyBuilder) Content(content string) *PatchNoteReqBodyBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}

// 1.3 生成body的build方法
func (builder *PatchNoteReqBodyBuilder) Build() *PatchNoteReqBody {
	req := &PatchNoteReqBody{}
	if builder.contentFlag {
		req.Content = &builder.content
	}
	return req
}

// 上传文件path开始
type PatchNotePathReqBodyBuilder struct {
	content     string
	contentFlag bool
}

func NewPatchNotePathReqBodyBuilder() *PatchNotePathReqBodyBuilder {
	builder := &PatchNotePathReqBodyBuilder{}
	return builder
}
func (builder *PatchNotePathReqBodyBuilder) Content(content string) *PatchNotePathReqBodyBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}

func (builder *PatchNotePathReqBodyBuilder) Build() (*PatchNoteReqBody, error) {
	req := &PatchNoteReqBody{}
	if builder.contentFlag {
		req.Content = &builder.content
	}
	return req, nil
}

// 上传文件path结束

// 1.4 生成请求的builder结构体
type PatchNoteReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *PatchNoteReqBody
}

// 生成请求的New构造器
func NewPatchNoteReqBuilder() *PatchNoteReqBuilder {
	builder := &PatchNoteReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *PatchNoteReqBuilder) NoteId(noteId string) *PatchNoteReqBuilder {
	builder.apiReq.PathParams.Set("note_id", fmt.Sprint(noteId))
	return builder
}
func (builder *PatchNoteReqBuilder) UserIdType(userIdType string) *PatchNoteReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}
func (builder *PatchNoteReqBuilder) Body(body *PatchNoteReqBody) *PatchNoteReqBuilder {
	builder.body = body
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *PatchNoteReqBuilder) Build() *PatchNoteReq {
	req := &PatchNoteReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.body
	return req
}

type PatchNoteReqBody struct {
	Content *string `json:"content,omitempty"`
}

type PatchNoteReq struct {
	apiReq *larkcore.ApiReq
	Body   *PatchNoteReqBody `body:""`
}

type PatchNoteRespData struct {
	Note *Note `json:"note,omitempty"`
}

type PatchNoteResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *PatchNoteRespData `json:"data"`
}

func (resp *PatchNoteResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type GetOfferSchemaReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewGetOfferSchemaReqBuilder() *GetOfferSchemaReqBuilder {
	builder := &GetOfferSchemaReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *GetOfferSchemaReqBuilder) OfferSchemaId(offerSchemaId string) *GetOfferSchemaReqBuilder {
	builder.apiReq.PathParams.Set("offer_schema_id", fmt.Sprint(offerSchemaId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *GetOfferSchemaReqBuilder) Build() *GetOfferSchemaReq {
	req := &GetOfferSchemaReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type GetOfferSchemaReq struct {
	apiReq *larkcore.ApiReq
}

type GetOfferSchemaRespData struct {
	Id         *string              `json:"id,omitempty"`
	Scenario   *int                 `json:"scenario,omitempty"`
	Version    *int                 `json:"version,omitempty"`
	ObjectList []*OfferSchemaDetail `json:"object_list,omitempty"`
}

type GetOfferSchemaResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetOfferSchemaRespData `json:"data"`
}

func (resp *GetOfferSchemaResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type GetByApplicationReferralReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewGetByApplicationReferralReqBuilder() *GetByApplicationReferralReqBuilder {
	builder := &GetByApplicationReferralReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *GetByApplicationReferralReqBuilder) ApplicationId(applicationId string) *GetByApplicationReferralReqBuilder {
	builder.apiReq.QueryParams.Set("application_id", fmt.Sprint(applicationId))
	return builder
}
func (builder *GetByApplicationReferralReqBuilder) UserIdType(userIdType string) *GetByApplicationReferralReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *GetByApplicationReferralReqBuilder) Build() *GetByApplicationReferralReq {
	req := &GetByApplicationReferralReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type GetByApplicationReferralReq struct {
	apiReq *larkcore.ApiReq
}

type GetByApplicationReferralRespData struct {
	Referral *Referral `json:"referral,omitempty"`
}

type GetByApplicationReferralResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetByApplicationReferralRespData `json:"data"`
}

func (resp *GetByApplicationReferralResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type ListResumeSourceReqBuilder struct {
	apiReq *larkcore.ApiReq
	limit  int
}

// 生成请求的New构造器
func NewListResumeSourceReqBuilder() *ListResumeSourceReqBuilder {
	builder := &ListResumeSourceReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *ListResumeSourceReqBuilder) Limit(limit int) *ListResumeSourceReqBuilder {
	builder.limit = limit
	return builder
}
func (builder *ListResumeSourceReqBuilder) PageSize(pageSize int) *ListResumeSourceReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}
func (builder *ListResumeSourceReqBuilder) PageToken(pageToken string) *ListResumeSourceReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *ListResumeSourceReqBuilder) Build() *ListResumeSourceReq {
	req := &ListResumeSourceReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListResumeSourceReq struct {
	apiReq *larkcore.ApiReq
	Limit  int
}

type ListResumeSourceRespData struct {
	Items     []*ResumeSource `json:"items,omitempty"`
	PageToken *string         `json:"page_token,omitempty"`
	HasMore   *bool           `json:"has_more,omitempty"`
}

type ListResumeSourceResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListResumeSourceRespData `json:"data"`
}

func (resp *ListResumeSourceResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type GetTalentReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewGetTalentReqBuilder() *GetTalentReqBuilder {
	builder := &GetTalentReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *GetTalentReqBuilder) TalentId(talentId string) *GetTalentReqBuilder {
	builder.apiReq.PathParams.Set("talent_id", fmt.Sprint(talentId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *GetTalentReqBuilder) Build() *GetTalentReq {
	req := &GetTalentReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type GetTalentReq struct {
	apiReq *larkcore.ApiReq
}

type GetTalentRespData struct {
	Talent *Talent `json:"talent,omitempty"`
}

type GetTalentResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetTalentRespData `json:"data"`
}

func (resp *GetTalentResp) Success() bool {
	return resp.Code == 0
}

// 生成消息事件结构体

// 生成请求的builder构造器
// 1.1 生成body的builder结构体
type ListResumeSourceIterator struct {
	nextPageToken *string
	items         []*ResumeSource
	index         int
	limit         int
	ctx           context.Context
	req           *ListResumeSourceReq
	listFunc      func(ctx context.Context, req *ListResumeSourceReq, options ...larkcore.RequestOptionFunc) (*ListResumeSourceResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *ListResumeSourceIterator) Next() (bool, *ResumeSource, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListResumeSourceIterator) NextPageToken() *string {
	return iterator.nextPageToken
}
