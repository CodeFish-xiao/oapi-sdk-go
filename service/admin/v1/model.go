// Package admin code generated by oapi sdk gen
package admin

import (
	"github.com/larksuite/oapi-sdk-go/core"
)

/**生成枚举值 **/

const (
	DepartmentIdTypeDepartmentId     string = "department_id"
	DepartmentIdTypeOpenDepartmentId string = "open_department_id"
)

const (
	UserIdTypeUserId  string = "user_id"
	UserIdTypeUnionId string = "union_id"
	UserIdTypeOpenId  string = "open_id"
)

/**生成数据类型 **/

type AdminDeptStat struct {
	Date                 *string `json:"date,omitempty"`
	DepartmentId         *string `json:"department_id,omitempty"`
	DepartmentName       *string `json:"department_name,omitempty"`
	DepartmentPath       *string `json:"department_path,omitempty"`
	TotalUserNum         *int    `json:"total_user_num,omitempty"`
	ActiveUserNum        *int    `json:"active_user_num,omitempty"`
	ActiveUserRate       *string `json:"active_user_rate,omitempty"`
	SuiteDau             *int    `json:"suite_dau,omitempty"`
	SuiteActiveRate      *string `json:"suite_active_rate,omitempty"`
	NewUserNum           *int    `json:"new_user_num,omitempty"`
	NewActiveNum         *int    `json:"new_active_num,omitempty"`
	ResignUserNum        *int    `json:"resign_user_num,omitempty"`
	ImDau                *int    `json:"im_dau,omitempty"`
	SendMessengerUserNum *int    `json:"send_messenger_user_num,omitempty"`
	SendMessengerNum     *int    `json:"send_messenger_num,omitempty"`
	AvgSendMessengerNum  *string `json:"avg_send_messenger_num,omitempty"`
	DocsDau              *int    `json:"docs_dau,omitempty"`
	CreateDocsUserNum    *int    `json:"create_docs_user_num,omitempty"`
	CreateDocsNum        *int    `json:"create_docs_num,omitempty"`
	AvgCreateDocsNum     *string `json:"avg_create_docs_num,omitempty"`
	CalDau               *int    `json:"cal_dau,omitempty"`
	CreateCalUserNum     *int    `json:"create_cal_user_num,omitempty"`
	CreateCalNum         *int    `json:"create_cal_num,omitempty"`
	AvgCreateCalNum      *string `json:"avg_create_cal_num,omitempty"`
	VcDau                *int    `json:"vc_dau,omitempty"`
	VcDuration           *int    `json:"vc_duration,omitempty"`
	AvgVcDuration        *string `json:"avg_vc_duration,omitempty"`
	AvgDuration          *string `json:"avg_duration,omitempty"`
	TaskDau              *int    `json:"task_dau,omitempty"`
	CreateTaskUserNum    *int    `json:"create_task_user_num,omitempty"`
	CreateTaskNum        *int    `json:"create_task_num,omitempty"`
	AvgCreateTaskNum     *string `json:"avg_create_task_num,omitempty"`
}

type AdminUserStat struct {
	Date             *string `json:"date,omitempty"`
	UserId           *string `json:"user_id,omitempty"`
	UserName         *string `json:"user_name,omitempty"`
	DepartmentName   *string `json:"department_name,omitempty"`
	DepartmentPath   *string `json:"department_path,omitempty"`
	CreateTime       *string `json:"create_time,omitempty"`
	UserActiveFlag   *int    `json:"user_active_flag,omitempty"`
	RegisterTime     *string `json:"register_time,omitempty"`
	SuiteActiveFlag  *int    `json:"suite_active_flag,omitempty"`
	LastActiveTime   *string `json:"last_active_time,omitempty"`
	ImActiveFlag     *int    `json:"im_active_flag,omitempty"`
	SendMessengerNum *int    `json:"send_messenger_num,omitempty"`
	DocsActiveFlag   *int    `json:"docs_active_flag,omitempty"`
	CreateDocsNum    *int    `json:"create_docs_num,omitempty"`
	CalActiveFlag    *int    `json:"cal_active_flag,omitempty"`
	CreateCalNum     *int    `json:"create_cal_num,omitempty"`
	VcActiveFlag     *int    `json:"vc_active_flag,omitempty"`
	VcDuration       *int    `json:"vc_duration,omitempty"`
	ActiveOs         *string `json:"active_os,omitempty"`
	CreateTaskNum    *int    `json:"create_task_num,omitempty"`
	VcNum            *int    `json:"vc_num,omitempty"`
}

type Administrator struct {
	UserId               *int64 `json:"user_id,omitempty,string"`
	IsSuperAdministrator *bool  `json:"is_super_administrator,omitempty"`
	IsAdministrator      *bool  `json:"is_administrator,omitempty"`
}

type ApiAuditCommonDrawers struct {
	CommonDrawInfoList []*ApiAuditDrawerInfo `json:"common_draw_info_list,omitempty"`
}

type ApiAuditDrawerInfo struct {
	InfoKey    *string `json:"info_key,omitempty"`
	InfoVal    *string `json:"info_val,omitempty"`
	KeyI18nKey *string `json:"key_i18n_key,omitempty"`
	ValType    *string `json:"val_type,omitempty"`
	ValI18nKey *string `json:"val_i18n_key,omitempty"`
}

type AuditAndroidContext struct {
	Udid            *string `json:"udid,omitempty"`
	Did             *string `json:"did,omitempty"`
	AppVer          *string `json:"app_ver,omitempty"`
	Ver             *string `json:"ver,omitempty"`
	Region          *string `json:"region,omitempty"`
	IdI             *string `json:"id_i,omitempty"`
	IdR             *string `json:"id_r,omitempty"`
	HwBrand         *string `json:"hw_brand,omitempty"`
	HwManuf         *string `json:"hw_manuf,omitempty"`
	Wifip           *string `json:"wifip,omitempty"`
	RouteIip        *string `json:"route_iip,omitempty"`
	RouteGip        *string `json:"route_gip,omitempty"`
	EnvSu           *string `json:"env_su,omitempty"`
	EnvTz           *string `json:"env_tz,omitempty"`
	EnvMl           *string `json:"env_ml,omitempty"`
	Location        *string `json:"location,omitempty"`
	ActiveIp        *string `json:"active_ip,omitempty"`
	ActiveIpDetail  *string `json:"active_ip_detail,omitempty"`
	CellBaseStation *string `json:"cell_base_station,omitempty"`
	IP              *string `json:"IP,omitempty"`
}

type AuditContext struct {
	TerminalType   *int                 `json:"terminal_type,omitempty"`
	IosContext     *AuditIosContext     `json:"ios_context,omitempty"`
	PcContext      *AuditPcContext      `json:"pc_context,omitempty"`
	WebContext     *AuditWebContext     `json:"web_context,omitempty"`
	AndroidContext *AuditAndroidContext `json:"android_context,omitempty"`
}

type AuditEventExtend struct {
	CommentType                 *string `json:"comment_type,omitempty"`
	AppDetail                   *string `json:"app_detail,omitempty"`
	TwoStepValidation           *bool   `json:"two_step_validation,omitempty"`
	LoginMethod                 *string `json:"login_method,omitempty"`
	NewPeopleNumInVideo         *int    `json:"new_people_num_in_video,omitempty"`
	ExternalPeopleNumInVideo    *int    `json:"external_people_num_in_video,omitempty"`
	ExternalPeopleNumInChat     *int    `json:"external_people_num_in_chat,omitempty"`
	JoinGroup                   *int    `json:"join_group,omitempty"`
	QuitGroup                   *int    `json:"quit_group,omitempty"`
	ExternalPeopleNumInDocShare *int    `json:"external_people_num_in_doc_share,omitempty"`
}

type AuditInfo struct {
	EventId         *string                 `json:"event_id,omitempty"`
	UniqueId        *string                 `json:"unique_id,omitempty"`
	EventName       *string                 `json:"event_name,omitempty"`
	DepartmentIds   []string                `json:"department_ids,omitempty"`
	EventModule     *int                    `json:"event_module,omitempty"`
	OperatorType    *int                    `json:"operator_type,omitempty"`
	OperatorValue   *string                 `json:"operator_value,omitempty"`
	Objects         []*AuditObjectEntity    `json:"objects,omitempty"`
	Recipients      []*AuditRecipientEntity `json:"recipients,omitempty"`
	EventTime       *int                    `json:"event_time,omitempty"`
	Ip              *string                 `json:"ip,omitempty"`
	OperatorApp     *string                 `json:"operator_app,omitempty"`
	AuditContext    *AuditContext           `json:"audit_context,omitempty"`
	Extend          *AuditEventExtend       `json:"extend,omitempty"`
	OperatorAppName *string                 `json:"operator_app_name,omitempty"`
	CommonDrawers   *ApiAuditCommonDrawers  `json:"common_drawers,omitempty"`
}

type AuditIosContext struct {
	Udid            *string `json:"udid,omitempty"`
	Did             *string `json:"did,omitempty"`
	AppVer          *string `json:"app_ver,omitempty"`
	Ver             *string `json:"ver,omitempty"`
	Os              *string `json:"os,omitempty"`
	STZone          *string `json:"STZone,omitempty"`
	ML              *string `json:"ML,omitempty"`
	Sjd             *string `json:"sjd,omitempty"`
	Proxyip         *string `json:"proxyip,omitempty"`
	Wifip           *string `json:"wifip,omitempty"`
	Location        *string `json:"location,omitempty"`
	ActiveIp        *string `json:"active_ip,omitempty"`
	ActiveIpDetail  *string `json:"active_ip_detail,omitempty"`
	CellBaseStation *string `json:"cell_base_station,omitempty"`
	IP              *string `json:"IP,omitempty"`
}

type AuditObjectDetail struct {
	CloneSource                  *string `json:"clone_source,omitempty"`
	TextDetail                   *string `json:"text_detail,omitempty"`
	FileName                     *string `json:"file_name,omitempty"`
	ThirdPartyAppID              *string `json:"third_party_appID,omitempty"`
	ContainFileNum               *int    `json:"contain_file_num,omitempty"`
	PermissionSettingType        *string `json:"permission_setting_type,omitempty"`
	PermissionExternalAccessType *bool   `json:"permission_external_access_Type,omitempty"`
	PermissionShareType          *string `json:"permission_share_type,omitempty"`
	FileServiceSource            *string `json:"file_service_source,omitempty"`
	OkrDownloadContent           *string `json:"okr_download_content,omitempty"`
	ContainerType                *string `json:"container_type,omitempty"`
	ContainerId                  *string `json:"container_id,omitempty"`
	CurrentPage                  *string `json:"current_page,omitempty"`
}

type AuditObjectEntity struct {
	ObjectType   *string            `json:"object_type,omitempty"`
	ObjectValue  *string            `json:"object_value,omitempty"`
	ObjectName   *string            `json:"object_name,omitempty"`
	ObjectOwner  *string            `json:"object_owner,omitempty"`
	ObjectDetail *AuditObjectDetail `json:"object_detail,omitempty"`
}

type AuditPcContext struct {
	Udid   *string `json:"udid,omitempty"`
	Did    *string `json:"did,omitempty"`
	AppVer *string `json:"app_ver,omitempty"`
	Ver    *string `json:"ver,omitempty"`
	Os     *string `json:"os,omitempty"`
	Wifip  *string `json:"wifip,omitempty"`
	Region *string `json:"region,omitempty"`
	IP     *string `json:"IP,omitempty"`
}

type AuditRecipientDetail struct {
	PermissionActionType *string `json:"permission_action_type,omitempty"`
}

type AuditRecipientEntity struct {
	RecipientType   *string               `json:"recipient_type,omitempty"`
	RecipientValue  *string               `json:"recipient_value,omitempty"`
	RecipientDetail *AuditRecipientDetail `json:"recipient_detail,omitempty"`
}

type AuditWebContext struct {
	UserAgent *string `json:"user_agent,omitempty"`
	IP        *string `json:"IP,omitempty"`
}

type Badge struct {
	Id          *string `json:"id,omitempty"`
	Name        *string `json:"name,omitempty"`
	Explanation *string `json:"explanation,omitempty"`
	DetailImage *string `json:"detail_image,omitempty"`
	ShowImage   *string `json:"show_image,omitempty"`
}

type File struct {
	Title      *string `json:"title,omitempty"`
	Type       *string `json:"type,omitempty"`
	Owner      *User   `json:"owner,omitempty"`
	Size       *string `json:"size,omitempty"`
	LastOpTime *string `json:"last_op_time,omitempty"`
	Status     *string `json:"status,omitempty"`
	Token      *string `json:"token,omitempty"`
}

type FileList struct {
	Files []*File `json:"files,omitempty"`
}

type Grant struct {
	Id            *string     `json:"id,omitempty"`
	BadgeId       *string     `json:"badge_id,omitempty"`
	Name          *string     `json:"name,omitempty"`
	GrantType     *int        `json:"grant_type,omitempty"`
	TimeZone      *string     `json:"time_zone,omitempty"`
	RuleDetail    *RuleDetail `json:"rule_detail,omitempty"`
	IsGrantAll    *bool       `json:"is_grant_all,omitempty"`
	UserIds       []string    `json:"user_ids,omitempty"`
	DepartmentIds []string    `json:"department_ids,omitempty"`
	GroupIds      []string    `json:"group_ids,omitempty"`
}

type Password struct {
	EntEmailPassword *string `json:"ent_email_password,omitempty"`
}

type RuleDetail struct {
	EffectiveTime   *int64 `json:"effective_time,omitempty,string"`
	ExpirationTime  *int64 `json:"expiration_time,omitempty,string"`
	Anniversary     *int   `json:"anniversary,omitempty"`
	EffectivePeriod *int   `json:"effective_period,omitempty"`
}

type SplashPageStat struct {
	Date                      *string `json:"date,omitempty"`
	SplashId                  *string `json:"splash_id,omitempty"`
	ImpressionCount           *int    `json:"impression_count,omitempty"`
	ClickCount                *int    `json:"click_count,omitempty"`
	SkipCount                 *int    `json:"skip_count,omitempty"`
	ImpressionCountAccumulate *int    `json:"impression_count_accumulate,omitempty"`
	ClickCountAccumulate      *int    `json:"click_count_accumulate,omitempty"`
	SkipCountAccumulate       *int    `json:"skip_count_accumulate,omitempty"`
}

type User struct {
	Name   *string `json:"name,omitempty"`
	Avatar *string `json:"avatar,omitempty"`
	Id     *string `json:"id,omitempty"`
}

type UserAnnualReport struct {
	Year2021 *UserReport2021 `json:"year_2021,omitempty"`
}

type UserReport2021 struct {
	ActiveDayCount                *int     `json:"active_day_count,omitempty"`
	BusyWeek                      *string  `json:"busy_week,omitempty"`
	P2pChatCount                  *string  `json:"p2p_chat_count,omitempty"`
	TalkedChatCount               *string  `json:"talked_chat_count,omitempty"`
	FavoriteEmoji                 *string  `json:"favorite_emoji,omitempty"`
	ReactionCount                 *string  `json:"reaction_count,omitempty"`
	ConferenceCreateCount         *string  `json:"conference_create_count,omitempty"`
	TotalPartiCount               *string  `json:"total_parti_count,omitempty"`
	MinutesObjectCount            *string  `json:"minutes_object_count,omitempty"`
	MinutesDuration               *float64 `json:"minutes_duration,omitempty"`
	CreateEditFileCount           *string  `json:"create_edit_file_count,omitempty"`
	CreateFileCount               *string  `json:"create_file_count,omitempty"`
	CooperateEditFileCount        *string  `json:"cooperate_edit_file_count,omitempty"`
	LikeRecordCount               *string  `json:"like_record_count,omitempty"`
	OkrCumOCount                  *string  `json:"okr_cum_o_count,omitempty"`
	OkrCumKrCount                 *string  `json:"okr_cum_kr_count,omitempty"`
	OkrAlignedUserRankfirst       *string  `json:"okr_aligned_user_rankfirst,omitempty"`
	ApprovalStartCount            *string  `json:"approval_start_count,omitempty"`
	ApprovalExecuteCount          *string  `json:"approval_execute_count,omitempty"`
	ApprovalRelationUserRankfirst *string  `json:"approval_relation_user_rankfirst,omitempty"`
	UserId                        *string  `json:"user_id,omitempty"`
	BusyWeekSumDuration           *string  `json:"busy_week_sum_duration,omitempty"`
	BusyWeekMdate                 *string  `json:"busy_week_mdate,omitempty"`
	BusyWeekActDays               *int     `json:"busy_week_act_days,omitempty"`
	CreateReadUserCount           *string  `json:"create_read_user_count,omitempty"`
}

/**生成请求和响应结果类型，以及请求对象的Builder构造器 **/

/*1.4 生成请求的builder结构体*/
type ListAdminDeptStatReqBuilder struct {
	departmentIdType      string
	departmentIdTypeFlag  bool
	startDate             string
	startDateFlag         bool
	endDate               string
	endDateFlag           bool
	departmentId          string
	departmentIdFlag      bool
	containsChildDept     bool
	containsChildDeptFlag bool
	pageSize              int
	pageSizeFlag          bool
	pageToken             string
	pageTokenFlag         bool
}

// 生成请求的New构造器
func NewListAdminDeptStatReqBuilder() *ListAdminDeptStatReqBuilder {
	builder := &ListAdminDeptStatReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *ListAdminDeptStatReqBuilder) DepartmentIdType(departmentIdType string) *ListAdminDeptStatReqBuilder {
	builder.departmentIdType = departmentIdType
	builder.departmentIdTypeFlag = true
	return builder
}
func (builder *ListAdminDeptStatReqBuilder) StartDate(startDate string) *ListAdminDeptStatReqBuilder {
	builder.startDate = startDate
	builder.startDateFlag = true
	return builder
}
func (builder *ListAdminDeptStatReqBuilder) EndDate(endDate string) *ListAdminDeptStatReqBuilder {
	builder.endDate = endDate
	builder.endDateFlag = true
	return builder
}
func (builder *ListAdminDeptStatReqBuilder) DepartmentId(departmentId string) *ListAdminDeptStatReqBuilder {
	builder.departmentId = departmentId
	builder.departmentIdFlag = true
	return builder
}
func (builder *ListAdminDeptStatReqBuilder) ContainsChildDept(containsChildDept bool) *ListAdminDeptStatReqBuilder {
	builder.containsChildDept = containsChildDept
	builder.containsChildDeptFlag = true
	return builder
}
func (builder *ListAdminDeptStatReqBuilder) PageSize(pageSize int) *ListAdminDeptStatReqBuilder {
	builder.pageSize = pageSize
	builder.pageSizeFlag = true
	return builder
}
func (builder *ListAdminDeptStatReqBuilder) PageToken(pageToken string) *ListAdminDeptStatReqBuilder {
	builder.pageToken = pageToken
	builder.pageTokenFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *ListAdminDeptStatReqBuilder) Build() *ListAdminDeptStatReq {
	req := &ListAdminDeptStatReq{}
	if builder.departmentIdTypeFlag {
		req.DepartmentIdType = &builder.departmentIdType
	}
	if builder.startDateFlag {
		req.StartDate = &builder.startDate
	}
	if builder.endDateFlag {
		req.EndDate = &builder.endDate
	}
	if builder.departmentIdFlag {
		req.DepartmentId = &builder.departmentId
	}
	if builder.containsChildDeptFlag {
		req.ContainsChildDept = &builder.containsChildDept
	}
	if builder.pageSizeFlag {
		req.PageSize = &builder.pageSize
	}
	if builder.pageTokenFlag {
		req.PageToken = &builder.pageToken
	}
	return req
}

type ListAdminDeptStatReq struct {
	DepartmentIdType  *string `query:"department_id_type"`
	StartDate         *string `query:"start_date"`
	EndDate           *string `query:"end_date"`
	DepartmentId      *string `query:"department_id"`
	ContainsChildDept *bool   `query:"contains_child_dept"`
	PageSize          *int    `query:"page_size"`
	PageToken         *string `query:"page_token"`
}

type ListAdminDeptStatRespData struct {
	HasMore   *bool            `json:"has_more,omitempty"`
	PageToken *string          `json:"page_token,omitempty"`
	Items     []*AdminDeptStat `json:"items,omitempty"`
}

type ListAdminDeptStatResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *ListAdminDeptStatRespData `json:"data"`
}

func (resp *ListAdminDeptStatResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type ListAdminUserStatReqBuilder struct {
	userIdType           string
	userIdTypeFlag       bool
	departmentIdType     string
	departmentIdTypeFlag bool
	startDate            string
	startDateFlag        bool
	endDate              string
	endDateFlag          bool
	departmentId         string
	departmentIdFlag     bool
	userId               string
	userIdFlag           bool
	pageSize             int
	pageSizeFlag         bool
	pageToken            string
	pageTokenFlag        bool
}

// 生成请求的New构造器
func NewListAdminUserStatReqBuilder() *ListAdminUserStatReqBuilder {
	builder := &ListAdminUserStatReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *ListAdminUserStatReqBuilder) UserIdType(userIdType string) *ListAdminUserStatReqBuilder {
	builder.userIdType = userIdType
	builder.userIdTypeFlag = true
	return builder
}
func (builder *ListAdminUserStatReqBuilder) DepartmentIdType(departmentIdType string) *ListAdminUserStatReqBuilder {
	builder.departmentIdType = departmentIdType
	builder.departmentIdTypeFlag = true
	return builder
}
func (builder *ListAdminUserStatReqBuilder) StartDate(startDate string) *ListAdminUserStatReqBuilder {
	builder.startDate = startDate
	builder.startDateFlag = true
	return builder
}
func (builder *ListAdminUserStatReqBuilder) EndDate(endDate string) *ListAdminUserStatReqBuilder {
	builder.endDate = endDate
	builder.endDateFlag = true
	return builder
}
func (builder *ListAdminUserStatReqBuilder) DepartmentId(departmentId string) *ListAdminUserStatReqBuilder {
	builder.departmentId = departmentId
	builder.departmentIdFlag = true
	return builder
}
func (builder *ListAdminUserStatReqBuilder) UserId(userId string) *ListAdminUserStatReqBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}
func (builder *ListAdminUserStatReqBuilder) PageSize(pageSize int) *ListAdminUserStatReqBuilder {
	builder.pageSize = pageSize
	builder.pageSizeFlag = true
	return builder
}
func (builder *ListAdminUserStatReqBuilder) PageToken(pageToken string) *ListAdminUserStatReqBuilder {
	builder.pageToken = pageToken
	builder.pageTokenFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *ListAdminUserStatReqBuilder) Build() *ListAdminUserStatReq {
	req := &ListAdminUserStatReq{}
	if builder.userIdTypeFlag {
		req.UserIdType = &builder.userIdType
	}
	if builder.departmentIdTypeFlag {
		req.DepartmentIdType = &builder.departmentIdType
	}
	if builder.startDateFlag {
		req.StartDate = &builder.startDate
	}
	if builder.endDateFlag {
		req.EndDate = &builder.endDate
	}
	if builder.departmentIdFlag {
		req.DepartmentId = &builder.departmentId
	}
	if builder.userIdFlag {
		req.UserId = &builder.userId
	}
	if builder.pageSizeFlag {
		req.PageSize = &builder.pageSize
	}
	if builder.pageTokenFlag {
		req.PageToken = &builder.pageToken
	}
	return req
}

type ListAdminUserStatReq struct {
	UserIdType       *string `query:"user_id_type"`
	DepartmentIdType *string `query:"department_id_type"`
	StartDate        *string `query:"start_date"`
	EndDate          *string `query:"end_date"`
	DepartmentId     *string `query:"department_id"`
	UserId           *string `query:"user_id"`
	PageSize         *int    `query:"page_size"`
	PageToken        *string `query:"page_token"`
}

type ListAdminUserStatRespData struct {
	HasMore   *bool            `json:"has_more,omitempty"`
	PageToken *string          `json:"page_token,omitempty"`
	Items     []*AdminUserStat `json:"items,omitempty"`
}

type ListAdminUserStatResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *ListAdminUserStatRespData `json:"data"`
}

func (resp *ListAdminUserStatResp) Success() bool {
	return resp.Code == 0
}

type ResetPasswordReqBodyBuilder struct {
	password     *Password
	passwordFlag bool
	userId       string
	userIdFlag   bool
}

// 生成body的New构造器
func NewResetPasswordReqBodyBuilder() *ResetPasswordReqBodyBuilder {
	builder := &ResetPasswordReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *ResetPasswordReqBodyBuilder) Password(password *Password) *ResetPasswordReqBodyBuilder {
	builder.password = password
	builder.passwordFlag = true
	return builder
}
func (builder *ResetPasswordReqBodyBuilder) UserId(userId string) *ResetPasswordReqBodyBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *ResetPasswordReqBodyBuilder) Build() *ResetPasswordReqBody {
	req := &ResetPasswordReqBody{}
	if builder.passwordFlag {
		req.Password = builder.password

	}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	return req
}

/**上传文件path开始**/
type ResetPasswordPathReqBodyBuilder struct {
	password     *Password
	passwordFlag bool
	userId       string
	userIdFlag   bool
}

func NewResetPasswordPathReqBodyBuilder() *ResetPasswordPathReqBodyBuilder {
	builder := &ResetPasswordPathReqBodyBuilder{}
	return builder
}
func (builder *ResetPasswordPathReqBodyBuilder) Password(password *Password) *ResetPasswordPathReqBodyBuilder {
	builder.password = password
	builder.passwordFlag = true
	return builder
}
func (builder *ResetPasswordPathReqBodyBuilder) UserId(userId string) *ResetPasswordPathReqBodyBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}

func (builder *ResetPasswordPathReqBodyBuilder) Build() (*ResetPasswordReqBody, error) {
	req := &ResetPasswordReqBody{}
	if builder.passwordFlag {
		req.Password = builder.password
	}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type ResetPasswordReqBuilder struct {
	userIdType     string
	userIdTypeFlag bool
	body           *ResetPasswordReqBody
	bodyFlag       bool
}

// 生成请求的New构造器
func NewResetPasswordReqBuilder() *ResetPasswordReqBuilder {
	builder := &ResetPasswordReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *ResetPasswordReqBuilder) UserIdType(userIdType string) *ResetPasswordReqBuilder {
	builder.userIdType = userIdType
	builder.userIdTypeFlag = true
	return builder
}
func (builder *ResetPasswordReqBuilder) Body(body *ResetPasswordReqBody) *ResetPasswordReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *ResetPasswordReqBuilder) Build() *ResetPasswordReq {
	req := &ResetPasswordReq{}
	if builder.userIdTypeFlag {
		req.UserIdType = &builder.userIdType
	}
	if builder.bodyFlag {
		req.Body = builder.body
	}
	return req
}

type ResetPasswordReqBody struct {
	Password *Password `json:"password,omitempty"`
	UserId   *string   `json:"user_id,omitempty"`
}

type ResetPasswordReq struct {
	UserIdType *string               `query:"user_id_type"`
	Body       *ResetPasswordReqBody `body:""`
}

type ResetPasswordResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *ResetPasswordResp) Success() bool {
	return resp.Code == 0
}

/**生成消息事件结构体 **/

/* 生成请求的builder构造器*/
/*1.1 生成body的builder结构体*/
