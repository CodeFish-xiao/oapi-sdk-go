// Package drive code generated by oapi sdk gen
package drive
import (
	"context"
)

/**
消息处理器定义
**/
type FileBitableRecordChangedEventHandler struct {
	handler func(context.Context, *FileBitableRecordChangedEvent) error
}

func NewFileBitableRecordChangedEventHandler(handler func(context.Context, *FileBitableRecordChangedEvent) error) *FileBitableRecordChangedEventHandler{
   h := &FileBitableRecordChangedEventHandler{handler: handler}
   return h
}
/**
返回事件的消息体的实例，用于反序列化用
**/
func (h *FileBitableRecordChangedEventHandler) Event() interface{} {
	return &FileBitableRecordChangedEvent{}
}

/**
 回调开发者注册的handle
 r**/
func (h *FileBitableRecordChangedEventHandler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*FileBitableRecordChangedEvent))
}

/**
消息处理器定义
**/
type FileDeletedEventHandler struct {
	handler func(context.Context, *FileDeletedEvent) error
}

func NewFileDeletedEventHandler(handler func(context.Context, *FileDeletedEvent) error) *FileDeletedEventHandler{
   h := &FileDeletedEventHandler{handler: handler}
   return h
}
/**
返回事件的消息体的实例，用于反序列化用
**/
func (h *FileDeletedEventHandler) Event() interface{} {
	return &FileDeletedEvent{}
}

/**
 回调开发者注册的handle
 r**/
func (h *FileDeletedEventHandler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*FileDeletedEvent))
}

/**
消息处理器定义
**/
type FileEditEventHandler struct {
	handler func(context.Context, *FileEditEvent) error
}

func NewFileEditEventHandler(handler func(context.Context, *FileEditEvent) error) *FileEditEventHandler{
   h := &FileEditEventHandler{handler: handler}
   return h
}
/**
返回事件的消息体的实例，用于反序列化用
**/
func (h *FileEditEventHandler) Event() interface{} {
	return &FileEditEvent{}
}

/**
 回调开发者注册的handle
 r**/
func (h *FileEditEventHandler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*FileEditEvent))
}

/**
消息处理器定义
**/
type FilePermissionMemberAddedEventHandler struct {
	handler func(context.Context, *FilePermissionMemberAddedEvent) error
}

func NewFilePermissionMemberAddedEventHandler(handler func(context.Context, *FilePermissionMemberAddedEvent) error) *FilePermissionMemberAddedEventHandler{
   h := &FilePermissionMemberAddedEventHandler{handler: handler}
   return h
}
/**
返回事件的消息体的实例，用于反序列化用
**/
func (h *FilePermissionMemberAddedEventHandler) Event() interface{} {
	return &FilePermissionMemberAddedEvent{}
}

/**
 回调开发者注册的handle
 r**/
func (h *FilePermissionMemberAddedEventHandler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*FilePermissionMemberAddedEvent))
}

/**
消息处理器定义
**/
type FilePermissionMemberRemovedEventHandler struct {
	handler func(context.Context, *FilePermissionMemberRemovedEvent) error
}

func NewFilePermissionMemberRemovedEventHandler(handler func(context.Context, *FilePermissionMemberRemovedEvent) error) *FilePermissionMemberRemovedEventHandler{
   h := &FilePermissionMemberRemovedEventHandler{handler: handler}
   return h
}
/**
返回事件的消息体的实例，用于反序列化用
**/
func (h *FilePermissionMemberRemovedEventHandler) Event() interface{} {
	return &FilePermissionMemberRemovedEvent{}
}

/**
 回调开发者注册的handle
 r**/
func (h *FilePermissionMemberRemovedEventHandler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*FilePermissionMemberRemovedEvent))
}

/**
消息处理器定义
**/
type FileReadEventHandler struct {
	handler func(context.Context, *FileReadEvent) error
}

func NewFileReadEventHandler(handler func(context.Context, *FileReadEvent) error) *FileReadEventHandler{
   h := &FileReadEventHandler{handler: handler}
   return h
}
/**
返回事件的消息体的实例，用于反序列化用
**/
func (h *FileReadEventHandler) Event() interface{} {
	return &FileReadEvent{}
}

/**
 回调开发者注册的handle
 r**/
func (h *FileReadEventHandler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*FileReadEvent))
}

/**
消息处理器定义
**/
type FileTitleUpdatedEventHandler struct {
	handler func(context.Context, *FileTitleUpdatedEvent) error
}

func NewFileTitleUpdatedEventHandler(handler func(context.Context, *FileTitleUpdatedEvent) error) *FileTitleUpdatedEventHandler{
   h := &FileTitleUpdatedEventHandler{handler: handler}
   return h
}
/**
返回事件的消息体的实例，用于反序列化用
**/
func (h *FileTitleUpdatedEventHandler) Event() interface{} {
	return &FileTitleUpdatedEvent{}
}

/**
 回调开发者注册的handle
 r**/
func (h *FileTitleUpdatedEventHandler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*FileTitleUpdatedEvent))
}

/**
消息处理器定义
**/
type FileTrashedEventHandler struct {
	handler func(context.Context, *FileTrashedEvent) error
}

func NewFileTrashedEventHandler(handler func(context.Context, *FileTrashedEvent) error) *FileTrashedEventHandler{
   h := &FileTrashedEventHandler{handler: handler}
   return h
}
/**
返回事件的消息体的实例，用于反序列化用
**/
func (h *FileTrashedEventHandler) Event() interface{} {
	return &FileTrashedEvent{}
}

/**
 回调开发者注册的handle
 r**/
func (h *FileTrashedEventHandler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*FileTrashedEvent))
}