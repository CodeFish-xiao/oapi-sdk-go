// Package drive code generated by oapi sdk gen
package drive

import (
	"net/http"
	"bytes"
	"context"
	
	"github.com/feishu/oapi-sdk-go/core"
)

/**
构建业务域服务实例
**/
func NewService(httpClient *http.Client, config *core.Config) *DriveService {
	d := &DriveService{httpClient:httpClient,config:config}
	d.ExportTasks = &exportTasks{service: d}
	d.Files = &files{service: d}
	d.FileComments = &fileComments{service: d}
	d.FileCommentReplies = &fileCommentReplies{service: d}
	d.FileStatistics = &fileStatistics{service: d}
	d.FileSubscriptions = &fileSubscriptions{service: d}
	d.ImportTasks = &importTasks{service: d}
	d.Medias = &medias{service: d}
	d.Metas = &metas{service: d}
	d.Members = &members{service: d}
	d.PermissionPublic = &permissionPublic{service: d}
	return d
}

/**
业务域服务定义
**/
type DriveService struct {
	httpClient *http.Client
	config *core.Config
	ExportTasks *exportTasks
	Files *files
	FileComments *fileComments
	FileCommentReplies *fileCommentReplies
	FileStatistics *fileStatistics
	FileSubscriptions *fileSubscriptions
	ImportTasks *importTasks
	Medias *medias
	Metas *metas
	Members *members
	PermissionPublic *permissionPublic
}


/**
资源服务定义
**/
type exportTasks struct {
   service *DriveService
}
type files struct {
   service *DriveService
}
type fileComments struct {
   service *DriveService
}
type fileCommentReplies struct {
   service *DriveService
}
type fileStatistics struct {
   service *DriveService
}
type fileSubscriptions struct {
   service *DriveService
}
type importTasks struct {
   service *DriveService
}
type medias struct {
   service *DriveService
}
type metas struct {
   service *DriveService
}
type members struct {
   service *DriveService
}
type permissionPublic struct {
   service *DriveService
}
/**
资源服务方法定义
**/
func (e *exportTasks) Create(ctx context.Context, req *CreateExportTaskReq, options ...core.RequestOptionFunc) (*CreateExportTaskResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,e.service.config, http.MethodPost,
		"/open-apis/drive/v1/export_tasks", []core.AccessTokenType{core.AccessTokenTypeTenant, core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &CreateExportTaskResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (e *exportTasks) Download(ctx context.Context, req *DownloadExportTaskReq, options ...core.RequestOptionFunc) (*DownloadExportTaskResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,e.service.config, http.MethodGet,
		"/open-apis/drive/v1/export_tasks/file/:file_token/download", []core.AccessTokenType{core.AccessTokenTypeTenant, core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &DownloadExportTaskResp{RawResponse: rawResp}
	// 如果是下载，则设置响应结果
	if rawResp.StatusCode == http.StatusOK {
		resp.File = bytes.NewBuffer(rawResp.RawBody)
		resp.FileName = core.FileNameByHeader(rawResp.Header)
		return resp, err
	}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (e *exportTasks) Get(ctx context.Context, req *GetExportTaskReq, options ...core.RequestOptionFunc) (*GetExportTaskResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,e.service.config, http.MethodGet,
		"/open-apis/drive/v1/export_tasks/:ticket", []core.AccessTokenType{core.AccessTokenTypeTenant, core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &GetExportTaskResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (f *files) Copy(ctx context.Context, req *CopyFileReq, options ...core.RequestOptionFunc) (*CopyFileResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,f.service.config, http.MethodPost,
		"/open-apis/drive/v1/files/:file_token/copy", []core.AccessTokenType{core.AccessTokenTypeTenant, core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &CopyFileResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (f *files) CreateFolder(ctx context.Context, req *CreateFolderFileReq, options ...core.RequestOptionFunc) (*CreateFolderFileResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,f.service.config, http.MethodPost,
		"/open-apis/drive/v1/files/create_folder", []core.AccessTokenType{core.AccessTokenTypeTenant, core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &CreateFolderFileResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (f *files) Delete(ctx context.Context, req *DeleteFileReq, options ...core.RequestOptionFunc) (*DeleteFileResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,f.service.config, http.MethodDelete,
		"/open-apis/drive/v1/files/:file_token", []core.AccessTokenType{core.AccessTokenTypeTenant, core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &DeleteFileResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (f *files) Download(ctx context.Context, req *DownloadFileReq, options ...core.RequestOptionFunc) (*DownloadFileResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,f.service.config, http.MethodGet,
		"/open-apis/drive/v1/files/:file_token/download", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &DownloadFileResp{RawResponse: rawResp}
	// 如果是下载，则设置响应结果
	if rawResp.StatusCode == http.StatusOK {
		resp.File = bytes.NewBuffer(rawResp.RawBody)
		resp.FileName = core.FileNameByHeader(rawResp.Header)
		return resp, err
	}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (f *files) List(ctx context.Context, req *ListFileReq, options ...core.RequestOptionFunc) (*ListFileResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,f.service.config, http.MethodGet,
		"/open-apis/drive/v1/files", []core.AccessTokenType{core.AccessTokenTypeTenant, core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &ListFileResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (f *files) Move(ctx context.Context, req *MoveFileReq, options ...core.RequestOptionFunc) (*MoveFileResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,f.service.config, http.MethodPost,
		"/open-apis/drive/v1/files/:file_token/move", []core.AccessTokenType{core.AccessTokenTypeTenant, core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &MoveFileResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (f *files) Search(ctx context.Context, req *SearchFileReq, options ...core.RequestOptionFunc) (*SearchFileResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,f.service.config, http.MethodPost,
		"/open-apis/drive/v1/files/search", []core.AccessTokenType{core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &SearchFileResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
/**如果是分页查询，则添加迭代器函数**/
func (f *files) SearchFile(ctx context.Context, req *SearchFileReq, options ...core.RequestOptionFunc) (*SearchFileIterator, error) {
   return &SearchFileIterator{
	  ctx:	  ctx,
	  req:	  req,
	  listFunc: f.Search,
	  options:  options,
	  limit: req.Limit}, nil
}
func (f *files) Subscribe(ctx context.Context, req *SubscribeFileReq, options ...core.RequestOptionFunc) (*SubscribeFileResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,f.service.config, http.MethodPost,
		"/open-apis/drive/v1/files/:file_token/subscribe", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &SubscribeFileResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (f *files) TaskCheck(ctx context.Context, req *TaskCheckFileReq, options ...core.RequestOptionFunc) (*TaskCheckFileResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,f.service.config, http.MethodGet,
		"/open-apis/drive/v1/files/task_check", []core.AccessTokenType{core.AccessTokenTypeTenant, core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &TaskCheckFileResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (f *files) UploadAll(ctx context.Context, req *UploadAllFileReq, options ...core.RequestOptionFunc) (*UploadAllFileResp, error) {
	options = append(options, core.WithFileUpload())

	// 发起请求
	rawResp, err := core.SendRequest(ctx,f.service.config, http.MethodPost,
		"/open-apis/drive/v1/files/upload_all", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &UploadAllFileResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (f *files) UploadFinish(ctx context.Context, req *UploadFinishFileReq, options ...core.RequestOptionFunc) (*UploadFinishFileResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,f.service.config, http.MethodPost,
		"/open-apis/drive/v1/files/upload_finish", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &UploadFinishFileResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (f *files) UploadPart(ctx context.Context, req *UploadPartFileReq, options ...core.RequestOptionFunc) (*UploadPartFileResp, error) {
	options = append(options, core.WithFileUpload())

	// 发起请求
	rawResp, err := core.SendRequest(ctx,f.service.config, http.MethodPost,
		"/open-apis/drive/v1/files/upload_part", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &UploadPartFileResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (f *files) UploadPrepare(ctx context.Context, req *UploadPrepareFileReq, options ...core.RequestOptionFunc) (*UploadPrepareFileResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,f.service.config, http.MethodPost,
		"/open-apis/drive/v1/files/upload_prepare", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &UploadPrepareFileResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (f *fileComments) Create(ctx context.Context, req *CreateFileCommentReq, options ...core.RequestOptionFunc) (*CreateFileCommentResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,f.service.config, http.MethodPost,
		"/open-apis/drive/v1/files/:file_token/comments", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &CreateFileCommentResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (f *fileComments) Get(ctx context.Context, req *GetFileCommentReq, options ...core.RequestOptionFunc) (*GetFileCommentResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,f.service.config, http.MethodGet,
		"/open-apis/drive/v1/files/:file_token/comments/:comment_id", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &GetFileCommentResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (f *fileComments) List(ctx context.Context, req *ListFileCommentReq, options ...core.RequestOptionFunc) (*ListFileCommentResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,f.service.config, http.MethodGet,
		"/open-apis/drive/v1/files/:file_token/comments", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &ListFileCommentResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
/**如果是分页查询，则添加迭代器函数**/
func (f *fileComments) ListFileComment(ctx context.Context, req *ListFileCommentReq, options ...core.RequestOptionFunc) (*ListFileCommentIterator, error) {
   return &ListFileCommentIterator{
	  ctx:	  ctx,
	  req:	  req,
	  listFunc: f.List,
	  options:  options,
	  limit: req.Limit}, nil
}
func (f *fileComments) Patch(ctx context.Context, req *PatchFileCommentReq, options ...core.RequestOptionFunc) (*PatchFileCommentResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,f.service.config, http.MethodPatch,
		"/open-apis/drive/v1/files/:file_token/comments/:comment_id", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &PatchFileCommentResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (f *fileCommentReplies) Create(ctx context.Context, req *CreateFileCommentReplyReq, options ...core.RequestOptionFunc) (*CreateFileCommentReplyResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,f.service.config, http.MethodPost,
		"/open-apis/drive/v1/files/:file_token/comments/:comment_id/replies", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &CreateFileCommentReplyResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (f *fileCommentReplies) Delete(ctx context.Context, req *DeleteFileCommentReplyReq, options ...core.RequestOptionFunc) (*DeleteFileCommentReplyResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,f.service.config, http.MethodDelete,
		"/open-apis/drive/v1/files/:file_token/comments/:comment_id/replies/:reply_id", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &DeleteFileCommentReplyResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (f *fileCommentReplies) Update(ctx context.Context, req *UpdateFileCommentReplyReq, options ...core.RequestOptionFunc) (*UpdateFileCommentReplyResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,f.service.config, http.MethodPut,
		"/open-apis/drive/v1/files/:file_token/comments/:comment_id/replies/:reply_id", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &UpdateFileCommentReplyResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (f *fileStatistics) Get(ctx context.Context, req *GetFileStatisticsReq, options ...core.RequestOptionFunc) (*GetFileStatisticsResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,f.service.config, http.MethodGet,
		"/open-apis/drive/v1/files/:file_token/statistics", []core.AccessTokenType{core.AccessTokenTypeTenant, core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &GetFileStatisticsResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (f *fileSubscriptions) Create(ctx context.Context, req *CreateFileSubscriptionReq, options ...core.RequestOptionFunc) (*CreateFileSubscriptionResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,f.service.config, http.MethodPost,
		"/open-apis/drive/v1/files/:file_token/subscriptions", []core.AccessTokenType{core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &CreateFileSubscriptionResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (f *fileSubscriptions) Get(ctx context.Context, req *GetFileSubscriptionReq, options ...core.RequestOptionFunc) (*GetFileSubscriptionResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,f.service.config, http.MethodGet,
		"/open-apis/drive/v1/files/:file_token/subscriptions/:subscription_id", []core.AccessTokenType{core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &GetFileSubscriptionResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (f *fileSubscriptions) Patch(ctx context.Context, req *PatchFileSubscriptionReq, options ...core.RequestOptionFunc) (*PatchFileSubscriptionResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,f.service.config, http.MethodPatch,
		"/open-apis/drive/v1/files/:file_token/subscriptions/:subscription_id", []core.AccessTokenType{core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &PatchFileSubscriptionResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (i *importTasks) Create(ctx context.Context, req *CreateImportTaskReq, options ...core.RequestOptionFunc) (*CreateImportTaskResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,i.service.config, http.MethodPost,
		"/open-apis/drive/v1/import_tasks", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &CreateImportTaskResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (i *importTasks) Get(ctx context.Context, req *GetImportTaskReq, options ...core.RequestOptionFunc) (*GetImportTaskResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,i.service.config, http.MethodGet,
		"/open-apis/drive/v1/import_tasks/:ticket", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &GetImportTaskResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *medias) BatchGetTmpDownloadUrl(ctx context.Context, req *BatchGetTmpDownloadUrlMediaReq, options ...core.RequestOptionFunc) (*BatchGetTmpDownloadUrlMediaResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,m.service.config, http.MethodGet,
		"/open-apis/drive/v1/medias/batch_get_tmp_download_url", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &BatchGetTmpDownloadUrlMediaResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *medias) Download(ctx context.Context, req *DownloadMediaReq, options ...core.RequestOptionFunc) (*DownloadMediaResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,m.service.config, http.MethodGet,
		"/open-apis/drive/v1/medias/:file_token/download", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &DownloadMediaResp{RawResponse: rawResp}
	// 如果是下载，则设置响应结果
	if rawResp.StatusCode == http.StatusOK {
		resp.File = bytes.NewBuffer(rawResp.RawBody)
		resp.FileName = core.FileNameByHeader(rawResp.Header)
		return resp, err
	}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *medias) UploadAll(ctx context.Context, req *UploadAllMediaReq, options ...core.RequestOptionFunc) (*UploadAllMediaResp, error) {
	options = append(options, core.WithFileUpload())

	// 发起请求
	rawResp, err := core.SendRequest(ctx,m.service.config, http.MethodPost,
		"/open-apis/drive/v1/medias/upload_all", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &UploadAllMediaResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *medias) UploadFinish(ctx context.Context, req *UploadFinishMediaReq, options ...core.RequestOptionFunc) (*UploadFinishMediaResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,m.service.config, http.MethodPost,
		"/open-apis/drive/v1/medias/upload_finish", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &UploadFinishMediaResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *medias) UploadPart(ctx context.Context, req *UploadPartMediaReq, options ...core.RequestOptionFunc) (*UploadPartMediaResp, error) {
	options = append(options, core.WithFileUpload())

	// 发起请求
	rawResp, err := core.SendRequest(ctx,m.service.config, http.MethodPost,
		"/open-apis/drive/v1/medias/upload_part", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &UploadPartMediaResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *medias) UploadPrepare(ctx context.Context, req *UploadPrepareMediaReq, options ...core.RequestOptionFunc) (*UploadPrepareMediaResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,m.service.config, http.MethodPost,
		"/open-apis/drive/v1/medias/upload_prepare", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &UploadPrepareMediaResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *metas) BatchQuery(ctx context.Context, req *BatchQueryMetaReq, options ...core.RequestOptionFunc) (*BatchQueryMetaResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,m.service.config, http.MethodPost,
		"/open-apis/drive/v1/metas/batch_query", []core.AccessTokenType{core.AccessTokenTypeTenant, core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &BatchQueryMetaResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *members) Apply(ctx context.Context, req *ApplyPermissionMemberReq, options ...core.RequestOptionFunc) (*ApplyPermissionMemberResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,m.service.config, http.MethodPost,
		"/open-apis/drive/v1/permissions/:token/members/apply", []core.AccessTokenType{core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &ApplyPermissionMemberResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *members) Create(ctx context.Context, req *CreatePermissionMemberReq, options ...core.RequestOptionFunc) (*CreatePermissionMemberResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,m.service.config, http.MethodPost,
		"/open-apis/drive/v1/permissions/:token/members", []core.AccessTokenType{core.AccessTokenTypeTenant, core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &CreatePermissionMemberResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *members) Delete(ctx context.Context, req *DeletePermissionMemberReq, options ...core.RequestOptionFunc) (*DeletePermissionMemberResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,m.service.config, http.MethodDelete,
		"/open-apis/drive/v1/permissions/:token/members/:member_id", []core.AccessTokenType{core.AccessTokenTypeTenant, core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &DeletePermissionMemberResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *members) Update(ctx context.Context, req *UpdatePermissionMemberReq, options ...core.RequestOptionFunc) (*UpdatePermissionMemberResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,m.service.config, http.MethodPut,
		"/open-apis/drive/v1/permissions/:token/members/:member_id", []core.AccessTokenType{core.AccessTokenTypeTenant, core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &UpdatePermissionMemberResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (p *permissionPublic) Get(ctx context.Context, req *GetPermissionPublicReq, options ...core.RequestOptionFunc) (*GetPermissionPublicResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,p.service.config, http.MethodGet,
		"/open-apis/drive/v1/permissions/:token/public", []core.AccessTokenType{core.AccessTokenTypeTenant, core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &GetPermissionPublicResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (p *permissionPublic) Patch(ctx context.Context, req *PatchPermissionPublicReq, options ...core.RequestOptionFunc) (*PatchPermissionPublicResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,p.service.config, http.MethodPatch,
		"/open-apis/drive/v1/permissions/:token/public", []core.AccessTokenType{core.AccessTokenTypeTenant, core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &PatchPermissionPublicResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (p *permissionPublic) Unlock(ctx context.Context, req *UnlockPermissionPublicReq, options ...core.RequestOptionFunc) (*UnlockPermissionPublicResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,p.service.config, http.MethodPut,
		"/open-apis/drive/v1/permissions/:token/public/unlock", []core.AccessTokenType{core.AccessTokenTypeTenant, core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &UnlockPermissionPublicResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}