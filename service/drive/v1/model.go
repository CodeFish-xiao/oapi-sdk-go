// Package drive code generated by oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package larkdrive

import (
	"io"

	"bytes"

	"io/ioutil"

	"fmt"

	"context"
	"errors"

	"github.com/larksuite/oapi-sdk-go/v3/event"

	"github.com/larksuite/oapi-sdk-go/v3/core"
)

const (
	FileExtensionDocx = "docx"
	FileExtensionPdf  = "pdf"
	FileExtensionXlsx = "xlsx"
)

const (
	TypeDoc     = "doc"
	TypeSheet   = "sheet"
	TypeBitable = "bitable"
	TypeDocx    = "docx"
)

const (
	FileTypeDoc     = "doc"
	FileTypeDocx    = "docx"
	FileTypeSheet   = "sheet"
	FileTypeBitable = "bitable"
)

const (
	ParentTypeExplorer = "explorer"
)

const (
	UserIdTypeUserId  = "user_id"
	UserIdTypeUnionId = "union_id"
	UserIdTypeOpenId  = "open_id"
)

const (
	SubscriptionTypeCommentUpdate = "comment_update"
)

const (
	TokenTypeV2Doc     = "doc"
	TokenTypeV2Sheet   = "sheet"
	TokenTypeV2File    = "file"
	TokenTypeV2Wiki    = "wiki"
	TokenTypeV2Bitable = "bitable"
	TokenTypeV2Docx    = "docx"
	TokenTypeV2Folder  = "folder"
)

const (
	MemberTypeEmail            = "email"
	MemberTypeOpenID           = "openid"
	MemberTypeOpenChatID       = "openchat"
	MemberTypeOpenDepartmentID = "opendepartmentid"
	MemberTypeUserID           = "userid"
)

const (
	TokenTypeDoc     = "doc"
	TokenTypeSheet   = "sheet"
	TokenTypeFile    = "file"
	TokenTypeWiki    = "wiki"
	TokenTypeBitable = "bitable"
	TokenTypeDocx    = "docx"
)

const (
	SecurityEntityAnyoneCanView  = "anyone_can_view"
	SecurityEntityAnyoneCanEdit  = "anyone_can_edit"
	SecurityEntityOnlyFullAccess = "only_full_access"
)

const (
	CommentEntityAnyoneCanView = "anyone_can_view"
	CommentEntityAnyoneCanEdit = "anyone_can_edit"
)

const (
	ShareEntityAnyone         = "anyone"
	ShareEntitySameTenant     = "same_tenant"
	ShareEntityOnlyFullAccess = "only_full_access"
)

const (
	LinkShareEntityTenantReadable = "tenant_readable"
	LinkShareEntityTenantEditable = "tenant_editable"
	LinkShareEntityAnyoneReadable = "anyone_readable"
	LinkShareEntityAnyoneEditable = "anyone_editable"
	LinkShareEntityClosed         = "closed"
)

type ApplyMemberRequest struct {
	Perm   *string `json:"perm,omitempty"`
	Remark *string `json:"remark,omitempty"`
}

type ApplyMemberRequestBuilder struct {
	perm       string
	permFlag   bool
	remark     string
	remarkFlag bool
}

func NewApplyMemberRequestBuilder() *ApplyMemberRequestBuilder {
	builder := &ApplyMemberRequestBuilder{}
	return builder
}

func (builder *ApplyMemberRequestBuilder) Perm(perm string) *ApplyMemberRequestBuilder {
	builder.perm = perm
	builder.permFlag = true
	return builder
}
func (builder *ApplyMemberRequestBuilder) Remark(remark string) *ApplyMemberRequestBuilder {
	builder.remark = remark
	builder.remarkFlag = true
	return builder
}

func (builder *ApplyMemberRequestBuilder) Build() *ApplyMemberRequest {
	req := &ApplyMemberRequest{}
	if builder.permFlag {
		req.Perm = &builder.perm

	}
	if builder.remarkFlag {
		req.Remark = &builder.remark

	}
	return req
}

type BitableTableRecordAction struct {
	RecordId    *string                          `json:"record_id,omitempty"`
	Action      *string                          `json:"action,omitempty"`
	BeforeValue []*BitableTableRecordActionField `json:"before_value,omitempty"`
	AfterValue  []*BitableTableRecordActionField `json:"after_value,omitempty"`
}

type BitableTableRecordActionBuilder struct {
	recordId        string
	recordIdFlag    bool
	action          string
	actionFlag      bool
	beforeValue     []*BitableTableRecordActionField
	beforeValueFlag bool
	afterValue      []*BitableTableRecordActionField
	afterValueFlag  bool
}

func NewBitableTableRecordActionBuilder() *BitableTableRecordActionBuilder {
	builder := &BitableTableRecordActionBuilder{}
	return builder
}

func (builder *BitableTableRecordActionBuilder) RecordId(recordId string) *BitableTableRecordActionBuilder {
	builder.recordId = recordId
	builder.recordIdFlag = true
	return builder
}
func (builder *BitableTableRecordActionBuilder) Action(action string) *BitableTableRecordActionBuilder {
	builder.action = action
	builder.actionFlag = true
	return builder
}
func (builder *BitableTableRecordActionBuilder) BeforeValue(beforeValue []*BitableTableRecordActionField) *BitableTableRecordActionBuilder {
	builder.beforeValue = beforeValue
	builder.beforeValueFlag = true
	return builder
}
func (builder *BitableTableRecordActionBuilder) AfterValue(afterValue []*BitableTableRecordActionField) *BitableTableRecordActionBuilder {
	builder.afterValue = afterValue
	builder.afterValueFlag = true
	return builder
}

func (builder *BitableTableRecordActionBuilder) Build() *BitableTableRecordAction {
	req := &BitableTableRecordAction{}
	if builder.recordIdFlag {
		req.RecordId = &builder.recordId

	}
	if builder.actionFlag {
		req.Action = &builder.action

	}
	if builder.beforeValueFlag {
		req.BeforeValue = builder.beforeValue
	}
	if builder.afterValueFlag {
		req.AfterValue = builder.afterValue
	}
	return req
}

type BitableTableRecordActionField struct {
	FieldId    *string `json:"field_id,omitempty"`
	FieldValue *string `json:"field_value,omitempty"`
}

type BitableTableRecordActionFieldBuilder struct {
	fieldId        string
	fieldIdFlag    bool
	fieldValue     string
	fieldValueFlag bool
}

func NewBitableTableRecordActionFieldBuilder() *BitableTableRecordActionFieldBuilder {
	builder := &BitableTableRecordActionFieldBuilder{}
	return builder
}

func (builder *BitableTableRecordActionFieldBuilder) FieldId(fieldId string) *BitableTableRecordActionFieldBuilder {
	builder.fieldId = fieldId
	builder.fieldIdFlag = true
	return builder
}
func (builder *BitableTableRecordActionFieldBuilder) FieldValue(fieldValue string) *BitableTableRecordActionFieldBuilder {
	builder.fieldValue = fieldValue
	builder.fieldValueFlag = true
	return builder
}

func (builder *BitableTableRecordActionFieldBuilder) Build() *BitableTableRecordActionField {
	req := &BitableTableRecordActionField{}
	if builder.fieldIdFlag {
		req.FieldId = &builder.fieldId

	}
	if builder.fieldValueFlag {
		req.FieldValue = &builder.fieldValue

	}
	return req
}

type Collaborator struct {
	MemberType   *string `json:"member_type,omitempty"`
	MemberOpenId *string `json:"member_open_id,omitempty"`
	MemberUserId *string `json:"member_user_id,omitempty"`
	Perm         *string `json:"perm,omitempty"`
}

type CollaboratorBuilder struct {
	memberType       string
	memberTypeFlag   bool
	memberOpenId     string
	memberOpenIdFlag bool
	memberUserId     string
	memberUserIdFlag bool
	perm             string
	permFlag         bool
}

func NewCollaboratorBuilder() *CollaboratorBuilder {
	builder := &CollaboratorBuilder{}
	return builder
}

func (builder *CollaboratorBuilder) MemberType(memberType string) *CollaboratorBuilder {
	builder.memberType = memberType
	builder.memberTypeFlag = true
	return builder
}
func (builder *CollaboratorBuilder) MemberOpenId(memberOpenId string) *CollaboratorBuilder {
	builder.memberOpenId = memberOpenId
	builder.memberOpenIdFlag = true
	return builder
}
func (builder *CollaboratorBuilder) MemberUserId(memberUserId string) *CollaboratorBuilder {
	builder.memberUserId = memberUserId
	builder.memberUserIdFlag = true
	return builder
}
func (builder *CollaboratorBuilder) Perm(perm string) *CollaboratorBuilder {
	builder.perm = perm
	builder.permFlag = true
	return builder
}

func (builder *CollaboratorBuilder) Build() *Collaborator {
	req := &Collaborator{}
	if builder.memberTypeFlag {
		req.MemberType = &builder.memberType

	}
	if builder.memberOpenIdFlag {
		req.MemberOpenId = &builder.memberOpenId

	}
	if builder.memberUserIdFlag {
		req.MemberUserId = &builder.memberUserId

	}
	if builder.permFlag {
		req.Perm = &builder.perm

	}
	return req
}

type DocsLink struct {
	Url *string `json:"url,omitempty"`
}

type DocsLinkBuilder struct {
	url     string
	urlFlag bool
}

func NewDocsLinkBuilder() *DocsLinkBuilder {
	builder := &DocsLinkBuilder{}
	return builder
}

func (builder *DocsLinkBuilder) Url(url string) *DocsLinkBuilder {
	builder.url = url
	builder.urlFlag = true
	return builder
}

func (builder *DocsLinkBuilder) Build() *DocsLink {
	req := &DocsLink{}
	if builder.urlFlag {
		req.Url = &builder.url

	}
	return req
}

type ExportTask struct {
	FileExtension *string `json:"file_extension,omitempty"`
	Token         *string `json:"token,omitempty"`
	Type          *string `json:"type,omitempty"`
	FileName      *string `json:"file_name,omitempty"`
	FileToken     *string `json:"file_token,omitempty"`
	FileSize      *int    `json:"file_size,omitempty"`
	JobErrorMsg   *string `json:"job_error_msg,omitempty"`
	JobStatus     *int    `json:"job_status,omitempty"`
}

type ExportTaskBuilder struct {
	fileExtension     string
	fileExtensionFlag bool
	token             string
	tokenFlag         bool
	type_             string
	typeFlag          bool
	fileName          string
	fileNameFlag      bool
	fileToken         string
	fileTokenFlag     bool
	fileSize          int
	fileSizeFlag      bool
	jobErrorMsg       string
	jobErrorMsgFlag   bool
	jobStatus         int
	jobStatusFlag     bool
}

func NewExportTaskBuilder() *ExportTaskBuilder {
	builder := &ExportTaskBuilder{}
	return builder
}

func (builder *ExportTaskBuilder) FileExtension(fileExtension string) *ExportTaskBuilder {
	builder.fileExtension = fileExtension
	builder.fileExtensionFlag = true
	return builder
}
func (builder *ExportTaskBuilder) Token(token string) *ExportTaskBuilder {
	builder.token = token
	builder.tokenFlag = true
	return builder
}
func (builder *ExportTaskBuilder) Type(type_ string) *ExportTaskBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}
func (builder *ExportTaskBuilder) FileName(fileName string) *ExportTaskBuilder {
	builder.fileName = fileName
	builder.fileNameFlag = true
	return builder
}
func (builder *ExportTaskBuilder) FileToken(fileToken string) *ExportTaskBuilder {
	builder.fileToken = fileToken
	builder.fileTokenFlag = true
	return builder
}
func (builder *ExportTaskBuilder) FileSize(fileSize int) *ExportTaskBuilder {
	builder.fileSize = fileSize
	builder.fileSizeFlag = true
	return builder
}
func (builder *ExportTaskBuilder) JobErrorMsg(jobErrorMsg string) *ExportTaskBuilder {
	builder.jobErrorMsg = jobErrorMsg
	builder.jobErrorMsgFlag = true
	return builder
}
func (builder *ExportTaskBuilder) JobStatus(jobStatus int) *ExportTaskBuilder {
	builder.jobStatus = jobStatus
	builder.jobStatusFlag = true
	return builder
}

func (builder *ExportTaskBuilder) Build() *ExportTask {
	req := &ExportTask{}
	if builder.fileExtensionFlag {
		req.FileExtension = &builder.fileExtension

	}
	if builder.tokenFlag {
		req.Token = &builder.token

	}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	if builder.fileNameFlag {
		req.FileName = &builder.fileName

	}
	if builder.fileTokenFlag {
		req.FileToken = &builder.fileToken

	}
	if builder.fileSizeFlag {
		req.FileSize = &builder.fileSize

	}
	if builder.jobErrorMsgFlag {
		req.JobErrorMsg = &builder.jobErrorMsg

	}
	if builder.jobStatusFlag {
		req.JobStatus = &builder.jobStatus

	}
	return req
}

type File struct {
	Token        *string       `json:"token,omitempty"`
	Name         *string       `json:"name,omitempty"`
	Type         *string       `json:"type,omitempty"`
	ParentToken  *string       `json:"parent_token,omitempty"`
	Url          *string       `json:"url,omitempty"`
	ShortcutInfo *ShortcutInfo `json:"shortcut_info,omitempty"`
}

type FileBuilder struct {
	token            string
	tokenFlag        bool
	name             string
	nameFlag         bool
	type_            string
	typeFlag         bool
	parentToken      string
	parentTokenFlag  bool
	url              string
	urlFlag          bool
	shortcutInfo     *ShortcutInfo
	shortcutInfoFlag bool
}

func NewFileBuilder() *FileBuilder {
	builder := &FileBuilder{}
	return builder
}

func (builder *FileBuilder) Token(token string) *FileBuilder {
	builder.token = token
	builder.tokenFlag = true
	return builder
}
func (builder *FileBuilder) Name(name string) *FileBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *FileBuilder) Type(type_ string) *FileBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}
func (builder *FileBuilder) ParentToken(parentToken string) *FileBuilder {
	builder.parentToken = parentToken
	builder.parentTokenFlag = true
	return builder
}
func (builder *FileBuilder) Url(url string) *FileBuilder {
	builder.url = url
	builder.urlFlag = true
	return builder
}
func (builder *FileBuilder) ShortcutInfo(shortcutInfo *ShortcutInfo) *FileBuilder {
	builder.shortcutInfo = shortcutInfo
	builder.shortcutInfoFlag = true
	return builder
}

func (builder *FileBuilder) Build() *File {
	req := &File{}
	if builder.tokenFlag {
		req.Token = &builder.token

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	if builder.parentTokenFlag {
		req.ParentToken = &builder.parentToken

	}
	if builder.urlFlag {
		req.Url = &builder.url

	}
	if builder.shortcutInfoFlag {
		req.ShortcutInfo = builder.shortcutInfo
	}
	return req
}

type FileComment struct {
	CommentId    *string    `json:"comment_id,omitempty"`
	UserId       *string    `json:"user_id,omitempty"`
	CreateTime   *int       `json:"create_time,omitempty"`
	UpdateTime   *int       `json:"update_time,omitempty"`
	IsSolved     *bool      `json:"is_solved,omitempty"`
	SolvedTime   *int       `json:"solved_time,omitempty"`
	SolverUserId *string    `json:"solver_user_id,omitempty"`
	ReplyList    *ReplyList `json:"reply_list,omitempty"`
}

type FileCommentBuilder struct {
	commentId        string
	commentIdFlag    bool
	userId           string
	userIdFlag       bool
	createTime       int
	createTimeFlag   bool
	updateTime       int
	updateTimeFlag   bool
	isSolved         bool
	isSolvedFlag     bool
	solvedTime       int
	solvedTimeFlag   bool
	solverUserId     string
	solverUserIdFlag bool
	replyList        *ReplyList
	replyListFlag    bool
}

func NewFileCommentBuilder() *FileCommentBuilder {
	builder := &FileCommentBuilder{}
	return builder
}

func (builder *FileCommentBuilder) CommentId(commentId string) *FileCommentBuilder {
	builder.commentId = commentId
	builder.commentIdFlag = true
	return builder
}
func (builder *FileCommentBuilder) UserId(userId string) *FileCommentBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}
func (builder *FileCommentBuilder) CreateTime(createTime int) *FileCommentBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}
func (builder *FileCommentBuilder) UpdateTime(updateTime int) *FileCommentBuilder {
	builder.updateTime = updateTime
	builder.updateTimeFlag = true
	return builder
}
func (builder *FileCommentBuilder) IsSolved(isSolved bool) *FileCommentBuilder {
	builder.isSolved = isSolved
	builder.isSolvedFlag = true
	return builder
}
func (builder *FileCommentBuilder) SolvedTime(solvedTime int) *FileCommentBuilder {
	builder.solvedTime = solvedTime
	builder.solvedTimeFlag = true
	return builder
}
func (builder *FileCommentBuilder) SolverUserId(solverUserId string) *FileCommentBuilder {
	builder.solverUserId = solverUserId
	builder.solverUserIdFlag = true
	return builder
}
func (builder *FileCommentBuilder) ReplyList(replyList *ReplyList) *FileCommentBuilder {
	builder.replyList = replyList
	builder.replyListFlag = true
	return builder
}

func (builder *FileCommentBuilder) Build() *FileComment {
	req := &FileComment{}
	if builder.commentIdFlag {
		req.CommentId = &builder.commentId

	}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.updateTimeFlag {
		req.UpdateTime = &builder.updateTime

	}
	if builder.isSolvedFlag {
		req.IsSolved = &builder.isSolved

	}
	if builder.solvedTimeFlag {
		req.SolvedTime = &builder.solvedTime

	}
	if builder.solverUserIdFlag {
		req.SolverUserId = &builder.solverUserId

	}
	if builder.replyListFlag {
		req.ReplyList = builder.replyList
	}
	return req
}

type FileCommentReply struct {
	ReplyId    *string       `json:"reply_id,omitempty"`
	UserId     *string       `json:"user_id,omitempty"`
	CreateTime *int          `json:"create_time,omitempty"`
	UpdateTime *int          `json:"update_time,omitempty"`
	Content    *ReplyContent `json:"content,omitempty"`
}

type FileCommentReplyBuilder struct {
	replyId        string
	replyIdFlag    bool
	userId         string
	userIdFlag     bool
	createTime     int
	createTimeFlag bool
	updateTime     int
	updateTimeFlag bool
	content        *ReplyContent
	contentFlag    bool
}

func NewFileCommentReplyBuilder() *FileCommentReplyBuilder {
	builder := &FileCommentReplyBuilder{}
	return builder
}

func (builder *FileCommentReplyBuilder) ReplyId(replyId string) *FileCommentReplyBuilder {
	builder.replyId = replyId
	builder.replyIdFlag = true
	return builder
}
func (builder *FileCommentReplyBuilder) UserId(userId string) *FileCommentReplyBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}
func (builder *FileCommentReplyBuilder) CreateTime(createTime int) *FileCommentReplyBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}
func (builder *FileCommentReplyBuilder) UpdateTime(updateTime int) *FileCommentReplyBuilder {
	builder.updateTime = updateTime
	builder.updateTimeFlag = true
	return builder
}
func (builder *FileCommentReplyBuilder) Content(content *ReplyContent) *FileCommentReplyBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}

func (builder *FileCommentReplyBuilder) Build() *FileCommentReply {
	req := &FileCommentReply{}
	if builder.replyIdFlag {
		req.ReplyId = &builder.replyId

	}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.updateTimeFlag {
		req.UpdateTime = &builder.updateTime

	}
	if builder.contentFlag {
		req.Content = builder.content
	}
	return req
}

type FileSubscription struct {
	SubscriptionId   *string `json:"subscription_id,omitempty"`
	SubscriptionType *string `json:"subscription_type,omitempty"`
	IsSubcribe       *bool   `json:"is_subcribe,omitempty"`
	FileType         *string `json:"file_type,omitempty"`
}

type FileSubscriptionBuilder struct {
	subscriptionId       string
	subscriptionIdFlag   bool
	subscriptionType     string
	subscriptionTypeFlag bool
	isSubcribe           bool
	isSubcribeFlag       bool
	fileType             string
	fileTypeFlag         bool
}

func NewFileSubscriptionBuilder() *FileSubscriptionBuilder {
	builder := &FileSubscriptionBuilder{}
	return builder
}

func (builder *FileSubscriptionBuilder) SubscriptionId(subscriptionId string) *FileSubscriptionBuilder {
	builder.subscriptionId = subscriptionId
	builder.subscriptionIdFlag = true
	return builder
}
func (builder *FileSubscriptionBuilder) SubscriptionType(subscriptionType string) *FileSubscriptionBuilder {
	builder.subscriptionType = subscriptionType
	builder.subscriptionTypeFlag = true
	return builder
}
func (builder *FileSubscriptionBuilder) IsSubcribe(isSubcribe bool) *FileSubscriptionBuilder {
	builder.isSubcribe = isSubcribe
	builder.isSubcribeFlag = true
	return builder
}
func (builder *FileSubscriptionBuilder) FileType(fileType string) *FileSubscriptionBuilder {
	builder.fileType = fileType
	builder.fileTypeFlag = true
	return builder
}

func (builder *FileSubscriptionBuilder) Build() *FileSubscription {
	req := &FileSubscription{}
	if builder.subscriptionIdFlag {
		req.SubscriptionId = &builder.subscriptionId

	}
	if builder.subscriptionTypeFlag {
		req.SubscriptionType = &builder.subscriptionType

	}
	if builder.isSubcribeFlag {
		req.IsSubcribe = &builder.isSubcribe

	}
	if builder.fileTypeFlag {
		req.FileType = &builder.fileType

	}
	return req
}

type FileSearch struct {
	DocsToken *string `json:"docs_token,omitempty"`
	DocsType  *string `json:"docs_type,omitempty"`
	Title     *string `json:"title,omitempty"`
	OwnerId   *string `json:"owner_id,omitempty"`
}

type FileSearchBuilder struct {
	docsToken     string
	docsTokenFlag bool
	docsType      string
	docsTypeFlag  bool
	title         string
	titleFlag     bool
	ownerId       string
	ownerIdFlag   bool
}

func NewFileSearchBuilder() *FileSearchBuilder {
	builder := &FileSearchBuilder{}
	return builder
}

func (builder *FileSearchBuilder) DocsToken(docsToken string) *FileSearchBuilder {
	builder.docsToken = docsToken
	builder.docsTokenFlag = true
	return builder
}
func (builder *FileSearchBuilder) DocsType(docsType string) *FileSearchBuilder {
	builder.docsType = docsType
	builder.docsTypeFlag = true
	return builder
}
func (builder *FileSearchBuilder) Title(title string) *FileSearchBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}
func (builder *FileSearchBuilder) OwnerId(ownerId string) *FileSearchBuilder {
	builder.ownerId = ownerId
	builder.ownerIdFlag = true
	return builder
}

func (builder *FileSearchBuilder) Build() *FileSearch {
	req := &FileSearch{}
	if builder.docsTokenFlag {
		req.DocsToken = &builder.docsToken

	}
	if builder.docsTypeFlag {
		req.DocsType = &builder.docsType

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.ownerIdFlag {
		req.OwnerId = &builder.ownerId

	}
	return req
}

type FileStatistics struct {
	Uv        *int `json:"uv,omitempty"`
	Pv        *int `json:"pv,omitempty"`
	LikeCount *int `json:"like_count,omitempty"`
	Timestamp *int `json:"timestamp,omitempty"`
}

type FileStatisticsBuilder struct {
	uv            int
	uvFlag        bool
	pv            int
	pvFlag        bool
	likeCount     int
	likeCountFlag bool
	timestamp     int
	timestampFlag bool
}

func NewFileStatisticsBuilder() *FileStatisticsBuilder {
	builder := &FileStatisticsBuilder{}
	return builder
}

func (builder *FileStatisticsBuilder) Uv(uv int) *FileStatisticsBuilder {
	builder.uv = uv
	builder.uvFlag = true
	return builder
}
func (builder *FileStatisticsBuilder) Pv(pv int) *FileStatisticsBuilder {
	builder.pv = pv
	builder.pvFlag = true
	return builder
}
func (builder *FileStatisticsBuilder) LikeCount(likeCount int) *FileStatisticsBuilder {
	builder.likeCount = likeCount
	builder.likeCountFlag = true
	return builder
}
func (builder *FileStatisticsBuilder) Timestamp(timestamp int) *FileStatisticsBuilder {
	builder.timestamp = timestamp
	builder.timestampFlag = true
	return builder
}

func (builder *FileStatisticsBuilder) Build() *FileStatistics {
	req := &FileStatistics{}
	if builder.uvFlag {
		req.Uv = &builder.uv

	}
	if builder.pvFlag {
		req.Pv = &builder.pv

	}
	if builder.likeCountFlag {
		req.LikeCount = &builder.likeCount

	}
	if builder.timestampFlag {
		req.Timestamp = &builder.timestamp

	}
	return req
}

type FileUploadInfo struct {
	FileName   *string `json:"file_name,omitempty"`
	ParentType *string `json:"parent_type,omitempty"`
	ParentNode *string `json:"parent_node,omitempty"`
	Size       *int    `json:"size,omitempty"`
}

type FileUploadInfoBuilder struct {
	fileName       string
	fileNameFlag   bool
	parentType     string
	parentTypeFlag bool
	parentNode     string
	parentNodeFlag bool
	size           int
	sizeFlag       bool
}

func NewFileUploadInfoBuilder() *FileUploadInfoBuilder {
	builder := &FileUploadInfoBuilder{}
	return builder
}

func (builder *FileUploadInfoBuilder) FileName(fileName string) *FileUploadInfoBuilder {
	builder.fileName = fileName
	builder.fileNameFlag = true
	return builder
}
func (builder *FileUploadInfoBuilder) ParentType(parentType string) *FileUploadInfoBuilder {
	builder.parentType = parentType
	builder.parentTypeFlag = true
	return builder
}
func (builder *FileUploadInfoBuilder) ParentNode(parentNode string) *FileUploadInfoBuilder {
	builder.parentNode = parentNode
	builder.parentNodeFlag = true
	return builder
}
func (builder *FileUploadInfoBuilder) Size(size int) *FileUploadInfoBuilder {
	builder.size = size
	builder.sizeFlag = true
	return builder
}

func (builder *FileUploadInfoBuilder) Build() *FileUploadInfo {
	req := &FileUploadInfo{}
	if builder.fileNameFlag {
		req.FileName = &builder.fileName

	}
	if builder.parentTypeFlag {
		req.ParentType = &builder.parentType

	}
	if builder.parentNodeFlag {
		req.ParentNode = &builder.parentNode

	}
	if builder.sizeFlag {
		req.Size = &builder.size

	}
	return req
}

type ImportTask struct {
	Ticket        *string               `json:"ticket,omitempty"`
	FileExtension *string               `json:"file_extension,omitempty"`
	FileToken     *string               `json:"file_token,omitempty"`
	Type          *string               `json:"type,omitempty"`
	FileName      *string               `json:"file_name,omitempty"`
	Point         *ImportTaskMountPoint `json:"point,omitempty"`
	JobStatus     *int                  `json:"job_status,omitempty"`
	JobErrorMsg   *string               `json:"job_error_msg,omitempty"`
	Token         *string               `json:"token,omitempty"`
	Url           *string               `json:"url,omitempty"`
	Extra         []string              `json:"extra,omitempty"`
}

type ImportTaskBuilder struct {
	ticket            string
	ticketFlag        bool
	fileExtension     string
	fileExtensionFlag bool
	fileToken         string
	fileTokenFlag     bool
	type_             string
	typeFlag          bool
	fileName          string
	fileNameFlag      bool
	point             *ImportTaskMountPoint
	pointFlag         bool
	jobStatus         int
	jobStatusFlag     bool
	jobErrorMsg       string
	jobErrorMsgFlag   bool
	token             string
	tokenFlag         bool
	url               string
	urlFlag           bool
	extra             []string
	extraFlag         bool
}

func NewImportTaskBuilder() *ImportTaskBuilder {
	builder := &ImportTaskBuilder{}
	return builder
}

func (builder *ImportTaskBuilder) Ticket(ticket string) *ImportTaskBuilder {
	builder.ticket = ticket
	builder.ticketFlag = true
	return builder
}
func (builder *ImportTaskBuilder) FileExtension(fileExtension string) *ImportTaskBuilder {
	builder.fileExtension = fileExtension
	builder.fileExtensionFlag = true
	return builder
}
func (builder *ImportTaskBuilder) FileToken(fileToken string) *ImportTaskBuilder {
	builder.fileToken = fileToken
	builder.fileTokenFlag = true
	return builder
}
func (builder *ImportTaskBuilder) Type(type_ string) *ImportTaskBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}
func (builder *ImportTaskBuilder) FileName(fileName string) *ImportTaskBuilder {
	builder.fileName = fileName
	builder.fileNameFlag = true
	return builder
}
func (builder *ImportTaskBuilder) Point(point *ImportTaskMountPoint) *ImportTaskBuilder {
	builder.point = point
	builder.pointFlag = true
	return builder
}
func (builder *ImportTaskBuilder) JobStatus(jobStatus int) *ImportTaskBuilder {
	builder.jobStatus = jobStatus
	builder.jobStatusFlag = true
	return builder
}
func (builder *ImportTaskBuilder) JobErrorMsg(jobErrorMsg string) *ImportTaskBuilder {
	builder.jobErrorMsg = jobErrorMsg
	builder.jobErrorMsgFlag = true
	return builder
}
func (builder *ImportTaskBuilder) Token(token string) *ImportTaskBuilder {
	builder.token = token
	builder.tokenFlag = true
	return builder
}
func (builder *ImportTaskBuilder) Url(url string) *ImportTaskBuilder {
	builder.url = url
	builder.urlFlag = true
	return builder
}
func (builder *ImportTaskBuilder) Extra(extra []string) *ImportTaskBuilder {
	builder.extra = extra
	builder.extraFlag = true
	return builder
}

func (builder *ImportTaskBuilder) Build() *ImportTask {
	req := &ImportTask{}
	if builder.ticketFlag {
		req.Ticket = &builder.ticket

	}
	if builder.fileExtensionFlag {
		req.FileExtension = &builder.fileExtension

	}
	if builder.fileTokenFlag {
		req.FileToken = &builder.fileToken

	}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	if builder.fileNameFlag {
		req.FileName = &builder.fileName

	}
	if builder.pointFlag {
		req.Point = builder.point
	}
	if builder.jobStatusFlag {
		req.JobStatus = &builder.jobStatus

	}
	if builder.jobErrorMsgFlag {
		req.JobErrorMsg = &builder.jobErrorMsg

	}
	if builder.tokenFlag {
		req.Token = &builder.token

	}
	if builder.urlFlag {
		req.Url = &builder.url

	}
	if builder.extraFlag {
		req.Extra = builder.extra
	}
	return req
}

type ImportTaskMountPoint struct {
	MountType *int    `json:"mount_type,omitempty"`
	MountKey  *string `json:"mount_key,omitempty"`
}

type ImportTaskMountPointBuilder struct {
	mountType     int
	mountTypeFlag bool
	mountKey      string
	mountKeyFlag  bool
}

func NewImportTaskMountPointBuilder() *ImportTaskMountPointBuilder {
	builder := &ImportTaskMountPointBuilder{}
	return builder
}

func (builder *ImportTaskMountPointBuilder) MountType(mountType int) *ImportTaskMountPointBuilder {
	builder.mountType = mountType
	builder.mountTypeFlag = true
	return builder
}
func (builder *ImportTaskMountPointBuilder) MountKey(mountKey string) *ImportTaskMountPointBuilder {
	builder.mountKey = mountKey
	builder.mountKeyFlag = true
	return builder
}

func (builder *ImportTaskMountPointBuilder) Build() *ImportTaskMountPoint {
	req := &ImportTaskMountPoint{}
	if builder.mountTypeFlag {
		req.MountType = &builder.mountType

	}
	if builder.mountKeyFlag {
		req.MountKey = &builder.mountKey

	}
	return req
}

type Media struct {
	FileToken *string `json:"file_token,omitempty"`
	FileName  *string `json:"file_name,omitempty"`
	Size      *int    `json:"size,omitempty"`
	MimeType  *string `json:"mime_type,omitempty"`
}

type MediaBuilder struct {
	fileToken     string
	fileTokenFlag bool
	fileName      string
	fileNameFlag  bool
	size          int
	sizeFlag      bool
	mimeType      string
	mimeTypeFlag  bool
}

func NewMediaBuilder() *MediaBuilder {
	builder := &MediaBuilder{}
	return builder
}

func (builder *MediaBuilder) FileToken(fileToken string) *MediaBuilder {
	builder.fileToken = fileToken
	builder.fileTokenFlag = true
	return builder
}
func (builder *MediaBuilder) FileName(fileName string) *MediaBuilder {
	builder.fileName = fileName
	builder.fileNameFlag = true
	return builder
}
func (builder *MediaBuilder) Size(size int) *MediaBuilder {
	builder.size = size
	builder.sizeFlag = true
	return builder
}
func (builder *MediaBuilder) MimeType(mimeType string) *MediaBuilder {
	builder.mimeType = mimeType
	builder.mimeTypeFlag = true
	return builder
}

func (builder *MediaBuilder) Build() *Media {
	req := &Media{}
	if builder.fileTokenFlag {
		req.FileToken = &builder.fileToken

	}
	if builder.fileNameFlag {
		req.FileName = &builder.fileName

	}
	if builder.sizeFlag {
		req.Size = &builder.size

	}
	if builder.mimeTypeFlag {
		req.MimeType = &builder.mimeType

	}
	return req
}

type MediaUploadInfo struct {
	FileName   *string `json:"file_name,omitempty"`
	ParentType *string `json:"parent_type,omitempty"`
	ParentNode *string `json:"parent_node,omitempty"`
	Size       *int    `json:"size,omitempty"`
	Extra      *string `json:"extra,omitempty"`
}

type MediaUploadInfoBuilder struct {
	fileName       string
	fileNameFlag   bool
	parentType     string
	parentTypeFlag bool
	parentNode     string
	parentNodeFlag bool
	size           int
	sizeFlag       bool
	extra          string
	extraFlag      bool
}

func NewMediaUploadInfoBuilder() *MediaUploadInfoBuilder {
	builder := &MediaUploadInfoBuilder{}
	return builder
}

func (builder *MediaUploadInfoBuilder) FileName(fileName string) *MediaUploadInfoBuilder {
	builder.fileName = fileName
	builder.fileNameFlag = true
	return builder
}
func (builder *MediaUploadInfoBuilder) ParentType(parentType string) *MediaUploadInfoBuilder {
	builder.parentType = parentType
	builder.parentTypeFlag = true
	return builder
}
func (builder *MediaUploadInfoBuilder) ParentNode(parentNode string) *MediaUploadInfoBuilder {
	builder.parentNode = parentNode
	builder.parentNodeFlag = true
	return builder
}
func (builder *MediaUploadInfoBuilder) Size(size int) *MediaUploadInfoBuilder {
	builder.size = size
	builder.sizeFlag = true
	return builder
}
func (builder *MediaUploadInfoBuilder) Extra(extra string) *MediaUploadInfoBuilder {
	builder.extra = extra
	builder.extraFlag = true
	return builder
}

func (builder *MediaUploadInfoBuilder) Build() *MediaUploadInfo {
	req := &MediaUploadInfo{}
	if builder.fileNameFlag {
		req.FileName = &builder.fileName

	}
	if builder.parentTypeFlag {
		req.ParentType = &builder.parentType

	}
	if builder.parentNodeFlag {
		req.ParentNode = &builder.parentNode

	}
	if builder.sizeFlag {
		req.Size = &builder.size

	}
	if builder.extraFlag {
		req.Extra = &builder.extra

	}
	return req
}

type Member struct {
	MemberType *string `json:"member_type,omitempty"`
	MemberId   *string `json:"member_id,omitempty"`
	Perm       *string `json:"perm,omitempty"`
}

type MemberBuilder struct {
	memberType     string
	memberTypeFlag bool
	memberId       string
	memberIdFlag   bool
	perm           string
	permFlag       bool
}

func NewMemberBuilder() *MemberBuilder {
	builder := &MemberBuilder{}
	return builder
}

func (builder *MemberBuilder) MemberType(memberType string) *MemberBuilder {
	builder.memberType = memberType
	builder.memberTypeFlag = true
	return builder
}
func (builder *MemberBuilder) MemberId(memberId string) *MemberBuilder {
	builder.memberId = memberId
	builder.memberIdFlag = true
	return builder
}
func (builder *MemberBuilder) Perm(perm string) *MemberBuilder {
	builder.perm = perm
	builder.permFlag = true
	return builder
}

func (builder *MemberBuilder) Build() *Member {
	req := &Member{}
	if builder.memberTypeFlag {
		req.MemberType = &builder.memberType

	}
	if builder.memberIdFlag {
		req.MemberId = &builder.memberId

	}
	if builder.permFlag {
		req.Perm = &builder.perm

	}
	return req
}

type Meta struct {
	DocToken         *string `json:"doc_token,omitempty"`
	DocType          *string `json:"doc_type,omitempty"`
	Title            *string `json:"title,omitempty"`
	OwnerId          *string `json:"owner_id,omitempty"`
	CreateTime       *string `json:"create_time,omitempty"`
	LatestModifyUser *string `json:"latest_modify_user,omitempty"`
	LatestModifyTime *string `json:"latest_modify_time,omitempty"`
	Url              *string `json:"url,omitempty"`
}

type MetaBuilder struct {
	docToken             string
	docTokenFlag         bool
	docType              string
	docTypeFlag          bool
	title                string
	titleFlag            bool
	ownerId              string
	ownerIdFlag          bool
	createTime           string
	createTimeFlag       bool
	latestModifyUser     string
	latestModifyUserFlag bool
	latestModifyTime     string
	latestModifyTimeFlag bool
	url                  string
	urlFlag              bool
}

func NewMetaBuilder() *MetaBuilder {
	builder := &MetaBuilder{}
	return builder
}

func (builder *MetaBuilder) DocToken(docToken string) *MetaBuilder {
	builder.docToken = docToken
	builder.docTokenFlag = true
	return builder
}
func (builder *MetaBuilder) DocType(docType string) *MetaBuilder {
	builder.docType = docType
	builder.docTypeFlag = true
	return builder
}
func (builder *MetaBuilder) Title(title string) *MetaBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}
func (builder *MetaBuilder) OwnerId(ownerId string) *MetaBuilder {
	builder.ownerId = ownerId
	builder.ownerIdFlag = true
	return builder
}
func (builder *MetaBuilder) CreateTime(createTime string) *MetaBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}
func (builder *MetaBuilder) LatestModifyUser(latestModifyUser string) *MetaBuilder {
	builder.latestModifyUser = latestModifyUser
	builder.latestModifyUserFlag = true
	return builder
}
func (builder *MetaBuilder) LatestModifyTime(latestModifyTime string) *MetaBuilder {
	builder.latestModifyTime = latestModifyTime
	builder.latestModifyTimeFlag = true
	return builder
}
func (builder *MetaBuilder) Url(url string) *MetaBuilder {
	builder.url = url
	builder.urlFlag = true
	return builder
}

func (builder *MetaBuilder) Build() *Meta {
	req := &Meta{}
	if builder.docTokenFlag {
		req.DocToken = &builder.docToken

	}
	if builder.docTypeFlag {
		req.DocType = &builder.docType

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.ownerIdFlag {
		req.OwnerId = &builder.ownerId

	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.latestModifyUserFlag {
		req.LatestModifyUser = &builder.latestModifyUser

	}
	if builder.latestModifyTimeFlag {
		req.LatestModifyTime = &builder.latestModifyTime

	}
	if builder.urlFlag {
		req.Url = &builder.url

	}
	return req
}

type MetaFailed struct {
	Token *string `json:"token,omitempty"`
	Code  *int    `json:"code,omitempty"`
}

type MetaFailedBuilder struct {
	token     string
	tokenFlag bool
	code      int
	codeFlag  bool
}

func NewMetaFailedBuilder() *MetaFailedBuilder {
	builder := &MetaFailedBuilder{}
	return builder
}

func (builder *MetaFailedBuilder) Token(token string) *MetaFailedBuilder {
	builder.token = token
	builder.tokenFlag = true
	return builder
}
func (builder *MetaFailedBuilder) Code(code int) *MetaFailedBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}

func (builder *MetaFailedBuilder) Build() *MetaFailed {
	req := &MetaFailed{}
	if builder.tokenFlag {
		req.Token = &builder.token

	}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	return req
}

type MetaRequest struct {
	RequestDocs []*RequestDoc `json:"request_docs,omitempty"`
	WithUrl     *bool         `json:"with_url,omitempty"`
}

type MetaRequestBuilder struct {
	requestDocs     []*RequestDoc
	requestDocsFlag bool
	withUrl         bool
	withUrlFlag     bool
}

func NewMetaRequestBuilder() *MetaRequestBuilder {
	builder := &MetaRequestBuilder{}
	return builder
}

func (builder *MetaRequestBuilder) RequestDocs(requestDocs []*RequestDoc) *MetaRequestBuilder {
	builder.requestDocs = requestDocs
	builder.requestDocsFlag = true
	return builder
}
func (builder *MetaRequestBuilder) WithUrl(withUrl bool) *MetaRequestBuilder {
	builder.withUrl = withUrl
	builder.withUrlFlag = true
	return builder
}

func (builder *MetaRequestBuilder) Build() *MetaRequest {
	req := &MetaRequest{}
	if builder.requestDocsFlag {
		req.RequestDocs = builder.requestDocs
	}
	if builder.withUrlFlag {
		req.WithUrl = &builder.withUrl

	}
	return req
}

type Owner struct {
	MemberType *string `json:"member_type,omitempty"`
	MemberId   *string `json:"member_id,omitempty"`
}

type OwnerBuilder struct {
	memberType     string
	memberTypeFlag bool
	memberId       string
	memberIdFlag   bool
}

func NewOwnerBuilder() *OwnerBuilder {
	builder := &OwnerBuilder{}
	return builder
}

func (builder *OwnerBuilder) MemberType(memberType string) *OwnerBuilder {
	builder.memberType = memberType
	builder.memberTypeFlag = true
	return builder
}
func (builder *OwnerBuilder) MemberId(memberId string) *OwnerBuilder {
	builder.memberId = memberId
	builder.memberIdFlag = true
	return builder
}

func (builder *OwnerBuilder) Build() *Owner {
	req := &Owner{}
	if builder.memberTypeFlag {
		req.MemberType = &builder.memberType

	}
	if builder.memberIdFlag {
		req.MemberId = &builder.memberId

	}
	return req
}

type PermissionPublic struct {
	ExternalAccess  *bool   `json:"external_access,omitempty"`
	SecurityEntity  *string `json:"security_entity,omitempty"`
	CommentEntity   *string `json:"comment_entity,omitempty"`
	ShareEntity     *string `json:"share_entity,omitempty"`
	LinkShareEntity *string `json:"link_share_entity,omitempty"`
	InviteExternal  *bool   `json:"invite_external,omitempty"`
	LockSwitch      *bool   `json:"lock_switch,omitempty"`
}

type PermissionPublicBuilder struct {
	externalAccess      bool
	externalAccessFlag  bool
	securityEntity      string
	securityEntityFlag  bool
	commentEntity       string
	commentEntityFlag   bool
	shareEntity         string
	shareEntityFlag     bool
	linkShareEntity     string
	linkShareEntityFlag bool
	inviteExternal      bool
	inviteExternalFlag  bool
	lockSwitch          bool
	lockSwitchFlag      bool
}

func NewPermissionPublicBuilder() *PermissionPublicBuilder {
	builder := &PermissionPublicBuilder{}
	return builder
}

func (builder *PermissionPublicBuilder) ExternalAccess(externalAccess bool) *PermissionPublicBuilder {
	builder.externalAccess = externalAccess
	builder.externalAccessFlag = true
	return builder
}
func (builder *PermissionPublicBuilder) SecurityEntity(securityEntity string) *PermissionPublicBuilder {
	builder.securityEntity = securityEntity
	builder.securityEntityFlag = true
	return builder
}
func (builder *PermissionPublicBuilder) CommentEntity(commentEntity string) *PermissionPublicBuilder {
	builder.commentEntity = commentEntity
	builder.commentEntityFlag = true
	return builder
}
func (builder *PermissionPublicBuilder) ShareEntity(shareEntity string) *PermissionPublicBuilder {
	builder.shareEntity = shareEntity
	builder.shareEntityFlag = true
	return builder
}
func (builder *PermissionPublicBuilder) LinkShareEntity(linkShareEntity string) *PermissionPublicBuilder {
	builder.linkShareEntity = linkShareEntity
	builder.linkShareEntityFlag = true
	return builder
}
func (builder *PermissionPublicBuilder) InviteExternal(inviteExternal bool) *PermissionPublicBuilder {
	builder.inviteExternal = inviteExternal
	builder.inviteExternalFlag = true
	return builder
}
func (builder *PermissionPublicBuilder) LockSwitch(lockSwitch bool) *PermissionPublicBuilder {
	builder.lockSwitch = lockSwitch
	builder.lockSwitchFlag = true
	return builder
}

func (builder *PermissionPublicBuilder) Build() *PermissionPublic {
	req := &PermissionPublic{}
	if builder.externalAccessFlag {
		req.ExternalAccess = &builder.externalAccess

	}
	if builder.securityEntityFlag {
		req.SecurityEntity = &builder.securityEntity

	}
	if builder.commentEntityFlag {
		req.CommentEntity = &builder.commentEntity

	}
	if builder.shareEntityFlag {
		req.ShareEntity = &builder.shareEntity

	}
	if builder.linkShareEntityFlag {
		req.LinkShareEntity = &builder.linkShareEntity

	}
	if builder.inviteExternalFlag {
		req.InviteExternal = &builder.inviteExternal

	}
	if builder.lockSwitchFlag {
		req.LockSwitch = &builder.lockSwitch

	}
	return req
}

type PermissionPublicRequest struct {
	ExternalAccess  *bool   `json:"external_access,omitempty"`
	SecurityEntity  *string `json:"security_entity,omitempty"`
	CommentEntity   *string `json:"comment_entity,omitempty"`
	ShareEntity     *string `json:"share_entity,omitempty"`
	LinkShareEntity *string `json:"link_share_entity,omitempty"`
	InviteExternal  *bool   `json:"invite_external,omitempty"`
}

type PermissionPublicRequestBuilder struct {
	externalAccess      bool
	externalAccessFlag  bool
	securityEntity      string
	securityEntityFlag  bool
	commentEntity       string
	commentEntityFlag   bool
	shareEntity         string
	shareEntityFlag     bool
	linkShareEntity     string
	linkShareEntityFlag bool
	inviteExternal      bool
	inviteExternalFlag  bool
}

func NewPermissionPublicRequestBuilder() *PermissionPublicRequestBuilder {
	builder := &PermissionPublicRequestBuilder{}
	return builder
}

func (builder *PermissionPublicRequestBuilder) ExternalAccess(externalAccess bool) *PermissionPublicRequestBuilder {
	builder.externalAccess = externalAccess
	builder.externalAccessFlag = true
	return builder
}
func (builder *PermissionPublicRequestBuilder) SecurityEntity(securityEntity string) *PermissionPublicRequestBuilder {
	builder.securityEntity = securityEntity
	builder.securityEntityFlag = true
	return builder
}
func (builder *PermissionPublicRequestBuilder) CommentEntity(commentEntity string) *PermissionPublicRequestBuilder {
	builder.commentEntity = commentEntity
	builder.commentEntityFlag = true
	return builder
}
func (builder *PermissionPublicRequestBuilder) ShareEntity(shareEntity string) *PermissionPublicRequestBuilder {
	builder.shareEntity = shareEntity
	builder.shareEntityFlag = true
	return builder
}
func (builder *PermissionPublicRequestBuilder) LinkShareEntity(linkShareEntity string) *PermissionPublicRequestBuilder {
	builder.linkShareEntity = linkShareEntity
	builder.linkShareEntityFlag = true
	return builder
}
func (builder *PermissionPublicRequestBuilder) InviteExternal(inviteExternal bool) *PermissionPublicRequestBuilder {
	builder.inviteExternal = inviteExternal
	builder.inviteExternalFlag = true
	return builder
}

func (builder *PermissionPublicRequestBuilder) Build() *PermissionPublicRequest {
	req := &PermissionPublicRequest{}
	if builder.externalAccessFlag {
		req.ExternalAccess = &builder.externalAccess

	}
	if builder.securityEntityFlag {
		req.SecurityEntity = &builder.securityEntity

	}
	if builder.commentEntityFlag {
		req.CommentEntity = &builder.commentEntity

	}
	if builder.shareEntityFlag {
		req.ShareEntity = &builder.shareEntity

	}
	if builder.linkShareEntityFlag {
		req.LinkShareEntity = &builder.linkShareEntity

	}
	if builder.inviteExternalFlag {
		req.InviteExternal = &builder.inviteExternal

	}
	return req
}

type Person struct {
	UserId *string `json:"user_id,omitempty"`
}

type PersonBuilder struct {
	userId     string
	userIdFlag bool
}

func NewPersonBuilder() *PersonBuilder {
	builder := &PersonBuilder{}
	return builder
}

func (builder *PersonBuilder) UserId(userId string) *PersonBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}

func (builder *PersonBuilder) Build() *Person {
	req := &Person{}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	return req
}

type ReplyContent struct {
	Elements []*ReplyElement `json:"elements,omitempty"`
}

type ReplyContentBuilder struct {
	elements     []*ReplyElement
	elementsFlag bool
}

func NewReplyContentBuilder() *ReplyContentBuilder {
	builder := &ReplyContentBuilder{}
	return builder
}

func (builder *ReplyContentBuilder) Elements(elements []*ReplyElement) *ReplyContentBuilder {
	builder.elements = elements
	builder.elementsFlag = true
	return builder
}

func (builder *ReplyContentBuilder) Build() *ReplyContent {
	req := &ReplyContent{}
	if builder.elementsFlag {
		req.Elements = builder.elements
	}
	return req
}

type ReplyElement struct {
	Type     *string   `json:"type,omitempty"`
	TextRun  *TextRun  `json:"text_run,omitempty"`
	DocsLink *DocsLink `json:"docs_link,omitempty"`
	Person   *Person   `json:"person,omitempty"`
}

type ReplyElementBuilder struct {
	type_        string
	typeFlag     bool
	textRun      *TextRun
	textRunFlag  bool
	docsLink     *DocsLink
	docsLinkFlag bool
	person       *Person
	personFlag   bool
}

func NewReplyElementBuilder() *ReplyElementBuilder {
	builder := &ReplyElementBuilder{}
	return builder
}

func (builder *ReplyElementBuilder) Type(type_ string) *ReplyElementBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}
func (builder *ReplyElementBuilder) TextRun(textRun *TextRun) *ReplyElementBuilder {
	builder.textRun = textRun
	builder.textRunFlag = true
	return builder
}
func (builder *ReplyElementBuilder) DocsLink(docsLink *DocsLink) *ReplyElementBuilder {
	builder.docsLink = docsLink
	builder.docsLinkFlag = true
	return builder
}
func (builder *ReplyElementBuilder) Person(person *Person) *ReplyElementBuilder {
	builder.person = person
	builder.personFlag = true
	return builder
}

func (builder *ReplyElementBuilder) Build() *ReplyElement {
	req := &ReplyElement{}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	if builder.textRunFlag {
		req.TextRun = builder.textRun
	}
	if builder.docsLinkFlag {
		req.DocsLink = builder.docsLink
	}
	if builder.personFlag {
		req.Person = builder.person
	}
	return req
}

type ReplyList struct {
	Replies []*FileCommentReply `json:"replies,omitempty"`
}

type ReplyListBuilder struct {
	replies     []*FileCommentReply
	repliesFlag bool
}

func NewReplyListBuilder() *ReplyListBuilder {
	builder := &ReplyListBuilder{}
	return builder
}

func (builder *ReplyListBuilder) Replies(replies []*FileCommentReply) *ReplyListBuilder {
	builder.replies = replies
	builder.repliesFlag = true
	return builder
}

func (builder *ReplyListBuilder) Build() *ReplyList {
	req := &ReplyList{}
	if builder.repliesFlag {
		req.Replies = builder.replies
	}
	return req
}

type RequestDoc struct {
	DocToken *string `json:"doc_token,omitempty"`
	DocType  *string `json:"doc_type,omitempty"`
}

type RequestDocBuilder struct {
	docToken     string
	docTokenFlag bool
	docType      string
	docTypeFlag  bool
}

func NewRequestDocBuilder() *RequestDocBuilder {
	builder := &RequestDocBuilder{}
	return builder
}

func (builder *RequestDocBuilder) DocToken(docToken string) *RequestDocBuilder {
	builder.docToken = docToken
	builder.docTokenFlag = true
	return builder
}
func (builder *RequestDocBuilder) DocType(docType string) *RequestDocBuilder {
	builder.docType = docType
	builder.docTypeFlag = true
	return builder
}

func (builder *RequestDocBuilder) Build() *RequestDoc {
	req := &RequestDoc{}
	if builder.docTokenFlag {
		req.DocToken = &builder.docToken

	}
	if builder.docTypeFlag {
		req.DocType = &builder.docType

	}
	return req
}

type ShortcutInfo struct {
	TargetType  *string `json:"target_type,omitempty"`
	TargetToken *string `json:"target_token,omitempty"`
}

type ShortcutInfoBuilder struct {
	targetType      string
	targetTypeFlag  bool
	targetToken     string
	targetTokenFlag bool
}

func NewShortcutInfoBuilder() *ShortcutInfoBuilder {
	builder := &ShortcutInfoBuilder{}
	return builder
}

func (builder *ShortcutInfoBuilder) TargetType(targetType string) *ShortcutInfoBuilder {
	builder.targetType = targetType
	builder.targetTypeFlag = true
	return builder
}
func (builder *ShortcutInfoBuilder) TargetToken(targetToken string) *ShortcutInfoBuilder {
	builder.targetToken = targetToken
	builder.targetTokenFlag = true
	return builder
}

func (builder *ShortcutInfoBuilder) Build() *ShortcutInfo {
	req := &ShortcutInfo{}
	if builder.targetTypeFlag {
		req.TargetType = &builder.targetType

	}
	if builder.targetTokenFlag {
		req.TargetToken = &builder.targetToken

	}
	return req
}

type TextRun struct {
	Text *string `json:"text,omitempty"`
}

type TextRunBuilder struct {
	text     string
	textFlag bool
}

func NewTextRunBuilder() *TextRunBuilder {
	builder := &TextRunBuilder{}
	return builder
}

func (builder *TextRunBuilder) Text(text string) *TextRunBuilder {
	builder.text = text
	builder.textFlag = true
	return builder
}

func (builder *TextRunBuilder) Build() *TextRun {
	req := &TextRun{}
	if builder.textFlag {
		req.Text = &builder.text

	}
	return req
}

type TmpDownloadUrl struct {
	FileToken      *string `json:"file_token,omitempty"`
	TmpDownloadUrl *string `json:"tmp_download_url,omitempty"`
}

type TmpDownloadUrlBuilder struct {
	fileToken          string
	fileTokenFlag      bool
	tmpDownloadUrl     string
	tmpDownloadUrlFlag bool
}

func NewTmpDownloadUrlBuilder() *TmpDownloadUrlBuilder {
	builder := &TmpDownloadUrlBuilder{}
	return builder
}

func (builder *TmpDownloadUrlBuilder) FileToken(fileToken string) *TmpDownloadUrlBuilder {
	builder.fileToken = fileToken
	builder.fileTokenFlag = true
	return builder
}
func (builder *TmpDownloadUrlBuilder) TmpDownloadUrl(tmpDownloadUrl string) *TmpDownloadUrlBuilder {
	builder.tmpDownloadUrl = tmpDownloadUrl
	builder.tmpDownloadUrlFlag = true
	return builder
}

func (builder *TmpDownloadUrlBuilder) Build() *TmpDownloadUrl {
	req := &TmpDownloadUrl{}
	if builder.fileTokenFlag {
		req.FileToken = &builder.fileToken

	}
	if builder.tmpDownloadUrlFlag {
		req.TmpDownloadUrl = &builder.tmpDownloadUrl

	}
	return req
}

type TokenType struct {
	Token *string `json:"token,omitempty"`
	Type  *string `json:"type,omitempty"`
}

type TokenTypeBuilder struct {
	token     string
	tokenFlag bool
	type_     string
	typeFlag  bool
}

func NewTokenTypeBuilder() *TokenTypeBuilder {
	builder := &TokenTypeBuilder{}
	return builder
}

func (builder *TokenTypeBuilder) Token(token string) *TokenTypeBuilder {
	builder.token = token
	builder.tokenFlag = true
	return builder
}
func (builder *TokenTypeBuilder) Type(type_ string) *TokenTypeBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}

func (builder *TokenTypeBuilder) Build() *TokenType {
	req := &TokenType{}
	if builder.tokenFlag {
		req.Token = &builder.token

	}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	return req
}

type UploadInfo struct {
	FileName   *string `json:"file_name,omitempty"`
	ParentType *string `json:"parent_type,omitempty"`
	ParentNode *string `json:"parent_node,omitempty"`
	Size       *int    `json:"size,omitempty"`
}

type UploadInfoBuilder struct {
	fileName       string
	fileNameFlag   bool
	parentType     string
	parentTypeFlag bool
	parentNode     string
	parentNodeFlag bool
	size           int
	sizeFlag       bool
}

func NewUploadInfoBuilder() *UploadInfoBuilder {
	builder := &UploadInfoBuilder{}
	return builder
}

func (builder *UploadInfoBuilder) FileName(fileName string) *UploadInfoBuilder {
	builder.fileName = fileName
	builder.fileNameFlag = true
	return builder
}
func (builder *UploadInfoBuilder) ParentType(parentType string) *UploadInfoBuilder {
	builder.parentType = parentType
	builder.parentTypeFlag = true
	return builder
}
func (builder *UploadInfoBuilder) ParentNode(parentNode string) *UploadInfoBuilder {
	builder.parentNode = parentNode
	builder.parentNodeFlag = true
	return builder
}
func (builder *UploadInfoBuilder) Size(size int) *UploadInfoBuilder {
	builder.size = size
	builder.sizeFlag = true
	return builder
}

func (builder *UploadInfoBuilder) Build() *UploadInfo {
	req := &UploadInfo{}
	if builder.fileNameFlag {
		req.FileName = &builder.fileName

	}
	if builder.parentTypeFlag {
		req.ParentType = &builder.parentType

	}
	if builder.parentNodeFlag {
		req.ParentNode = &builder.parentNode

	}
	if builder.sizeFlag {
		req.Size = &builder.size

	}
	return req
}

type UserId struct {
	UserId  *string `json:"user_id,omitempty"`
	OpenId  *string `json:"open_id,omitempty"`
	UnionId *string `json:"union_id,omitempty"`
}

type UserIdBuilder struct {
	userId      string
	userIdFlag  bool
	openId      string
	openIdFlag  bool
	unionId     string
	unionIdFlag bool
}

func NewUserIdBuilder() *UserIdBuilder {
	builder := &UserIdBuilder{}
	return builder
}

func (builder *UserIdBuilder) UserId(userId string) *UserIdBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}
func (builder *UserIdBuilder) OpenId(openId string) *UserIdBuilder {
	builder.openId = openId
	builder.openIdFlag = true
	return builder
}
func (builder *UserIdBuilder) UnionId(unionId string) *UserIdBuilder {
	builder.unionId = unionId
	builder.unionIdFlag = true
	return builder
}

func (builder *UserIdBuilder) Build() *UserId {
	req := &UserId{}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.openIdFlag {
		req.OpenId = &builder.openId

	}
	if builder.unionIdFlag {
		req.UnionId = &builder.unionId

	}
	return req
}

type CreateExportTaskReqBuilder struct {
	apiReq     *larkcore.ApiReq
	exportTask *ExportTask
}

func NewCreateExportTaskReqBuilder() *CreateExportTaskReqBuilder {
	builder := &CreateExportTaskReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *CreateExportTaskReqBuilder) ExportTask(exportTask *ExportTask) *CreateExportTaskReqBuilder {
	builder.exportTask = exportTask
	return builder
}

func (builder *CreateExportTaskReqBuilder) Build() *CreateExportTaskReq {
	req := &CreateExportTaskReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.Body = builder.exportTask
	return req
}

type CreateExportTaskReq struct {
	apiReq     *larkcore.ApiReq
	ExportTask *ExportTask `body:""`
}

type CreateExportTaskRespData struct {
	Ticket *string `json:"ticket,omitempty"`
}

type CreateExportTaskResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateExportTaskRespData `json:"data"`
}

func (resp *CreateExportTaskResp) Success() bool {
	return resp.Code == 0
}

type DownloadExportTaskReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewDownloadExportTaskReqBuilder() *DownloadExportTaskReqBuilder {
	builder := &DownloadExportTaskReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *DownloadExportTaskReqBuilder) FileToken(fileToken string) *DownloadExportTaskReqBuilder {
	builder.apiReq.PathParams.Set("file_token", fmt.Sprint(fileToken))
	return builder
}

func (builder *DownloadExportTaskReqBuilder) Build() *DownloadExportTaskReq {
	req := &DownloadExportTaskReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type DownloadExportTaskReq struct {
	apiReq *larkcore.ApiReq
}

type DownloadExportTaskResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	File     io.Reader `json:"-"`
	FileName string    `json:"-"`
}

func (resp *DownloadExportTaskResp) Success() bool {
	return resp.Code == 0
}

func (resp *DownloadExportTaskResp) WriteFile(fileName string) error {
	bs, err := ioutil.ReadAll(resp.File)
	if err != nil {
		return err
	}

	err = ioutil.WriteFile(fileName, bs, 0666)
	if err != nil {
		return err
	}
	return nil
}

type GetExportTaskReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewGetExportTaskReqBuilder() *GetExportTaskReqBuilder {
	builder := &GetExportTaskReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *GetExportTaskReqBuilder) Ticket(ticket string) *GetExportTaskReqBuilder {
	builder.apiReq.PathParams.Set("ticket", fmt.Sprint(ticket))
	return builder
}
func (builder *GetExportTaskReqBuilder) Token(token string) *GetExportTaskReqBuilder {
	builder.apiReq.QueryParams.Set("token", fmt.Sprint(token))
	return builder
}

func (builder *GetExportTaskReqBuilder) Build() *GetExportTaskReq {
	req := &GetExportTaskReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type GetExportTaskReq struct {
	apiReq *larkcore.ApiReq
}

type GetExportTaskRespData struct {
	Result *ExportTask `json:"result,omitempty"`
}

type GetExportTaskResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetExportTaskRespData `json:"data"`
}

func (resp *GetExportTaskResp) Success() bool {
	return resp.Code == 0
}

type CopyFileReqBodyBuilder struct {
	name            string
	nameFlag        bool
	type_           string
	typeFlag        bool
	folderToken     string
	folderTokenFlag bool
}

func NewCopyFileReqBodyBuilder() *CopyFileReqBodyBuilder {
	builder := &CopyFileReqBodyBuilder{}
	return builder
}

func (builder *CopyFileReqBodyBuilder) Name(name string) *CopyFileReqBodyBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *CopyFileReqBodyBuilder) Type(type_ string) *CopyFileReqBodyBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}
func (builder *CopyFileReqBodyBuilder) FolderToken(folderToken string) *CopyFileReqBodyBuilder {
	builder.folderToken = folderToken
	builder.folderTokenFlag = true
	return builder
}

func (builder *CopyFileReqBodyBuilder) Build() *CopyFileReqBody {
	req := &CopyFileReqBody{}
	if builder.nameFlag {
		req.Name = &builder.name
	}
	if builder.typeFlag {
		req.Type = &builder.type_
	}
	if builder.folderTokenFlag {
		req.FolderToken = &builder.folderToken
	}
	return req
}

type CopyFilePathReqBodyBuilder struct {
	name            string
	nameFlag        bool
	type_           string
	typeFlag        bool
	folderToken     string
	folderTokenFlag bool
}

func NewCopyFilePathReqBodyBuilder() *CopyFilePathReqBodyBuilder {
	builder := &CopyFilePathReqBodyBuilder{}
	return builder
}
func (builder *CopyFilePathReqBodyBuilder) Name(name string) *CopyFilePathReqBodyBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *CopyFilePathReqBodyBuilder) Type(type_ string) *CopyFilePathReqBodyBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}
func (builder *CopyFilePathReqBodyBuilder) FolderToken(folderToken string) *CopyFilePathReqBodyBuilder {
	builder.folderToken = folderToken
	builder.folderTokenFlag = true
	return builder
}

func (builder *CopyFilePathReqBodyBuilder) Build() (*CopyFileReqBody, error) {
	req := &CopyFileReqBody{}
	if builder.nameFlag {
		req.Name = &builder.name
	}
	if builder.typeFlag {
		req.Type = &builder.type_
	}
	if builder.folderTokenFlag {
		req.FolderToken = &builder.folderToken
	}
	return req, nil
}

type CopyFileReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *CopyFileReqBody
}

func NewCopyFileReqBuilder() *CopyFileReqBuilder {
	builder := &CopyFileReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *CopyFileReqBuilder) FileToken(fileToken string) *CopyFileReqBuilder {
	builder.apiReq.PathParams.Set("file_token", fmt.Sprint(fileToken))
	return builder
}
func (builder *CopyFileReqBuilder) Body(body *CopyFileReqBody) *CopyFileReqBuilder {
	builder.body = body
	return builder
}

func (builder *CopyFileReqBuilder) Build() *CopyFileReq {
	req := &CopyFileReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.body
	return req
}

type CopyFileReqBody struct {
	Name        *string `json:"name,omitempty"`
	Type        *string `json:"type,omitempty"`
	FolderToken *string `json:"folder_token,omitempty"`
}

type CopyFileReq struct {
	apiReq *larkcore.ApiReq
	Body   *CopyFileReqBody `body:""`
}

type CopyFileRespData struct {
	File *File `json:"file,omitempty"`
}

type CopyFileResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CopyFileRespData `json:"data"`
}

func (resp *CopyFileResp) Success() bool {
	return resp.Code == 0
}

type CreateFolderFileReqBodyBuilder struct {
	name            string
	nameFlag        bool
	folderToken     string
	folderTokenFlag bool
}

func NewCreateFolderFileReqBodyBuilder() *CreateFolderFileReqBodyBuilder {
	builder := &CreateFolderFileReqBodyBuilder{}
	return builder
}

func (builder *CreateFolderFileReqBodyBuilder) Name(name string) *CreateFolderFileReqBodyBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *CreateFolderFileReqBodyBuilder) FolderToken(folderToken string) *CreateFolderFileReqBodyBuilder {
	builder.folderToken = folderToken
	builder.folderTokenFlag = true
	return builder
}

func (builder *CreateFolderFileReqBodyBuilder) Build() *CreateFolderFileReqBody {
	req := &CreateFolderFileReqBody{}
	if builder.nameFlag {
		req.Name = &builder.name
	}
	if builder.folderTokenFlag {
		req.FolderToken = &builder.folderToken
	}
	return req
}

type CreateFolderFilePathReqBodyBuilder struct {
	name            string
	nameFlag        bool
	folderToken     string
	folderTokenFlag bool
}

func NewCreateFolderFilePathReqBodyBuilder() *CreateFolderFilePathReqBodyBuilder {
	builder := &CreateFolderFilePathReqBodyBuilder{}
	return builder
}
func (builder *CreateFolderFilePathReqBodyBuilder) Name(name string) *CreateFolderFilePathReqBodyBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *CreateFolderFilePathReqBodyBuilder) FolderToken(folderToken string) *CreateFolderFilePathReqBodyBuilder {
	builder.folderToken = folderToken
	builder.folderTokenFlag = true
	return builder
}

func (builder *CreateFolderFilePathReqBodyBuilder) Build() (*CreateFolderFileReqBody, error) {
	req := &CreateFolderFileReqBody{}
	if builder.nameFlag {
		req.Name = &builder.name
	}
	if builder.folderTokenFlag {
		req.FolderToken = &builder.folderToken
	}
	return req, nil
}

type CreateFolderFileReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *CreateFolderFileReqBody
}

func NewCreateFolderFileReqBuilder() *CreateFolderFileReqBuilder {
	builder := &CreateFolderFileReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *CreateFolderFileReqBuilder) Body(body *CreateFolderFileReqBody) *CreateFolderFileReqBuilder {
	builder.body = body
	return builder
}

func (builder *CreateFolderFileReqBuilder) Build() *CreateFolderFileReq {
	req := &CreateFolderFileReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.Body = builder.body
	return req
}

type CreateFolderFileReqBody struct {
	Name        *string `json:"name,omitempty"`
	FolderToken *string `json:"folder_token,omitempty"`
}

type CreateFolderFileReq struct {
	apiReq *larkcore.ApiReq
	Body   *CreateFolderFileReqBody `body:""`
}

type CreateFolderFileRespData struct {
	Token *string `json:"token,omitempty"`
	Url   *string `json:"url,omitempty"`
}

type CreateFolderFileResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateFolderFileRespData `json:"data"`
}

func (resp *CreateFolderFileResp) Success() bool {
	return resp.Code == 0
}

type DeleteFileReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewDeleteFileReqBuilder() *DeleteFileReqBuilder {
	builder := &DeleteFileReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *DeleteFileReqBuilder) FileToken(fileToken string) *DeleteFileReqBuilder {
	builder.apiReq.PathParams.Set("file_token", fmt.Sprint(fileToken))
	return builder
}
func (builder *DeleteFileReqBuilder) Type(type_ string) *DeleteFileReqBuilder {
	builder.apiReq.QueryParams.Set("type", fmt.Sprint(type_))
	return builder
}

func (builder *DeleteFileReqBuilder) Build() *DeleteFileReq {
	req := &DeleteFileReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type DeleteFileReq struct {
	apiReq *larkcore.ApiReq
}

type DeleteFileRespData struct {
	TaskId *string `json:"task_id,omitempty"`
}

type DeleteFileResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *DeleteFileRespData `json:"data"`
}

func (resp *DeleteFileResp) Success() bool {
	return resp.Code == 0
}

type DownloadFileReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewDownloadFileReqBuilder() *DownloadFileReqBuilder {
	builder := &DownloadFileReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *DownloadFileReqBuilder) FileToken(fileToken string) *DownloadFileReqBuilder {
	builder.apiReq.PathParams.Set("file_token", fmt.Sprint(fileToken))
	return builder
}

func (builder *DownloadFileReqBuilder) Build() *DownloadFileReq {
	req := &DownloadFileReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type DownloadFileReq struct {
	apiReq *larkcore.ApiReq
}

type DownloadFileResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	File     io.Reader `json:"-"`
	FileName string    `json:"-"`
}

func (resp *DownloadFileResp) Success() bool {
	return resp.Code == 0
}

func (resp *DownloadFileResp) WriteFile(fileName string) error {
	bs, err := ioutil.ReadAll(resp.File)
	if err != nil {
		return err
	}

	err = ioutil.WriteFile(fileName, bs, 0666)
	if err != nil {
		return err
	}
	return nil
}

type ListFileReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewListFileReqBuilder() *ListFileReqBuilder {
	builder := &ListFileReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *ListFileReqBuilder) PageSize(pageSize int) *ListFileReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}
func (builder *ListFileReqBuilder) PageToken(pageToken string) *ListFileReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}
func (builder *ListFileReqBuilder) FolderToken(folderToken string) *ListFileReqBuilder {
	builder.apiReq.QueryParams.Set("folder_token", fmt.Sprint(folderToken))
	return builder
}

func (builder *ListFileReqBuilder) Build() *ListFileReq {
	req := &ListFileReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListFileReq struct {
	apiReq *larkcore.ApiReq
}

type ListFileRespData struct {
	Files         []*File `json:"files,omitempty"`
	NextPageToken *string `json:"next_page_token,omitempty"`
	HasMore       *bool   `json:"has_more,omitempty"`
}

type ListFileResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListFileRespData `json:"data"`
}

func (resp *ListFileResp) Success() bool {
	return resp.Code == 0
}

type MoveFileReqBodyBuilder struct {
	type_           string
	typeFlag        bool
	folderToken     string
	folderTokenFlag bool
}

func NewMoveFileReqBodyBuilder() *MoveFileReqBodyBuilder {
	builder := &MoveFileReqBodyBuilder{}
	return builder
}

func (builder *MoveFileReqBodyBuilder) Type(type_ string) *MoveFileReqBodyBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}
func (builder *MoveFileReqBodyBuilder) FolderToken(folderToken string) *MoveFileReqBodyBuilder {
	builder.folderToken = folderToken
	builder.folderTokenFlag = true
	return builder
}

func (builder *MoveFileReqBodyBuilder) Build() *MoveFileReqBody {
	req := &MoveFileReqBody{}
	if builder.typeFlag {
		req.Type = &builder.type_
	}
	if builder.folderTokenFlag {
		req.FolderToken = &builder.folderToken
	}
	return req
}

type MoveFilePathReqBodyBuilder struct {
	type_           string
	typeFlag        bool
	folderToken     string
	folderTokenFlag bool
}

func NewMoveFilePathReqBodyBuilder() *MoveFilePathReqBodyBuilder {
	builder := &MoveFilePathReqBodyBuilder{}
	return builder
}
func (builder *MoveFilePathReqBodyBuilder) Type(type_ string) *MoveFilePathReqBodyBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}
func (builder *MoveFilePathReqBodyBuilder) FolderToken(folderToken string) *MoveFilePathReqBodyBuilder {
	builder.folderToken = folderToken
	builder.folderTokenFlag = true
	return builder
}

func (builder *MoveFilePathReqBodyBuilder) Build() (*MoveFileReqBody, error) {
	req := &MoveFileReqBody{}
	if builder.typeFlag {
		req.Type = &builder.type_
	}
	if builder.folderTokenFlag {
		req.FolderToken = &builder.folderToken
	}
	return req, nil
}

type MoveFileReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *MoveFileReqBody
}

func NewMoveFileReqBuilder() *MoveFileReqBuilder {
	builder := &MoveFileReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *MoveFileReqBuilder) FileToken(fileToken string) *MoveFileReqBuilder {
	builder.apiReq.PathParams.Set("file_token", fmt.Sprint(fileToken))
	return builder
}
func (builder *MoveFileReqBuilder) Body(body *MoveFileReqBody) *MoveFileReqBuilder {
	builder.body = body
	return builder
}

func (builder *MoveFileReqBuilder) Build() *MoveFileReq {
	req := &MoveFileReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.body
	return req
}

type MoveFileReqBody struct {
	Type        *string `json:"type,omitempty"`
	FolderToken *string `json:"folder_token,omitempty"`
}

type MoveFileReq struct {
	apiReq *larkcore.ApiReq
	Body   *MoveFileReqBody `body:""`
}

type MoveFileRespData struct {
	TaskId *string `json:"task_id,omitempty"`
}

type MoveFileResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *MoveFileRespData `json:"data"`
}

func (resp *MoveFileResp) Success() bool {
	return resp.Code == 0
}

type SubscribeFileReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewSubscribeFileReqBuilder() *SubscribeFileReqBuilder {
	builder := &SubscribeFileReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *SubscribeFileReqBuilder) FileToken(fileToken string) *SubscribeFileReqBuilder {
	builder.apiReq.PathParams.Set("file_token", fmt.Sprint(fileToken))
	return builder
}
func (builder *SubscribeFileReqBuilder) FileType(fileType string) *SubscribeFileReqBuilder {
	builder.apiReq.QueryParams.Set("file_type", fmt.Sprint(fileType))
	return builder
}

func (builder *SubscribeFileReqBuilder) Build() *SubscribeFileReq {
	req := &SubscribeFileReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type SubscribeFileReq struct {
	apiReq *larkcore.ApiReq
}

type SubscribeFileResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *SubscribeFileResp) Success() bool {
	return resp.Code == 0
}

type TaskCheckFileReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewTaskCheckFileReqBuilder() *TaskCheckFileReqBuilder {
	builder := &TaskCheckFileReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *TaskCheckFileReqBuilder) TaskId(taskId string) *TaskCheckFileReqBuilder {
	builder.apiReq.QueryParams.Set("task_id", fmt.Sprint(taskId))
	return builder
}

func (builder *TaskCheckFileReqBuilder) Build() *TaskCheckFileReq {
	req := &TaskCheckFileReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type TaskCheckFileReq struct {
	apiReq *larkcore.ApiReq
}

type TaskCheckFileRespData struct {
	Status *string `json:"status,omitempty"`
}

type TaskCheckFileResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *TaskCheckFileRespData `json:"data"`
}

func (resp *TaskCheckFileResp) Success() bool {
	return resp.Code == 0
}

type UploadAllFileReqBodyBuilder struct {
	fileName       string
	fileNameFlag   bool
	parentType     string
	parentTypeFlag bool
	parentNode     string
	parentNodeFlag bool
	size           int
	sizeFlag       bool
	checksum       string
	checksumFlag   bool
	file           io.Reader
	fileFlag       bool
}

func NewUploadAllFileReqBodyBuilder() *UploadAllFileReqBodyBuilder {
	builder := &UploadAllFileReqBodyBuilder{}
	return builder
}

func (builder *UploadAllFileReqBodyBuilder) FileName(fileName string) *UploadAllFileReqBodyBuilder {
	builder.fileName = fileName
	builder.fileNameFlag = true
	return builder
}
func (builder *UploadAllFileReqBodyBuilder) ParentType(parentType string) *UploadAllFileReqBodyBuilder {
	builder.parentType = parentType
	builder.parentTypeFlag = true
	return builder
}
func (builder *UploadAllFileReqBodyBuilder) ParentNode(parentNode string) *UploadAllFileReqBodyBuilder {
	builder.parentNode = parentNode
	builder.parentNodeFlag = true
	return builder
}
func (builder *UploadAllFileReqBodyBuilder) Size(size int) *UploadAllFileReqBodyBuilder {
	builder.size = size
	builder.sizeFlag = true
	return builder
}
func (builder *UploadAllFileReqBodyBuilder) Checksum(checksum string) *UploadAllFileReqBodyBuilder {
	builder.checksum = checksum
	builder.checksumFlag = true
	return builder
}
func (builder *UploadAllFileReqBodyBuilder) File(file io.Reader) *UploadAllFileReqBodyBuilder {
	builder.file = file
	builder.fileFlag = true
	return builder
}

func (builder *UploadAllFileReqBodyBuilder) Build() *UploadAllFileReqBody {
	req := &UploadAllFileReqBody{}
	if builder.fileNameFlag {
		req.FileName = &builder.fileName
	}
	if builder.parentTypeFlag {
		req.ParentType = &builder.parentType
	}
	if builder.parentNodeFlag {
		req.ParentNode = &builder.parentNode
	}
	if builder.sizeFlag {
		req.Size = &builder.size
	}
	if builder.checksumFlag {
		req.Checksum = &builder.checksum
	}
	if builder.fileFlag {
		req.File = builder.file
	}
	return req
}

type UploadAllFilePathReqBodyBuilder struct {
	fileName       string
	fileNameFlag   bool
	parentType     string
	parentTypeFlag bool
	parentNode     string
	parentNodeFlag bool
	size           int
	sizeFlag       bool
	checksum       string
	checksumFlag   bool
	filePath       string
	filePathFlag   bool
}

func NewUploadAllFilePathReqBodyBuilder() *UploadAllFilePathReqBodyBuilder {
	builder := &UploadAllFilePathReqBodyBuilder{}
	return builder
}
func (builder *UploadAllFilePathReqBodyBuilder) FileName(fileName string) *UploadAllFilePathReqBodyBuilder {
	builder.fileName = fileName
	builder.fileNameFlag = true
	return builder
}
func (builder *UploadAllFilePathReqBodyBuilder) ParentType(parentType string) *UploadAllFilePathReqBodyBuilder {
	builder.parentType = parentType
	builder.parentTypeFlag = true
	return builder
}
func (builder *UploadAllFilePathReqBodyBuilder) ParentNode(parentNode string) *UploadAllFilePathReqBodyBuilder {
	builder.parentNode = parentNode
	builder.parentNodeFlag = true
	return builder
}
func (builder *UploadAllFilePathReqBodyBuilder) Size(size int) *UploadAllFilePathReqBodyBuilder {
	builder.size = size
	builder.sizeFlag = true
	return builder
}
func (builder *UploadAllFilePathReqBodyBuilder) Checksum(checksum string) *UploadAllFilePathReqBodyBuilder {
	builder.checksum = checksum
	builder.checksumFlag = true
	return builder
}
func (builder *UploadAllFilePathReqBodyBuilder) FilePath(filePath string) *UploadAllFilePathReqBodyBuilder {
	builder.filePath = filePath
	builder.filePathFlag = true
	return builder
}

func (builder *UploadAllFilePathReqBodyBuilder) Build() (*UploadAllFileReqBody, error) {
	req := &UploadAllFileReqBody{}
	if builder.fileNameFlag {
		req.FileName = &builder.fileName
	}
	if builder.parentTypeFlag {
		req.ParentType = &builder.parentType
	}
	if builder.parentNodeFlag {
		req.ParentNode = &builder.parentNode
	}
	if builder.sizeFlag {
		req.Size = &builder.size
	}
	if builder.checksumFlag {
		req.Checksum = &builder.checksum
	}
	if builder.filePathFlag {
		data, err := larkcore.File2Bytes(builder.filePath)
		if err != nil {
			return nil, err
		}
		req.File = bytes.NewBuffer(data)
	}
	return req, nil
}

type UploadAllFileReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *UploadAllFileReqBody
}

func NewUploadAllFileReqBuilder() *UploadAllFileReqBuilder {
	builder := &UploadAllFileReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *UploadAllFileReqBuilder) Body(body *UploadAllFileReqBody) *UploadAllFileReqBuilder {
	builder.body = body
	return builder
}

func (builder *UploadAllFileReqBuilder) Build() *UploadAllFileReq {
	req := &UploadAllFileReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.Body = builder.body
	return req
}

type UploadAllFileReqBody struct {
	FileName   *string   `json:"file_name,omitempty"`
	ParentType *string   `json:"parent_type,omitempty"`
	ParentNode *string   `json:"parent_node,omitempty"`
	Size       *int      `json:"size,omitempty"`
	Checksum   *string   `json:"checksum,omitempty"`
	File       io.Reader `json:"file,omitempty"`
}

type UploadAllFileReq struct {
	apiReq *larkcore.ApiReq
	Body   *UploadAllFileReqBody `body:""`
}

type UploadAllFileRespData struct {
	FileToken *string `json:"file_token,omitempty"`
}

type UploadAllFileResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *UploadAllFileRespData `json:"data"`
}

func (resp *UploadAllFileResp) Success() bool {
	return resp.Code == 0
}

type UploadFinishFileReqBodyBuilder struct {
	uploadId     string
	uploadIdFlag bool
	blockNum     int
	blockNumFlag bool
}

func NewUploadFinishFileReqBodyBuilder() *UploadFinishFileReqBodyBuilder {
	builder := &UploadFinishFileReqBodyBuilder{}
	return builder
}

func (builder *UploadFinishFileReqBodyBuilder) UploadId(uploadId string) *UploadFinishFileReqBodyBuilder {
	builder.uploadId = uploadId
	builder.uploadIdFlag = true
	return builder
}
func (builder *UploadFinishFileReqBodyBuilder) BlockNum(blockNum int) *UploadFinishFileReqBodyBuilder {
	builder.blockNum = blockNum
	builder.blockNumFlag = true
	return builder
}

func (builder *UploadFinishFileReqBodyBuilder) Build() *UploadFinishFileReqBody {
	req := &UploadFinishFileReqBody{}
	if builder.uploadIdFlag {
		req.UploadId = &builder.uploadId
	}
	if builder.blockNumFlag {
		req.BlockNum = &builder.blockNum
	}
	return req
}

type UploadFinishFilePathReqBodyBuilder struct {
	uploadId     string
	uploadIdFlag bool
	blockNum     int
	blockNumFlag bool
}

func NewUploadFinishFilePathReqBodyBuilder() *UploadFinishFilePathReqBodyBuilder {
	builder := &UploadFinishFilePathReqBodyBuilder{}
	return builder
}
func (builder *UploadFinishFilePathReqBodyBuilder) UploadId(uploadId string) *UploadFinishFilePathReqBodyBuilder {
	builder.uploadId = uploadId
	builder.uploadIdFlag = true
	return builder
}
func (builder *UploadFinishFilePathReqBodyBuilder) BlockNum(blockNum int) *UploadFinishFilePathReqBodyBuilder {
	builder.blockNum = blockNum
	builder.blockNumFlag = true
	return builder
}

func (builder *UploadFinishFilePathReqBodyBuilder) Build() (*UploadFinishFileReqBody, error) {
	req := &UploadFinishFileReqBody{}
	if builder.uploadIdFlag {
		req.UploadId = &builder.uploadId
	}
	if builder.blockNumFlag {
		req.BlockNum = &builder.blockNum
	}
	return req, nil
}

type UploadFinishFileReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *UploadFinishFileReqBody
}

func NewUploadFinishFileReqBuilder() *UploadFinishFileReqBuilder {
	builder := &UploadFinishFileReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *UploadFinishFileReqBuilder) Body(body *UploadFinishFileReqBody) *UploadFinishFileReqBuilder {
	builder.body = body
	return builder
}

func (builder *UploadFinishFileReqBuilder) Build() *UploadFinishFileReq {
	req := &UploadFinishFileReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.Body = builder.body
	return req
}

type UploadFinishFileReqBody struct {
	UploadId *string `json:"upload_id,omitempty"`
	BlockNum *int    `json:"block_num,omitempty"`
}

type UploadFinishFileReq struct {
	apiReq *larkcore.ApiReq
	Body   *UploadFinishFileReqBody `body:""`
}

type UploadFinishFileRespData struct {
	FileToken *string `json:"file_token,omitempty"`
}

type UploadFinishFileResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *UploadFinishFileRespData `json:"data"`
}

func (resp *UploadFinishFileResp) Success() bool {
	return resp.Code == 0
}

type UploadPartFileReqBodyBuilder struct {
	uploadId     string
	uploadIdFlag bool
	seq          int
	seqFlag      bool
	size         int
	sizeFlag     bool
	checksum     string
	checksumFlag bool
	file         io.Reader
	fileFlag     bool
}

func NewUploadPartFileReqBodyBuilder() *UploadPartFileReqBodyBuilder {
	builder := &UploadPartFileReqBodyBuilder{}
	return builder
}

func (builder *UploadPartFileReqBodyBuilder) UploadId(uploadId string) *UploadPartFileReqBodyBuilder {
	builder.uploadId = uploadId
	builder.uploadIdFlag = true
	return builder
}
func (builder *UploadPartFileReqBodyBuilder) Seq(seq int) *UploadPartFileReqBodyBuilder {
	builder.seq = seq
	builder.seqFlag = true
	return builder
}
func (builder *UploadPartFileReqBodyBuilder) Size(size int) *UploadPartFileReqBodyBuilder {
	builder.size = size
	builder.sizeFlag = true
	return builder
}
func (builder *UploadPartFileReqBodyBuilder) Checksum(checksum string) *UploadPartFileReqBodyBuilder {
	builder.checksum = checksum
	builder.checksumFlag = true
	return builder
}
func (builder *UploadPartFileReqBodyBuilder) File(file io.Reader) *UploadPartFileReqBodyBuilder {
	builder.file = file
	builder.fileFlag = true
	return builder
}

func (builder *UploadPartFileReqBodyBuilder) Build() *UploadPartFileReqBody {
	req := &UploadPartFileReqBody{}
	if builder.uploadIdFlag {
		req.UploadId = &builder.uploadId
	}
	if builder.seqFlag {
		req.Seq = &builder.seq
	}
	if builder.sizeFlag {
		req.Size = &builder.size
	}
	if builder.checksumFlag {
		req.Checksum = &builder.checksum
	}
	if builder.fileFlag {
		req.File = builder.file
	}
	return req
}

type UploadPartFilePathReqBodyBuilder struct {
	uploadId     string
	uploadIdFlag bool
	seq          int
	seqFlag      bool
	size         int
	sizeFlag     bool
	checksum     string
	checksumFlag bool
	filePath     string
	filePathFlag bool
}

func NewUploadPartFilePathReqBodyBuilder() *UploadPartFilePathReqBodyBuilder {
	builder := &UploadPartFilePathReqBodyBuilder{}
	return builder
}
func (builder *UploadPartFilePathReqBodyBuilder) UploadId(uploadId string) *UploadPartFilePathReqBodyBuilder {
	builder.uploadId = uploadId
	builder.uploadIdFlag = true
	return builder
}
func (builder *UploadPartFilePathReqBodyBuilder) Seq(seq int) *UploadPartFilePathReqBodyBuilder {
	builder.seq = seq
	builder.seqFlag = true
	return builder
}
func (builder *UploadPartFilePathReqBodyBuilder) Size(size int) *UploadPartFilePathReqBodyBuilder {
	builder.size = size
	builder.sizeFlag = true
	return builder
}
func (builder *UploadPartFilePathReqBodyBuilder) Checksum(checksum string) *UploadPartFilePathReqBodyBuilder {
	builder.checksum = checksum
	builder.checksumFlag = true
	return builder
}
func (builder *UploadPartFilePathReqBodyBuilder) FilePath(filePath string) *UploadPartFilePathReqBodyBuilder {
	builder.filePath = filePath
	builder.filePathFlag = true
	return builder
}

func (builder *UploadPartFilePathReqBodyBuilder) Build() (*UploadPartFileReqBody, error) {
	req := &UploadPartFileReqBody{}
	if builder.uploadIdFlag {
		req.UploadId = &builder.uploadId
	}
	if builder.seqFlag {
		req.Seq = &builder.seq
	}
	if builder.sizeFlag {
		req.Size = &builder.size
	}
	if builder.checksumFlag {
		req.Checksum = &builder.checksum
	}
	if builder.filePathFlag {
		data, err := larkcore.File2Bytes(builder.filePath)
		if err != nil {
			return nil, err
		}
		req.File = bytes.NewBuffer(data)
	}
	return req, nil
}

type UploadPartFileReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *UploadPartFileReqBody
}

func NewUploadPartFileReqBuilder() *UploadPartFileReqBuilder {
	builder := &UploadPartFileReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *UploadPartFileReqBuilder) Body(body *UploadPartFileReqBody) *UploadPartFileReqBuilder {
	builder.body = body
	return builder
}

func (builder *UploadPartFileReqBuilder) Build() *UploadPartFileReq {
	req := &UploadPartFileReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.Body = builder.body
	return req
}

type UploadPartFileReqBody struct {
	UploadId *string   `json:"upload_id,omitempty"`
	Seq      *int      `json:"seq,omitempty"`
	Size     *int      `json:"size,omitempty"`
	Checksum *string   `json:"checksum,omitempty"`
	File     io.Reader `json:"file,omitempty"`
}

type UploadPartFileReq struct {
	apiReq *larkcore.ApiReq
	Body   *UploadPartFileReqBody `body:""`
}

type UploadPartFileResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *UploadPartFileResp) Success() bool {
	return resp.Code == 0
}

type UploadPrepareFileReqBuilder struct {
	apiReq         *larkcore.ApiReq
	fileUploadInfo *FileUploadInfo
}

func NewUploadPrepareFileReqBuilder() *UploadPrepareFileReqBuilder {
	builder := &UploadPrepareFileReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *UploadPrepareFileReqBuilder) FileUploadInfo(fileUploadInfo *FileUploadInfo) *UploadPrepareFileReqBuilder {
	builder.fileUploadInfo = fileUploadInfo
	return builder
}

func (builder *UploadPrepareFileReqBuilder) Build() *UploadPrepareFileReq {
	req := &UploadPrepareFileReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.Body = builder.fileUploadInfo
	return req
}

type UploadPrepareFileReq struct {
	apiReq         *larkcore.ApiReq
	FileUploadInfo *FileUploadInfo `body:""`
}

type UploadPrepareFileRespData struct {
	UploadId  *string `json:"upload_id,omitempty"`
	BlockSize *int    `json:"block_size,omitempty"`
	BlockNum  *int    `json:"block_num,omitempty"`
}

type UploadPrepareFileResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *UploadPrepareFileRespData `json:"data"`
}

func (resp *UploadPrepareFileResp) Success() bool {
	return resp.Code == 0
}

type CreateFileCommentReqBuilder struct {
	apiReq      *larkcore.ApiReq
	fileComment *FileComment
}

func NewCreateFileCommentReqBuilder() *CreateFileCommentReqBuilder {
	builder := &CreateFileCommentReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *CreateFileCommentReqBuilder) FileToken(fileToken string) *CreateFileCommentReqBuilder {
	builder.apiReq.PathParams.Set("file_token", fmt.Sprint(fileToken))
	return builder
}
func (builder *CreateFileCommentReqBuilder) FileType(fileType string) *CreateFileCommentReqBuilder {
	builder.apiReq.QueryParams.Set("file_type", fmt.Sprint(fileType))
	return builder
}
func (builder *CreateFileCommentReqBuilder) UserIdType(userIdType string) *CreateFileCommentReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}
func (builder *CreateFileCommentReqBuilder) FileComment(fileComment *FileComment) *CreateFileCommentReqBuilder {
	builder.fileComment = fileComment
	return builder
}

func (builder *CreateFileCommentReqBuilder) Build() *CreateFileCommentReq {
	req := &CreateFileCommentReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.fileComment
	return req
}

type CreateFileCommentReq struct {
	apiReq      *larkcore.ApiReq
	FileComment *FileComment `body:""`
}

type CreateFileCommentRespData struct {
	CommentId    *string    `json:"comment_id,omitempty"`
	UserId       *string    `json:"user_id,omitempty"`
	CreateTime   *int       `json:"create_time,omitempty"`
	UpdateTime   *int       `json:"update_time,omitempty"`
	IsSolved     *bool      `json:"is_solved,omitempty"`
	SolvedTime   *int       `json:"solved_time,omitempty"`
	SolverUserId *string    `json:"solver_user_id,omitempty"`
	ReplyList    *ReplyList `json:"reply_list,omitempty"`
}

type CreateFileCommentResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateFileCommentRespData `json:"data"`
}

func (resp *CreateFileCommentResp) Success() bool {
	return resp.Code == 0
}

type GetFileCommentReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewGetFileCommentReqBuilder() *GetFileCommentReqBuilder {
	builder := &GetFileCommentReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *GetFileCommentReqBuilder) FileToken(fileToken string) *GetFileCommentReqBuilder {
	builder.apiReq.PathParams.Set("file_token", fmt.Sprint(fileToken))
	return builder
}
func (builder *GetFileCommentReqBuilder) CommentId(commentId string) *GetFileCommentReqBuilder {
	builder.apiReq.PathParams.Set("comment_id", fmt.Sprint(commentId))
	return builder
}
func (builder *GetFileCommentReqBuilder) FileType(fileType string) *GetFileCommentReqBuilder {
	builder.apiReq.QueryParams.Set("file_type", fmt.Sprint(fileType))
	return builder
}
func (builder *GetFileCommentReqBuilder) UserIdType(userIdType string) *GetFileCommentReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

func (builder *GetFileCommentReqBuilder) Build() *GetFileCommentReq {
	req := &GetFileCommentReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type GetFileCommentReq struct {
	apiReq *larkcore.ApiReq
}

type GetFileCommentRespData struct {
	CommentId    *string    `json:"comment_id,omitempty"`
	UserId       *string    `json:"user_id,omitempty"`
	CreateTime   *int       `json:"create_time,omitempty"`
	UpdateTime   *int       `json:"update_time,omitempty"`
	IsSolved     *bool      `json:"is_solved,omitempty"`
	SolvedTime   *int       `json:"solved_time,omitempty"`
	SolverUserId *string    `json:"solver_user_id,omitempty"`
	ReplyList    *ReplyList `json:"reply_list,omitempty"`
}

type GetFileCommentResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetFileCommentRespData `json:"data"`
}

func (resp *GetFileCommentResp) Success() bool {
	return resp.Code == 0
}

type ListFileCommentReqBuilder struct {
	apiReq *larkcore.ApiReq
	limit  int
}

func NewListFileCommentReqBuilder() *ListFileCommentReqBuilder {
	builder := &ListFileCommentReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *ListFileCommentReqBuilder) Limit(limit int) *ListFileCommentReqBuilder {
	builder.limit = limit
	return builder
}
func (builder *ListFileCommentReqBuilder) FileToken(fileToken string) *ListFileCommentReqBuilder {
	builder.apiReq.PathParams.Set("file_token", fmt.Sprint(fileToken))
	return builder
}
func (builder *ListFileCommentReqBuilder) FileType(fileType string) *ListFileCommentReqBuilder {
	builder.apiReq.QueryParams.Set("file_type", fmt.Sprint(fileType))
	return builder
}
func (builder *ListFileCommentReqBuilder) UserIdType(userIdType string) *ListFileCommentReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}
func (builder *ListFileCommentReqBuilder) IsSolved(isSolved bool) *ListFileCommentReqBuilder {
	builder.apiReq.QueryParams.Set("is_solved", fmt.Sprint(isSolved))
	return builder
}
func (builder *ListFileCommentReqBuilder) PageToken(pageToken string) *ListFileCommentReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}
func (builder *ListFileCommentReqBuilder) PageSize(pageSize int) *ListFileCommentReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

func (builder *ListFileCommentReqBuilder) Build() *ListFileCommentReq {
	req := &ListFileCommentReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListFileCommentReq struct {
	apiReq *larkcore.ApiReq
	Limit  int
}

type ListFileCommentRespData struct {
	HasMore   *bool          `json:"has_more,omitempty"`
	PageToken *string        `json:"page_token,omitempty"`
	Items     []*FileComment `json:"items,omitempty"`
}

type ListFileCommentResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListFileCommentRespData `json:"data"`
}

func (resp *ListFileCommentResp) Success() bool {
	return resp.Code == 0
}

type PatchFileCommentReqBodyBuilder struct {
	isSolved     bool
	isSolvedFlag bool
}

func NewPatchFileCommentReqBodyBuilder() *PatchFileCommentReqBodyBuilder {
	builder := &PatchFileCommentReqBodyBuilder{}
	return builder
}

func (builder *PatchFileCommentReqBodyBuilder) IsSolved(isSolved bool) *PatchFileCommentReqBodyBuilder {
	builder.isSolved = isSolved
	builder.isSolvedFlag = true
	return builder
}

func (builder *PatchFileCommentReqBodyBuilder) Build() *PatchFileCommentReqBody {
	req := &PatchFileCommentReqBody{}
	if builder.isSolvedFlag {
		req.IsSolved = &builder.isSolved
	}
	return req
}

type PatchFileCommentPathReqBodyBuilder struct {
	isSolved     bool
	isSolvedFlag bool
}

func NewPatchFileCommentPathReqBodyBuilder() *PatchFileCommentPathReqBodyBuilder {
	builder := &PatchFileCommentPathReqBodyBuilder{}
	return builder
}
func (builder *PatchFileCommentPathReqBodyBuilder) IsSolved(isSolved bool) *PatchFileCommentPathReqBodyBuilder {
	builder.isSolved = isSolved
	builder.isSolvedFlag = true
	return builder
}

func (builder *PatchFileCommentPathReqBodyBuilder) Build() (*PatchFileCommentReqBody, error) {
	req := &PatchFileCommentReqBody{}
	if builder.isSolvedFlag {
		req.IsSolved = &builder.isSolved
	}
	return req, nil
}

type PatchFileCommentReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *PatchFileCommentReqBody
}

func NewPatchFileCommentReqBuilder() *PatchFileCommentReqBuilder {
	builder := &PatchFileCommentReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *PatchFileCommentReqBuilder) FileToken(fileToken string) *PatchFileCommentReqBuilder {
	builder.apiReq.PathParams.Set("file_token", fmt.Sprint(fileToken))
	return builder
}
func (builder *PatchFileCommentReqBuilder) CommentId(commentId string) *PatchFileCommentReqBuilder {
	builder.apiReq.PathParams.Set("comment_id", fmt.Sprint(commentId))
	return builder
}
func (builder *PatchFileCommentReqBuilder) FileType(fileType string) *PatchFileCommentReqBuilder {
	builder.apiReq.QueryParams.Set("file_type", fmt.Sprint(fileType))
	return builder
}
func (builder *PatchFileCommentReqBuilder) Body(body *PatchFileCommentReqBody) *PatchFileCommentReqBuilder {
	builder.body = body
	return builder
}

func (builder *PatchFileCommentReqBuilder) Build() *PatchFileCommentReq {
	req := &PatchFileCommentReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.body
	return req
}

type PatchFileCommentReqBody struct {
	IsSolved *bool `json:"is_solved,omitempty"`
}

type PatchFileCommentReq struct {
	apiReq *larkcore.ApiReq
	Body   *PatchFileCommentReqBody `body:""`
}

type PatchFileCommentResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *PatchFileCommentResp) Success() bool {
	return resp.Code == 0
}

type DeleteFileCommentReplyReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewDeleteFileCommentReplyReqBuilder() *DeleteFileCommentReplyReqBuilder {
	builder := &DeleteFileCommentReplyReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *DeleteFileCommentReplyReqBuilder) FileToken(fileToken string) *DeleteFileCommentReplyReqBuilder {
	builder.apiReq.PathParams.Set("file_token", fmt.Sprint(fileToken))
	return builder
}
func (builder *DeleteFileCommentReplyReqBuilder) CommentId(commentId string) *DeleteFileCommentReplyReqBuilder {
	builder.apiReq.PathParams.Set("comment_id", fmt.Sprint(commentId))
	return builder
}
func (builder *DeleteFileCommentReplyReqBuilder) ReplyId(replyId string) *DeleteFileCommentReplyReqBuilder {
	builder.apiReq.PathParams.Set("reply_id", fmt.Sprint(replyId))
	return builder
}
func (builder *DeleteFileCommentReplyReqBuilder) FileType(fileType string) *DeleteFileCommentReplyReqBuilder {
	builder.apiReq.QueryParams.Set("file_type", fmt.Sprint(fileType))
	return builder
}

func (builder *DeleteFileCommentReplyReqBuilder) Build() *DeleteFileCommentReplyReq {
	req := &DeleteFileCommentReplyReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type DeleteFileCommentReplyReq struct {
	apiReq *larkcore.ApiReq
}

type DeleteFileCommentReplyResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *DeleteFileCommentReplyResp) Success() bool {
	return resp.Code == 0
}

type UpdateFileCommentReplyReqBodyBuilder struct {
	content     *ReplyContent
	contentFlag bool
}

func NewUpdateFileCommentReplyReqBodyBuilder() *UpdateFileCommentReplyReqBodyBuilder {
	builder := &UpdateFileCommentReplyReqBodyBuilder{}
	return builder
}

func (builder *UpdateFileCommentReplyReqBodyBuilder) Content(content *ReplyContent) *UpdateFileCommentReplyReqBodyBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}

func (builder *UpdateFileCommentReplyReqBodyBuilder) Build() *UpdateFileCommentReplyReqBody {
	req := &UpdateFileCommentReplyReqBody{}
	if builder.contentFlag {
		req.Content = builder.content
	}
	return req
}

type UpdateFileCommentReplyPathReqBodyBuilder struct {
	content     *ReplyContent
	contentFlag bool
}

func NewUpdateFileCommentReplyPathReqBodyBuilder() *UpdateFileCommentReplyPathReqBodyBuilder {
	builder := &UpdateFileCommentReplyPathReqBodyBuilder{}
	return builder
}
func (builder *UpdateFileCommentReplyPathReqBodyBuilder) Content(content *ReplyContent) *UpdateFileCommentReplyPathReqBodyBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}

func (builder *UpdateFileCommentReplyPathReqBodyBuilder) Build() (*UpdateFileCommentReplyReqBody, error) {
	req := &UpdateFileCommentReplyReqBody{}
	if builder.contentFlag {
		req.Content = builder.content
	}
	return req, nil
}

type UpdateFileCommentReplyReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *UpdateFileCommentReplyReqBody
}

func NewUpdateFileCommentReplyReqBuilder() *UpdateFileCommentReplyReqBuilder {
	builder := &UpdateFileCommentReplyReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *UpdateFileCommentReplyReqBuilder) FileToken(fileToken string) *UpdateFileCommentReplyReqBuilder {
	builder.apiReq.PathParams.Set("file_token", fmt.Sprint(fileToken))
	return builder
}
func (builder *UpdateFileCommentReplyReqBuilder) CommentId(commentId string) *UpdateFileCommentReplyReqBuilder {
	builder.apiReq.PathParams.Set("comment_id", fmt.Sprint(commentId))
	return builder
}
func (builder *UpdateFileCommentReplyReqBuilder) ReplyId(replyId string) *UpdateFileCommentReplyReqBuilder {
	builder.apiReq.PathParams.Set("reply_id", fmt.Sprint(replyId))
	return builder
}
func (builder *UpdateFileCommentReplyReqBuilder) FileType(fileType string) *UpdateFileCommentReplyReqBuilder {
	builder.apiReq.QueryParams.Set("file_type", fmt.Sprint(fileType))
	return builder
}
func (builder *UpdateFileCommentReplyReqBuilder) UserIdType(userIdType string) *UpdateFileCommentReplyReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}
func (builder *UpdateFileCommentReplyReqBuilder) Body(body *UpdateFileCommentReplyReqBody) *UpdateFileCommentReplyReqBuilder {
	builder.body = body
	return builder
}

func (builder *UpdateFileCommentReplyReqBuilder) Build() *UpdateFileCommentReplyReq {
	req := &UpdateFileCommentReplyReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.body
	return req
}

type UpdateFileCommentReplyReqBody struct {
	Content *ReplyContent `json:"content,omitempty"`
}

type UpdateFileCommentReplyReq struct {
	apiReq *larkcore.ApiReq
	Body   *UpdateFileCommentReplyReqBody `body:""`
}

type UpdateFileCommentReplyResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *UpdateFileCommentReplyResp) Success() bool {
	return resp.Code == 0
}

type GetFileStatisticsReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewGetFileStatisticsReqBuilder() *GetFileStatisticsReqBuilder {
	builder := &GetFileStatisticsReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *GetFileStatisticsReqBuilder) FileToken(fileToken string) *GetFileStatisticsReqBuilder {
	builder.apiReq.PathParams.Set("file_token", fmt.Sprint(fileToken))
	return builder
}
func (builder *GetFileStatisticsReqBuilder) FileType(fileType string) *GetFileStatisticsReqBuilder {
	builder.apiReq.QueryParams.Set("file_type", fmt.Sprint(fileType))
	return builder
}

func (builder *GetFileStatisticsReqBuilder) Build() *GetFileStatisticsReq {
	req := &GetFileStatisticsReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type GetFileStatisticsReq struct {
	apiReq *larkcore.ApiReq
}

type GetFileStatisticsRespData struct {
	FileToken  *string         `json:"file_token,omitempty"`
	FileType   *string         `json:"file_type,omitempty"`
	Statistics *FileStatistics `json:"statistics,omitempty"`
}

type GetFileStatisticsResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetFileStatisticsRespData `json:"data"`
}

func (resp *GetFileStatisticsResp) Success() bool {
	return resp.Code == 0
}

type CreateFileSubscriptionReqBuilder struct {
	apiReq           *larkcore.ApiReq
	fileSubscription *FileSubscription
}

func NewCreateFileSubscriptionReqBuilder() *CreateFileSubscriptionReqBuilder {
	builder := &CreateFileSubscriptionReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *CreateFileSubscriptionReqBuilder) FileToken(fileToken string) *CreateFileSubscriptionReqBuilder {
	builder.apiReq.PathParams.Set("file_token", fmt.Sprint(fileToken))
	return builder
}
func (builder *CreateFileSubscriptionReqBuilder) FileSubscription(fileSubscription *FileSubscription) *CreateFileSubscriptionReqBuilder {
	builder.fileSubscription = fileSubscription
	return builder
}

func (builder *CreateFileSubscriptionReqBuilder) Build() *CreateFileSubscriptionReq {
	req := &CreateFileSubscriptionReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.fileSubscription
	return req
}

type CreateFileSubscriptionReq struct {
	apiReq           *larkcore.ApiReq
	FileSubscription *FileSubscription `body:""`
}

type CreateFileSubscriptionRespData struct {
	Subscription *FileSubscription `json:"subscription,omitempty"`
}

type CreateFileSubscriptionResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateFileSubscriptionRespData `json:"data"`
}

func (resp *CreateFileSubscriptionResp) Success() bool {
	return resp.Code == 0
}

type GetFileSubscriptionReqBuilder struct {
	apiReq           *larkcore.ApiReq
	fileSubscription *FileSubscription
}

func NewGetFileSubscriptionReqBuilder() *GetFileSubscriptionReqBuilder {
	builder := &GetFileSubscriptionReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *GetFileSubscriptionReqBuilder) FileToken(fileToken string) *GetFileSubscriptionReqBuilder {
	builder.apiReq.PathParams.Set("file_token", fmt.Sprint(fileToken))
	return builder
}
func (builder *GetFileSubscriptionReqBuilder) SubscriptionId(subscriptionId string) *GetFileSubscriptionReqBuilder {
	builder.apiReq.PathParams.Set("subscription_id", fmt.Sprint(subscriptionId))
	return builder
}
func (builder *GetFileSubscriptionReqBuilder) FileSubscription(fileSubscription *FileSubscription) *GetFileSubscriptionReqBuilder {
	builder.fileSubscription = fileSubscription
	return builder
}

func (builder *GetFileSubscriptionReqBuilder) Build() *GetFileSubscriptionReq {
	req := &GetFileSubscriptionReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.fileSubscription
	return req
}

type GetFileSubscriptionReq struct {
	apiReq           *larkcore.ApiReq
	FileSubscription *FileSubscription `body:""`
}

type GetFileSubscriptionRespData struct {
	Subscription *FileSubscription `json:"subscription,omitempty"`
}

type GetFileSubscriptionResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetFileSubscriptionRespData `json:"data"`
}

func (resp *GetFileSubscriptionResp) Success() bool {
	return resp.Code == 0
}

type PatchFileSubscriptionReqBodyBuilder struct {
	isSubscribe     bool
	isSubscribeFlag bool
	fileType        string
	fileTypeFlag    bool
}

func NewPatchFileSubscriptionReqBodyBuilder() *PatchFileSubscriptionReqBodyBuilder {
	builder := &PatchFileSubscriptionReqBodyBuilder{}
	return builder
}

func (builder *PatchFileSubscriptionReqBodyBuilder) IsSubscribe(isSubscribe bool) *PatchFileSubscriptionReqBodyBuilder {
	builder.isSubscribe = isSubscribe
	builder.isSubscribeFlag = true
	return builder
}
func (builder *PatchFileSubscriptionReqBodyBuilder) FileType(fileType string) *PatchFileSubscriptionReqBodyBuilder {
	builder.fileType = fileType
	builder.fileTypeFlag = true
	return builder
}

func (builder *PatchFileSubscriptionReqBodyBuilder) Build() *PatchFileSubscriptionReqBody {
	req := &PatchFileSubscriptionReqBody{}
	if builder.isSubscribeFlag {
		req.IsSubscribe = &builder.isSubscribe
	}
	if builder.fileTypeFlag {
		req.FileType = &builder.fileType
	}
	return req
}

type PatchFileSubscriptionPathReqBodyBuilder struct {
	isSubscribe     bool
	isSubscribeFlag bool
	fileType        string
	fileTypeFlag    bool
}

func NewPatchFileSubscriptionPathReqBodyBuilder() *PatchFileSubscriptionPathReqBodyBuilder {
	builder := &PatchFileSubscriptionPathReqBodyBuilder{}
	return builder
}
func (builder *PatchFileSubscriptionPathReqBodyBuilder) IsSubscribe(isSubscribe bool) *PatchFileSubscriptionPathReqBodyBuilder {
	builder.isSubscribe = isSubscribe
	builder.isSubscribeFlag = true
	return builder
}
func (builder *PatchFileSubscriptionPathReqBodyBuilder) FileType(fileType string) *PatchFileSubscriptionPathReqBodyBuilder {
	builder.fileType = fileType
	builder.fileTypeFlag = true
	return builder
}

func (builder *PatchFileSubscriptionPathReqBodyBuilder) Build() (*PatchFileSubscriptionReqBody, error) {
	req := &PatchFileSubscriptionReqBody{}
	if builder.isSubscribeFlag {
		req.IsSubscribe = &builder.isSubscribe
	}
	if builder.fileTypeFlag {
		req.FileType = &builder.fileType
	}
	return req, nil
}

type PatchFileSubscriptionReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *PatchFileSubscriptionReqBody
}

func NewPatchFileSubscriptionReqBuilder() *PatchFileSubscriptionReqBuilder {
	builder := &PatchFileSubscriptionReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *PatchFileSubscriptionReqBuilder) FileToken(fileToken string) *PatchFileSubscriptionReqBuilder {
	builder.apiReq.PathParams.Set("file_token", fmt.Sprint(fileToken))
	return builder
}
func (builder *PatchFileSubscriptionReqBuilder) SubscriptionId(subscriptionId string) *PatchFileSubscriptionReqBuilder {
	builder.apiReq.PathParams.Set("subscription_id", fmt.Sprint(subscriptionId))
	return builder
}
func (builder *PatchFileSubscriptionReqBuilder) Body(body *PatchFileSubscriptionReqBody) *PatchFileSubscriptionReqBuilder {
	builder.body = body
	return builder
}

func (builder *PatchFileSubscriptionReqBuilder) Build() *PatchFileSubscriptionReq {
	req := &PatchFileSubscriptionReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.body
	return req
}

type PatchFileSubscriptionReqBody struct {
	IsSubscribe *bool   `json:"is_subscribe,omitempty"`
	FileType    *string `json:"file_type,omitempty"`
}

type PatchFileSubscriptionReq struct {
	apiReq *larkcore.ApiReq
	Body   *PatchFileSubscriptionReqBody `body:""`
}

type PatchFileSubscriptionRespData struct {
	Subscription *FileSubscription `json:"subscription,omitempty"`
}

type PatchFileSubscriptionResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *PatchFileSubscriptionRespData `json:"data"`
}

func (resp *PatchFileSubscriptionResp) Success() bool {
	return resp.Code == 0
}

type CreateImportTaskReqBuilder struct {
	apiReq     *larkcore.ApiReq
	importTask *ImportTask
}

func NewCreateImportTaskReqBuilder() *CreateImportTaskReqBuilder {
	builder := &CreateImportTaskReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *CreateImportTaskReqBuilder) ImportTask(importTask *ImportTask) *CreateImportTaskReqBuilder {
	builder.importTask = importTask
	return builder
}

func (builder *CreateImportTaskReqBuilder) Build() *CreateImportTaskReq {
	req := &CreateImportTaskReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.Body = builder.importTask
	return req
}

type CreateImportTaskReq struct {
	apiReq     *larkcore.ApiReq
	ImportTask *ImportTask `body:""`
}

type CreateImportTaskRespData struct {
	Ticket *string `json:"ticket,omitempty"`
}

type CreateImportTaskResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateImportTaskRespData `json:"data"`
}

func (resp *CreateImportTaskResp) Success() bool {
	return resp.Code == 0
}

type GetImportTaskReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewGetImportTaskReqBuilder() *GetImportTaskReqBuilder {
	builder := &GetImportTaskReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *GetImportTaskReqBuilder) Ticket(ticket string) *GetImportTaskReqBuilder {
	builder.apiReq.PathParams.Set("ticket", fmt.Sprint(ticket))
	return builder
}

func (builder *GetImportTaskReqBuilder) Build() *GetImportTaskReq {
	req := &GetImportTaskReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type GetImportTaskReq struct {
	apiReq *larkcore.ApiReq
}

type GetImportTaskRespData struct {
	Result *ImportTask `json:"result,omitempty"`
}

type GetImportTaskResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetImportTaskRespData `json:"data"`
}

func (resp *GetImportTaskResp) Success() bool {
	return resp.Code == 0
}

type BatchGetTmpDownloadUrlMediaReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewBatchGetTmpDownloadUrlMediaReqBuilder() *BatchGetTmpDownloadUrlMediaReqBuilder {
	builder := &BatchGetTmpDownloadUrlMediaReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *BatchGetTmpDownloadUrlMediaReqBuilder) FileTokens(fileTokens []string) *BatchGetTmpDownloadUrlMediaReqBuilder {
	builder.apiReq.QueryParams.Set("file_tokens", fmt.Sprint(fileTokens))
	return builder
}
func (builder *BatchGetTmpDownloadUrlMediaReqBuilder) Extra(extra string) *BatchGetTmpDownloadUrlMediaReqBuilder {
	builder.apiReq.QueryParams.Set("extra", fmt.Sprint(extra))
	return builder
}

func (builder *BatchGetTmpDownloadUrlMediaReqBuilder) Build() *BatchGetTmpDownloadUrlMediaReq {
	req := &BatchGetTmpDownloadUrlMediaReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type BatchGetTmpDownloadUrlMediaReq struct {
	apiReq *larkcore.ApiReq
}

type BatchGetTmpDownloadUrlMediaRespData struct {
	TmpDownloadUrls []*TmpDownloadUrl `json:"tmp_download_urls,omitempty"`
}

type BatchGetTmpDownloadUrlMediaResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *BatchGetTmpDownloadUrlMediaRespData `json:"data"`
}

func (resp *BatchGetTmpDownloadUrlMediaResp) Success() bool {
	return resp.Code == 0
}

type DownloadMediaReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewDownloadMediaReqBuilder() *DownloadMediaReqBuilder {
	builder := &DownloadMediaReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *DownloadMediaReqBuilder) FileToken(fileToken string) *DownloadMediaReqBuilder {
	builder.apiReq.PathParams.Set("file_token", fmt.Sprint(fileToken))
	return builder
}
func (builder *DownloadMediaReqBuilder) Extra(extra string) *DownloadMediaReqBuilder {
	builder.apiReq.QueryParams.Set("extra", fmt.Sprint(extra))
	return builder
}

func (builder *DownloadMediaReqBuilder) Build() *DownloadMediaReq {
	req := &DownloadMediaReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type DownloadMediaReq struct {
	apiReq *larkcore.ApiReq
}

type DownloadMediaResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	File     io.Reader `json:"-"`
	FileName string    `json:"-"`
}

func (resp *DownloadMediaResp) Success() bool {
	return resp.Code == 0
}

func (resp *DownloadMediaResp) WriteFile(fileName string) error {
	bs, err := ioutil.ReadAll(resp.File)
	if err != nil {
		return err
	}

	err = ioutil.WriteFile(fileName, bs, 0666)
	if err != nil {
		return err
	}
	return nil
}

type UploadAllMediaReqBodyBuilder struct {
	fileName       string
	fileNameFlag   bool
	parentType     string
	parentTypeFlag bool
	parentNode     string
	parentNodeFlag bool
	size           int
	sizeFlag       bool
	checksum       string
	checksumFlag   bool
	extra          string
	extraFlag      bool
	file           io.Reader
	fileFlag       bool
}

func NewUploadAllMediaReqBodyBuilder() *UploadAllMediaReqBodyBuilder {
	builder := &UploadAllMediaReqBodyBuilder{}
	return builder
}

func (builder *UploadAllMediaReqBodyBuilder) FileName(fileName string) *UploadAllMediaReqBodyBuilder {
	builder.fileName = fileName
	builder.fileNameFlag = true
	return builder
}
func (builder *UploadAllMediaReqBodyBuilder) ParentType(parentType string) *UploadAllMediaReqBodyBuilder {
	builder.parentType = parentType
	builder.parentTypeFlag = true
	return builder
}
func (builder *UploadAllMediaReqBodyBuilder) ParentNode(parentNode string) *UploadAllMediaReqBodyBuilder {
	builder.parentNode = parentNode
	builder.parentNodeFlag = true
	return builder
}
func (builder *UploadAllMediaReqBodyBuilder) Size(size int) *UploadAllMediaReqBodyBuilder {
	builder.size = size
	builder.sizeFlag = true
	return builder
}
func (builder *UploadAllMediaReqBodyBuilder) Checksum(checksum string) *UploadAllMediaReqBodyBuilder {
	builder.checksum = checksum
	builder.checksumFlag = true
	return builder
}
func (builder *UploadAllMediaReqBodyBuilder) Extra(extra string) *UploadAllMediaReqBodyBuilder {
	builder.extra = extra
	builder.extraFlag = true
	return builder
}
func (builder *UploadAllMediaReqBodyBuilder) File(file io.Reader) *UploadAllMediaReqBodyBuilder {
	builder.file = file
	builder.fileFlag = true
	return builder
}

func (builder *UploadAllMediaReqBodyBuilder) Build() *UploadAllMediaReqBody {
	req := &UploadAllMediaReqBody{}
	if builder.fileNameFlag {
		req.FileName = &builder.fileName
	}
	if builder.parentTypeFlag {
		req.ParentType = &builder.parentType
	}
	if builder.parentNodeFlag {
		req.ParentNode = &builder.parentNode
	}
	if builder.sizeFlag {
		req.Size = &builder.size
	}
	if builder.checksumFlag {
		req.Checksum = &builder.checksum
	}
	if builder.extraFlag {
		req.Extra = &builder.extra
	}
	if builder.fileFlag {
		req.File = builder.file
	}
	return req
}

type UploadAllMediaPathReqBodyBuilder struct {
	fileName       string
	fileNameFlag   bool
	parentType     string
	parentTypeFlag bool
	parentNode     string
	parentNodeFlag bool
	size           int
	sizeFlag       bool
	checksum       string
	checksumFlag   bool
	extra          string
	extraFlag      bool
	filePath       string
	filePathFlag   bool
}

func NewUploadAllMediaPathReqBodyBuilder() *UploadAllMediaPathReqBodyBuilder {
	builder := &UploadAllMediaPathReqBodyBuilder{}
	return builder
}
func (builder *UploadAllMediaPathReqBodyBuilder) FileName(fileName string) *UploadAllMediaPathReqBodyBuilder {
	builder.fileName = fileName
	builder.fileNameFlag = true
	return builder
}
func (builder *UploadAllMediaPathReqBodyBuilder) ParentType(parentType string) *UploadAllMediaPathReqBodyBuilder {
	builder.parentType = parentType
	builder.parentTypeFlag = true
	return builder
}
func (builder *UploadAllMediaPathReqBodyBuilder) ParentNode(parentNode string) *UploadAllMediaPathReqBodyBuilder {
	builder.parentNode = parentNode
	builder.parentNodeFlag = true
	return builder
}
func (builder *UploadAllMediaPathReqBodyBuilder) Size(size int) *UploadAllMediaPathReqBodyBuilder {
	builder.size = size
	builder.sizeFlag = true
	return builder
}
func (builder *UploadAllMediaPathReqBodyBuilder) Checksum(checksum string) *UploadAllMediaPathReqBodyBuilder {
	builder.checksum = checksum
	builder.checksumFlag = true
	return builder
}
func (builder *UploadAllMediaPathReqBodyBuilder) Extra(extra string) *UploadAllMediaPathReqBodyBuilder {
	builder.extra = extra
	builder.extraFlag = true
	return builder
}
func (builder *UploadAllMediaPathReqBodyBuilder) FilePath(filePath string) *UploadAllMediaPathReqBodyBuilder {
	builder.filePath = filePath
	builder.filePathFlag = true
	return builder
}

func (builder *UploadAllMediaPathReqBodyBuilder) Build() (*UploadAllMediaReqBody, error) {
	req := &UploadAllMediaReqBody{}
	if builder.fileNameFlag {
		req.FileName = &builder.fileName
	}
	if builder.parentTypeFlag {
		req.ParentType = &builder.parentType
	}
	if builder.parentNodeFlag {
		req.ParentNode = &builder.parentNode
	}
	if builder.sizeFlag {
		req.Size = &builder.size
	}
	if builder.checksumFlag {
		req.Checksum = &builder.checksum
	}
	if builder.extraFlag {
		req.Extra = &builder.extra
	}
	if builder.filePathFlag {
		data, err := larkcore.File2Bytes(builder.filePath)
		if err != nil {
			return nil, err
		}
		req.File = bytes.NewBuffer(data)
	}
	return req, nil
}

type UploadAllMediaReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *UploadAllMediaReqBody
}

func NewUploadAllMediaReqBuilder() *UploadAllMediaReqBuilder {
	builder := &UploadAllMediaReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *UploadAllMediaReqBuilder) Body(body *UploadAllMediaReqBody) *UploadAllMediaReqBuilder {
	builder.body = body
	return builder
}

func (builder *UploadAllMediaReqBuilder) Build() *UploadAllMediaReq {
	req := &UploadAllMediaReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.Body = builder.body
	return req
}

type UploadAllMediaReqBody struct {
	FileName   *string   `json:"file_name,omitempty"`
	ParentType *string   `json:"parent_type,omitempty"`
	ParentNode *string   `json:"parent_node,omitempty"`
	Size       *int      `json:"size,omitempty"`
	Checksum   *string   `json:"checksum,omitempty"`
	Extra      *string   `json:"extra,omitempty"`
	File       io.Reader `json:"file,omitempty"`
}

type UploadAllMediaReq struct {
	apiReq *larkcore.ApiReq
	Body   *UploadAllMediaReqBody `body:""`
}

type UploadAllMediaRespData struct {
	FileToken *string `json:"file_token,omitempty"`
}

type UploadAllMediaResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *UploadAllMediaRespData `json:"data"`
}

func (resp *UploadAllMediaResp) Success() bool {
	return resp.Code == 0
}

type UploadFinishMediaReqBodyBuilder struct {
	uploadId     string
	uploadIdFlag bool
	blockNum     int
	blockNumFlag bool
}

func NewUploadFinishMediaReqBodyBuilder() *UploadFinishMediaReqBodyBuilder {
	builder := &UploadFinishMediaReqBodyBuilder{}
	return builder
}

func (builder *UploadFinishMediaReqBodyBuilder) UploadId(uploadId string) *UploadFinishMediaReqBodyBuilder {
	builder.uploadId = uploadId
	builder.uploadIdFlag = true
	return builder
}
func (builder *UploadFinishMediaReqBodyBuilder) BlockNum(blockNum int) *UploadFinishMediaReqBodyBuilder {
	builder.blockNum = blockNum
	builder.blockNumFlag = true
	return builder
}

func (builder *UploadFinishMediaReqBodyBuilder) Build() *UploadFinishMediaReqBody {
	req := &UploadFinishMediaReqBody{}
	if builder.uploadIdFlag {
		req.UploadId = &builder.uploadId
	}
	if builder.blockNumFlag {
		req.BlockNum = &builder.blockNum
	}
	return req
}

type UploadFinishMediaPathReqBodyBuilder struct {
	uploadId     string
	uploadIdFlag bool
	blockNum     int
	blockNumFlag bool
}

func NewUploadFinishMediaPathReqBodyBuilder() *UploadFinishMediaPathReqBodyBuilder {
	builder := &UploadFinishMediaPathReqBodyBuilder{}
	return builder
}
func (builder *UploadFinishMediaPathReqBodyBuilder) UploadId(uploadId string) *UploadFinishMediaPathReqBodyBuilder {
	builder.uploadId = uploadId
	builder.uploadIdFlag = true
	return builder
}
func (builder *UploadFinishMediaPathReqBodyBuilder) BlockNum(blockNum int) *UploadFinishMediaPathReqBodyBuilder {
	builder.blockNum = blockNum
	builder.blockNumFlag = true
	return builder
}

func (builder *UploadFinishMediaPathReqBodyBuilder) Build() (*UploadFinishMediaReqBody, error) {
	req := &UploadFinishMediaReqBody{}
	if builder.uploadIdFlag {
		req.UploadId = &builder.uploadId
	}
	if builder.blockNumFlag {
		req.BlockNum = &builder.blockNum
	}
	return req, nil
}

type UploadFinishMediaReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *UploadFinishMediaReqBody
}

func NewUploadFinishMediaReqBuilder() *UploadFinishMediaReqBuilder {
	builder := &UploadFinishMediaReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *UploadFinishMediaReqBuilder) Body(body *UploadFinishMediaReqBody) *UploadFinishMediaReqBuilder {
	builder.body = body
	return builder
}

func (builder *UploadFinishMediaReqBuilder) Build() *UploadFinishMediaReq {
	req := &UploadFinishMediaReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.Body = builder.body
	return req
}

type UploadFinishMediaReqBody struct {
	UploadId *string `json:"upload_id,omitempty"`
	BlockNum *int    `json:"block_num,omitempty"`
}

type UploadFinishMediaReq struct {
	apiReq *larkcore.ApiReq
	Body   *UploadFinishMediaReqBody `body:""`
}

type UploadFinishMediaRespData struct {
	FileToken *string `json:"file_token,omitempty"`
}

type UploadFinishMediaResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *UploadFinishMediaRespData `json:"data"`
}

func (resp *UploadFinishMediaResp) Success() bool {
	return resp.Code == 0
}

type UploadPartMediaReqBodyBuilder struct {
	uploadId     string
	uploadIdFlag bool
	seq          int
	seqFlag      bool
	size         int
	sizeFlag     bool
	checksum     string
	checksumFlag bool
	file         io.Reader
	fileFlag     bool
}

func NewUploadPartMediaReqBodyBuilder() *UploadPartMediaReqBodyBuilder {
	builder := &UploadPartMediaReqBodyBuilder{}
	return builder
}

func (builder *UploadPartMediaReqBodyBuilder) UploadId(uploadId string) *UploadPartMediaReqBodyBuilder {
	builder.uploadId = uploadId
	builder.uploadIdFlag = true
	return builder
}
func (builder *UploadPartMediaReqBodyBuilder) Seq(seq int) *UploadPartMediaReqBodyBuilder {
	builder.seq = seq
	builder.seqFlag = true
	return builder
}
func (builder *UploadPartMediaReqBodyBuilder) Size(size int) *UploadPartMediaReqBodyBuilder {
	builder.size = size
	builder.sizeFlag = true
	return builder
}
func (builder *UploadPartMediaReqBodyBuilder) Checksum(checksum string) *UploadPartMediaReqBodyBuilder {
	builder.checksum = checksum
	builder.checksumFlag = true
	return builder
}
func (builder *UploadPartMediaReqBodyBuilder) File(file io.Reader) *UploadPartMediaReqBodyBuilder {
	builder.file = file
	builder.fileFlag = true
	return builder
}

func (builder *UploadPartMediaReqBodyBuilder) Build() *UploadPartMediaReqBody {
	req := &UploadPartMediaReqBody{}
	if builder.uploadIdFlag {
		req.UploadId = &builder.uploadId
	}
	if builder.seqFlag {
		req.Seq = &builder.seq
	}
	if builder.sizeFlag {
		req.Size = &builder.size
	}
	if builder.checksumFlag {
		req.Checksum = &builder.checksum
	}
	if builder.fileFlag {
		req.File = builder.file
	}
	return req
}

type UploadPartMediaPathReqBodyBuilder struct {
	uploadId     string
	uploadIdFlag bool
	seq          int
	seqFlag      bool
	size         int
	sizeFlag     bool
	checksum     string
	checksumFlag bool
	filePath     string
	filePathFlag bool
}

func NewUploadPartMediaPathReqBodyBuilder() *UploadPartMediaPathReqBodyBuilder {
	builder := &UploadPartMediaPathReqBodyBuilder{}
	return builder
}
func (builder *UploadPartMediaPathReqBodyBuilder) UploadId(uploadId string) *UploadPartMediaPathReqBodyBuilder {
	builder.uploadId = uploadId
	builder.uploadIdFlag = true
	return builder
}
func (builder *UploadPartMediaPathReqBodyBuilder) Seq(seq int) *UploadPartMediaPathReqBodyBuilder {
	builder.seq = seq
	builder.seqFlag = true
	return builder
}
func (builder *UploadPartMediaPathReqBodyBuilder) Size(size int) *UploadPartMediaPathReqBodyBuilder {
	builder.size = size
	builder.sizeFlag = true
	return builder
}
func (builder *UploadPartMediaPathReqBodyBuilder) Checksum(checksum string) *UploadPartMediaPathReqBodyBuilder {
	builder.checksum = checksum
	builder.checksumFlag = true
	return builder
}
func (builder *UploadPartMediaPathReqBodyBuilder) FilePath(filePath string) *UploadPartMediaPathReqBodyBuilder {
	builder.filePath = filePath
	builder.filePathFlag = true
	return builder
}

func (builder *UploadPartMediaPathReqBodyBuilder) Build() (*UploadPartMediaReqBody, error) {
	req := &UploadPartMediaReqBody{}
	if builder.uploadIdFlag {
		req.UploadId = &builder.uploadId
	}
	if builder.seqFlag {
		req.Seq = &builder.seq
	}
	if builder.sizeFlag {
		req.Size = &builder.size
	}
	if builder.checksumFlag {
		req.Checksum = &builder.checksum
	}
	if builder.filePathFlag {
		data, err := larkcore.File2Bytes(builder.filePath)
		if err != nil {
			return nil, err
		}
		req.File = bytes.NewBuffer(data)
	}
	return req, nil
}

type UploadPartMediaReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *UploadPartMediaReqBody
}

func NewUploadPartMediaReqBuilder() *UploadPartMediaReqBuilder {
	builder := &UploadPartMediaReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *UploadPartMediaReqBuilder) Body(body *UploadPartMediaReqBody) *UploadPartMediaReqBuilder {
	builder.body = body
	return builder
}

func (builder *UploadPartMediaReqBuilder) Build() *UploadPartMediaReq {
	req := &UploadPartMediaReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.Body = builder.body
	return req
}

type UploadPartMediaReqBody struct {
	UploadId *string   `json:"upload_id,omitempty"`
	Seq      *int      `json:"seq,omitempty"`
	Size     *int      `json:"size,omitempty"`
	Checksum *string   `json:"checksum,omitempty"`
	File     io.Reader `json:"file,omitempty"`
}

type UploadPartMediaReq struct {
	apiReq *larkcore.ApiReq
	Body   *UploadPartMediaReqBody `body:""`
}

type UploadPartMediaResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *UploadPartMediaResp) Success() bool {
	return resp.Code == 0
}

type UploadPrepareMediaReqBuilder struct {
	apiReq          *larkcore.ApiReq
	mediaUploadInfo *MediaUploadInfo
}

func NewUploadPrepareMediaReqBuilder() *UploadPrepareMediaReqBuilder {
	builder := &UploadPrepareMediaReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *UploadPrepareMediaReqBuilder) MediaUploadInfo(mediaUploadInfo *MediaUploadInfo) *UploadPrepareMediaReqBuilder {
	builder.mediaUploadInfo = mediaUploadInfo
	return builder
}

func (builder *UploadPrepareMediaReqBuilder) Build() *UploadPrepareMediaReq {
	req := &UploadPrepareMediaReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.Body = builder.mediaUploadInfo
	return req
}

type UploadPrepareMediaReq struct {
	apiReq          *larkcore.ApiReq
	MediaUploadInfo *MediaUploadInfo `body:""`
}

type UploadPrepareMediaRespData struct {
	UploadId  *string `json:"upload_id,omitempty"`
	BlockSize *int    `json:"block_size,omitempty"`
	BlockNum  *int    `json:"block_num,omitempty"`
}

type UploadPrepareMediaResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *UploadPrepareMediaRespData `json:"data"`
}

func (resp *UploadPrepareMediaResp) Success() bool {
	return resp.Code == 0
}

type BatchQueryMetaReqBuilder struct {
	apiReq      *larkcore.ApiReq
	metaRequest *MetaRequest
}

func NewBatchQueryMetaReqBuilder() *BatchQueryMetaReqBuilder {
	builder := &BatchQueryMetaReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *BatchQueryMetaReqBuilder) UserIdType(userIdType string) *BatchQueryMetaReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}
func (builder *BatchQueryMetaReqBuilder) MetaRequest(metaRequest *MetaRequest) *BatchQueryMetaReqBuilder {
	builder.metaRequest = metaRequest
	return builder
}

func (builder *BatchQueryMetaReqBuilder) Build() *BatchQueryMetaReq {
	req := &BatchQueryMetaReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.metaRequest
	return req
}

type BatchQueryMetaReq struct {
	apiReq      *larkcore.ApiReq
	MetaRequest *MetaRequest `body:""`
}

type BatchQueryMetaRespData struct {
	Metas      []*Meta       `json:"metas,omitempty"`
	FailedList []*MetaFailed `json:"failed_list,omitempty"`
}

type BatchQueryMetaResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *BatchQueryMetaRespData `json:"data"`
}

func (resp *BatchQueryMetaResp) Success() bool {
	return resp.Code == 0
}

type CreatePermissionMemberReqBuilder struct {
	apiReq *larkcore.ApiReq
	member *Member
}

func NewCreatePermissionMemberReqBuilder() *CreatePermissionMemberReqBuilder {
	builder := &CreatePermissionMemberReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *CreatePermissionMemberReqBuilder) Token(token string) *CreatePermissionMemberReqBuilder {
	builder.apiReq.PathParams.Set("token", fmt.Sprint(token))
	return builder
}
func (builder *CreatePermissionMemberReqBuilder) Type(type_ string) *CreatePermissionMemberReqBuilder {
	builder.apiReq.QueryParams.Set("type", fmt.Sprint(type_))
	return builder
}
func (builder *CreatePermissionMemberReqBuilder) NeedNotification(needNotification bool) *CreatePermissionMemberReqBuilder {
	builder.apiReq.QueryParams.Set("need_notification", fmt.Sprint(needNotification))
	return builder
}
func (builder *CreatePermissionMemberReqBuilder) Member(member *Member) *CreatePermissionMemberReqBuilder {
	builder.member = member
	return builder
}

func (builder *CreatePermissionMemberReqBuilder) Build() *CreatePermissionMemberReq {
	req := &CreatePermissionMemberReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.member
	return req
}

type CreatePermissionMemberReq struct {
	apiReq *larkcore.ApiReq
	Member *Member `body:""`
}

type CreatePermissionMemberRespData struct {
	Member *Member `json:"member,omitempty"`
}

type CreatePermissionMemberResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreatePermissionMemberRespData `json:"data"`
}

func (resp *CreatePermissionMemberResp) Success() bool {
	return resp.Code == 0
}

type DeletePermissionMemberReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewDeletePermissionMemberReqBuilder() *DeletePermissionMemberReqBuilder {
	builder := &DeletePermissionMemberReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *DeletePermissionMemberReqBuilder) Token(token string) *DeletePermissionMemberReqBuilder {
	builder.apiReq.PathParams.Set("token", fmt.Sprint(token))
	return builder
}
func (builder *DeletePermissionMemberReqBuilder) MemberId(memberId string) *DeletePermissionMemberReqBuilder {
	builder.apiReq.PathParams.Set("member_id", fmt.Sprint(memberId))
	return builder
}
func (builder *DeletePermissionMemberReqBuilder) Type(type_ string) *DeletePermissionMemberReqBuilder {
	builder.apiReq.QueryParams.Set("type", fmt.Sprint(type_))
	return builder
}
func (builder *DeletePermissionMemberReqBuilder) MemberType(memberType string) *DeletePermissionMemberReqBuilder {
	builder.apiReq.QueryParams.Set("member_type", fmt.Sprint(memberType))
	return builder
}

func (builder *DeletePermissionMemberReqBuilder) Build() *DeletePermissionMemberReq {
	req := &DeletePermissionMemberReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type DeletePermissionMemberReq struct {
	apiReq *larkcore.ApiReq
}

type DeletePermissionMemberResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *DeletePermissionMemberResp) Success() bool {
	return resp.Code == 0
}

type UpdatePermissionMemberReqBuilder struct {
	apiReq *larkcore.ApiReq
	member *Member
}

func NewUpdatePermissionMemberReqBuilder() *UpdatePermissionMemberReqBuilder {
	builder := &UpdatePermissionMemberReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *UpdatePermissionMemberReqBuilder) Token(token string) *UpdatePermissionMemberReqBuilder {
	builder.apiReq.PathParams.Set("token", fmt.Sprint(token))
	return builder
}
func (builder *UpdatePermissionMemberReqBuilder) MemberId(memberId string) *UpdatePermissionMemberReqBuilder {
	builder.apiReq.PathParams.Set("member_id", fmt.Sprint(memberId))
	return builder
}
func (builder *UpdatePermissionMemberReqBuilder) NeedNotification(needNotification bool) *UpdatePermissionMemberReqBuilder {
	builder.apiReq.QueryParams.Set("need_notification", fmt.Sprint(needNotification))
	return builder
}
func (builder *UpdatePermissionMemberReqBuilder) Type(type_ string) *UpdatePermissionMemberReqBuilder {
	builder.apiReq.QueryParams.Set("type", fmt.Sprint(type_))
	return builder
}
func (builder *UpdatePermissionMemberReqBuilder) Member(member *Member) *UpdatePermissionMemberReqBuilder {
	builder.member = member
	return builder
}

func (builder *UpdatePermissionMemberReqBuilder) Build() *UpdatePermissionMemberReq {
	req := &UpdatePermissionMemberReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.member
	return req
}

type UpdatePermissionMemberReq struct {
	apiReq *larkcore.ApiReq
	Member *Member `body:""`
}

type UpdatePermissionMemberRespData struct {
	Member *Member `json:"member,omitempty"`
}

type UpdatePermissionMemberResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *UpdatePermissionMemberRespData `json:"data"`
}

func (resp *UpdatePermissionMemberResp) Success() bool {
	return resp.Code == 0
}

type GetPermissionPublicReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewGetPermissionPublicReqBuilder() *GetPermissionPublicReqBuilder {
	builder := &GetPermissionPublicReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *GetPermissionPublicReqBuilder) Token(token string) *GetPermissionPublicReqBuilder {
	builder.apiReq.PathParams.Set("token", fmt.Sprint(token))
	return builder
}
func (builder *GetPermissionPublicReqBuilder) Type(type_ string) *GetPermissionPublicReqBuilder {
	builder.apiReq.QueryParams.Set("type", fmt.Sprint(type_))
	return builder
}

func (builder *GetPermissionPublicReqBuilder) Build() *GetPermissionPublicReq {
	req := &GetPermissionPublicReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type GetPermissionPublicReq struct {
	apiReq *larkcore.ApiReq
}

type GetPermissionPublicRespData struct {
	PermissionPublic *PermissionPublic `json:"permission_public,omitempty"`
}

type GetPermissionPublicResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetPermissionPublicRespData `json:"data"`
}

func (resp *GetPermissionPublicResp) Success() bool {
	return resp.Code == 0
}

type PatchPermissionPublicReqBuilder struct {
	apiReq                  *larkcore.ApiReq
	permissionPublicRequest *PermissionPublicRequest
}

func NewPatchPermissionPublicReqBuilder() *PatchPermissionPublicReqBuilder {
	builder := &PatchPermissionPublicReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

func (builder *PatchPermissionPublicReqBuilder) Token(token string) *PatchPermissionPublicReqBuilder {
	builder.apiReq.PathParams.Set("token", fmt.Sprint(token))
	return builder
}
func (builder *PatchPermissionPublicReqBuilder) Type(type_ string) *PatchPermissionPublicReqBuilder {
	builder.apiReq.QueryParams.Set("type", fmt.Sprint(type_))
	return builder
}
func (builder *PatchPermissionPublicReqBuilder) PermissionPublicRequest(permissionPublicRequest *PermissionPublicRequest) *PatchPermissionPublicReqBuilder {
	builder.permissionPublicRequest = permissionPublicRequest
	return builder
}

func (builder *PatchPermissionPublicReqBuilder) Build() *PatchPermissionPublicReq {
	req := &PatchPermissionPublicReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.permissionPublicRequest
	return req
}

type PatchPermissionPublicReq struct {
	apiReq                  *larkcore.ApiReq
	PermissionPublicRequest *PermissionPublicRequest `body:""`
}

type PatchPermissionPublicRespData struct {
	PermissionPublic *PermissionPublic `json:"permission_public,omitempty"`
}

type PatchPermissionPublicResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *PatchPermissionPublicRespData `json:"data"`
}

func (resp *PatchPermissionPublicResp) Success() bool {
	return resp.Code == 0
}

type P2FileDeletedV1Data struct {
	FileType         *string   `json:"file_type,omitempty"`
	FileToken        *string   `json:"file_token,omitempty"`
	OperatorId       *UserId   `json:"operator_id,omitempty"`
	SubscriberIdList []*UserId `json:"subscriber_id_list,omitempty"`
}

type P2FileDeletedV1 struct {
	*larkevent.EventV2Base
	*larkevent.EventReq
	Event *P2FileDeletedV1Data `json:"event"`
}

func (m *P2FileDeletedV1) RawReq(req *larkevent.EventReq) {
	m.EventReq = req
}

type P2FileEditV1Data struct {
	FileType         *string   `json:"file_type,omitempty"`
	FileToken        *string   `json:"file_token,omitempty"`
	OperatorIdList   []*UserId `json:"operator_id_list,omitempty"`
	SubscriberIdList []*UserId `json:"subscriber_id_list,omitempty"`
}

type P2FileEditV1 struct {
	*larkevent.EventV2Base
	*larkevent.EventReq
	Event *P2FileEditV1Data `json:"event"`
}

func (m *P2FileEditV1) RawReq(req *larkevent.EventReq) {
	m.EventReq = req
}

type P2FilePermissionMemberAddedV1Data struct {
	FileType             *string   `json:"file_type,omitempty"`
	FileToken            *string   `json:"file_token,omitempty"`
	OperatorId           *UserId   `json:"operator_id,omitempty"`
	UserList             []*UserId `json:"user_list,omitempty"`
	ChatList             []string  `json:"chat_list,omitempty"`
	OpenDepartmentIdList []string  `json:"open_department_id_list,omitempty"`
	SubscriberIdList     []*UserId `json:"subscriber_id_list,omitempty"`
}

type P2FilePermissionMemberAddedV1 struct {
	*larkevent.EventV2Base
	*larkevent.EventReq
	Event *P2FilePermissionMemberAddedV1Data `json:"event"`
}

func (m *P2FilePermissionMemberAddedV1) RawReq(req *larkevent.EventReq) {
	m.EventReq = req
}

type P2FilePermissionMemberRemovedV1Data struct {
	FileType             *string   `json:"file_type,omitempty"`
	FileToken            *string   `json:"file_token,omitempty"`
	OperatorId           *UserId   `json:"operator_id,omitempty"`
	UserList             []*UserId `json:"user_list,omitempty"`
	ChatList             []string  `json:"chat_list,omitempty"`
	OpenDepartmentIdList []string  `json:"open_department_id_list,omitempty"`
	SubscriberIdList     []*UserId `json:"subscriber_id_list,omitempty"`
}

type P2FilePermissionMemberRemovedV1 struct {
	*larkevent.EventV2Base
	*larkevent.EventReq
	Event *P2FilePermissionMemberRemovedV1Data `json:"event"`
}

func (m *P2FilePermissionMemberRemovedV1) RawReq(req *larkevent.EventReq) {
	m.EventReq = req
}

type P2FileReadV1Data struct {
	FileType         *string   `json:"file_type,omitempty"`
	FileToken        *string   `json:"file_token,omitempty"`
	OperatorIdList   []*UserId `json:"operator_id_list,omitempty"`
	SubscriberIdList []*UserId `json:"subscriber_id_list,omitempty"`
}

type P2FileReadV1 struct {
	*larkevent.EventV2Base
	*larkevent.EventReq
	Event *P2FileReadV1Data `json:"event"`
}

func (m *P2FileReadV1) RawReq(req *larkevent.EventReq) {
	m.EventReq = req
}

type P2FileTitleUpdatedV1Data struct {
	FileType         *string   `json:"file_type,omitempty"`
	FileToken        *string   `json:"file_token,omitempty"`
	OperatorId       *UserId   `json:"operator_id,omitempty"`
	SubscriberIdList []*UserId `json:"subscriber_id_list,omitempty"`
}

type P2FileTitleUpdatedV1 struct {
	*larkevent.EventV2Base
	*larkevent.EventReq
	Event *P2FileTitleUpdatedV1Data `json:"event"`
}

func (m *P2FileTitleUpdatedV1) RawReq(req *larkevent.EventReq) {
	m.EventReq = req
}

type P2FileTrashedV1Data struct {
	FileType         *string   `json:"file_type,omitempty"`
	FileToken        *string   `json:"file_token,omitempty"`
	OperatorId       *UserId   `json:"operator_id,omitempty"`
	SubscriberIdList []*UserId `json:"subscriber_id_list,omitempty"`
}

type P2FileTrashedV1 struct {
	*larkevent.EventV2Base
	*larkevent.EventReq
	Event *P2FileTrashedV1Data `json:"event"`
}

func (m *P2FileTrashedV1) RawReq(req *larkevent.EventReq) {
	m.EventReq = req
}

type ListFileCommentIterator struct {
	nextPageToken *string
	items         []*FileComment
	index         int
	limit         int
	ctx           context.Context
	req           *ListFileCommentReq
	listFunc      func(ctx context.Context, req *ListFileCommentReq, options ...larkcore.RequestOptionFunc) (*ListFileCommentResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *ListFileCommentIterator) Next() (bool, *FileComment, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListFileCommentIterator) NextPageToken() *string {
	return iterator.nextPageToken
}
