// Package acs code generated by oapi sdk gen
package larkacs

import (
	"io"

	"io/ioutil"

	"fmt"

	"context"
	"errors"

	"github.com/larksuite/oapi-sdk-go/v3/event"

	"github.com/larksuite/oapi-sdk-go/v3/core"
)

// 生成枚举值

const (
	UserIdTypeUserId  = "user_id"
	UserIdTypeUnionId = "union_id"
	UserIdTypeOpenId  = "open_id"
)

// 生成数据类型

type AccessRecord struct {
	AccessRecordId *int64  `json:"access_record_id,omitempty,string"`
	UserId         *string `json:"user_id,omitempty"`
	DeviceId       *int64  `json:"device_id,omitempty,string"`
	IsClockIn      *bool   `json:"is_clock_in,omitempty"`
	AccessTime     *int64  `json:"access_time,omitempty,string"`
	AccessType     *string `json:"access_type,omitempty"`
	AccessData     *string `json:"access_data,omitempty"`
	IsDoorOpen     *bool   `json:"is_door_open,omitempty"`
}

// builder开始
type AccessRecordBuilder struct {
	accessRecordId     int64
	accessRecordIdFlag bool
	userId             string
	userIdFlag         bool
	deviceId           int64
	deviceIdFlag       bool
	isClockIn          bool
	isClockInFlag      bool
	accessTime         int64
	accessTimeFlag     bool
	accessType         string
	accessTypeFlag     bool
	accessData         string
	accessDataFlag     bool
	isDoorOpen         bool
	isDoorOpenFlag     bool
}

func NewAccessRecordBuilder() *AccessRecordBuilder {
	builder := &AccessRecordBuilder{}
	return builder
}

func (builder *AccessRecordBuilder) AccessRecordId(accessRecordId int64) *AccessRecordBuilder {
	builder.accessRecordId = accessRecordId
	builder.accessRecordIdFlag = true
	return builder
}
func (builder *AccessRecordBuilder) UserId(userId string) *AccessRecordBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}
func (builder *AccessRecordBuilder) DeviceId(deviceId int64) *AccessRecordBuilder {
	builder.deviceId = deviceId
	builder.deviceIdFlag = true
	return builder
}
func (builder *AccessRecordBuilder) IsClockIn(isClockIn bool) *AccessRecordBuilder {
	builder.isClockIn = isClockIn
	builder.isClockInFlag = true
	return builder
}
func (builder *AccessRecordBuilder) AccessTime(accessTime int64) *AccessRecordBuilder {
	builder.accessTime = accessTime
	builder.accessTimeFlag = true
	return builder
}
func (builder *AccessRecordBuilder) AccessType(accessType string) *AccessRecordBuilder {
	builder.accessType = accessType
	builder.accessTypeFlag = true
	return builder
}
func (builder *AccessRecordBuilder) AccessData(accessData string) *AccessRecordBuilder {
	builder.accessData = accessData
	builder.accessDataFlag = true
	return builder
}
func (builder *AccessRecordBuilder) IsDoorOpen(isDoorOpen bool) *AccessRecordBuilder {
	builder.isDoorOpen = isDoorOpen
	builder.isDoorOpenFlag = true
	return builder
}

func (builder *AccessRecordBuilder) Build() *AccessRecord {
	req := &AccessRecord{}
	if builder.accessRecordIdFlag {
		req.AccessRecordId = &builder.accessRecordId

	}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.deviceIdFlag {
		req.DeviceId = &builder.deviceId

	}
	if builder.isClockInFlag {
		req.IsClockIn = &builder.isClockIn

	}
	if builder.accessTimeFlag {
		req.AccessTime = &builder.accessTime

	}
	if builder.accessTypeFlag {
		req.AccessType = &builder.accessType

	}
	if builder.accessDataFlag {
		req.AccessData = &builder.accessData

	}
	if builder.isDoorOpenFlag {
		req.IsDoorOpen = &builder.isDoorOpen

	}
	return req
}

// builder结束

type Device struct {
	DeviceId   *int64  `json:"device_id,omitempty,string"`
	DeviceName *string `json:"device_name,omitempty"`
	DeviceSn   *string `json:"device_sn,omitempty"`
}

// builder开始
type DeviceBuilder struct {
	deviceId       int64
	deviceIdFlag   bool
	deviceName     string
	deviceNameFlag bool
	deviceSn       string
	deviceSnFlag   bool
}

func NewDeviceBuilder() *DeviceBuilder {
	builder := &DeviceBuilder{}
	return builder
}

func (builder *DeviceBuilder) DeviceId(deviceId int64) *DeviceBuilder {
	builder.deviceId = deviceId
	builder.deviceIdFlag = true
	return builder
}
func (builder *DeviceBuilder) DeviceName(deviceName string) *DeviceBuilder {
	builder.deviceName = deviceName
	builder.deviceNameFlag = true
	return builder
}
func (builder *DeviceBuilder) DeviceSn(deviceSn string) *DeviceBuilder {
	builder.deviceSn = deviceSn
	builder.deviceSnFlag = true
	return builder
}

func (builder *DeviceBuilder) Build() *Device {
	req := &Device{}
	if builder.deviceIdFlag {
		req.DeviceId = &builder.deviceId

	}
	if builder.deviceNameFlag {
		req.DeviceName = &builder.deviceName

	}
	if builder.deviceSnFlag {
		req.DeviceSn = &builder.deviceSn

	}
	return req
}

// builder结束

type Feature struct {
	Card         *int  `json:"card,omitempty"`
	FaceUploaded *bool `json:"face_uploaded,omitempty"`
}

// builder开始
type FeatureBuilder struct {
	card             int
	cardFlag         bool
	faceUploaded     bool
	faceUploadedFlag bool
}

func NewFeatureBuilder() *FeatureBuilder {
	builder := &FeatureBuilder{}
	return builder
}

func (builder *FeatureBuilder) Card(card int) *FeatureBuilder {
	builder.card = card
	builder.cardFlag = true
	return builder
}
func (builder *FeatureBuilder) FaceUploaded(faceUploaded bool) *FeatureBuilder {
	builder.faceUploaded = faceUploaded
	builder.faceUploadedFlag = true
	return builder
}

func (builder *FeatureBuilder) Build() *Feature {
	req := &Feature{}
	if builder.cardFlag {
		req.Card = &builder.card

	}
	if builder.faceUploadedFlag {
		req.FaceUploaded = &builder.faceUploaded

	}
	return req
}

// builder结束

type File struct {
	Files    io.Reader `json:"files,omitempty"`
	FileType *string   `json:"file_type,omitempty"`
	FileName *string   `json:"file_name,omitempty"`
}

// builder开始
type FileBuilder struct {
	files        io.Reader
	filesFlag    bool
	fileType     string
	fileTypeFlag bool
	fileName     string
	fileNameFlag bool
}

func NewFileBuilder() *FileBuilder {
	builder := &FileBuilder{}
	return builder
}

func (builder *FileBuilder) Files(files io.Reader) *FileBuilder {
	builder.files = files
	builder.filesFlag = true
	return builder
}
func (builder *FileBuilder) FileType(fileType string) *FileBuilder {
	builder.fileType = fileType
	builder.fileTypeFlag = true
	return builder
}
func (builder *FileBuilder) FileName(fileName string) *FileBuilder {
	builder.fileName = fileName
	builder.fileNameFlag = true
	return builder
}

func (builder *FileBuilder) Build() *File {
	req := &File{}
	if builder.filesFlag {
		req.Files = builder.files
	}
	if builder.fileTypeFlag {
		req.FileType = &builder.fileType

	}
	if builder.fileNameFlag {
		req.FileName = &builder.fileName

	}
	return req
}

// builder结束

type User struct {
	Feature *Feature `json:"feature,omitempty"`
	UserId  *string  `json:"user_id,omitempty"`
}

// builder开始
type UserBuilder struct {
	feature     *Feature
	featureFlag bool
	userId      string
	userIdFlag  bool
}

func NewUserBuilder() *UserBuilder {
	builder := &UserBuilder{}
	return builder
}

func (builder *UserBuilder) Feature(feature *Feature) *UserBuilder {
	builder.feature = feature
	builder.featureFlag = true
	return builder
}
func (builder *UserBuilder) UserId(userId string) *UserBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}

func (builder *UserBuilder) Build() *User {
	req := &User{}
	if builder.featureFlag {
		req.Feature = builder.feature
	}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	return req
}

// builder结束

type UserId struct {
	UserId  *string `json:"user_id,omitempty"`
	OpenId  *string `json:"open_id,omitempty"`
	UnionId *string `json:"union_id,omitempty"`
}

// builder开始
type UserIdBuilder struct {
	userId      string
	userIdFlag  bool
	openId      string
	openIdFlag  bool
	unionId     string
	unionIdFlag bool
}

func NewUserIdBuilder() *UserIdBuilder {
	builder := &UserIdBuilder{}
	return builder
}

func (builder *UserIdBuilder) UserId(userId string) *UserIdBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}
func (builder *UserIdBuilder) OpenId(openId string) *UserIdBuilder {
	builder.openId = openId
	builder.openIdFlag = true
	return builder
}
func (builder *UserIdBuilder) UnionId(unionId string) *UserIdBuilder {
	builder.unionId = unionId
	builder.unionIdFlag = true
	return builder
}

func (builder *UserIdBuilder) Build() *UserId {
	req := &UserId{}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.openIdFlag {
		req.OpenId = &builder.openId

	}
	if builder.unionIdFlag {
		req.UnionId = &builder.unionId

	}
	return req
}

// builder结束

// 生成请求和响应结果类型，以及请求对象的Builder构造器

// 1.4 生成请求的builder结构体
type ListAccessRecordReqBuilder struct {
	apiReq *larkcore.ApiReq
	limit  int
}

// 生成请求的New构造器
func NewListAccessRecordReqBuilder() *ListAccessRecordReqBuilder {
	builder := &ListAccessRecordReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *ListAccessRecordReqBuilder) Limit(limit int) *ListAccessRecordReqBuilder {
	builder.limit = limit
	return builder
}
func (builder *ListAccessRecordReqBuilder) PageSize(pageSize int) *ListAccessRecordReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}
func (builder *ListAccessRecordReqBuilder) PageToken(pageToken string) *ListAccessRecordReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}
func (builder *ListAccessRecordReqBuilder) From(from int) *ListAccessRecordReqBuilder {
	builder.apiReq.QueryParams.Set("from", fmt.Sprint(from))
	return builder
}
func (builder *ListAccessRecordReqBuilder) To(to int) *ListAccessRecordReqBuilder {
	builder.apiReq.QueryParams.Set("to", fmt.Sprint(to))
	return builder
}
func (builder *ListAccessRecordReqBuilder) DeviceId(deviceId int64) *ListAccessRecordReqBuilder {
	builder.apiReq.QueryParams.Set("device_id", fmt.Sprint(deviceId))
	return builder
}
func (builder *ListAccessRecordReqBuilder) UserIdType(userIdType string) *ListAccessRecordReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *ListAccessRecordReqBuilder) Build() *ListAccessRecordReq {
	req := &ListAccessRecordReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListAccessRecordReq struct {
	apiReq *larkcore.ApiReq
	Limit  int
}

type ListAccessRecordRespData struct {
	Items     []*AccessRecord `json:"items,omitempty"`
	PageToken *string         `json:"page_token,omitempty"`
	HasMore   *bool           `json:"has_more,omitempty"`
}

type ListAccessRecordResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListAccessRecordRespData `json:"data"`
}

func (resp *ListAccessRecordResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type GetAccessRecordAccessPhotoReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewGetAccessRecordAccessPhotoReqBuilder() *GetAccessRecordAccessPhotoReqBuilder {
	builder := &GetAccessRecordAccessPhotoReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *GetAccessRecordAccessPhotoReqBuilder) AccessRecordId(accessRecordId int64) *GetAccessRecordAccessPhotoReqBuilder {
	builder.apiReq.PathParams.Set("access_record_id", fmt.Sprint(accessRecordId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *GetAccessRecordAccessPhotoReqBuilder) Build() *GetAccessRecordAccessPhotoReq {
	req := &GetAccessRecordAccessPhotoReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type GetAccessRecordAccessPhotoReq struct {
	apiReq *larkcore.ApiReq
}

type GetAccessRecordAccessPhotoResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	File     io.Reader `json:"-"`
	FileName string    `json:"-"`
}

func (resp *GetAccessRecordAccessPhotoResp) Success() bool {
	return resp.Code == 0
}

// 下载api,生成WriteFile方法
func (resp *GetAccessRecordAccessPhotoResp) WriteFile(fileName string) error {
	bs, err := ioutil.ReadAll(resp.File)
	if err != nil {
		return err
	}

	err = ioutil.WriteFile(fileName, bs, 0666)
	if err != nil {
		return err
	}
	return nil
}

type ListDeviceRespData struct {
	Items []*Device `json:"items,omitempty"`
}

type ListDeviceResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListDeviceRespData `json:"data"`
}

func (resp *ListDeviceResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type GetUserReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewGetUserReqBuilder() *GetUserReqBuilder {
	builder := &GetUserReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *GetUserReqBuilder) UserId(userId string) *GetUserReqBuilder {
	builder.apiReq.PathParams.Set("user_id", fmt.Sprint(userId))
	return builder
}
func (builder *GetUserReqBuilder) UserIdType(userIdType string) *GetUserReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *GetUserReqBuilder) Build() *GetUserReq {
	req := &GetUserReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type GetUserReq struct {
	apiReq *larkcore.ApiReq
}

type GetUserRespData struct {
	User *User `json:"user,omitempty"`
}

type GetUserResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetUserRespData `json:"data"`
}

func (resp *GetUserResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type ListUserReqBuilder struct {
	apiReq *larkcore.ApiReq
	limit  int
}

// 生成请求的New构造器
func NewListUserReqBuilder() *ListUserReqBuilder {
	builder := &ListUserReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *ListUserReqBuilder) Limit(limit int) *ListUserReqBuilder {
	builder.limit = limit
	return builder
}
func (builder *ListUserReqBuilder) PageSize(pageSize int) *ListUserReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}
func (builder *ListUserReqBuilder) PageToken(pageToken string) *ListUserReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}
func (builder *ListUserReqBuilder) UserIdType(userIdType string) *ListUserReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *ListUserReqBuilder) Build() *ListUserReq {
	req := &ListUserReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListUserReq struct {
	apiReq *larkcore.ApiReq
	Limit  int
}

type ListUserRespData struct {
	Items     []*User `json:"items,omitempty"`
	PageToken *string `json:"page_token,omitempty"`
	HasMore   *bool   `json:"has_more,omitempty"`
}

type ListUserResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListUserRespData `json:"data"`
}

func (resp *ListUserResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type PatchUserReqBuilder struct {
	apiReq *larkcore.ApiReq
	user   *User
}

// 生成请求的New构造器
func NewPatchUserReqBuilder() *PatchUserReqBuilder {
	builder := &PatchUserReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *PatchUserReqBuilder) UserId(userId string) *PatchUserReqBuilder {
	builder.apiReq.PathParams.Set("user_id", fmt.Sprint(userId))
	return builder
}
func (builder *PatchUserReqBuilder) UserIdType(userIdType string) *PatchUserReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}
func (builder *PatchUserReqBuilder) User(user *User) *PatchUserReqBuilder {
	builder.user = user
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *PatchUserReqBuilder) Build() *PatchUserReq {
	req := &PatchUserReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.user
	return req
}

type PatchUserReq struct {
	apiReq *larkcore.ApiReq
	User   *User `body:""`
}

type PatchUserResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *PatchUserResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type GetUserFaceReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewGetUserFaceReqBuilder() *GetUserFaceReqBuilder {
	builder := &GetUserFaceReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *GetUserFaceReqBuilder) UserId(userId string) *GetUserFaceReqBuilder {
	builder.apiReq.PathParams.Set("user_id", fmt.Sprint(userId))
	return builder
}
func (builder *GetUserFaceReqBuilder) IsCropped(isCropped bool) *GetUserFaceReqBuilder {
	builder.apiReq.QueryParams.Set("is_cropped", fmt.Sprint(isCropped))
	return builder
}
func (builder *GetUserFaceReqBuilder) UserIdType(userIdType string) *GetUserFaceReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *GetUserFaceReqBuilder) Build() *GetUserFaceReq {
	req := &GetUserFaceReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type GetUserFaceReq struct {
	apiReq *larkcore.ApiReq
}

type GetUserFaceResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	File     io.Reader `json:"-"`
	FileName string    `json:"-"`
}

func (resp *GetUserFaceResp) Success() bool {
	return resp.Code == 0
}

// 下载api,生成WriteFile方法
func (resp *GetUserFaceResp) WriteFile(fileName string) error {
	bs, err := ioutil.ReadAll(resp.File)
	if err != nil {
		return err
	}

	err = ioutil.WriteFile(fileName, bs, 0666)
	if err != nil {
		return err
	}
	return nil
}

// 1.4 生成请求的builder结构体
type UpdateUserFaceReqBuilder struct {
	apiReq *larkcore.ApiReq
	file   *File
}

// 生成请求的New构造器
func NewUpdateUserFaceReqBuilder() *UpdateUserFaceReqBuilder {
	builder := &UpdateUserFaceReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *UpdateUserFaceReqBuilder) UserId(userId string) *UpdateUserFaceReqBuilder {
	builder.apiReq.PathParams.Set("user_id", fmt.Sprint(userId))
	return builder
}
func (builder *UpdateUserFaceReqBuilder) UserIdType(userIdType string) *UpdateUserFaceReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}
func (builder *UpdateUserFaceReqBuilder) File(file *File) *UpdateUserFaceReqBuilder {
	builder.file = file
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *UpdateUserFaceReqBuilder) Build() *UpdateUserFaceReq {
	req := &UpdateUserFaceReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.file
	return req
}

type UpdateUserFaceReq struct {
	apiReq *larkcore.ApiReq
	File   *File `body:""`
}

type UpdateUserFaceResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *UpdateUserFaceResp) Success() bool {
	return resp.Code == 0
}

// 生成消息事件结构体

type P2AccessRecordCreatedV1Data struct {
	AccessRecordId *string `json:"access_record_id,omitempty"`
	UserId         *UserId `json:"user_id,omitempty"`
	DeviceId       *string `json:"device_id,omitempty"`
	IsClockIn      *bool   `json:"is_clock_in,omitempty"`
	IsDoorOpen     *bool   `json:"is_door_open,omitempty"`
	AccessTime     *string `json:"access_time,omitempty"`
}

type P2AccessRecordCreatedV1 struct {
	*larkevent.EventV2Base
	*larkevent.EventReq
	Event *P2AccessRecordCreatedV1Data `json:"event"`
}

func (m *P2AccessRecordCreatedV1) RawReq(req *larkevent.EventReq) {
	m.EventReq = req
}

type P2UserUpdatedV1Data struct {
	UserId       *UserId `json:"user_id,omitempty"`
	Card         *int    `json:"card,omitempty"`
	FaceUploaded *bool   `json:"face_uploaded,omitempty"`
}

type P2UserUpdatedV1 struct {
	*larkevent.EventV2Base
	*larkevent.EventReq
	Event *P2UserUpdatedV1Data `json:"event"`
}

func (m *P2UserUpdatedV1) RawReq(req *larkevent.EventReq) {
	m.EventReq = req
}

// 生成请求的builder构造器
// 1.1 生成body的builder结构体
type ListAccessRecordIterator struct {
	nextPageToken *string
	items         []*AccessRecord
	index         int
	limit         int
	ctx           context.Context
	req           *ListAccessRecordReq
	listFunc      func(ctx context.Context, req *ListAccessRecordReq, options ...larkcore.RequestOptionFunc) (*ListAccessRecordResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *ListAccessRecordIterator) Next() (bool, *AccessRecord, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListAccessRecordIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

type ListUserIterator struct {
	nextPageToken *string
	items         []*User
	index         int
	limit         int
	ctx           context.Context
	req           *ListUserReq
	listFunc      func(ctx context.Context, req *ListUserReq, options ...larkcore.RequestOptionFunc) (*ListUserResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *ListUserIterator) Next() (bool, *User, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListUserIterator) NextPageToken() *string {
	return iterator.nextPageToken
}
