// Package acs code generated by oapi sdk gen
package acs

import (
	"io"

	"io/ioutil"

	"context"
	"errors"
	"fmt"

	"github.com/feishu/oapi-sdk-go/event"

	"github.com/feishu/oapi-sdk-go/core"
)

/**生成枚举值 **/

const (
	UserIdTypeUserId  string = "user_id"
	UserIdTypeUnionId string = "union_id"
	UserIdTypeOpenId  string = "open_id"
)

/**生成数据类型 **/

type AccessRecord struct {
	AccessRecordId *int64  `json:"access_record_id,omitempty,string"`
	UserId         *string `json:"user_id,omitempty"`
	DeviceId       *int64  `json:"device_id,omitempty,string"`
	IsClockIn      *bool   `json:"is_clock_in,omitempty"`
	AccessTime     *int64  `json:"access_time,omitempty,string"`
	AccessType     *string `json:"access_type,omitempty"`
	AccessData     *string `json:"access_data,omitempty"`
	IsDoorOpen     *bool   `json:"is_door_open,omitempty"`
}

type Device struct {
	DeviceId   *int64  `json:"device_id,omitempty,string"`
	DeviceName *string `json:"device_name,omitempty"`
	DeviceSn   *string `json:"device_sn,omitempty"`
}

type Feature struct {
	Card         *int  `json:"card,omitempty"`
	FaceUploaded *bool `json:"face_uploaded,omitempty"`
}

type File struct {
	Files    io.Reader `json:"files,omitempty"`
	FileType *string   `json:"file_type,omitempty"`
	FileName *string   `json:"file_name,omitempty"`
}

type User struct {
	Feature *Feature `json:"feature,omitempty"`
	UserId  *string  `json:"user_id,omitempty"`
}

type UserId struct {
	UserId  *string `json:"user_id,omitempty"`
	OpenId  *string `json:"open_id,omitempty"`
	UnionId *string `json:"union_id,omitempty"`
}

/**生成请求和响应结果类型，以及请求对象的Builder构造器 **/

/*1.4 生成请求的builder结构体*/
type ListAccessRecordReqBuilder struct {
	pageSize       int
	pageSizeFlag   bool
	pageToken      string
	pageTokenFlag  bool
	from           int
	fromFlag       bool
	to             int
	toFlag         bool
	deviceId       int64
	deviceIdFlag   bool
	userIdType     string
	userIdTypeFlag bool
	limit          int
}

// 生成请求的New构造器
func NewListAccessRecordReqBuilder() *ListAccessRecordReqBuilder {
	builder := &ListAccessRecordReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *ListAccessRecordReqBuilder) Limit(limit int) *ListAccessRecordReqBuilder {
	builder.limit = limit
	return builder
}
func (builder *ListAccessRecordReqBuilder) PageSize(pageSize int) *ListAccessRecordReqBuilder {
	builder.pageSize = pageSize
	builder.pageSizeFlag = true
	return builder
}
func (builder *ListAccessRecordReqBuilder) PageToken(pageToken string) *ListAccessRecordReqBuilder {
	builder.pageToken = pageToken
	builder.pageTokenFlag = true
	return builder
}
func (builder *ListAccessRecordReqBuilder) From(from int) *ListAccessRecordReqBuilder {
	builder.from = from
	builder.fromFlag = true
	return builder
}
func (builder *ListAccessRecordReqBuilder) To(to int) *ListAccessRecordReqBuilder {
	builder.to = to
	builder.toFlag = true
	return builder
}
func (builder *ListAccessRecordReqBuilder) DeviceId(deviceId int64) *ListAccessRecordReqBuilder {
	builder.deviceId = deviceId
	builder.deviceIdFlag = true
	return builder
}
func (builder *ListAccessRecordReqBuilder) UserIdType(userIdType string) *ListAccessRecordReqBuilder {
	builder.userIdType = userIdType
	builder.userIdTypeFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *ListAccessRecordReqBuilder) Build() *ListAccessRecordReq {
	req := &ListAccessRecordReq{}
	req.Limit = builder.limit
	if builder.pageSizeFlag {
		req.PageSize = &builder.pageSize
	}
	if builder.pageTokenFlag {
		req.PageToken = &builder.pageToken
	}
	if builder.fromFlag {
		req.From = &builder.from
	}
	if builder.toFlag {
		req.To = &builder.to
	}
	if builder.deviceIdFlag {
		req.DeviceId = &builder.deviceId
	}
	if builder.userIdTypeFlag {
		req.UserIdType = &builder.userIdType
	}
	return req
}

type ListAccessRecordReq struct {
	PageSize   *int    `query:"page_size"`
	PageToken  *string `query:"page_token"`
	From       *int    `query:"from"`
	To         *int    `query:"to"`
	DeviceId   *int64  `query:"device_id"`
	UserIdType *string `query:"user_id_type"`
	Limit      int
}

type ListAccessRecordRespData struct {
	Items     []*AccessRecord `json:"items,omitempty"`
	PageToken *string         `json:"page_token,omitempty"`
	HasMore   *bool           `json:"has_more,omitempty"`
}

type ListAccessRecordResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *ListAccessRecordRespData `json:"data"`
}

func (resp *ListAccessRecordResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type GetAccessRecordAccessPhotoReqBuilder struct {
	accessRecordId     int64
	accessRecordIdFlag bool
}

// 生成请求的New构造器
func NewGetAccessRecordAccessPhotoReqBuilder() *GetAccessRecordAccessPhotoReqBuilder {
	builder := &GetAccessRecordAccessPhotoReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *GetAccessRecordAccessPhotoReqBuilder) AccessRecordId(accessRecordId int64) *GetAccessRecordAccessPhotoReqBuilder {
	builder.accessRecordId = accessRecordId
	builder.accessRecordIdFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *GetAccessRecordAccessPhotoReqBuilder) Build() *GetAccessRecordAccessPhotoReq {
	req := &GetAccessRecordAccessPhotoReq{}
	if builder.accessRecordIdFlag {
		req.AccessRecordId = builder.accessRecordId
	}
	return req
}

type GetAccessRecordAccessPhotoReq struct {
	AccessRecordId int64 `path:"access_record_id"`
}

type GetAccessRecordAccessPhotoResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	File     io.Reader `json:"-"`
	FileName string    `json:"-"`
}

func (resp *GetAccessRecordAccessPhotoResp) Success() bool {
	return resp.Code == 0
}

/**下载api,生成WriteFile方法**/
func (resp *GetAccessRecordAccessPhotoResp) WriteFile(fileName string) error {
	bs, err := ioutil.ReadAll(resp.File)
	if err != nil {
		return err
	}

	err = ioutil.WriteFile(fileName, bs, 0666)
	if err != nil {
		return err
	}
	return nil
}

type ListDeviceRespData struct {
	Items []*Device `json:"items,omitempty"`
}

type ListDeviceResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *ListDeviceRespData `json:"data"`
}

func (resp *ListDeviceResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type GetUserReqBuilder struct {
	userId         string
	userIdFlag     bool
	userIdType     string
	userIdTypeFlag bool
}

// 生成请求的New构造器
func NewGetUserReqBuilder() *GetUserReqBuilder {
	builder := &GetUserReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *GetUserReqBuilder) UserId(userId string) *GetUserReqBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}
func (builder *GetUserReqBuilder) UserIdType(userIdType string) *GetUserReqBuilder {
	builder.userIdType = userIdType
	builder.userIdTypeFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *GetUserReqBuilder) Build() *GetUserReq {
	req := &GetUserReq{}
	if builder.userIdFlag {
		req.UserId = builder.userId
	}
	if builder.userIdTypeFlag {
		req.UserIdType = &builder.userIdType
	}
	return req
}

type GetUserReq struct {
	UserId     string  `path:"user_id"`
	UserIdType *string `query:"user_id_type"`
}

type GetUserRespData struct {
	User *User `json:"user,omitempty"`
}

type GetUserResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *GetUserRespData `json:"data"`
}

func (resp *GetUserResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type ListUserReqBuilder struct {
	pageSize       int
	pageSizeFlag   bool
	pageToken      string
	pageTokenFlag  bool
	userIdType     string
	userIdTypeFlag bool
	limit          int
}

// 生成请求的New构造器
func NewListUserReqBuilder() *ListUserReqBuilder {
	builder := &ListUserReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *ListUserReqBuilder) Limit(limit int) *ListUserReqBuilder {
	builder.limit = limit
	return builder
}
func (builder *ListUserReqBuilder) PageSize(pageSize int) *ListUserReqBuilder {
	builder.pageSize = pageSize
	builder.pageSizeFlag = true
	return builder
}
func (builder *ListUserReqBuilder) PageToken(pageToken string) *ListUserReqBuilder {
	builder.pageToken = pageToken
	builder.pageTokenFlag = true
	return builder
}
func (builder *ListUserReqBuilder) UserIdType(userIdType string) *ListUserReqBuilder {
	builder.userIdType = userIdType
	builder.userIdTypeFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *ListUserReqBuilder) Build() *ListUserReq {
	req := &ListUserReq{}
	req.Limit = builder.limit
	if builder.pageSizeFlag {
		req.PageSize = &builder.pageSize
	}
	if builder.pageTokenFlag {
		req.PageToken = &builder.pageToken
	}
	if builder.userIdTypeFlag {
		req.UserIdType = &builder.userIdType
	}
	return req
}

type ListUserReq struct {
	PageSize   *int    `query:"page_size"`
	PageToken  *string `query:"page_token"`
	UserIdType *string `query:"user_id_type"`
	Limit      int
}

type ListUserRespData struct {
	Items     []*User `json:"items,omitempty"`
	PageToken *string `json:"page_token,omitempty"`
	HasMore   *bool   `json:"has_more,omitempty"`
}

type ListUserResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *ListUserRespData `json:"data"`
}

func (resp *ListUserResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type PatchUserReqBuilder struct {
	userId         string
	userIdFlag     bool
	userIdType     string
	userIdTypeFlag bool
	user           *User
	userFlag       bool
}

// 生成请求的New构造器
func NewPatchUserReqBuilder() *PatchUserReqBuilder {
	builder := &PatchUserReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *PatchUserReqBuilder) UserId(userId string) *PatchUserReqBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}
func (builder *PatchUserReqBuilder) UserIdType(userIdType string) *PatchUserReqBuilder {
	builder.userIdType = userIdType
	builder.userIdTypeFlag = true
	return builder
}
func (builder *PatchUserReqBuilder) User(user *User) *PatchUserReqBuilder {
	builder.user = user
	builder.userFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *PatchUserReqBuilder) Build() *PatchUserReq {
	req := &PatchUserReq{}
	if builder.userIdFlag {
		req.UserId = builder.userId
	}
	if builder.userIdTypeFlag {
		req.UserIdType = &builder.userIdType
	}
	return req
}

type PatchUserReq struct {
	UserId     string  `path:"user_id"`
	UserIdType *string `query:"user_id_type"`
	User       *User   `body:""`
}

type PatchUserResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *PatchUserResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type GetUserFaceReqBuilder struct {
	userId         string
	userIdFlag     bool
	isCropped      bool
	isCroppedFlag  bool
	userIdType     string
	userIdTypeFlag bool
}

// 生成请求的New构造器
func NewGetUserFaceReqBuilder() *GetUserFaceReqBuilder {
	builder := &GetUserFaceReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *GetUserFaceReqBuilder) UserId(userId string) *GetUserFaceReqBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}
func (builder *GetUserFaceReqBuilder) IsCropped(isCropped bool) *GetUserFaceReqBuilder {
	builder.isCropped = isCropped
	builder.isCroppedFlag = true
	return builder
}
func (builder *GetUserFaceReqBuilder) UserIdType(userIdType string) *GetUserFaceReqBuilder {
	builder.userIdType = userIdType
	builder.userIdTypeFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *GetUserFaceReqBuilder) Build() *GetUserFaceReq {
	req := &GetUserFaceReq{}
	if builder.userIdFlag {
		req.UserId = builder.userId
	}
	if builder.isCroppedFlag {
		req.IsCropped = &builder.isCropped
	}
	if builder.userIdTypeFlag {
		req.UserIdType = &builder.userIdType
	}
	return req
}

type GetUserFaceReq struct {
	UserId     string  `path:"user_id"`
	IsCropped  *bool   `query:"is_cropped"`
	UserIdType *string `query:"user_id_type"`
}

type GetUserFaceResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	File     io.Reader `json:"-"`
	FileName string    `json:"-"`
}

func (resp *GetUserFaceResp) Success() bool {
	return resp.Code == 0
}

/**下载api,生成WriteFile方法**/
func (resp *GetUserFaceResp) WriteFile(fileName string) error {
	bs, err := ioutil.ReadAll(resp.File)
	if err != nil {
		return err
	}

	err = ioutil.WriteFile(fileName, bs, 0666)
	if err != nil {
		return err
	}
	return nil
}

/*1.4 生成请求的builder结构体*/
type UpdateUserFaceReqBuilder struct {
	userId         string
	userIdFlag     bool
	userIdType     string
	userIdTypeFlag bool
	file           *File
	fileFlag       bool
}

// 生成请求的New构造器
func NewUpdateUserFaceReqBuilder() *UpdateUserFaceReqBuilder {
	builder := &UpdateUserFaceReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *UpdateUserFaceReqBuilder) UserId(userId string) *UpdateUserFaceReqBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}
func (builder *UpdateUserFaceReqBuilder) UserIdType(userIdType string) *UpdateUserFaceReqBuilder {
	builder.userIdType = userIdType
	builder.userIdTypeFlag = true
	return builder
}
func (builder *UpdateUserFaceReqBuilder) File(file *File) *UpdateUserFaceReqBuilder {
	builder.file = file
	builder.fileFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *UpdateUserFaceReqBuilder) Build() *UpdateUserFaceReq {
	req := &UpdateUserFaceReq{}
	if builder.userIdFlag {
		req.UserId = builder.userId
	}
	if builder.userIdTypeFlag {
		req.UserIdType = &builder.userIdType
	}
	return req
}

type UpdateUserFaceReq struct {
	UserId     string  `path:"user_id"`
	UserIdType *string `query:"user_id_type"`
	File       *File   `body:""`
}

type UpdateUserFaceResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *UpdateUserFaceResp) Success() bool {
	return resp.Code == 0
}

/**生成消息事件结构体 **/

type AccessRecordCreatedEventData struct {
	AccessRecordId *string `json:"access_record_id,omitempty"`
	UserId         *UserId `json:"user_id,omitempty"`
	DeviceId       *string `json:"device_id,omitempty"`
	IsClockIn      *bool   `json:"is_clock_in,omitempty"`
	IsDoorOpen     *bool   `json:"is_door_open,omitempty"`
	AccessTime     *string `json:"access_time,omitempty"`
}

type AccessRecordCreatedEvent struct {
	*event.EventV2Base
	Event *AccessRecordCreatedEventData `json:"event"`
}

type UserUpdatedEventData struct {
	UserId       *UserId `json:"user_id,omitempty"`
	Card         *int    `json:"card,omitempty"`
	FaceUploaded *bool   `json:"face_uploaded,omitempty"`
}

type UserUpdatedEvent struct {
	*event.EventV2Base
	Event *UserUpdatedEventData `json:"event"`
}

/* 生成请求的builder构造器*/
/*1.1 生成body的builder结构体*/
/**如果是分页查询，则添加迭代器定义**/
type ListAccessRecordIterator struct {
	nextPageToken *string
	items         []*AccessRecord
	index         int
	limit         int
	ctx           context.Context
	req           *ListAccessRecordReq
	listFunc      func(ctx context.Context, req *ListAccessRecordReq, options ...core.RequestOptionFunc) (*ListAccessRecordResp, error)
	options       []core.RequestOptionFunc
	curlNum       int
}

func (iterator *ListAccessRecordIterator) Next() (bool, *AccessRecord, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum > iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.PageToken = iterator.nextPageToken
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListAccessRecordIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

/**如果是分页查询，则添加迭代器定义**/
type ListUserIterator struct {
	nextPageToken *string
	items         []*User
	index         int
	limit         int
	ctx           context.Context
	req           *ListUserReq
	listFunc      func(ctx context.Context, req *ListUserReq, options ...core.RequestOptionFunc) (*ListUserResp, error)
	options       []core.RequestOptionFunc
	curlNum       int
}

func (iterator *ListUserIterator) Next() (bool, *User, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum > iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.PageToken = iterator.nextPageToken
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListUserIterator) NextPageToken() *string {
	return iterator.nextPageToken
}
