// Package face_detection code generated by oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package larkface_detection

import (
	"github.com/larksuite/oapi-sdk-go/v3/core"
)

// 生成枚举值

// 生成数据类型

type AttributeItem struct {
	Type        *int     `json:"type,omitempty"`
	Probability *float64 `json:"probability,omitempty"`
}

// builder开始
type AttributeItemBuilder struct {
	type_           int
	typeFlag        bool
	probability     float64
	probabilityFlag bool
}

func NewAttributeItemBuilder() *AttributeItemBuilder {
	builder := &AttributeItemBuilder{}
	return builder
}

func (builder *AttributeItemBuilder) Type(type_ int) *AttributeItemBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}
func (builder *AttributeItemBuilder) Probability(probability float64) *AttributeItemBuilder {
	builder.probability = probability
	builder.probabilityFlag = true
	return builder
}

func (builder *AttributeItemBuilder) Build() *AttributeItem {
	req := &AttributeItem{}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	if builder.probabilityFlag {
		req.Probability = &builder.probability

	}
	return req
}

// builder结束

type FaceAttribute struct {
	Gender  *AttributeItem `json:"gender,omitempty"`
	Age     *int           `json:"age,omitempty"`
	Emotion *AttributeItem `json:"emotion,omitempty"`
	Beauty  *int           `json:"beauty,omitempty"`
	Pose    *FacePose      `json:"pose,omitempty"`
	Hat     *AttributeItem `json:"hat,omitempty"`
	Glass   *AttributeItem `json:"glass,omitempty"`
	Mask    *AttributeItem `json:"mask,omitempty"`
}

// builder开始
type FaceAttributeBuilder struct {
	gender      *AttributeItem
	genderFlag  bool
	age         int
	ageFlag     bool
	emotion     *AttributeItem
	emotionFlag bool
	beauty      int
	beautyFlag  bool
	pose        *FacePose
	poseFlag    bool
	hat         *AttributeItem
	hatFlag     bool
	glass       *AttributeItem
	glassFlag   bool
	mask        *AttributeItem
	maskFlag    bool
}

func NewFaceAttributeBuilder() *FaceAttributeBuilder {
	builder := &FaceAttributeBuilder{}
	return builder
}

func (builder *FaceAttributeBuilder) Gender(gender *AttributeItem) *FaceAttributeBuilder {
	builder.gender = gender
	builder.genderFlag = true
	return builder
}
func (builder *FaceAttributeBuilder) Age(age int) *FaceAttributeBuilder {
	builder.age = age
	builder.ageFlag = true
	return builder
}
func (builder *FaceAttributeBuilder) Emotion(emotion *AttributeItem) *FaceAttributeBuilder {
	builder.emotion = emotion
	builder.emotionFlag = true
	return builder
}
func (builder *FaceAttributeBuilder) Beauty(beauty int) *FaceAttributeBuilder {
	builder.beauty = beauty
	builder.beautyFlag = true
	return builder
}
func (builder *FaceAttributeBuilder) Pose(pose *FacePose) *FaceAttributeBuilder {
	builder.pose = pose
	builder.poseFlag = true
	return builder
}
func (builder *FaceAttributeBuilder) Hat(hat *AttributeItem) *FaceAttributeBuilder {
	builder.hat = hat
	builder.hatFlag = true
	return builder
}
func (builder *FaceAttributeBuilder) Glass(glass *AttributeItem) *FaceAttributeBuilder {
	builder.glass = glass
	builder.glassFlag = true
	return builder
}
func (builder *FaceAttributeBuilder) Mask(mask *AttributeItem) *FaceAttributeBuilder {
	builder.mask = mask
	builder.maskFlag = true
	return builder
}

func (builder *FaceAttributeBuilder) Build() *FaceAttribute {
	req := &FaceAttribute{}
	if builder.genderFlag {
		req.Gender = builder.gender
	}
	if builder.ageFlag {
		req.Age = &builder.age

	}
	if builder.emotionFlag {
		req.Emotion = builder.emotion
	}
	if builder.beautyFlag {
		req.Beauty = &builder.beauty

	}
	if builder.poseFlag {
		req.Pose = builder.pose
	}
	if builder.hatFlag {
		req.Hat = builder.hat
	}
	if builder.glassFlag {
		req.Glass = builder.glass
	}
	if builder.maskFlag {
		req.Mask = builder.mask
	}
	return req
}

// builder结束

type FaceInfo struct {
	Position  *FacePosition  `json:"position,omitempty"`
	Attribute *FaceAttribute `json:"attribute,omitempty"`
	Quality   *FaceQuality   `json:"quality,omitempty"`
}

// builder开始
type FaceInfoBuilder struct {
	position      *FacePosition
	positionFlag  bool
	attribute     *FaceAttribute
	attributeFlag bool
	quality       *FaceQuality
	qualityFlag   bool
}

func NewFaceInfoBuilder() *FaceInfoBuilder {
	builder := &FaceInfoBuilder{}
	return builder
}

func (builder *FaceInfoBuilder) Position(position *FacePosition) *FaceInfoBuilder {
	builder.position = position
	builder.positionFlag = true
	return builder
}
func (builder *FaceInfoBuilder) Attribute(attribute *FaceAttribute) *FaceInfoBuilder {
	builder.attribute = attribute
	builder.attributeFlag = true
	return builder
}
func (builder *FaceInfoBuilder) Quality(quality *FaceQuality) *FaceInfoBuilder {
	builder.quality = quality
	builder.qualityFlag = true
	return builder
}

func (builder *FaceInfoBuilder) Build() *FaceInfo {
	req := &FaceInfo{}
	if builder.positionFlag {
		req.Position = builder.position
	}
	if builder.attributeFlag {
		req.Attribute = builder.attribute
	}
	if builder.qualityFlag {
		req.Quality = builder.quality
	}
	return req
}

// builder结束

type FaceOcclude struct {
	Eyebrow  *float64 `json:"eyebrow,omitempty"`
	Nose     *float64 `json:"nose,omitempty"`
	Cheek    *float64 `json:"cheek,omitempty"`
	Mouth    *float64 `json:"mouth,omitempty"`
	Chin     *float64 `json:"chin,omitempty"`
	LeftEye  *float64 `json:"left_eye,omitempty"`
	RightEye *float64 `json:"right_eye,omitempty"`
}

// builder开始
type FaceOccludeBuilder struct {
	eyebrow      float64
	eyebrowFlag  bool
	nose         float64
	noseFlag     bool
	cheek        float64
	cheekFlag    bool
	mouth        float64
	mouthFlag    bool
	chin         float64
	chinFlag     bool
	leftEye      float64
	leftEyeFlag  bool
	rightEye     float64
	rightEyeFlag bool
}

func NewFaceOccludeBuilder() *FaceOccludeBuilder {
	builder := &FaceOccludeBuilder{}
	return builder
}

func (builder *FaceOccludeBuilder) Eyebrow(eyebrow float64) *FaceOccludeBuilder {
	builder.eyebrow = eyebrow
	builder.eyebrowFlag = true
	return builder
}
func (builder *FaceOccludeBuilder) Nose(nose float64) *FaceOccludeBuilder {
	builder.nose = nose
	builder.noseFlag = true
	return builder
}
func (builder *FaceOccludeBuilder) Cheek(cheek float64) *FaceOccludeBuilder {
	builder.cheek = cheek
	builder.cheekFlag = true
	return builder
}
func (builder *FaceOccludeBuilder) Mouth(mouth float64) *FaceOccludeBuilder {
	builder.mouth = mouth
	builder.mouthFlag = true
	return builder
}
func (builder *FaceOccludeBuilder) Chin(chin float64) *FaceOccludeBuilder {
	builder.chin = chin
	builder.chinFlag = true
	return builder
}
func (builder *FaceOccludeBuilder) LeftEye(leftEye float64) *FaceOccludeBuilder {
	builder.leftEye = leftEye
	builder.leftEyeFlag = true
	return builder
}
func (builder *FaceOccludeBuilder) RightEye(rightEye float64) *FaceOccludeBuilder {
	builder.rightEye = rightEye
	builder.rightEyeFlag = true
	return builder
}

func (builder *FaceOccludeBuilder) Build() *FaceOcclude {
	req := &FaceOcclude{}
	if builder.eyebrowFlag {
		req.Eyebrow = &builder.eyebrow

	}
	if builder.noseFlag {
		req.Nose = &builder.nose

	}
	if builder.cheekFlag {
		req.Cheek = &builder.cheek

	}
	if builder.mouthFlag {
		req.Mouth = &builder.mouth

	}
	if builder.chinFlag {
		req.Chin = &builder.chin

	}
	if builder.leftEyeFlag {
		req.LeftEye = &builder.leftEye

	}
	if builder.rightEyeFlag {
		req.RightEye = &builder.rightEye

	}
	return req
}

// builder结束

type FacePose struct {
	Pitch *int `json:"pitch,omitempty"`
	Yaw   *int `json:"yaw,omitempty"`
	Roll  *int `json:"roll,omitempty"`
}

// builder开始
type FacePoseBuilder struct {
	pitch     int
	pitchFlag bool
	yaw       int
	yawFlag   bool
	roll      int
	rollFlag  bool
}

func NewFacePoseBuilder() *FacePoseBuilder {
	builder := &FacePoseBuilder{}
	return builder
}

func (builder *FacePoseBuilder) Pitch(pitch int) *FacePoseBuilder {
	builder.pitch = pitch
	builder.pitchFlag = true
	return builder
}
func (builder *FacePoseBuilder) Yaw(yaw int) *FacePoseBuilder {
	builder.yaw = yaw
	builder.yawFlag = true
	return builder
}
func (builder *FacePoseBuilder) Roll(roll int) *FacePoseBuilder {
	builder.roll = roll
	builder.rollFlag = true
	return builder
}

func (builder *FacePoseBuilder) Build() *FacePose {
	req := &FacePose{}
	if builder.pitchFlag {
		req.Pitch = &builder.pitch

	}
	if builder.yawFlag {
		req.Yaw = &builder.yaw

	}
	if builder.rollFlag {
		req.Roll = &builder.roll

	}
	return req
}

// builder结束

type FacePosition struct {
	UpperLeft  *Point `json:"upper_left,omitempty"`
	LowerRight *Point `json:"lower_right,omitempty"`
}

// builder开始
type FacePositionBuilder struct {
	upperLeft      *Point
	upperLeftFlag  bool
	lowerRight     *Point
	lowerRightFlag bool
}

func NewFacePositionBuilder() *FacePositionBuilder {
	builder := &FacePositionBuilder{}
	return builder
}

func (builder *FacePositionBuilder) UpperLeft(upperLeft *Point) *FacePositionBuilder {
	builder.upperLeft = upperLeft
	builder.upperLeftFlag = true
	return builder
}
func (builder *FacePositionBuilder) LowerRight(lowerRight *Point) *FacePositionBuilder {
	builder.lowerRight = lowerRight
	builder.lowerRightFlag = true
	return builder
}

func (builder *FacePositionBuilder) Build() *FacePosition {
	req := &FacePosition{}
	if builder.upperLeftFlag {
		req.UpperLeft = builder.upperLeft
	}
	if builder.lowerRightFlag {
		req.LowerRight = builder.lowerRight
	}
	return req
}

// builder结束

type FaceQuality struct {
	Sharpness  *float64     `json:"sharpness,omitempty"`
	Brightness *float64     `json:"brightness,omitempty"`
	Occlude    *FaceOcclude `json:"occlude,omitempty"`
}

// builder开始
type FaceQualityBuilder struct {
	sharpness      float64
	sharpnessFlag  bool
	brightness     float64
	brightnessFlag bool
	occlude        *FaceOcclude
	occludeFlag    bool
}

func NewFaceQualityBuilder() *FaceQualityBuilder {
	builder := &FaceQualityBuilder{}
	return builder
}

func (builder *FaceQualityBuilder) Sharpness(sharpness float64) *FaceQualityBuilder {
	builder.sharpness = sharpness
	builder.sharpnessFlag = true
	return builder
}
func (builder *FaceQualityBuilder) Brightness(brightness float64) *FaceQualityBuilder {
	builder.brightness = brightness
	builder.brightnessFlag = true
	return builder
}
func (builder *FaceQualityBuilder) Occlude(occlude *FaceOcclude) *FaceQualityBuilder {
	builder.occlude = occlude
	builder.occludeFlag = true
	return builder
}

func (builder *FaceQualityBuilder) Build() *FaceQuality {
	req := &FaceQuality{}
	if builder.sharpnessFlag {
		req.Sharpness = &builder.sharpness

	}
	if builder.brightnessFlag {
		req.Brightness = &builder.brightness

	}
	if builder.occludeFlag {
		req.Occlude = builder.occlude
	}
	return req
}

// builder结束

type Image struct {
	Width  *int `json:"width,omitempty"`
	Height *int `json:"height,omitempty"`
}

// builder开始
type ImageBuilder struct {
	width      int
	widthFlag  bool
	height     int
	heightFlag bool
}

func NewImageBuilder() *ImageBuilder {
	builder := &ImageBuilder{}
	return builder
}

func (builder *ImageBuilder) Width(width int) *ImageBuilder {
	builder.width = width
	builder.widthFlag = true
	return builder
}
func (builder *ImageBuilder) Height(height int) *ImageBuilder {
	builder.height = height
	builder.heightFlag = true
	return builder
}

func (builder *ImageBuilder) Build() *Image {
	req := &Image{}
	if builder.widthFlag {
		req.Width = &builder.width

	}
	if builder.heightFlag {
		req.Height = &builder.height

	}
	return req
}

// builder结束

type Point struct {
	X *float64 `json:"x,omitempty"`
	Y *float64 `json:"y,omitempty"`
}

// builder开始
type PointBuilder struct {
	x     float64
	xFlag bool
	y     float64
	yFlag bool
}

func NewPointBuilder() *PointBuilder {
	builder := &PointBuilder{}
	return builder
}

func (builder *PointBuilder) X(x float64) *PointBuilder {
	builder.x = x
	builder.xFlag = true
	return builder
}
func (builder *PointBuilder) Y(y float64) *PointBuilder {
	builder.y = y
	builder.yFlag = true
	return builder
}

func (builder *PointBuilder) Build() *Point {
	req := &Point{}
	if builder.xFlag {
		req.X = &builder.x

	}
	if builder.yFlag {
		req.Y = &builder.y

	}
	return req
}

// builder结束

// 生成请求和响应结果类型，以及请求对象的Builder构造器

type DetectFaceAttributesImageReqBodyBuilder struct {
	image     string
	imageFlag bool
}

// 生成body的New构造器
func NewDetectFaceAttributesImageReqBodyBuilder() *DetectFaceAttributesImageReqBodyBuilder {
	builder := &DetectFaceAttributesImageReqBodyBuilder{}
	return builder
}

// 1.2 生成body的builder属性方法
func (builder *DetectFaceAttributesImageReqBodyBuilder) Image(image string) *DetectFaceAttributesImageReqBodyBuilder {
	builder.image = image
	builder.imageFlag = true
	return builder
}

// 1.3 生成body的build方法
func (builder *DetectFaceAttributesImageReqBodyBuilder) Build() *DetectFaceAttributesImageReqBody {
	req := &DetectFaceAttributesImageReqBody{}
	if builder.imageFlag {
		req.Image = &builder.image
	}
	return req
}

// 上传文件path开始
type DetectFaceAttributesImagePathReqBodyBuilder struct {
	image     string
	imageFlag bool
}

func NewDetectFaceAttributesImagePathReqBodyBuilder() *DetectFaceAttributesImagePathReqBodyBuilder {
	builder := &DetectFaceAttributesImagePathReqBodyBuilder{}
	return builder
}
func (builder *DetectFaceAttributesImagePathReqBodyBuilder) Image(image string) *DetectFaceAttributesImagePathReqBodyBuilder {
	builder.image = image
	builder.imageFlag = true
	return builder
}

func (builder *DetectFaceAttributesImagePathReqBodyBuilder) Build() (*DetectFaceAttributesImageReqBody, error) {
	req := &DetectFaceAttributesImageReqBody{}
	if builder.imageFlag {
		req.Image = &builder.image
	}
	return req, nil
}

// 上传文件path结束

// 1.4 生成请求的builder结构体
type DetectFaceAttributesImageReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *DetectFaceAttributesImageReqBody
}

// 生成请求的New构造器
func NewDetectFaceAttributesImageReqBuilder() *DetectFaceAttributesImageReqBuilder {
	builder := &DetectFaceAttributesImageReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *DetectFaceAttributesImageReqBuilder) Body(body *DetectFaceAttributesImageReqBody) *DetectFaceAttributesImageReqBuilder {
	builder.body = body
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *DetectFaceAttributesImageReqBuilder) Build() *DetectFaceAttributesImageReq {
	req := &DetectFaceAttributesImageReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.Body = builder.body
	return req
}

type DetectFaceAttributesImageReqBody struct {
	Image *string `json:"image,omitempty"`
}

type DetectFaceAttributesImageReq struct {
	apiReq *larkcore.ApiReq
	Body   *DetectFaceAttributesImageReqBody `body:""`
}

type DetectFaceAttributesImageRespData struct {
	ImageInfo *Image      `json:"image_info,omitempty"`
	FaceInfos []*FaceInfo `json:"face_infos,omitempty"`
}

type DetectFaceAttributesImageResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *DetectFaceAttributesImageRespData `json:"data"`
}

func (resp *DetectFaceAttributesImageResp) Success() bool {
	return resp.Code == 0
}

// 生成消息事件结构体

// 生成请求的builder构造器
// 1.1 生成body的builder结构体
