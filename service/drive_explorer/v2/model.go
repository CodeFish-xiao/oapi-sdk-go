// Package drive_explorer code generated by oapi sdk gen
package drive_explorer

import (
	"github.com/feishu/oapi-sdk-go/core"

)

/**生成枚举值 **/



/**生成数据类型 **/

type Child struct {
	Token  *string `json:"token,omitempty"`
	Name  *string `json:"name,omitempty"`
	Type  *string `json:"type,omitempty"`
}

type OperatorId struct {
	OpenId  *string `json:"open_id,omitempty"`
	UnionId  *string `json:"union_id,omitempty"`
	UserId  *string `json:"user_id,omitempty"`
}


/**生成请求和响应结果类型，以及请求对象的Builder构造器 **/

type CopyFileReqBodyBuilder struct {
	type_  string
	typeFlag  bool
	dstFolderToken  string
	dstFolderTokenFlag  bool
	dstName  string
	dstNameFlag  bool
	commentNeeded  bool
	commentNeededFlag  bool
}

// 生成body的New构造器
func NewCopyFileReqBodyBuilder() * CopyFileReqBodyBuilder{
  builder := &CopyFileReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * CopyFileReqBodyBuilder ) Type(type_ string) *CopyFileReqBodyBuilder {
  builder.type_ = type_
  builder.typeFlag = true
  return builder
}
func (builder * CopyFileReqBodyBuilder ) DstFolderToken(dstFolderToken string) *CopyFileReqBodyBuilder {
  builder.dstFolderToken = dstFolderToken
  builder.dstFolderTokenFlag = true
  return builder
}
func (builder * CopyFileReqBodyBuilder ) DstName(dstName string) *CopyFileReqBodyBuilder {
  builder.dstName = dstName
  builder.dstNameFlag = true
  return builder
}
func (builder * CopyFileReqBodyBuilder ) CommentNeeded(commentNeeded bool) *CopyFileReqBodyBuilder {
  builder.commentNeeded = commentNeeded
  builder.commentNeededFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * CopyFileReqBodyBuilder ) Build() *CopyFileReqBody {
   req := &CopyFileReqBody{}
   if builder.typeFlag {
	  req.Type = &builder.type_
	  

   }
   if builder.dstFolderTokenFlag {
	  req.DstFolderToken = &builder.dstFolderToken
	  

   }
   if builder.dstNameFlag {
	  req.DstName = &builder.dstName
	  

   }
   if builder.commentNeededFlag {
	  req.CommentNeeded = &builder.commentNeeded
	  

   }
   return req
}

/**上传文件path开始**/
type CopyFilePathReqBodyBuilder struct {
	type_  string
	typeFlag  bool
	dstFolderToken  string
	dstFolderTokenFlag  bool
	dstName  string
	dstNameFlag  bool
	commentNeeded  bool
	commentNeededFlag  bool
}

// 生成body的New构造器
func NewCopyFilePathReqBodyBuilder() * CopyFilePathReqBodyBuilder{
  builder := &CopyFilePathReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * CopyFilePathReqBodyBuilder ) Type(type_ string) *CopyFilePathReqBodyBuilder {
  builder.type_ = type_
  builder.typeFlag = true
  return builder
}
func (builder * CopyFilePathReqBodyBuilder ) DstFolderToken(dstFolderToken string) *CopyFilePathReqBodyBuilder {
  builder.dstFolderToken = dstFolderToken
  builder.dstFolderTokenFlag = true
  return builder
}
func (builder * CopyFilePathReqBodyBuilder ) DstName(dstName string) *CopyFilePathReqBodyBuilder {
  builder.dstName = dstName
  builder.dstNameFlag = true
  return builder
}
func (builder * CopyFilePathReqBodyBuilder ) CommentNeeded(commentNeeded bool) *CopyFilePathReqBodyBuilder {
  builder.commentNeeded = commentNeeded
  builder.commentNeededFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * CopyFilePathReqBodyBuilder ) Build() (*CopyFileReqBody, error) {
   req := &CopyFileReqBody{}
   if builder.typeFlag {
	  req.Type = &builder.type_
	  
   }
   if builder.dstFolderTokenFlag {
	  req.DstFolderToken = &builder.dstFolderToken
	  
   }
   if builder.dstNameFlag {
	  req.DstName = &builder.dstName
	  
   }
   if builder.commentNeededFlag {
	  req.CommentNeeded = &builder.commentNeeded
	  
   }
   return req, nil
}
/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type CopyFileReqBuilder struct {
	fileToken  string
	fileTokenFlag  bool
	body *CopyFileReqBody
	bodyFlag bool

}

// 生成请求的New构造器
func NewCopyFileReqBuilder() * CopyFileReqBuilder{
   builder := &CopyFileReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * CopyFileReqBuilder) FileToken(fileToken string) *CopyFileReqBuilder  {
  builder.fileToken = fileToken
  builder.fileTokenFlag = true
  return builder
}
func (builder * CopyFileReqBuilder) Body(body *CopyFileReqBody) *CopyFileReqBuilder  {
  builder.body = body
  builder.bodyFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * CopyFileReqBuilder ) Build() *CopyFileReq {
   req := &CopyFileReq{}
   if builder.fileTokenFlag {
	  req.FileToken = builder.fileToken
   }
   if builder.bodyFlag {
	  req.Body = builder.body

   }
   return req
}

type CopyFileReqBody struct {
	Type  *string `json:"type,omitempty"`
	DstFolderToken  *string `json:"dstFolderToken,omitempty"`
	DstName  *string `json:"dstName,omitempty"`
	CommentNeeded  *bool `json:"commentNeeded,omitempty"`
}

type CopyFileReq struct {
	FileToken  string `path:"fileToken"`
	Body *CopyFileReqBody `body:""`

}

type CopyFileRespData struct {
	FolderToken  *string `json:"folderToken,omitempty"`
	Revision  *int `json:"revision,omitempty"`
	Token  *string `json:"token,omitempty"`
	Type  *string `json:"type,omitempty"`
	Url  *string `json:"url,omitempty"`
}

type CopyFileResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *CopyFileRespData `json:"data"`
}

type CreateFileReqBodyBuilder struct {
	title  string
	titleFlag  bool
	type_  string
	typeFlag  bool
}

// 生成body的New构造器
func NewCreateFileReqBodyBuilder() * CreateFileReqBodyBuilder{
  builder := &CreateFileReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * CreateFileReqBodyBuilder ) Title(title string) *CreateFileReqBodyBuilder {
  builder.title = title
  builder.titleFlag = true
  return builder
}
func (builder * CreateFileReqBodyBuilder ) Type(type_ string) *CreateFileReqBodyBuilder {
  builder.type_ = type_
  builder.typeFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * CreateFileReqBodyBuilder ) Build() *CreateFileReqBody {
   req := &CreateFileReqBody{}
   if builder.titleFlag {
	  req.Title = &builder.title
	  

   }
   if builder.typeFlag {
	  req.Type = &builder.type_
	  

   }
   return req
}

/**上传文件path开始**/
type CreateFilePathReqBodyBuilder struct {
	title  string
	titleFlag  bool
	type_  string
	typeFlag  bool
}

// 生成body的New构造器
func NewCreateFilePathReqBodyBuilder() * CreateFilePathReqBodyBuilder{
  builder := &CreateFilePathReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * CreateFilePathReqBodyBuilder ) Title(title string) *CreateFilePathReqBodyBuilder {
  builder.title = title
  builder.titleFlag = true
  return builder
}
func (builder * CreateFilePathReqBodyBuilder ) Type(type_ string) *CreateFilePathReqBodyBuilder {
  builder.type_ = type_
  builder.typeFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * CreateFilePathReqBodyBuilder ) Build() (*CreateFileReqBody, error) {
   req := &CreateFileReqBody{}
   if builder.titleFlag {
	  req.Title = &builder.title
	  
   }
   if builder.typeFlag {
	  req.Type = &builder.type_
	  
   }
   return req, nil
}
/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type CreateFileReqBuilder struct {
	folderToken  string
	folderTokenFlag  bool
	body *CreateFileReqBody
	bodyFlag bool

}

// 生成请求的New构造器
func NewCreateFileReqBuilder() * CreateFileReqBuilder{
   builder := &CreateFileReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * CreateFileReqBuilder) FolderToken(folderToken string) *CreateFileReqBuilder  {
  builder.folderToken = folderToken
  builder.folderTokenFlag = true
  return builder
}
func (builder * CreateFileReqBuilder) Body(body *CreateFileReqBody) *CreateFileReqBuilder  {
  builder.body = body
  builder.bodyFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * CreateFileReqBuilder ) Build() *CreateFileReq {
   req := &CreateFileReq{}
   if builder.folderTokenFlag {
	  req.FolderToken = builder.folderToken
   }
   if builder.bodyFlag {
	  req.Body = builder.body

   }
   return req
}

type CreateFileReqBody struct {
	Title  *string `json:"title,omitempty"`
	Type  *string `json:"type,omitempty"`
}

type CreateFileReq struct {
	FolderToken  string `path:"folderToken"`
	Body *CreateFileReqBody `body:""`

}

type CreateFileRespData struct {
	Url  *string `json:"url,omitempty"`
	Revision  *int `json:"revision,omitempty"`
	Token  *string `json:"token,omitempty"`
}

type CreateFileResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *CreateFileRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type DocsDeleteFileReqBuilder struct {
	docToken  string
	docTokenFlag  bool

}

// 生成请求的New构造器
func NewDocsDeleteFileReqBuilder() * DocsDeleteFileReqBuilder{
   builder := &DocsDeleteFileReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * DocsDeleteFileReqBuilder) DocToken(docToken string) *DocsDeleteFileReqBuilder  {
  builder.docToken = docToken
  builder.docTokenFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * DocsDeleteFileReqBuilder ) Build() *DocsDeleteFileReq {
   req := &DocsDeleteFileReq{}
   if builder.docTokenFlag {
	  req.DocToken = builder.docToken
   }
   return req
}


type DocsDeleteFileReq struct {
	DocToken  string `path:"docToken"`

}

type DocsDeleteFileRespData struct {
	Id  *string `json:"id,omitempty"`
	Result  *bool `json:"result,omitempty"`
}

type DocsDeleteFileResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *DocsDeleteFileRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type SpreadsheetsDeleteFileReqBuilder struct {
	spreadsheetToken  string
	spreadsheetTokenFlag  bool

}

// 生成请求的New构造器
func NewSpreadsheetsDeleteFileReqBuilder() * SpreadsheetsDeleteFileReqBuilder{
   builder := &SpreadsheetsDeleteFileReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * SpreadsheetsDeleteFileReqBuilder) SpreadsheetToken(spreadsheetToken string) *SpreadsheetsDeleteFileReqBuilder  {
  builder.spreadsheetToken = spreadsheetToken
  builder.spreadsheetTokenFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * SpreadsheetsDeleteFileReqBuilder ) Build() *SpreadsheetsDeleteFileReq {
   req := &SpreadsheetsDeleteFileReq{}
   if builder.spreadsheetTokenFlag {
	  req.SpreadsheetToken = builder.spreadsheetToken
   }
   return req
}


type SpreadsheetsDeleteFileReq struct {
	SpreadsheetToken  string `path:"spreadsheetToken"`

}

type SpreadsheetsDeleteFileRespData struct {
	Id  *string `json:"id,omitempty"`
	Result  *bool `json:"result,omitempty"`
}

type SpreadsheetsDeleteFileResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *SpreadsheetsDeleteFileRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type ChildrenFolderReqBuilder struct {
	folderToken  string
	folderTokenFlag  bool
	types  []string
	typesFlag  bool

}

// 生成请求的New构造器
func NewChildrenFolderReqBuilder() * ChildrenFolderReqBuilder{
   builder := &ChildrenFolderReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * ChildrenFolderReqBuilder) FolderToken(folderToken string) *ChildrenFolderReqBuilder  {
  builder.folderToken = folderToken
  builder.folderTokenFlag = true
  return builder
}
func (builder * ChildrenFolderReqBuilder) Types(types []string) *ChildrenFolderReqBuilder  {
  builder.types = types
  builder.typesFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * ChildrenFolderReqBuilder ) Build() *ChildrenFolderReq {
   req := &ChildrenFolderReq{}
   if builder.folderTokenFlag {
	  req.FolderToken = builder.folderToken
   }
   if builder.typesFlag {
	  req.Types = builder.types
   }
   return req
}


type ChildrenFolderReq struct {
	FolderToken  string `path:"folderToken"`
	Types  []string `query:"types"`

}

type ChildrenFolderRespData struct {
	ParentToken  *string `json:"parentToken,omitempty"`
	Children  map[string]*Child `json:"children,omitempty"`
}

type ChildrenFolderResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *ChildrenFolderRespData `json:"data"`
}

type CreateFolderReqBodyBuilder struct {
	title  string
	titleFlag  bool
}

// 生成body的New构造器
func NewCreateFolderReqBodyBuilder() * CreateFolderReqBodyBuilder{
  builder := &CreateFolderReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * CreateFolderReqBodyBuilder ) Title(title string) *CreateFolderReqBodyBuilder {
  builder.title = title
  builder.titleFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * CreateFolderReqBodyBuilder ) Build() *CreateFolderReqBody {
   req := &CreateFolderReqBody{}
   if builder.titleFlag {
	  req.Title = &builder.title
	  

   }
   return req
}

/**上传文件path开始**/
type CreateFolderPathReqBodyBuilder struct {
	title  string
	titleFlag  bool
}

// 生成body的New构造器
func NewCreateFolderPathReqBodyBuilder() * CreateFolderPathReqBodyBuilder{
  builder := &CreateFolderPathReqBodyBuilder{}
  return builder
}

/*1.2 生成body的builder属性方法*/
func (builder * CreateFolderPathReqBodyBuilder ) Title(title string) *CreateFolderPathReqBodyBuilder {
  builder.title = title
  builder.titleFlag = true
  return builder
}


/*1.3 生成body的build方法*/
func (builder * CreateFolderPathReqBodyBuilder ) Build() (*CreateFolderReqBody, error) {
   req := &CreateFolderReqBody{}
   if builder.titleFlag {
	  req.Title = &builder.title
	  
   }
   return req, nil
}
/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type CreateFolderReqBuilder struct {
	folderToken  string
	folderTokenFlag  bool
	body *CreateFolderReqBody
	bodyFlag bool

}

// 生成请求的New构造器
func NewCreateFolderReqBuilder() * CreateFolderReqBuilder{
   builder := &CreateFolderReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * CreateFolderReqBuilder) FolderToken(folderToken string) *CreateFolderReqBuilder  {
  builder.folderToken = folderToken
  builder.folderTokenFlag = true
  return builder
}
func (builder * CreateFolderReqBuilder) Body(body *CreateFolderReqBody) *CreateFolderReqBuilder  {
  builder.body = body
  builder.bodyFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * CreateFolderReqBuilder ) Build() *CreateFolderReq {
   req := &CreateFolderReq{}
   if builder.folderTokenFlag {
	  req.FolderToken = builder.folderToken
   }
   if builder.bodyFlag {
	  req.Body = builder.body

   }
   return req
}

type CreateFolderReqBody struct {
	Title  *string `json:"title,omitempty"`
}

type CreateFolderReq struct {
	FolderToken  string `path:"folderToken"`
	Body *CreateFolderReqBody `body:""`

}

type CreateFolderRespData struct {
	Url  *string `json:"url,omitempty"`
	Revision  *int `json:"revision,omitempty"`
	Token  *string `json:"token,omitempty"`
}

type CreateFolderResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *CreateFolderRespData `json:"data"`
}


/*1.4 生成请求的builder结构体*/
type MetaFolderReqBuilder struct {
	folderToken  string
	folderTokenFlag  bool

}

// 生成请求的New构造器
func NewMetaFolderReqBuilder() * MetaFolderReqBuilder{
   builder := &MetaFolderReqBuilder{}
   return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder * MetaFolderReqBuilder) FolderToken(folderToken string) *MetaFolderReqBuilder  {
  builder.folderToken = folderToken
  builder.folderTokenFlag = true
  return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder * MetaFolderReqBuilder ) Build() *MetaFolderReq {
   req := &MetaFolderReq{}
   if builder.folderTokenFlag {
	  req.FolderToken = builder.folderToken
   }
   return req
}


type MetaFolderReq struct {
	FolderToken  string `path:"folderToken"`

}

type MetaFolderRespData struct {
	Id  *string `json:"id,omitempty"`
	Name  *string `json:"name,omitempty"`
	Token  *string `json:"token,omitempty"`
	CreateUid  *string `json:"createUid,omitempty"`
	EditUid  *string `json:"editUid,omitempty"`
	ParentId  *string `json:"parentId,omitempty"`
	OwnUid  *string `json:"ownUid,omitempty"`
}

type MetaFolderResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *MetaFolderRespData `json:"data"`
}



type RootMetaFolderRespData struct {
	Token  *string `json:"token,omitempty"`
	Id  *string `json:"id,omitempty"`
	UserId  *string `json:"user_id,omitempty"`
}

type RootMetaFolderResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *RootMetaFolderRespData `json:"data"`
}

/**生成消息事件结构体 **/


/* 生成请求的builder构造器*/
/*1.1 生成body的builder结构体*/


