// Package attendance code generated by oapi sdk gen
package attendance

import (
	"context"
)

/**
消息处理器定义
**/
type UserFlowCreatedEventHandler struct {
	handler func(context.Context, *UserFlowCreatedEvent) error
}

func NewUserFlowCreatedEventHandler(handler func(context.Context, *UserFlowCreatedEvent) error) *UserFlowCreatedEventHandler {
	h := &UserFlowCreatedEventHandler{handler: handler}
	return h
}

/**
返回事件的消息体的实例，用于反序列化用
**/
func (h *UserFlowCreatedEventHandler) Event() interface{} {
	return &UserFlowCreatedEvent{}
}

/**
回调开发者注册的handle
r**/
func (h *UserFlowCreatedEventHandler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*UserFlowCreatedEvent))
}

/**
消息处理器定义
**/
type UserTaskUpdatedEventHandler struct {
	handler func(context.Context, *UserTaskUpdatedEvent) error
}

func NewUserTaskUpdatedEventHandler(handler func(context.Context, *UserTaskUpdatedEvent) error) *UserTaskUpdatedEventHandler {
	h := &UserTaskUpdatedEventHandler{handler: handler}
	return h
}

/**
返回事件的消息体的实例，用于反序列化用
**/
func (h *UserTaskUpdatedEventHandler) Event() interface{} {
	return &UserTaskUpdatedEvent{}
}

/**
回调开发者注册的handle
r**/
func (h *UserTaskUpdatedEventHandler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*UserTaskUpdatedEvent))
}
