// Package attendance code generated by oapi sdk gen
package attendance

import (
	"io"

	"bytes"

	"io/ioutil"

	"context"
	"errors"
	"fmt"

	"github.com/feishu/oapi-sdk-go/event"

	"github.com/feishu/oapi-sdk-go/core"
)

/**生成枚举值 **/

const (
	EmployeeTypeEmployeeId string = "employee_id"
	EmployeeTypeEmployeeNo string = "employee_no"
)

const (
	DeptTypeOpenId string = "open_id"
)

const (
	TypeSelf                string = "0"
	TypeManagerModification string = "1"
	TypeRemedy              string = "2"
	TypeSystem              string = "3"
	TypeFree                string = "4"
	TypeMachine             string = "5"
	TypeQuick               string = "6"
	TypeImport              string = "7"
)

const (
	CheckResultNoNeedCheck string = "NoNeedCheck"
	CheckResultSystemCheck string = "SystemCheck"
	CheckResultNormal      string = "Normal"
	CheckResultEarly       string = "Early"
	CheckResultLate        string = "Late"
	CheckResultSeriousLate string = "SeriousLate"
	CheckResultLack        string = "Lack"
	CheckResultInvalid     string = "Invalid"
	CheckResultNone        string = "None"
	CheckResultTodo        string = "Todo"
)

const (
	LocaleEn string = "en"
	LocaleJa string = "ja"
	LocaleZh string = "zh"
)

const (
	StatsTypeDaily string = "daily"
	StatsTypeMonth string = "month"
)

const (
	StatusPending  string = "0"
	StatusPass     string = "2"
	StatusCancel   string = "3"
	StatusWithdraw string = "4"
)

/**生成数据类型 **/

type ApprovalInfo struct {
	ApprovalId   *string `json:"approval_id,omitempty"`
	ApprovalType *string `json:"approval_type,omitempty"`
	Status       *int    `json:"status,omitempty"`
}

type Area struct {
	Type   *string       `json:"type,omitempty"`
	Center *Coordinate   `json:"center,omitempty"`
	Radius *int64        `json:"radius,omitempty,string"`
	Coords []*Coordinate `json:"coords,omitempty"`
}

type ChildField struct {
	Code     *string `json:"code,omitempty"`
	Title    *string `json:"title,omitempty"`
	TimeUnit *string `json:"time_unit,omitempty"`
}

type ChildItem struct {
	Code       *string `json:"code,omitempty"`
	Value      *string `json:"value,omitempty"`
	Title      *string `json:"title,omitempty"`
	ColumnType *int    `json:"column_type,omitempty"`
	ReadOnly   *bool   `json:"read_only,omitempty"`
	MinValue   *string `json:"min_value,omitempty"`
	MaxValue   *string `json:"max_value,omitempty"`
}

type Coordinate struct {
	Longitude *float64 `json:"longitude,omitempty"`
	Latitude  *float64 `json:"latitude,omitempty"`
	Accuracy  *float64 `json:"accuracy,omitempty"`
}

type Field struct {
	Code        *string       `json:"code,omitempty"`
	Title       *string       `json:"title,omitempty"`
	ChildFields []*ChildField `json:"child_fields,omitempty"`
}

type File struct {
	FileId *string `json:"file_id,omitempty"`
}

type FreePunchCfg struct {
	FreeStartTime        *string `json:"free_start_time,omitempty"`
	FreeEndTime          *string `json:"free_end_time,omitempty"`
	PunchDay             *int    `json:"punch_day,omitempty"`
	WorkDayNoPunchAsLack *bool   `json:"work_day_no_punch_as_lack,omitempty"`
}

type Group struct {
	GroupId                *string                  `json:"group_id,omitempty"`
	GroupName              *string                  `json:"group_name,omitempty"`
	TimeZone               *string                  `json:"time_zone,omitempty"`
	BindDeptIds            []string                 `json:"bind_dept_ids,omitempty"`
	ExceptDeptIds          []string                 `json:"except_dept_ids,omitempty"`
	BindUserIds            []string                 `json:"bind_user_ids,omitempty"`
	ExceptUserIds          []string                 `json:"except_user_ids,omitempty"`
	GroupLeaderIds         []string                 `json:"group_leader_ids,omitempty"`
	AllowOutPunch          *bool                    `json:"allow_out_punch,omitempty"`
	AllowPcPunch           *bool                    `json:"allow_pc_punch,omitempty"`
	AllowRemedy            *bool                    `json:"allow_remedy,omitempty"`
	RemedyLimit            *bool                    `json:"remedy_limit,omitempty"`
	RemedyLimitCount       *int                     `json:"remedy_limit_count,omitempty"`
	RemedyDateLimit        *bool                    `json:"remedy_date_limit,omitempty"`
	RemedyDateNum          *int                     `json:"remedy_date_num,omitempty"`
	ShowCumulativeTime     *bool                    `json:"show_cumulative_time,omitempty"`
	ShowOverTime           *bool                    `json:"show_over_time,omitempty"`
	HideStaffPunchTime     *bool                    `json:"hide_staff_punch_time,omitempty"`
	FacePunch              *bool                    `json:"face_punch,omitempty"`
	FacePunchCfg           *int                     `json:"face_punch_cfg,omitempty"`
	FaceDowngrade          *bool                    `json:"face_downgrade,omitempty"`
	ReplaceBasicPic        *bool                    `json:"replace_basic_pic,omitempty"`
	Machines               []*Machine               `json:"machines,omitempty"`
	GpsRange               *int                     `json:"gps_range,omitempty"`
	Locations              []*Location              `json:"locations,omitempty"`
	GroupType              *int                     `json:"group_type,omitempty"`
	PunchDayShiftIds       []string                 `json:"punch_day_shift_ids,omitempty"`
	FreePunchCfg           *FreePunchCfg            `json:"free_punch_cfg,omitempty"`
	CalendarId             *int                     `json:"calendar_id,omitempty"`
	NeedPunchSpecialDays   []*PunchSpecialDateShift `json:"need_punch_special_days,omitempty"`
	NoNeedPunchSpecialDays []*PunchSpecialDateShift `json:"no_need_punch_special_days,omitempty"`
	WorkDayNoPunchAsLack   *bool                    `json:"work_day_no_punch_as_lack,omitempty"`
	EffectNow              *bool                    `json:"effect_now,omitempty"`
	RemedyPeriodType       *int                     `json:"remedy_period_type,omitempty"`
	RemedyPeriodCustomDate *int                     `json:"remedy_period_custom_date,omitempty"`
	PunchType              *int                     `json:"punch_type,omitempty"`
}

type GroupMeta struct {
	GroupId   *string `json:"group_id,omitempty"`
	GroupName *string `json:"group_name,omitempty"`
}

type I18nNames struct {
	Ch *string `json:"ch,omitempty"`
	En *string `json:"en,omitempty"`
	Ja *string `json:"ja,omitempty"`
}

type Item struct {
	Code       *string      `json:"code,omitempty"`
	Title      *string      `json:"title,omitempty"`
	ChildItems []*ChildItem `json:"child_items,omitempty"`
}

type LateOffLateOnRule struct {
	LateOffMinutes *int `json:"late_off_minutes,omitempty"`
	LateOnMinutes  *int `json:"late_on_minutes,omitempty"`
}

type Location struct {
	LocationId   *string  `json:"location_id,omitempty"`
	LocationName *string  `json:"location_name,omitempty"`
	LocationType *int     `json:"location_type,omitempty"`
	Latitude     *float64 `json:"latitude,omitempty"`
	Longitude    *float64 `json:"longitude,omitempty"`
	Ssid         *string  `json:"ssid,omitempty"`
	Bssid        *string  `json:"bssid,omitempty"`
	MapType      *int     `json:"map_type,omitempty"`
	Address      *string  `json:"address,omitempty"`
	Ip           *string  `json:"ip,omitempty"`
	Feature      *string  `json:"feature,omitempty"`
	GpsRange     *int     `json:"gps_range,omitempty"`
}

type LocationInfo struct {
	Status    *int    `json:"status,omitempty"`
	Geofences []*Area `json:"geofences,omitempty"`
}

type LocationInfoEvent struct {
	Coord *Coordinate `json:"coord,omitempty"`
}

type LocationRecord struct {
	UserId         *UserId            `json:"user_id,omitempty"`
	Timestamp      *string            `json:"timestamp,omitempty"`
	Location       *LocationInfoEvent `json:"location,omitempty"`
	Wifi           *WifiInfoEvent     `json:"wifi,omitempty"`
	RuleSnapshotId *string            `json:"rule_snapshot_id,omitempty"`
	Type           *string            `json:"type,omitempty"`
	ScanWifiList   []*ScanWifiInfo    `json:"scan_wifi_list,omitempty"`
	DeviceId       *string            `json:"device_id,omitempty"`
	ClientInfo     *string            `json:"client_info,omitempty"`
}

type LocationSetting struct {
	Location *LocationInfo `json:"location,omitempty"`
	Wifi     *WifiInfo     `json:"wifi,omitempty"`
	UserId   *string       `json:"user_id,omitempty"`
}

type Machine struct {
	MachineSn   *string `json:"machine_sn,omitempty"`
	MachineName *string `json:"machine_name,omitempty"`
}

type PunchSpecialDateShift struct {
	PunchDay *int    `json:"punch_day,omitempty"`
	ShiftId  *string `json:"shift_id,omitempty"`
}

type PunchTimeRule struct {
	OnTime              *string `json:"on_time,omitempty"`
	OffTime             *string `json:"off_time,omitempty"`
	LateMinutesAsLate   *int    `json:"late_minutes_as_late,omitempty"`
	LateMinutesAsLack   *int    `json:"late_minutes_as_lack,omitempty"`
	OnAdvanceMinutes    *int    `json:"on_advance_minutes,omitempty"`
	EarlyMinutesAsEarly *int    `json:"early_minutes_as_early,omitempty"`
	EarlyMinutesAsLack  *int    `json:"early_minutes_as_lack,omitempty"`
	OffDelayMinutes     *int    `json:"off_delay_minutes,omitempty"`
}

type RestRule struct {
	RestBeginTime *string `json:"rest_begin_time,omitempty"`
	RestEndTime   *string `json:"rest_end_time,omitempty"`
}

type ScanWifiInfo struct {
	Ssid  *string `json:"ssid,omitempty"`
	Bssid *string `json:"bssid,omitempty"`
}

type Schedule struct {
	GroupId *string  `json:"group_id,omitempty"`
	Shifts  []string `json:"shifts,omitempty"`
}

type Shift struct {
	ShiftId           *string              `json:"shift_id,omitempty"`
	ShiftName         *string              `json:"shift_name,omitempty"`
	PunchTimes        *int                 `json:"punch_times,omitempty"`
	IsFlexible        *bool                `json:"is_flexible,omitempty"`
	FlexibleMinutes   *int                 `json:"flexible_minutes,omitempty"`
	NoNeedOff         *bool                `json:"no_need_off,omitempty"`
	PunchTimeRule     []*PunchTimeRule     `json:"punch_time_rule,omitempty"`
	LateOffLateOnRule []*LateOffLateOnRule `json:"late_off_late_on_rule,omitempty"`
	RestTimeRule      []*RestRule          `json:"rest_time_rule,omitempty"`
}

type StatusChange struct {
	Index             *int    `json:"index,omitempty"`
	BeforeStatus      *string `json:"before_status,omitempty"`
	CurrentStatus     *string `json:"current_status,omitempty"`
	BeforeSupplement  *string `json:"before_supplement,omitempty"`
	CurrentSupplement *string `json:"current_supplement,omitempty"`
	WorkType          *string `json:"work_type,omitempty"`
}

type TaskResult struct {
	CheckInRecordId          *string   `json:"check_in_record_id,omitempty"`
	CheckInRecord            *UserFlow `json:"check_in_record,omitempty"`
	CheckOutRecordId         *string   `json:"check_out_record_id,omitempty"`
	CheckOutRecord           *UserFlow `json:"check_out_record,omitempty"`
	CheckInResult            *string   `json:"check_in_result,omitempty"`
	CheckOutResult           *string   `json:"check_out_result,omitempty"`
	CheckInResultSupplement  *string   `json:"check_in_result_supplement,omitempty"`
	CheckOutResultSupplement *string   `json:"check_out_result_supplement,omitempty"`
	CheckInShiftTime         *string   `json:"check_in_shift_time,omitempty"`
	CheckOutShiftTime        *string   `json:"check_out_shift_time,omitempty"`
}

type UserAllowedRemedy struct {
	UserId          *string `json:"user_id,omitempty"`
	RemedyDate      *int    `json:"remedy_date,omitempty"`
	IsFreePunch     *bool   `json:"is_free_punch,omitempty"`
	PunchNo         *int    `json:"punch_no,omitempty"`
	WorkType        *int    `json:"work_type,omitempty"`
	PunchStatus     *string `json:"punch_status,omitempty"`
	NormalPunchTime *string `json:"normal_punch_time,omitempty"`
	RemedyStartTime *string `json:"remedy_start_time,omitempty"`
	RemedyEndTime   *string `json:"remedy_end_time,omitempty"`
}

type UserApproval struct {
	UserId        *string             `json:"user_id,omitempty"`
	Date          *string             `json:"date,omitempty"`
	Outs          []*UserOut          `json:"outs,omitempty"`
	Leaves        []*UserLeave        `json:"leaves,omitempty"`
	OvertimeWorks []*UserOvertimeWork `json:"overtime_works,omitempty"`
	Trips         []*UserTrip         `json:"trips,omitempty"`
}

type UserDailyShift struct {
	GroupId *string `json:"group_id,omitempty"`
	ShiftId *string `json:"shift_id,omitempty"`
	Month   *int    `json:"month,omitempty"`
	UserId  *string `json:"user_id,omitempty"`
	DayNo   *int    `json:"day_no,omitempty"`
}

type UserFlow struct {
	UserId       *string  `json:"user_id,omitempty"`
	CreatorId    *string  `json:"creator_id,omitempty"`
	LocationName *string  `json:"location_name,omitempty"`
	CheckTime    *string  `json:"check_time,omitempty"`
	Comment      *string  `json:"comment,omitempty"`
	RecordId     *string  `json:"record_id,omitempty"`
	Longitude    *float64 `json:"longitude,omitempty"`
	Latitude     *float64 `json:"latitude,omitempty"`
	Ssid         *string  `json:"ssid,omitempty"`
	Bssid        *string  `json:"bssid,omitempty"`
	IsField      *bool    `json:"is_field,omitempty"`
	IsWifi       *bool    `json:"is_wifi,omitempty"`
	Type         *int     `json:"type,omitempty"`
	PhotoUrls    []string `json:"photo_urls,omitempty"`
	DeviceId     *string  `json:"device_id,omitempty"`
	CheckResult  *string  `json:"check_result,omitempty"`
}

type UserId struct {
	UserId  *string `json:"user_id,omitempty"`
	OpenId  *string `json:"open_id,omitempty"`
	UnionId *string `json:"union_id,omitempty"`
}

type UserLeave struct {
	ApprovalId       *string    `json:"approval_id,omitempty"`
	UniqId           *string    `json:"uniq_id,omitempty"`
	Unit             *int       `json:"unit,omitempty"`
	Interval         *int       `json:"interval,omitempty"`
	StartTime        *string    `json:"start_time,omitempty"`
	EndTime          *string    `json:"end_time,omitempty"`
	I18nNames        *I18nNames `json:"i18n_names,omitempty"`
	DefaultLocale    *string    `json:"default_locale,omitempty"`
	Reason           *string    `json:"reason,omitempty"`
	ApprovePassTime  *string    `json:"approve_pass_time,omitempty"`
	ApproveApplyTime *string    `json:"approve_apply_time,omitempty"`
}

type UserOut struct {
	ApprovalId       *string    `json:"approval_id,omitempty"`
	UniqId           *string    `json:"uniq_id,omitempty"`
	Unit             *int       `json:"unit,omitempty"`
	Interval         *int       `json:"interval,omitempty"`
	StartTime        *string    `json:"start_time,omitempty"`
	EndTime          *string    `json:"end_time,omitempty"`
	I18nNames        *I18nNames `json:"i18n_names,omitempty"`
	DefaultLocale    *string    `json:"default_locale,omitempty"`
	Reason           *string    `json:"reason,omitempty"`
	ApprovePassTime  *string    `json:"approve_pass_time,omitempty"`
	ApproveApplyTime *string    `json:"approve_apply_time,omitempty"`
}

type UserOvertimeWork struct {
	ApprovalId *string  `json:"approval_id,omitempty"`
	Duration   *float64 `json:"duration,omitempty"`
	Unit       *int     `json:"unit,omitempty"`
	Category   *int     `json:"category,omitempty"`
	Type       *int     `json:"type,omitempty"`
	StartTime  *string  `json:"start_time,omitempty"`
	EndTime    *string  `json:"end_time,omitempty"`
}

type UserSetting struct {
	UserId            *string `json:"user_id,omitempty"`
	FaceKey           *string `json:"face_key,omitempty"`
	FaceKeyUpdateTime *string `json:"face_key_update_time,omitempty"`
}

type UserStatsData struct {
	Name   *string              `json:"name,omitempty"`
	UserId *string              `json:"user_id,omitempty"`
	Datas  []*UserStatsDataCell `json:"datas,omitempty"`
}

type UserStatsDataCell struct {
	Code     *string                 `json:"code,omitempty"`
	Value    *string                 `json:"value,omitempty"`
	Features []*UserStatsDataFeature `json:"features,omitempty"`
}

type UserStatsDataFeature struct {
	Key   *string `json:"key,omitempty"`
	Value *string `json:"value,omitempty"`
}

type UserStatsField struct {
	StatsType *string  `json:"stats_type,omitempty"`
	UserId    *string  `json:"user_id,omitempty"`
	Fields    []*Field `json:"fields,omitempty"`
}

type UserStatsView struct {
	ViewId    *string `json:"view_id,omitempty"`
	StatsType *string `json:"stats_type,omitempty"`
	UserId    *string `json:"user_id,omitempty"`
	Items     []*Item `json:"items,omitempty"`
}

type UserTask struct {
	ResultId     *string       `json:"result_id,omitempty"`
	UserId       *string       `json:"user_id,omitempty"`
	EmployeeName *string       `json:"employee_name,omitempty"`
	Day          *int          `json:"day,omitempty"`
	GroupId      *string       `json:"group_id,omitempty"`
	ShiftId      *string       `json:"shift_id,omitempty"`
	Records      []*TaskResult `json:"records,omitempty"`
}

type UserTaskRemedy struct {
	UserId     *string `json:"user_id,omitempty"`
	RemedyDate *int    `json:"remedy_date,omitempty"`
	PunchNo    *int    `json:"punch_no,omitempty"`
	WorkType   *int    `json:"work_type,omitempty"`
	ApprovalId *string `json:"approval_id,omitempty"`
	RemedyTime *string `json:"remedy_time,omitempty"`
	Status     *int    `json:"status,omitempty"`
	Reason     *string `json:"reason,omitempty"`
	Time       *string `json:"time,omitempty"`
	TimeZone   *string `json:"time_zone,omitempty"`
	CreateTime *string `json:"create_time,omitempty"`
	UpdateTime *string `json:"update_time,omitempty"`
}

type UserTrip struct {
	ApprovalId       *string `json:"approval_id,omitempty"`
	StartTime        *string `json:"start_time,omitempty"`
	EndTime          *string `json:"end_time,omitempty"`
	Reason           *string `json:"reason,omitempty"`
	ApprovePassTime  *string `json:"approve_pass_time,omitempty"`
	ApproveApplyTime *string `json:"approve_apply_time,omitempty"`
}

type WifiInfo struct {
	Status *int `json:"status,omitempty"`
}

type WifiInfoEvent struct {
	Ssid      *string `json:"ssid,omitempty"`
	Bssid     *string `json:"bssid,omitempty"`
	Lastssid  *string `json:"lastssid,omitempty"`
	Lastbssid *string `json:"lastbssid,omitempty"`
}

/**生成请求和响应结果类型，以及请求对象的Builder构造器 **/

type ProcessApprovalInfoReqBodyBuilder struct {
	approvalId       string
	approvalIdFlag   bool
	approvalType     string
	approvalTypeFlag bool
	status           int
	statusFlag       bool
}

// 生成body的New构造器
func NewProcessApprovalInfoReqBodyBuilder() *ProcessApprovalInfoReqBodyBuilder {
	builder := &ProcessApprovalInfoReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *ProcessApprovalInfoReqBodyBuilder) ApprovalId(approvalId string) *ProcessApprovalInfoReqBodyBuilder {
	builder.approvalId = approvalId
	builder.approvalIdFlag = true
	return builder
}
func (builder *ProcessApprovalInfoReqBodyBuilder) ApprovalType(approvalType string) *ProcessApprovalInfoReqBodyBuilder {
	builder.approvalType = approvalType
	builder.approvalTypeFlag = true
	return builder
}
func (builder *ProcessApprovalInfoReqBodyBuilder) Status(status int) *ProcessApprovalInfoReqBodyBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *ProcessApprovalInfoReqBodyBuilder) Build() *ProcessApprovalInfoReqBody {
	req := &ProcessApprovalInfoReqBody{}
	if builder.approvalIdFlag {
		req.ApprovalId = &builder.approvalId

	}
	if builder.approvalTypeFlag {
		req.ApprovalType = &builder.approvalType

	}
	if builder.statusFlag {
		req.Status = &builder.status

	}
	return req
}

/**上传文件path开始**/
type ProcessApprovalInfoPathReqBodyBuilder struct {
	approvalId       string
	approvalIdFlag   bool
	approvalType     string
	approvalTypeFlag bool
	status           int
	statusFlag       bool
}

func NewProcessApprovalInfoPathReqBodyBuilder() *ProcessApprovalInfoPathReqBodyBuilder {
	builder := &ProcessApprovalInfoPathReqBodyBuilder{}
	return builder
}
func (builder *ProcessApprovalInfoPathReqBodyBuilder) ApprovalId(approvalId string) *ProcessApprovalInfoPathReqBodyBuilder {
	builder.approvalId = approvalId
	builder.approvalIdFlag = true
	return builder
}
func (builder *ProcessApprovalInfoPathReqBodyBuilder) ApprovalType(approvalType string) *ProcessApprovalInfoPathReqBodyBuilder {
	builder.approvalType = approvalType
	builder.approvalTypeFlag = true
	return builder
}
func (builder *ProcessApprovalInfoPathReqBodyBuilder) Status(status int) *ProcessApprovalInfoPathReqBodyBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}

func (builder *ProcessApprovalInfoPathReqBodyBuilder) Build() (*ProcessApprovalInfoReqBody, error) {
	req := &ProcessApprovalInfoReqBody{}
	if builder.approvalIdFlag {
		req.ApprovalId = &builder.approvalId

	}
	if builder.approvalTypeFlag {
		req.ApprovalType = &builder.approvalType

	}
	if builder.statusFlag {
		req.Status = &builder.status

	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type ProcessApprovalInfoReqBuilder struct {
	body     *ProcessApprovalInfoReqBody
	bodyFlag bool
}

// 生成请求的New构造器
func NewProcessApprovalInfoReqBuilder() *ProcessApprovalInfoReqBuilder {
	builder := &ProcessApprovalInfoReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *ProcessApprovalInfoReqBuilder) Body(body *ProcessApprovalInfoReqBody) *ProcessApprovalInfoReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *ProcessApprovalInfoReqBuilder) Build() *ProcessApprovalInfoReq {
	req := &ProcessApprovalInfoReq{}
	if builder.bodyFlag {
		req.Body = builder.body
	}
	return req
}

type ProcessApprovalInfoReqBody struct {
	ApprovalId   *string `json:"approval_id,omitempty"`
	ApprovalType *string `json:"approval_type,omitempty"`
	Status       *int    `json:"status,omitempty"`
}

type ProcessApprovalInfoReq struct {
	Body *ProcessApprovalInfoReqBody `body:""`
}

type ProcessApprovalInfoRespData struct {
	ApprovalInfo *ApprovalInfo `json:"approval_info,omitempty"`
}

type ProcessApprovalInfoResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *ProcessApprovalInfoRespData `json:"data"`
}

func (resp *ProcessApprovalInfoResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type DownloadFileReqBuilder struct {
	fileId     string
	fileIdFlag bool
}

// 生成请求的New构造器
func NewDownloadFileReqBuilder() *DownloadFileReqBuilder {
	builder := &DownloadFileReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *DownloadFileReqBuilder) FileId(fileId string) *DownloadFileReqBuilder {
	builder.fileId = fileId
	builder.fileIdFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *DownloadFileReqBuilder) Build() *DownloadFileReq {
	req := &DownloadFileReq{}
	if builder.fileIdFlag {
		req.FileId = builder.fileId
	}
	return req
}

type DownloadFileReq struct {
	FileId string `path:"file_id"`
}

type DownloadFileResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	File     io.Reader `json:"-"`
	FileName string    `json:"-"`
}

func (resp *DownloadFileResp) Success() bool {
	return resp.Code == 0
}

/**下载api,生成WriteFile方法**/
func (resp *DownloadFileResp) WriteFile(fileName string) error {
	bs, err := ioutil.ReadAll(resp.File)
	if err != nil {
		return err
	}

	err = ioutil.WriteFile(fileName, bs, 0666)
	if err != nil {
		return err
	}
	return nil
}

type UploadFileReqBodyBuilder struct {
	file     io.Reader
	fileFlag bool
}

// 生成body的New构造器
func NewUploadFileReqBodyBuilder() *UploadFileReqBodyBuilder {
	builder := &UploadFileReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *UploadFileReqBodyBuilder) File(file io.Reader) *UploadFileReqBodyBuilder {
	builder.file = file
	builder.fileFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *UploadFileReqBodyBuilder) Build() *UploadFileReqBody {
	req := &UploadFileReqBody{}
	if builder.fileFlag {
		req.File = builder.file

	}
	return req
}

/**上传文件path开始**/
type UploadFilePathReqBodyBuilder struct {
	filePath     string
	filePathFlag bool
}

func NewUploadFilePathReqBodyBuilder() *UploadFilePathReqBodyBuilder {
	builder := &UploadFilePathReqBodyBuilder{}
	return builder
}
func (builder *UploadFilePathReqBodyBuilder) FilePath(filePath string) *UploadFilePathReqBodyBuilder {
	builder.filePath = filePath
	builder.filePathFlag = true
	return builder
}

func (builder *UploadFilePathReqBodyBuilder) Build() (*UploadFileReqBody, error) {
	req := &UploadFileReqBody{}
	if builder.filePathFlag {
		data, err := core.File2Bytes(builder.filePath)
		if err != nil {
			return nil, err
		}
		req.File = bytes.NewBuffer(data)
	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type UploadFileReqBuilder struct {
	fileName     string
	fileNameFlag bool
	body         *UploadFileReqBody
	bodyFlag     bool
}

// 生成请求的New构造器
func NewUploadFileReqBuilder() *UploadFileReqBuilder {
	builder := &UploadFileReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *UploadFileReqBuilder) FileName(fileName string) *UploadFileReqBuilder {
	builder.fileName = fileName
	builder.fileNameFlag = true
	return builder
}
func (builder *UploadFileReqBuilder) Body(body *UploadFileReqBody) *UploadFileReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *UploadFileReqBuilder) Build() *UploadFileReq {
	req := &UploadFileReq{}
	if builder.fileNameFlag {
		req.FileName = &builder.fileName
	}
	if builder.bodyFlag {
		req.Body = builder.body
	}
	return req
}

type UploadFileReqBody struct {
	File io.Reader `json:"file,omitempty"`
}

type UploadFileReq struct {
	FileName *string            `query:"file_name"`
	Body     *UploadFileReqBody `body:""`
}

type UploadFileRespData struct {
	File *File `json:"file,omitempty"`
}

type UploadFileResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *UploadFileRespData `json:"data"`
}

func (resp *UploadFileResp) Success() bool {
	return resp.Code == 0
}

type CreateGroupReqBodyBuilder struct {
	group     *Group
	groupFlag bool
}

// 生成body的New构造器
func NewCreateGroupReqBodyBuilder() *CreateGroupReqBodyBuilder {
	builder := &CreateGroupReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *CreateGroupReqBodyBuilder) Group(group *Group) *CreateGroupReqBodyBuilder {
	builder.group = group
	builder.groupFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *CreateGroupReqBodyBuilder) Build() *CreateGroupReqBody {
	req := &CreateGroupReqBody{}
	if builder.groupFlag {
		req.Group = builder.group

	}
	return req
}

/**上传文件path开始**/
type CreateGroupPathReqBodyBuilder struct {
	group     *Group
	groupFlag bool
}

func NewCreateGroupPathReqBodyBuilder() *CreateGroupPathReqBodyBuilder {
	builder := &CreateGroupPathReqBodyBuilder{}
	return builder
}
func (builder *CreateGroupPathReqBodyBuilder) Group(group *Group) *CreateGroupPathReqBodyBuilder {
	builder.group = group
	builder.groupFlag = true
	return builder
}

func (builder *CreateGroupPathReqBodyBuilder) Build() (*CreateGroupReqBody, error) {
	req := &CreateGroupReqBody{}
	if builder.groupFlag {
		req.Group = builder.group
	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type CreateGroupReqBuilder struct {
	employeeType     string
	employeeTypeFlag bool
	deptType         string
	deptTypeFlag     bool
	body             *CreateGroupReqBody
	bodyFlag         bool
}

// 生成请求的New构造器
func NewCreateGroupReqBuilder() *CreateGroupReqBuilder {
	builder := &CreateGroupReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *CreateGroupReqBuilder) EmployeeType(employeeType string) *CreateGroupReqBuilder {
	builder.employeeType = employeeType
	builder.employeeTypeFlag = true
	return builder
}
func (builder *CreateGroupReqBuilder) DeptType(deptType string) *CreateGroupReqBuilder {
	builder.deptType = deptType
	builder.deptTypeFlag = true
	return builder
}
func (builder *CreateGroupReqBuilder) Body(body *CreateGroupReqBody) *CreateGroupReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *CreateGroupReqBuilder) Build() *CreateGroupReq {
	req := &CreateGroupReq{}
	if builder.employeeTypeFlag {
		req.EmployeeType = &builder.employeeType
	}
	if builder.deptTypeFlag {
		req.DeptType = &builder.deptType
	}
	if builder.bodyFlag {
		req.Body = builder.body
	}
	return req
}

type CreateGroupReqBody struct {
	Group *Group `json:"group,omitempty"`
}

type CreateGroupReq struct {
	EmployeeType *string             `query:"employee_type"`
	DeptType     *string             `query:"dept_type"`
	Body         *CreateGroupReqBody `body:""`
}

type CreateGroupRespData struct {
	Group *Group `json:"group,omitempty"`
}

type CreateGroupResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *CreateGroupRespData `json:"data"`
}

func (resp *CreateGroupResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type DeleteGroupReqBuilder struct {
	groupId     string
	groupIdFlag bool
}

// 生成请求的New构造器
func NewDeleteGroupReqBuilder() *DeleteGroupReqBuilder {
	builder := &DeleteGroupReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *DeleteGroupReqBuilder) GroupId(groupId string) *DeleteGroupReqBuilder {
	builder.groupId = groupId
	builder.groupIdFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *DeleteGroupReqBuilder) Build() *DeleteGroupReq {
	req := &DeleteGroupReq{}
	if builder.groupIdFlag {
		req.GroupId = builder.groupId
	}
	return req
}

type DeleteGroupReq struct {
	GroupId string `path:"group_id"`
}

type DeleteGroupResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *DeleteGroupResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type GetGroupReqBuilder struct {
	groupId          string
	groupIdFlag      bool
	employeeType     string
	employeeTypeFlag bool
	deptType         string
	deptTypeFlag     bool
}

// 生成请求的New构造器
func NewGetGroupReqBuilder() *GetGroupReqBuilder {
	builder := &GetGroupReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *GetGroupReqBuilder) GroupId(groupId string) *GetGroupReqBuilder {
	builder.groupId = groupId
	builder.groupIdFlag = true
	return builder
}
func (builder *GetGroupReqBuilder) EmployeeType(employeeType string) *GetGroupReqBuilder {
	builder.employeeType = employeeType
	builder.employeeTypeFlag = true
	return builder
}
func (builder *GetGroupReqBuilder) DeptType(deptType string) *GetGroupReqBuilder {
	builder.deptType = deptType
	builder.deptTypeFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *GetGroupReqBuilder) Build() *GetGroupReq {
	req := &GetGroupReq{}
	if builder.groupIdFlag {
		req.GroupId = builder.groupId
	}
	if builder.employeeTypeFlag {
		req.EmployeeType = &builder.employeeType
	}
	if builder.deptTypeFlag {
		req.DeptType = &builder.deptType
	}
	return req
}

type GetGroupReq struct {
	GroupId      string  `path:"group_id"`
	EmployeeType *string `query:"employee_type"`
	DeptType     *string `query:"dept_type"`
}

type GetGroupRespData struct {
	GroupId                *string                  `json:"group_id,omitempty"`
	GroupName              *string                  `json:"group_name,omitempty"`
	TimeZone               *string                  `json:"time_zone,omitempty"`
	BindDeptIds            []string                 `json:"bind_dept_ids,omitempty"`
	ExceptDeptIds          []string                 `json:"except_dept_ids,omitempty"`
	BindUserIds            []string                 `json:"bind_user_ids,omitempty"`
	ExceptUserIds          []string                 `json:"except_user_ids,omitempty"`
	GroupLeaderIds         []string                 `json:"group_leader_ids,omitempty"`
	AllowOutPunch          *bool                    `json:"allow_out_punch,omitempty"`
	AllowPcPunch           *bool                    `json:"allow_pc_punch,omitempty"`
	AllowRemedy            *bool                    `json:"allow_remedy,omitempty"`
	RemedyLimit            *bool                    `json:"remedy_limit,omitempty"`
	RemedyLimitCount       *int                     `json:"remedy_limit_count,omitempty"`
	RemedyDateLimit        *bool                    `json:"remedy_date_limit,omitempty"`
	RemedyDateNum          *int                     `json:"remedy_date_num,omitempty"`
	ShowCumulativeTime     *bool                    `json:"show_cumulative_time,omitempty"`
	ShowOverTime           *bool                    `json:"show_over_time,omitempty"`
	HideStaffPunchTime     *bool                    `json:"hide_staff_punch_time,omitempty"`
	FacePunch              *bool                    `json:"face_punch,omitempty"`
	FacePunchCfg           *int                     `json:"face_punch_cfg,omitempty"`
	FaceDowngrade          *bool                    `json:"face_downgrade,omitempty"`
	ReplaceBasicPic        *bool                    `json:"replace_basic_pic,omitempty"`
	Machines               []*Machine               `json:"machines,omitempty"`
	GpsRange               *int                     `json:"gps_range,omitempty"`
	Locations              []*Location              `json:"locations,omitempty"`
	GroupType              *int                     `json:"group_type,omitempty"`
	PunchDayShiftIds       []string                 `json:"punch_day_shift_ids,omitempty"`
	FreePunchCfg           *FreePunchCfg            `json:"free_punch_cfg,omitempty"`
	CalendarId             *int                     `json:"calendar_id,omitempty"`
	NeedPunchSpecialDays   []*PunchSpecialDateShift `json:"need_punch_special_days,omitempty"`
	NoNeedPunchSpecialDays []*PunchSpecialDateShift `json:"no_need_punch_special_days,omitempty"`
	WorkDayNoPunchAsLack   *bool                    `json:"work_day_no_punch_as_lack,omitempty"`
	EffectNow              *bool                    `json:"effect_now,omitempty"`
	RemedyPeriodType       *int                     `json:"remedy_period_type,omitempty"`
	RemedyPeriodCustomDate *int                     `json:"remedy_period_custom_date,omitempty"`
	PunchType              *int                     `json:"punch_type,omitempty"`
}

type GetGroupResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *GetGroupRespData `json:"data"`
}

func (resp *GetGroupResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type ListGroupReqBuilder struct {
	pageSize      int
	pageSizeFlag  bool
	pageToken     string
	pageTokenFlag bool
	limit         int
}

// 生成请求的New构造器
func NewListGroupReqBuilder() *ListGroupReqBuilder {
	builder := &ListGroupReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *ListGroupReqBuilder) Limit(limit int) *ListGroupReqBuilder {
	builder.limit = limit
	return builder
}
func (builder *ListGroupReqBuilder) PageSize(pageSize int) *ListGroupReqBuilder {
	builder.pageSize = pageSize
	builder.pageSizeFlag = true
	return builder
}
func (builder *ListGroupReqBuilder) PageToken(pageToken string) *ListGroupReqBuilder {
	builder.pageToken = pageToken
	builder.pageTokenFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *ListGroupReqBuilder) Build() *ListGroupReq {
	req := &ListGroupReq{}
	req.Limit = builder.limit
	if builder.pageSizeFlag {
		req.PageSize = &builder.pageSize
	}
	if builder.pageTokenFlag {
		req.PageToken = &builder.pageToken
	}
	return req
}

type ListGroupReq struct {
	PageSize  *int    `query:"page_size"`
	PageToken *string `query:"page_token"`
	Limit     int
}

type ListGroupRespData struct {
	GroupList []*GroupMeta `json:"group_list,omitempty"`
	PageToken *string      `json:"page_token,omitempty"`
	HasMore   *bool        `json:"has_more,omitempty"`
}

type ListGroupResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *ListGroupRespData `json:"data"`
}

func (resp *ListGroupResp) Success() bool {
	return resp.Code == 0
}

type SearchGroupReqBodyBuilder struct {
	groupName          string
	groupNameFlag      bool
	exactlyMatched     bool
	exactlyMatchedFlag bool
}

// 生成body的New构造器
func NewSearchGroupReqBodyBuilder() *SearchGroupReqBodyBuilder {
	builder := &SearchGroupReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *SearchGroupReqBodyBuilder) GroupName(groupName string) *SearchGroupReqBodyBuilder {
	builder.groupName = groupName
	builder.groupNameFlag = true
	return builder
}
func (builder *SearchGroupReqBodyBuilder) ExactlyMatched(exactlyMatched bool) *SearchGroupReqBodyBuilder {
	builder.exactlyMatched = exactlyMatched
	builder.exactlyMatchedFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *SearchGroupReqBodyBuilder) Build() *SearchGroupReqBody {
	req := &SearchGroupReqBody{}
	if builder.groupNameFlag {
		req.GroupName = &builder.groupName

	}
	if builder.exactlyMatchedFlag {
		req.ExactlyMatched = &builder.exactlyMatched

	}
	return req
}

/**上传文件path开始**/
type SearchGroupPathReqBodyBuilder struct {
	groupName          string
	groupNameFlag      bool
	exactlyMatched     bool
	exactlyMatchedFlag bool
}

func NewSearchGroupPathReqBodyBuilder() *SearchGroupPathReqBodyBuilder {
	builder := &SearchGroupPathReqBodyBuilder{}
	return builder
}
func (builder *SearchGroupPathReqBodyBuilder) GroupName(groupName string) *SearchGroupPathReqBodyBuilder {
	builder.groupName = groupName
	builder.groupNameFlag = true
	return builder
}
func (builder *SearchGroupPathReqBodyBuilder) ExactlyMatched(exactlyMatched bool) *SearchGroupPathReqBodyBuilder {
	builder.exactlyMatched = exactlyMatched
	builder.exactlyMatchedFlag = true
	return builder
}

func (builder *SearchGroupPathReqBodyBuilder) Build() (*SearchGroupReqBody, error) {
	req := &SearchGroupReqBody{}
	if builder.groupNameFlag {
		req.GroupName = &builder.groupName

	}
	if builder.exactlyMatchedFlag {
		req.ExactlyMatched = &builder.exactlyMatched

	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type SearchGroupReqBuilder struct {
	body     *SearchGroupReqBody
	bodyFlag bool
}

// 生成请求的New构造器
func NewSearchGroupReqBuilder() *SearchGroupReqBuilder {
	builder := &SearchGroupReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *SearchGroupReqBuilder) Body(body *SearchGroupReqBody) *SearchGroupReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *SearchGroupReqBuilder) Build() *SearchGroupReq {
	req := &SearchGroupReq{}
	if builder.bodyFlag {
		req.Body = builder.body
	}
	return req
}

type SearchGroupReqBody struct {
	GroupName      *string `json:"group_name,omitempty"`
	ExactlyMatched *bool   `json:"exactly_matched,omitempty"`
}

type SearchGroupReq struct {
	Body *SearchGroupReqBody `body:""`
}

type SearchGroupRespData struct {
	GroupList []*GroupMeta `json:"group_list,omitempty"`
}

type SearchGroupResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *SearchGroupRespData `json:"data"`
}

func (resp *SearchGroupResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type CreateShiftReqBuilder struct {
	shift     *Shift
	shiftFlag bool
}

// 生成请求的New构造器
func NewCreateShiftReqBuilder() *CreateShiftReqBuilder {
	builder := &CreateShiftReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *CreateShiftReqBuilder) Shift(shift *Shift) *CreateShiftReqBuilder {
	builder.shift = shift
	builder.shiftFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *CreateShiftReqBuilder) Build() *CreateShiftReq {
	req := &CreateShiftReq{}
	if builder.shiftFlag {
		req.Shift = builder.shift
	}
	return req
}

type CreateShiftReq struct {
	Shift *Shift `body:""`
}

type CreateShiftRespData struct {
	Shift *Shift `json:"shift,omitempty"`
}

type CreateShiftResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *CreateShiftRespData `json:"data"`
}

func (resp *CreateShiftResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type DeleteShiftReqBuilder struct {
	shiftId     string
	shiftIdFlag bool
}

// 生成请求的New构造器
func NewDeleteShiftReqBuilder() *DeleteShiftReqBuilder {
	builder := &DeleteShiftReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *DeleteShiftReqBuilder) ShiftId(shiftId string) *DeleteShiftReqBuilder {
	builder.shiftId = shiftId
	builder.shiftIdFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *DeleteShiftReqBuilder) Build() *DeleteShiftReq {
	req := &DeleteShiftReq{}
	if builder.shiftIdFlag {
		req.ShiftId = builder.shiftId
	}
	return req
}

type DeleteShiftReq struct {
	ShiftId string `path:"shift_id"`
}

type DeleteShiftResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *DeleteShiftResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type GetShiftReqBuilder struct {
	shiftId     string
	shiftIdFlag bool
}

// 生成请求的New构造器
func NewGetShiftReqBuilder() *GetShiftReqBuilder {
	builder := &GetShiftReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *GetShiftReqBuilder) ShiftId(shiftId string) *GetShiftReqBuilder {
	builder.shiftId = shiftId
	builder.shiftIdFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *GetShiftReqBuilder) Build() *GetShiftReq {
	req := &GetShiftReq{}
	if builder.shiftIdFlag {
		req.ShiftId = builder.shiftId
	}
	return req
}

type GetShiftReq struct {
	ShiftId string `path:"shift_id"`
}

type GetShiftRespData struct {
	ShiftId           *string              `json:"shift_id,omitempty"`
	ShiftName         *string              `json:"shift_name,omitempty"`
	PunchTimes        *int                 `json:"punch_times,omitempty"`
	IsFlexible        *bool                `json:"is_flexible,omitempty"`
	FlexibleMinutes   *int                 `json:"flexible_minutes,omitempty"`
	NoNeedOff         *bool                `json:"no_need_off,omitempty"`
	PunchTimeRule     []*PunchTimeRule     `json:"punch_time_rule,omitempty"`
	LateOffLateOnRule []*LateOffLateOnRule `json:"late_off_late_on_rule,omitempty"`
	RestTimeRule      []*RestRule          `json:"rest_time_rule,omitempty"`
}

type GetShiftResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *GetShiftRespData `json:"data"`
}

func (resp *GetShiftResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type ListShiftReqBuilder struct {
	pageSize      int
	pageSizeFlag  bool
	pageToken     string
	pageTokenFlag bool
	limit         int
}

// 生成请求的New构造器
func NewListShiftReqBuilder() *ListShiftReqBuilder {
	builder := &ListShiftReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *ListShiftReqBuilder) Limit(limit int) *ListShiftReqBuilder {
	builder.limit = limit
	return builder
}
func (builder *ListShiftReqBuilder) PageSize(pageSize int) *ListShiftReqBuilder {
	builder.pageSize = pageSize
	builder.pageSizeFlag = true
	return builder
}
func (builder *ListShiftReqBuilder) PageToken(pageToken string) *ListShiftReqBuilder {
	builder.pageToken = pageToken
	builder.pageTokenFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *ListShiftReqBuilder) Build() *ListShiftReq {
	req := &ListShiftReq{}
	req.Limit = builder.limit
	if builder.pageSizeFlag {
		req.PageSize = &builder.pageSize
	}
	if builder.pageTokenFlag {
		req.PageToken = &builder.pageToken
	}
	return req
}

type ListShiftReq struct {
	PageSize  *int    `query:"page_size"`
	PageToken *string `query:"page_token"`
	Limit     int
}

type ListShiftRespData struct {
	ShiftList []*Shift `json:"shift_list,omitempty"`
	PageToken *string  `json:"page_token,omitempty"`
	HasMore   *bool    `json:"has_more,omitempty"`
}

type ListShiftResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *ListShiftRespData `json:"data"`
}

func (resp *ListShiftResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type QueryShiftReqBuilder struct {
	shiftName     string
	shiftNameFlag bool
}

// 生成请求的New构造器
func NewQueryShiftReqBuilder() *QueryShiftReqBuilder {
	builder := &QueryShiftReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *QueryShiftReqBuilder) ShiftName(shiftName string) *QueryShiftReqBuilder {
	builder.shiftName = shiftName
	builder.shiftNameFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *QueryShiftReqBuilder) Build() *QueryShiftReq {
	req := &QueryShiftReq{}
	if builder.shiftNameFlag {
		req.ShiftName = &builder.shiftName
	}
	return req
}

type QueryShiftReq struct {
	ShiftName *string `query:"shift_name"`
}

type QueryShiftRespData struct {
	ShiftId           *string              `json:"shift_id,omitempty"`
	ShiftName         *string              `json:"shift_name,omitempty"`
	PunchTimes        *int                 `json:"punch_times,omitempty"`
	IsFlexible        *bool                `json:"is_flexible,omitempty"`
	FlexibleMinutes   *int                 `json:"flexible_minutes,omitempty"`
	NoNeedOff         *bool                `json:"no_need_off,omitempty"`
	PunchTimeRule     []*PunchTimeRule     `json:"punch_time_rule,omitempty"`
	LateOffLateOnRule []*LateOffLateOnRule `json:"late_off_late_on_rule,omitempty"`
	RestTimeRule      []*RestRule          `json:"rest_time_rule,omitempty"`
}

type QueryShiftResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *QueryShiftRespData `json:"data"`
}

func (resp *QueryShiftResp) Success() bool {
	return resp.Code == 0
}

type CreateUserApprovalReqBodyBuilder struct {
	userApproval     *UserApproval
	userApprovalFlag bool
}

// 生成body的New构造器
func NewCreateUserApprovalReqBodyBuilder() *CreateUserApprovalReqBodyBuilder {
	builder := &CreateUserApprovalReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *CreateUserApprovalReqBodyBuilder) UserApproval(userApproval *UserApproval) *CreateUserApprovalReqBodyBuilder {
	builder.userApproval = userApproval
	builder.userApprovalFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *CreateUserApprovalReqBodyBuilder) Build() *CreateUserApprovalReqBody {
	req := &CreateUserApprovalReqBody{}
	if builder.userApprovalFlag {
		req.UserApproval = builder.userApproval

	}
	return req
}

/**上传文件path开始**/
type CreateUserApprovalPathReqBodyBuilder struct {
	userApproval     *UserApproval
	userApprovalFlag bool
}

func NewCreateUserApprovalPathReqBodyBuilder() *CreateUserApprovalPathReqBodyBuilder {
	builder := &CreateUserApprovalPathReqBodyBuilder{}
	return builder
}
func (builder *CreateUserApprovalPathReqBodyBuilder) UserApproval(userApproval *UserApproval) *CreateUserApprovalPathReqBodyBuilder {
	builder.userApproval = userApproval
	builder.userApprovalFlag = true
	return builder
}

func (builder *CreateUserApprovalPathReqBodyBuilder) Build() (*CreateUserApprovalReqBody, error) {
	req := &CreateUserApprovalReqBody{}
	if builder.userApprovalFlag {
		req.UserApproval = builder.userApproval
	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type CreateUserApprovalReqBuilder struct {
	employeeType     string
	employeeTypeFlag bool
	body             *CreateUserApprovalReqBody
	bodyFlag         bool
}

// 生成请求的New构造器
func NewCreateUserApprovalReqBuilder() *CreateUserApprovalReqBuilder {
	builder := &CreateUserApprovalReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *CreateUserApprovalReqBuilder) EmployeeType(employeeType string) *CreateUserApprovalReqBuilder {
	builder.employeeType = employeeType
	builder.employeeTypeFlag = true
	return builder
}
func (builder *CreateUserApprovalReqBuilder) Body(body *CreateUserApprovalReqBody) *CreateUserApprovalReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *CreateUserApprovalReqBuilder) Build() *CreateUserApprovalReq {
	req := &CreateUserApprovalReq{}
	if builder.employeeTypeFlag {
		req.EmployeeType = &builder.employeeType
	}
	if builder.bodyFlag {
		req.Body = builder.body
	}
	return req
}

type CreateUserApprovalReqBody struct {
	UserApproval *UserApproval `json:"user_approval,omitempty"`
}

type CreateUserApprovalReq struct {
	EmployeeType *string                    `query:"employee_type"`
	Body         *CreateUserApprovalReqBody `body:""`
}

type CreateUserApprovalRespData struct {
	UserApproval *UserApproval `json:"user_approval,omitempty"`
}

type CreateUserApprovalResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *CreateUserApprovalRespData `json:"data"`
}

func (resp *CreateUserApprovalResp) Success() bool {
	return resp.Code == 0
}

type QueryUserApprovalReqBodyBuilder struct {
	userIds           []string
	userIdsFlag       bool
	checkDateFrom     int
	checkDateFromFlag bool
	checkDateTo       int
	checkDateToFlag   bool
}

// 生成body的New构造器
func NewQueryUserApprovalReqBodyBuilder() *QueryUserApprovalReqBodyBuilder {
	builder := &QueryUserApprovalReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *QueryUserApprovalReqBodyBuilder) UserIds(userIds []string) *QueryUserApprovalReqBodyBuilder {
	builder.userIds = userIds
	builder.userIdsFlag = true
	return builder
}
func (builder *QueryUserApprovalReqBodyBuilder) CheckDateFrom(checkDateFrom int) *QueryUserApprovalReqBodyBuilder {
	builder.checkDateFrom = checkDateFrom
	builder.checkDateFromFlag = true
	return builder
}
func (builder *QueryUserApprovalReqBodyBuilder) CheckDateTo(checkDateTo int) *QueryUserApprovalReqBodyBuilder {
	builder.checkDateTo = checkDateTo
	builder.checkDateToFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *QueryUserApprovalReqBodyBuilder) Build() *QueryUserApprovalReqBody {
	req := &QueryUserApprovalReqBody{}
	if builder.userIdsFlag {
		req.UserIds = builder.userIds

	}
	if builder.checkDateFromFlag {
		req.CheckDateFrom = &builder.checkDateFrom

	}
	if builder.checkDateToFlag {
		req.CheckDateTo = &builder.checkDateTo

	}
	return req
}

/**上传文件path开始**/
type QueryUserApprovalPathReqBodyBuilder struct {
	userIds           []string
	userIdsFlag       bool
	checkDateFrom     int
	checkDateFromFlag bool
	checkDateTo       int
	checkDateToFlag   bool
}

func NewQueryUserApprovalPathReqBodyBuilder() *QueryUserApprovalPathReqBodyBuilder {
	builder := &QueryUserApprovalPathReqBodyBuilder{}
	return builder
}
func (builder *QueryUserApprovalPathReqBodyBuilder) UserIds(userIds []string) *QueryUserApprovalPathReqBodyBuilder {
	builder.userIds = userIds
	builder.userIdsFlag = true
	return builder
}
func (builder *QueryUserApprovalPathReqBodyBuilder) CheckDateFrom(checkDateFrom int) *QueryUserApprovalPathReqBodyBuilder {
	builder.checkDateFrom = checkDateFrom
	builder.checkDateFromFlag = true
	return builder
}
func (builder *QueryUserApprovalPathReqBodyBuilder) CheckDateTo(checkDateTo int) *QueryUserApprovalPathReqBodyBuilder {
	builder.checkDateTo = checkDateTo
	builder.checkDateToFlag = true
	return builder
}

func (builder *QueryUserApprovalPathReqBodyBuilder) Build() (*QueryUserApprovalReqBody, error) {
	req := &QueryUserApprovalReqBody{}
	if builder.userIdsFlag {
		req.UserIds = builder.userIds
	}
	if builder.checkDateFromFlag {
		req.CheckDateFrom = &builder.checkDateFrom

	}
	if builder.checkDateToFlag {
		req.CheckDateTo = &builder.checkDateTo

	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type QueryUserApprovalReqBuilder struct {
	employeeType     string
	employeeTypeFlag bool
	body             *QueryUserApprovalReqBody
	bodyFlag         bool
}

// 生成请求的New构造器
func NewQueryUserApprovalReqBuilder() *QueryUserApprovalReqBuilder {
	builder := &QueryUserApprovalReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *QueryUserApprovalReqBuilder) EmployeeType(employeeType string) *QueryUserApprovalReqBuilder {
	builder.employeeType = employeeType
	builder.employeeTypeFlag = true
	return builder
}
func (builder *QueryUserApprovalReqBuilder) Body(body *QueryUserApprovalReqBody) *QueryUserApprovalReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *QueryUserApprovalReqBuilder) Build() *QueryUserApprovalReq {
	req := &QueryUserApprovalReq{}
	if builder.employeeTypeFlag {
		req.EmployeeType = &builder.employeeType
	}
	if builder.bodyFlag {
		req.Body = builder.body
	}
	return req
}

type QueryUserApprovalReqBody struct {
	UserIds       []string `json:"user_ids,omitempty"`
	CheckDateFrom *int     `json:"check_date_from,omitempty"`
	CheckDateTo   *int     `json:"check_date_to,omitempty"`
}

type QueryUserApprovalReq struct {
	EmployeeType *string                   `query:"employee_type"`
	Body         *QueryUserApprovalReqBody `body:""`
}

type QueryUserApprovalRespData struct {
	UserApprovals []*UserApproval `json:"user_approvals,omitempty"`
}

type QueryUserApprovalResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *QueryUserApprovalRespData `json:"data"`
}

func (resp *QueryUserApprovalResp) Success() bool {
	return resp.Code == 0
}

type BatchCreateUserDailyShiftReqBodyBuilder struct {
	userDailyShifts     []*UserDailyShift
	userDailyShiftsFlag bool
}

// 生成body的New构造器
func NewBatchCreateUserDailyShiftReqBodyBuilder() *BatchCreateUserDailyShiftReqBodyBuilder {
	builder := &BatchCreateUserDailyShiftReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *BatchCreateUserDailyShiftReqBodyBuilder) UserDailyShifts(userDailyShifts []*UserDailyShift) *BatchCreateUserDailyShiftReqBodyBuilder {
	builder.userDailyShifts = userDailyShifts
	builder.userDailyShiftsFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *BatchCreateUserDailyShiftReqBodyBuilder) Build() *BatchCreateUserDailyShiftReqBody {
	req := &BatchCreateUserDailyShiftReqBody{}
	if builder.userDailyShiftsFlag {
		req.UserDailyShifts = builder.userDailyShifts

	}
	return req
}

/**上传文件path开始**/
type BatchCreateUserDailyShiftPathReqBodyBuilder struct {
	userDailyShifts     []*UserDailyShift
	userDailyShiftsFlag bool
}

func NewBatchCreateUserDailyShiftPathReqBodyBuilder() *BatchCreateUserDailyShiftPathReqBodyBuilder {
	builder := &BatchCreateUserDailyShiftPathReqBodyBuilder{}
	return builder
}
func (builder *BatchCreateUserDailyShiftPathReqBodyBuilder) UserDailyShifts(userDailyShifts []*UserDailyShift) *BatchCreateUserDailyShiftPathReqBodyBuilder {
	builder.userDailyShifts = userDailyShifts
	builder.userDailyShiftsFlag = true
	return builder
}

func (builder *BatchCreateUserDailyShiftPathReqBodyBuilder) Build() (*BatchCreateUserDailyShiftReqBody, error) {
	req := &BatchCreateUserDailyShiftReqBody{}
	if builder.userDailyShiftsFlag {
		req.UserDailyShifts = builder.userDailyShifts
	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type BatchCreateUserDailyShiftReqBuilder struct {
	employeeType     string
	employeeTypeFlag bool
	body             *BatchCreateUserDailyShiftReqBody
	bodyFlag         bool
}

// 生成请求的New构造器
func NewBatchCreateUserDailyShiftReqBuilder() *BatchCreateUserDailyShiftReqBuilder {
	builder := &BatchCreateUserDailyShiftReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *BatchCreateUserDailyShiftReqBuilder) EmployeeType(employeeType string) *BatchCreateUserDailyShiftReqBuilder {
	builder.employeeType = employeeType
	builder.employeeTypeFlag = true
	return builder
}
func (builder *BatchCreateUserDailyShiftReqBuilder) Body(body *BatchCreateUserDailyShiftReqBody) *BatchCreateUserDailyShiftReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *BatchCreateUserDailyShiftReqBuilder) Build() *BatchCreateUserDailyShiftReq {
	req := &BatchCreateUserDailyShiftReq{}
	if builder.employeeTypeFlag {
		req.EmployeeType = &builder.employeeType
	}
	if builder.bodyFlag {
		req.Body = builder.body
	}
	return req
}

type BatchCreateUserDailyShiftReqBody struct {
	UserDailyShifts []*UserDailyShift `json:"user_daily_shifts,omitempty"`
}

type BatchCreateUserDailyShiftReq struct {
	EmployeeType *string                           `query:"employee_type"`
	Body         *BatchCreateUserDailyShiftReqBody `body:""`
}

type BatchCreateUserDailyShiftRespData struct {
	UserDailyShifts []*UserDailyShift `json:"user_daily_shifts,omitempty"`
}

type BatchCreateUserDailyShiftResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *BatchCreateUserDailyShiftRespData `json:"data"`
}

func (resp *BatchCreateUserDailyShiftResp) Success() bool {
	return resp.Code == 0
}

type QueryUserDailyShiftReqBodyBuilder struct {
	userIds           []string
	userIdsFlag       bool
	checkDateFrom     int
	checkDateFromFlag bool
	checkDateTo       int
	checkDateToFlag   bool
}

// 生成body的New构造器
func NewQueryUserDailyShiftReqBodyBuilder() *QueryUserDailyShiftReqBodyBuilder {
	builder := &QueryUserDailyShiftReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *QueryUserDailyShiftReqBodyBuilder) UserIds(userIds []string) *QueryUserDailyShiftReqBodyBuilder {
	builder.userIds = userIds
	builder.userIdsFlag = true
	return builder
}
func (builder *QueryUserDailyShiftReqBodyBuilder) CheckDateFrom(checkDateFrom int) *QueryUserDailyShiftReqBodyBuilder {
	builder.checkDateFrom = checkDateFrom
	builder.checkDateFromFlag = true
	return builder
}
func (builder *QueryUserDailyShiftReqBodyBuilder) CheckDateTo(checkDateTo int) *QueryUserDailyShiftReqBodyBuilder {
	builder.checkDateTo = checkDateTo
	builder.checkDateToFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *QueryUserDailyShiftReqBodyBuilder) Build() *QueryUserDailyShiftReqBody {
	req := &QueryUserDailyShiftReqBody{}
	if builder.userIdsFlag {
		req.UserIds = builder.userIds

	}
	if builder.checkDateFromFlag {
		req.CheckDateFrom = &builder.checkDateFrom

	}
	if builder.checkDateToFlag {
		req.CheckDateTo = &builder.checkDateTo

	}
	return req
}

/**上传文件path开始**/
type QueryUserDailyShiftPathReqBodyBuilder struct {
	userIds           []string
	userIdsFlag       bool
	checkDateFrom     int
	checkDateFromFlag bool
	checkDateTo       int
	checkDateToFlag   bool
}

func NewQueryUserDailyShiftPathReqBodyBuilder() *QueryUserDailyShiftPathReqBodyBuilder {
	builder := &QueryUserDailyShiftPathReqBodyBuilder{}
	return builder
}
func (builder *QueryUserDailyShiftPathReqBodyBuilder) UserIds(userIds []string) *QueryUserDailyShiftPathReqBodyBuilder {
	builder.userIds = userIds
	builder.userIdsFlag = true
	return builder
}
func (builder *QueryUserDailyShiftPathReqBodyBuilder) CheckDateFrom(checkDateFrom int) *QueryUserDailyShiftPathReqBodyBuilder {
	builder.checkDateFrom = checkDateFrom
	builder.checkDateFromFlag = true
	return builder
}
func (builder *QueryUserDailyShiftPathReqBodyBuilder) CheckDateTo(checkDateTo int) *QueryUserDailyShiftPathReqBodyBuilder {
	builder.checkDateTo = checkDateTo
	builder.checkDateToFlag = true
	return builder
}

func (builder *QueryUserDailyShiftPathReqBodyBuilder) Build() (*QueryUserDailyShiftReqBody, error) {
	req := &QueryUserDailyShiftReqBody{}
	if builder.userIdsFlag {
		req.UserIds = builder.userIds
	}
	if builder.checkDateFromFlag {
		req.CheckDateFrom = &builder.checkDateFrom

	}
	if builder.checkDateToFlag {
		req.CheckDateTo = &builder.checkDateTo

	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type QueryUserDailyShiftReqBuilder struct {
	employeeType     string
	employeeTypeFlag bool
	body             *QueryUserDailyShiftReqBody
	bodyFlag         bool
}

// 生成请求的New构造器
func NewQueryUserDailyShiftReqBuilder() *QueryUserDailyShiftReqBuilder {
	builder := &QueryUserDailyShiftReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *QueryUserDailyShiftReqBuilder) EmployeeType(employeeType string) *QueryUserDailyShiftReqBuilder {
	builder.employeeType = employeeType
	builder.employeeTypeFlag = true
	return builder
}
func (builder *QueryUserDailyShiftReqBuilder) Body(body *QueryUserDailyShiftReqBody) *QueryUserDailyShiftReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *QueryUserDailyShiftReqBuilder) Build() *QueryUserDailyShiftReq {
	req := &QueryUserDailyShiftReq{}
	if builder.employeeTypeFlag {
		req.EmployeeType = &builder.employeeType
	}
	if builder.bodyFlag {
		req.Body = builder.body
	}
	return req
}

type QueryUserDailyShiftReqBody struct {
	UserIds       []string `json:"user_ids,omitempty"`
	CheckDateFrom *int     `json:"check_date_from,omitempty"`
	CheckDateTo   *int     `json:"check_date_to,omitempty"`
}

type QueryUserDailyShiftReq struct {
	EmployeeType *string                     `query:"employee_type"`
	Body         *QueryUserDailyShiftReqBody `body:""`
}

type QueryUserDailyShiftRespData struct {
	UserDailyShifts []*UserDailyShift `json:"user_daily_shifts,omitempty"`
}

type QueryUserDailyShiftResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *QueryUserDailyShiftRespData `json:"data"`
}

func (resp *QueryUserDailyShiftResp) Success() bool {
	return resp.Code == 0
}

type BatchCreateUserFlowReqBodyBuilder struct {
	flowRecords     []*UserFlow
	flowRecordsFlag bool
}

// 生成body的New构造器
func NewBatchCreateUserFlowReqBodyBuilder() *BatchCreateUserFlowReqBodyBuilder {
	builder := &BatchCreateUserFlowReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *BatchCreateUserFlowReqBodyBuilder) FlowRecords(flowRecords []*UserFlow) *BatchCreateUserFlowReqBodyBuilder {
	builder.flowRecords = flowRecords
	builder.flowRecordsFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *BatchCreateUserFlowReqBodyBuilder) Build() *BatchCreateUserFlowReqBody {
	req := &BatchCreateUserFlowReqBody{}
	if builder.flowRecordsFlag {
		req.FlowRecords = builder.flowRecords

	}
	return req
}

/**上传文件path开始**/
type BatchCreateUserFlowPathReqBodyBuilder struct {
	flowRecords     []*UserFlow
	flowRecordsFlag bool
}

func NewBatchCreateUserFlowPathReqBodyBuilder() *BatchCreateUserFlowPathReqBodyBuilder {
	builder := &BatchCreateUserFlowPathReqBodyBuilder{}
	return builder
}
func (builder *BatchCreateUserFlowPathReqBodyBuilder) FlowRecords(flowRecords []*UserFlow) *BatchCreateUserFlowPathReqBodyBuilder {
	builder.flowRecords = flowRecords
	builder.flowRecordsFlag = true
	return builder
}

func (builder *BatchCreateUserFlowPathReqBodyBuilder) Build() (*BatchCreateUserFlowReqBody, error) {
	req := &BatchCreateUserFlowReqBody{}
	if builder.flowRecordsFlag {
		req.FlowRecords = builder.flowRecords
	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type BatchCreateUserFlowReqBuilder struct {
	employeeType     string
	employeeTypeFlag bool
	body             *BatchCreateUserFlowReqBody
	bodyFlag         bool
}

// 生成请求的New构造器
func NewBatchCreateUserFlowReqBuilder() *BatchCreateUserFlowReqBuilder {
	builder := &BatchCreateUserFlowReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *BatchCreateUserFlowReqBuilder) EmployeeType(employeeType string) *BatchCreateUserFlowReqBuilder {
	builder.employeeType = employeeType
	builder.employeeTypeFlag = true
	return builder
}
func (builder *BatchCreateUserFlowReqBuilder) Body(body *BatchCreateUserFlowReqBody) *BatchCreateUserFlowReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *BatchCreateUserFlowReqBuilder) Build() *BatchCreateUserFlowReq {
	req := &BatchCreateUserFlowReq{}
	if builder.employeeTypeFlag {
		req.EmployeeType = &builder.employeeType
	}
	if builder.bodyFlag {
		req.Body = builder.body
	}
	return req
}

type BatchCreateUserFlowReqBody struct {
	FlowRecords []*UserFlow `json:"flow_records,omitempty"`
}

type BatchCreateUserFlowReq struct {
	EmployeeType *string                     `query:"employee_type"`
	Body         *BatchCreateUserFlowReqBody `body:""`
}

type BatchCreateUserFlowRespData struct {
	FlowRecords []*UserFlow `json:"flow_records,omitempty"`
}

type BatchCreateUserFlowResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *BatchCreateUserFlowRespData `json:"data"`
}

func (resp *BatchCreateUserFlowResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type GetUserFlowReqBuilder struct {
	userFlowId       string
	userFlowIdFlag   bool
	employeeType     string
	employeeTypeFlag bool
}

// 生成请求的New构造器
func NewGetUserFlowReqBuilder() *GetUserFlowReqBuilder {
	builder := &GetUserFlowReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *GetUserFlowReqBuilder) UserFlowId(userFlowId string) *GetUserFlowReqBuilder {
	builder.userFlowId = userFlowId
	builder.userFlowIdFlag = true
	return builder
}
func (builder *GetUserFlowReqBuilder) EmployeeType(employeeType string) *GetUserFlowReqBuilder {
	builder.employeeType = employeeType
	builder.employeeTypeFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *GetUserFlowReqBuilder) Build() *GetUserFlowReq {
	req := &GetUserFlowReq{}
	if builder.userFlowIdFlag {
		req.UserFlowId = builder.userFlowId
	}
	if builder.employeeTypeFlag {
		req.EmployeeType = &builder.employeeType
	}
	return req
}

type GetUserFlowReq struct {
	UserFlowId   string  `path:"user_flow_id"`
	EmployeeType *string `query:"employee_type"`
}

type GetUserFlowRespData struct {
	UserId       *string  `json:"user_id,omitempty"`
	CreatorId    *string  `json:"creator_id,omitempty"`
	LocationName *string  `json:"location_name,omitempty"`
	CheckTime    *string  `json:"check_time,omitempty"`
	Comment      *string  `json:"comment,omitempty"`
	RecordId     *string  `json:"record_id,omitempty"`
	Longitude    *float64 `json:"longitude,omitempty"`
	Latitude     *float64 `json:"latitude,omitempty"`
	Ssid         *string  `json:"ssid,omitempty"`
	Bssid        *string  `json:"bssid,omitempty"`
	IsField      *bool    `json:"is_field,omitempty"`
	IsWifi       *bool    `json:"is_wifi,omitempty"`
	Type         *int     `json:"type,omitempty"`
	PhotoUrls    []string `json:"photo_urls,omitempty"`
	DeviceId     *string  `json:"device_id,omitempty"`
	CheckResult  *string  `json:"check_result,omitempty"`
}

type GetUserFlowResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *GetUserFlowRespData `json:"data"`
}

func (resp *GetUserFlowResp) Success() bool {
	return resp.Code == 0
}

type QueryUserFlowReqBodyBuilder struct {
	userIds           []string
	userIdsFlag       bool
	checkTimeFrom     string
	checkTimeFromFlag bool
	checkTimeTo       string
	checkTimeToFlag   bool
}

// 生成body的New构造器
func NewQueryUserFlowReqBodyBuilder() *QueryUserFlowReqBodyBuilder {
	builder := &QueryUserFlowReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *QueryUserFlowReqBodyBuilder) UserIds(userIds []string) *QueryUserFlowReqBodyBuilder {
	builder.userIds = userIds
	builder.userIdsFlag = true
	return builder
}
func (builder *QueryUserFlowReqBodyBuilder) CheckTimeFrom(checkTimeFrom string) *QueryUserFlowReqBodyBuilder {
	builder.checkTimeFrom = checkTimeFrom
	builder.checkTimeFromFlag = true
	return builder
}
func (builder *QueryUserFlowReqBodyBuilder) CheckTimeTo(checkTimeTo string) *QueryUserFlowReqBodyBuilder {
	builder.checkTimeTo = checkTimeTo
	builder.checkTimeToFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *QueryUserFlowReqBodyBuilder) Build() *QueryUserFlowReqBody {
	req := &QueryUserFlowReqBody{}
	if builder.userIdsFlag {
		req.UserIds = builder.userIds

	}
	if builder.checkTimeFromFlag {
		req.CheckTimeFrom = &builder.checkTimeFrom

	}
	if builder.checkTimeToFlag {
		req.CheckTimeTo = &builder.checkTimeTo

	}
	return req
}

/**上传文件path开始**/
type QueryUserFlowPathReqBodyBuilder struct {
	userIds           []string
	userIdsFlag       bool
	checkTimeFrom     string
	checkTimeFromFlag bool
	checkTimeTo       string
	checkTimeToFlag   bool
}

func NewQueryUserFlowPathReqBodyBuilder() *QueryUserFlowPathReqBodyBuilder {
	builder := &QueryUserFlowPathReqBodyBuilder{}
	return builder
}
func (builder *QueryUserFlowPathReqBodyBuilder) UserIds(userIds []string) *QueryUserFlowPathReqBodyBuilder {
	builder.userIds = userIds
	builder.userIdsFlag = true
	return builder
}
func (builder *QueryUserFlowPathReqBodyBuilder) CheckTimeFrom(checkTimeFrom string) *QueryUserFlowPathReqBodyBuilder {
	builder.checkTimeFrom = checkTimeFrom
	builder.checkTimeFromFlag = true
	return builder
}
func (builder *QueryUserFlowPathReqBodyBuilder) CheckTimeTo(checkTimeTo string) *QueryUserFlowPathReqBodyBuilder {
	builder.checkTimeTo = checkTimeTo
	builder.checkTimeToFlag = true
	return builder
}

func (builder *QueryUserFlowPathReqBodyBuilder) Build() (*QueryUserFlowReqBody, error) {
	req := &QueryUserFlowReqBody{}
	if builder.userIdsFlag {
		req.UserIds = builder.userIds
	}
	if builder.checkTimeFromFlag {
		req.CheckTimeFrom = &builder.checkTimeFrom

	}
	if builder.checkTimeToFlag {
		req.CheckTimeTo = &builder.checkTimeTo

	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type QueryUserFlowReqBuilder struct {
	employeeType              string
	employeeTypeFlag          bool
	includeTerminatedUser     bool
	includeTerminatedUserFlag bool
	body                      *QueryUserFlowReqBody
	bodyFlag                  bool
}

// 生成请求的New构造器
func NewQueryUserFlowReqBuilder() *QueryUserFlowReqBuilder {
	builder := &QueryUserFlowReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *QueryUserFlowReqBuilder) EmployeeType(employeeType string) *QueryUserFlowReqBuilder {
	builder.employeeType = employeeType
	builder.employeeTypeFlag = true
	return builder
}
func (builder *QueryUserFlowReqBuilder) IncludeTerminatedUser(includeTerminatedUser bool) *QueryUserFlowReqBuilder {
	builder.includeTerminatedUser = includeTerminatedUser
	builder.includeTerminatedUserFlag = true
	return builder
}
func (builder *QueryUserFlowReqBuilder) Body(body *QueryUserFlowReqBody) *QueryUserFlowReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *QueryUserFlowReqBuilder) Build() *QueryUserFlowReq {
	req := &QueryUserFlowReq{}
	if builder.employeeTypeFlag {
		req.EmployeeType = &builder.employeeType
	}
	if builder.includeTerminatedUserFlag {
		req.IncludeTerminatedUser = &builder.includeTerminatedUser
	}
	if builder.bodyFlag {
		req.Body = builder.body
	}
	return req
}

type QueryUserFlowReqBody struct {
	UserIds       []string `json:"user_ids,omitempty"`
	CheckTimeFrom *string  `json:"check_time_from,omitempty"`
	CheckTimeTo   *string  `json:"check_time_to,omitempty"`
}

type QueryUserFlowReq struct {
	EmployeeType          *string               `query:"employee_type"`
	IncludeTerminatedUser *bool                 `query:"include_terminated_user"`
	Body                  *QueryUserFlowReqBody `body:""`
}

type QueryUserFlowRespData struct {
	UserFlowResults []*UserFlow `json:"user_flow_results,omitempty"`
}

type QueryUserFlowResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *QueryUserFlowRespData `json:"data"`
}

func (resp *QueryUserFlowResp) Success() bool {
	return resp.Code == 0
}

type ModifyUserSettingReqBodyBuilder struct {
	userSetting     *UserSetting
	userSettingFlag bool
}

// 生成body的New构造器
func NewModifyUserSettingReqBodyBuilder() *ModifyUserSettingReqBodyBuilder {
	builder := &ModifyUserSettingReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *ModifyUserSettingReqBodyBuilder) UserSetting(userSetting *UserSetting) *ModifyUserSettingReqBodyBuilder {
	builder.userSetting = userSetting
	builder.userSettingFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *ModifyUserSettingReqBodyBuilder) Build() *ModifyUserSettingReqBody {
	req := &ModifyUserSettingReqBody{}
	if builder.userSettingFlag {
		req.UserSetting = builder.userSetting

	}
	return req
}

/**上传文件path开始**/
type ModifyUserSettingPathReqBodyBuilder struct {
	userSetting     *UserSetting
	userSettingFlag bool
}

func NewModifyUserSettingPathReqBodyBuilder() *ModifyUserSettingPathReqBodyBuilder {
	builder := &ModifyUserSettingPathReqBodyBuilder{}
	return builder
}
func (builder *ModifyUserSettingPathReqBodyBuilder) UserSetting(userSetting *UserSetting) *ModifyUserSettingPathReqBodyBuilder {
	builder.userSetting = userSetting
	builder.userSettingFlag = true
	return builder
}

func (builder *ModifyUserSettingPathReqBodyBuilder) Build() (*ModifyUserSettingReqBody, error) {
	req := &ModifyUserSettingReqBody{}
	if builder.userSettingFlag {
		req.UserSetting = builder.userSetting
	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type ModifyUserSettingReqBuilder struct {
	employeeType     string
	employeeTypeFlag bool
	body             *ModifyUserSettingReqBody
	bodyFlag         bool
}

// 生成请求的New构造器
func NewModifyUserSettingReqBuilder() *ModifyUserSettingReqBuilder {
	builder := &ModifyUserSettingReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *ModifyUserSettingReqBuilder) EmployeeType(employeeType string) *ModifyUserSettingReqBuilder {
	builder.employeeType = employeeType
	builder.employeeTypeFlag = true
	return builder
}
func (builder *ModifyUserSettingReqBuilder) Body(body *ModifyUserSettingReqBody) *ModifyUserSettingReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *ModifyUserSettingReqBuilder) Build() *ModifyUserSettingReq {
	req := &ModifyUserSettingReq{}
	if builder.employeeTypeFlag {
		req.EmployeeType = &builder.employeeType
	}
	if builder.bodyFlag {
		req.Body = builder.body
	}
	return req
}

type ModifyUserSettingReqBody struct {
	UserSetting *UserSetting `json:"user_setting,omitempty"`
}

type ModifyUserSettingReq struct {
	EmployeeType *string                   `query:"employee_type"`
	Body         *ModifyUserSettingReqBody `body:""`
}

type ModifyUserSettingRespData struct {
	UserSetting *UserSetting `json:"user_setting,omitempty"`
}

type ModifyUserSettingResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *ModifyUserSettingRespData `json:"data"`
}

func (resp *ModifyUserSettingResp) Success() bool {
	return resp.Code == 0
}

type QueryUserSettingReqBodyBuilder struct {
	userIds     []string
	userIdsFlag bool
}

// 生成body的New构造器
func NewQueryUserSettingReqBodyBuilder() *QueryUserSettingReqBodyBuilder {
	builder := &QueryUserSettingReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *QueryUserSettingReqBodyBuilder) UserIds(userIds []string) *QueryUserSettingReqBodyBuilder {
	builder.userIds = userIds
	builder.userIdsFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *QueryUserSettingReqBodyBuilder) Build() *QueryUserSettingReqBody {
	req := &QueryUserSettingReqBody{}
	if builder.userIdsFlag {
		req.UserIds = builder.userIds

	}
	return req
}

/**上传文件path开始**/
type QueryUserSettingPathReqBodyBuilder struct {
	userIds     []string
	userIdsFlag bool
}

func NewQueryUserSettingPathReqBodyBuilder() *QueryUserSettingPathReqBodyBuilder {
	builder := &QueryUserSettingPathReqBodyBuilder{}
	return builder
}
func (builder *QueryUserSettingPathReqBodyBuilder) UserIds(userIds []string) *QueryUserSettingPathReqBodyBuilder {
	builder.userIds = userIds
	builder.userIdsFlag = true
	return builder
}

func (builder *QueryUserSettingPathReqBodyBuilder) Build() (*QueryUserSettingReqBody, error) {
	req := &QueryUserSettingReqBody{}
	if builder.userIdsFlag {
		req.UserIds = builder.userIds
	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type QueryUserSettingReqBuilder struct {
	employeeType     string
	employeeTypeFlag bool
	body             *QueryUserSettingReqBody
	bodyFlag         bool
}

// 生成请求的New构造器
func NewQueryUserSettingReqBuilder() *QueryUserSettingReqBuilder {
	builder := &QueryUserSettingReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *QueryUserSettingReqBuilder) EmployeeType(employeeType string) *QueryUserSettingReqBuilder {
	builder.employeeType = employeeType
	builder.employeeTypeFlag = true
	return builder
}
func (builder *QueryUserSettingReqBuilder) Body(body *QueryUserSettingReqBody) *QueryUserSettingReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *QueryUserSettingReqBuilder) Build() *QueryUserSettingReq {
	req := &QueryUserSettingReq{}
	if builder.employeeTypeFlag {
		req.EmployeeType = &builder.employeeType
	}
	if builder.bodyFlag {
		req.Body = builder.body
	}
	return req
}

type QueryUserSettingReqBody struct {
	UserIds []string `json:"user_ids,omitempty"`
}

type QueryUserSettingReq struct {
	EmployeeType *string                  `query:"employee_type"`
	Body         *QueryUserSettingReqBody `body:""`
}

type QueryUserSettingRespData struct {
	UserSettings []*UserSetting `json:"user_settings,omitempty"`
}

type QueryUserSettingResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *QueryUserSettingRespData `json:"data"`
}

func (resp *QueryUserSettingResp) Success() bool {
	return resp.Code == 0
}

type QueryUserStatsDataReqBodyBuilder struct {
	locale               string
	localeFlag           bool
	statsType            string
	statsTypeFlag        bool
	startDate            int
	startDateFlag        bool
	endDate              int
	endDateFlag          bool
	userIds              []string
	userIdsFlag          bool
	needHistory          bool
	needHistoryFlag      bool
	currentGroupOnly     bool
	currentGroupOnlyFlag bool
}

// 生成body的New构造器
func NewQueryUserStatsDataReqBodyBuilder() *QueryUserStatsDataReqBodyBuilder {
	builder := &QueryUserStatsDataReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *QueryUserStatsDataReqBodyBuilder) Locale(locale string) *QueryUserStatsDataReqBodyBuilder {
	builder.locale = locale
	builder.localeFlag = true
	return builder
}
func (builder *QueryUserStatsDataReqBodyBuilder) StatsType(statsType string) *QueryUserStatsDataReqBodyBuilder {
	builder.statsType = statsType
	builder.statsTypeFlag = true
	return builder
}
func (builder *QueryUserStatsDataReqBodyBuilder) StartDate(startDate int) *QueryUserStatsDataReqBodyBuilder {
	builder.startDate = startDate
	builder.startDateFlag = true
	return builder
}
func (builder *QueryUserStatsDataReqBodyBuilder) EndDate(endDate int) *QueryUserStatsDataReqBodyBuilder {
	builder.endDate = endDate
	builder.endDateFlag = true
	return builder
}
func (builder *QueryUserStatsDataReqBodyBuilder) UserIds(userIds []string) *QueryUserStatsDataReqBodyBuilder {
	builder.userIds = userIds
	builder.userIdsFlag = true
	return builder
}
func (builder *QueryUserStatsDataReqBodyBuilder) NeedHistory(needHistory bool) *QueryUserStatsDataReqBodyBuilder {
	builder.needHistory = needHistory
	builder.needHistoryFlag = true
	return builder
}
func (builder *QueryUserStatsDataReqBodyBuilder) CurrentGroupOnly(currentGroupOnly bool) *QueryUserStatsDataReqBodyBuilder {
	builder.currentGroupOnly = currentGroupOnly
	builder.currentGroupOnlyFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *QueryUserStatsDataReqBodyBuilder) Build() *QueryUserStatsDataReqBody {
	req := &QueryUserStatsDataReqBody{}
	if builder.localeFlag {
		req.Locale = &builder.locale

	}
	if builder.statsTypeFlag {
		req.StatsType = &builder.statsType

	}
	if builder.startDateFlag {
		req.StartDate = &builder.startDate

	}
	if builder.endDateFlag {
		req.EndDate = &builder.endDate

	}
	if builder.userIdsFlag {
		req.UserIds = builder.userIds

	}
	if builder.needHistoryFlag {
		req.NeedHistory = &builder.needHistory

	}
	if builder.currentGroupOnlyFlag {
		req.CurrentGroupOnly = &builder.currentGroupOnly

	}
	return req
}

/**上传文件path开始**/
type QueryUserStatsDataPathReqBodyBuilder struct {
	locale               string
	localeFlag           bool
	statsType            string
	statsTypeFlag        bool
	startDate            int
	startDateFlag        bool
	endDate              int
	endDateFlag          bool
	userIds              []string
	userIdsFlag          bool
	needHistory          bool
	needHistoryFlag      bool
	currentGroupOnly     bool
	currentGroupOnlyFlag bool
}

func NewQueryUserStatsDataPathReqBodyBuilder() *QueryUserStatsDataPathReqBodyBuilder {
	builder := &QueryUserStatsDataPathReqBodyBuilder{}
	return builder
}
func (builder *QueryUserStatsDataPathReqBodyBuilder) Locale(locale string) *QueryUserStatsDataPathReqBodyBuilder {
	builder.locale = locale
	builder.localeFlag = true
	return builder
}
func (builder *QueryUserStatsDataPathReqBodyBuilder) StatsType(statsType string) *QueryUserStatsDataPathReqBodyBuilder {
	builder.statsType = statsType
	builder.statsTypeFlag = true
	return builder
}
func (builder *QueryUserStatsDataPathReqBodyBuilder) StartDate(startDate int) *QueryUserStatsDataPathReqBodyBuilder {
	builder.startDate = startDate
	builder.startDateFlag = true
	return builder
}
func (builder *QueryUserStatsDataPathReqBodyBuilder) EndDate(endDate int) *QueryUserStatsDataPathReqBodyBuilder {
	builder.endDate = endDate
	builder.endDateFlag = true
	return builder
}
func (builder *QueryUserStatsDataPathReqBodyBuilder) UserIds(userIds []string) *QueryUserStatsDataPathReqBodyBuilder {
	builder.userIds = userIds
	builder.userIdsFlag = true
	return builder
}
func (builder *QueryUserStatsDataPathReqBodyBuilder) NeedHistory(needHistory bool) *QueryUserStatsDataPathReqBodyBuilder {
	builder.needHistory = needHistory
	builder.needHistoryFlag = true
	return builder
}
func (builder *QueryUserStatsDataPathReqBodyBuilder) CurrentGroupOnly(currentGroupOnly bool) *QueryUserStatsDataPathReqBodyBuilder {
	builder.currentGroupOnly = currentGroupOnly
	builder.currentGroupOnlyFlag = true
	return builder
}

func (builder *QueryUserStatsDataPathReqBodyBuilder) Build() (*QueryUserStatsDataReqBody, error) {
	req := &QueryUserStatsDataReqBody{}
	if builder.localeFlag {
		req.Locale = &builder.locale

	}
	if builder.statsTypeFlag {
		req.StatsType = &builder.statsType

	}
	if builder.startDateFlag {
		req.StartDate = &builder.startDate

	}
	if builder.endDateFlag {
		req.EndDate = &builder.endDate

	}
	if builder.userIdsFlag {
		req.UserIds = builder.userIds
	}
	if builder.needHistoryFlag {
		req.NeedHistory = &builder.needHistory

	}
	if builder.currentGroupOnlyFlag {
		req.CurrentGroupOnly = &builder.currentGroupOnly

	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type QueryUserStatsDataReqBuilder struct {
	employeeType     string
	employeeTypeFlag bool
	body             *QueryUserStatsDataReqBody
	bodyFlag         bool
}

// 生成请求的New构造器
func NewQueryUserStatsDataReqBuilder() *QueryUserStatsDataReqBuilder {
	builder := &QueryUserStatsDataReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *QueryUserStatsDataReqBuilder) EmployeeType(employeeType string) *QueryUserStatsDataReqBuilder {
	builder.employeeType = employeeType
	builder.employeeTypeFlag = true
	return builder
}
func (builder *QueryUserStatsDataReqBuilder) Body(body *QueryUserStatsDataReqBody) *QueryUserStatsDataReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *QueryUserStatsDataReqBuilder) Build() *QueryUserStatsDataReq {
	req := &QueryUserStatsDataReq{}
	if builder.employeeTypeFlag {
		req.EmployeeType = &builder.employeeType
	}
	if builder.bodyFlag {
		req.Body = builder.body
	}
	return req
}

type QueryUserStatsDataReqBody struct {
	Locale           *string  `json:"locale,omitempty"`
	StatsType        *string  `json:"stats_type,omitempty"`
	StartDate        *int     `json:"start_date,omitempty"`
	EndDate          *int     `json:"end_date,omitempty"`
	UserIds          []string `json:"user_ids,omitempty"`
	NeedHistory      *bool    `json:"need_history,omitempty"`
	CurrentGroupOnly *bool    `json:"current_group_only,omitempty"`
}

type QueryUserStatsDataReq struct {
	EmployeeType *string                    `query:"employee_type"`
	Body         *QueryUserStatsDataReqBody `body:""`
}

type QueryUserStatsDataRespData struct {
	UserDatas []*UserStatsData `json:"user_datas,omitempty"`
}

type QueryUserStatsDataResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *QueryUserStatsDataRespData `json:"data"`
}

func (resp *QueryUserStatsDataResp) Success() bool {
	return resp.Code == 0
}

type QueryUserStatsFieldReqBodyBuilder struct {
	locale        string
	localeFlag    bool
	statsType     string
	statsTypeFlag bool
	startDate     int
	startDateFlag bool
	endDate       int
	endDateFlag   bool
}

// 生成body的New构造器
func NewQueryUserStatsFieldReqBodyBuilder() *QueryUserStatsFieldReqBodyBuilder {
	builder := &QueryUserStatsFieldReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *QueryUserStatsFieldReqBodyBuilder) Locale(locale string) *QueryUserStatsFieldReqBodyBuilder {
	builder.locale = locale
	builder.localeFlag = true
	return builder
}
func (builder *QueryUserStatsFieldReqBodyBuilder) StatsType(statsType string) *QueryUserStatsFieldReqBodyBuilder {
	builder.statsType = statsType
	builder.statsTypeFlag = true
	return builder
}
func (builder *QueryUserStatsFieldReqBodyBuilder) StartDate(startDate int) *QueryUserStatsFieldReqBodyBuilder {
	builder.startDate = startDate
	builder.startDateFlag = true
	return builder
}
func (builder *QueryUserStatsFieldReqBodyBuilder) EndDate(endDate int) *QueryUserStatsFieldReqBodyBuilder {
	builder.endDate = endDate
	builder.endDateFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *QueryUserStatsFieldReqBodyBuilder) Build() *QueryUserStatsFieldReqBody {
	req := &QueryUserStatsFieldReqBody{}
	if builder.localeFlag {
		req.Locale = &builder.locale

	}
	if builder.statsTypeFlag {
		req.StatsType = &builder.statsType

	}
	if builder.startDateFlag {
		req.StartDate = &builder.startDate

	}
	if builder.endDateFlag {
		req.EndDate = &builder.endDate

	}
	return req
}

/**上传文件path开始**/
type QueryUserStatsFieldPathReqBodyBuilder struct {
	locale        string
	localeFlag    bool
	statsType     string
	statsTypeFlag bool
	startDate     int
	startDateFlag bool
	endDate       int
	endDateFlag   bool
}

func NewQueryUserStatsFieldPathReqBodyBuilder() *QueryUserStatsFieldPathReqBodyBuilder {
	builder := &QueryUserStatsFieldPathReqBodyBuilder{}
	return builder
}
func (builder *QueryUserStatsFieldPathReqBodyBuilder) Locale(locale string) *QueryUserStatsFieldPathReqBodyBuilder {
	builder.locale = locale
	builder.localeFlag = true
	return builder
}
func (builder *QueryUserStatsFieldPathReqBodyBuilder) StatsType(statsType string) *QueryUserStatsFieldPathReqBodyBuilder {
	builder.statsType = statsType
	builder.statsTypeFlag = true
	return builder
}
func (builder *QueryUserStatsFieldPathReqBodyBuilder) StartDate(startDate int) *QueryUserStatsFieldPathReqBodyBuilder {
	builder.startDate = startDate
	builder.startDateFlag = true
	return builder
}
func (builder *QueryUserStatsFieldPathReqBodyBuilder) EndDate(endDate int) *QueryUserStatsFieldPathReqBodyBuilder {
	builder.endDate = endDate
	builder.endDateFlag = true
	return builder
}

func (builder *QueryUserStatsFieldPathReqBodyBuilder) Build() (*QueryUserStatsFieldReqBody, error) {
	req := &QueryUserStatsFieldReqBody{}
	if builder.localeFlag {
		req.Locale = &builder.locale

	}
	if builder.statsTypeFlag {
		req.StatsType = &builder.statsType

	}
	if builder.startDateFlag {
		req.StartDate = &builder.startDate

	}
	if builder.endDateFlag {
		req.EndDate = &builder.endDate

	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type QueryUserStatsFieldReqBuilder struct {
	employeeType     string
	employeeTypeFlag bool
	body             *QueryUserStatsFieldReqBody
	bodyFlag         bool
}

// 生成请求的New构造器
func NewQueryUserStatsFieldReqBuilder() *QueryUserStatsFieldReqBuilder {
	builder := &QueryUserStatsFieldReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *QueryUserStatsFieldReqBuilder) EmployeeType(employeeType string) *QueryUserStatsFieldReqBuilder {
	builder.employeeType = employeeType
	builder.employeeTypeFlag = true
	return builder
}
func (builder *QueryUserStatsFieldReqBuilder) Body(body *QueryUserStatsFieldReqBody) *QueryUserStatsFieldReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *QueryUserStatsFieldReqBuilder) Build() *QueryUserStatsFieldReq {
	req := &QueryUserStatsFieldReq{}
	if builder.employeeTypeFlag {
		req.EmployeeType = &builder.employeeType
	}
	if builder.bodyFlag {
		req.Body = builder.body
	}
	return req
}

type QueryUserStatsFieldReqBody struct {
	Locale    *string `json:"locale,omitempty"`
	StatsType *string `json:"stats_type,omitempty"`
	StartDate *int    `json:"start_date,omitempty"`
	EndDate   *int    `json:"end_date,omitempty"`
}

type QueryUserStatsFieldReq struct {
	EmployeeType *string                     `query:"employee_type"`
	Body         *QueryUserStatsFieldReqBody `body:""`
}

type QueryUserStatsFieldRespData struct {
	UserStatsField *UserStatsField `json:"user_stats_field,omitempty"`
}

type QueryUserStatsFieldResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *QueryUserStatsFieldRespData `json:"data"`
}

func (resp *QueryUserStatsFieldResp) Success() bool {
	return resp.Code == 0
}

type QueryUserStatsViewReqBodyBuilder struct {
	locale        string
	localeFlag    bool
	statsType     string
	statsTypeFlag bool
}

// 生成body的New构造器
func NewQueryUserStatsViewReqBodyBuilder() *QueryUserStatsViewReqBodyBuilder {
	builder := &QueryUserStatsViewReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *QueryUserStatsViewReqBodyBuilder) Locale(locale string) *QueryUserStatsViewReqBodyBuilder {
	builder.locale = locale
	builder.localeFlag = true
	return builder
}
func (builder *QueryUserStatsViewReqBodyBuilder) StatsType(statsType string) *QueryUserStatsViewReqBodyBuilder {
	builder.statsType = statsType
	builder.statsTypeFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *QueryUserStatsViewReqBodyBuilder) Build() *QueryUserStatsViewReqBody {
	req := &QueryUserStatsViewReqBody{}
	if builder.localeFlag {
		req.Locale = &builder.locale

	}
	if builder.statsTypeFlag {
		req.StatsType = &builder.statsType

	}
	return req
}

/**上传文件path开始**/
type QueryUserStatsViewPathReqBodyBuilder struct {
	locale        string
	localeFlag    bool
	statsType     string
	statsTypeFlag bool
}

func NewQueryUserStatsViewPathReqBodyBuilder() *QueryUserStatsViewPathReqBodyBuilder {
	builder := &QueryUserStatsViewPathReqBodyBuilder{}
	return builder
}
func (builder *QueryUserStatsViewPathReqBodyBuilder) Locale(locale string) *QueryUserStatsViewPathReqBodyBuilder {
	builder.locale = locale
	builder.localeFlag = true
	return builder
}
func (builder *QueryUserStatsViewPathReqBodyBuilder) StatsType(statsType string) *QueryUserStatsViewPathReqBodyBuilder {
	builder.statsType = statsType
	builder.statsTypeFlag = true
	return builder
}

func (builder *QueryUserStatsViewPathReqBodyBuilder) Build() (*QueryUserStatsViewReqBody, error) {
	req := &QueryUserStatsViewReqBody{}
	if builder.localeFlag {
		req.Locale = &builder.locale

	}
	if builder.statsTypeFlag {
		req.StatsType = &builder.statsType

	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type QueryUserStatsViewReqBuilder struct {
	employeeType     string
	employeeTypeFlag bool
	body             *QueryUserStatsViewReqBody
	bodyFlag         bool
}

// 生成请求的New构造器
func NewQueryUserStatsViewReqBuilder() *QueryUserStatsViewReqBuilder {
	builder := &QueryUserStatsViewReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *QueryUserStatsViewReqBuilder) EmployeeType(employeeType string) *QueryUserStatsViewReqBuilder {
	builder.employeeType = employeeType
	builder.employeeTypeFlag = true
	return builder
}
func (builder *QueryUserStatsViewReqBuilder) Body(body *QueryUserStatsViewReqBody) *QueryUserStatsViewReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *QueryUserStatsViewReqBuilder) Build() *QueryUserStatsViewReq {
	req := &QueryUserStatsViewReq{}
	if builder.employeeTypeFlag {
		req.EmployeeType = &builder.employeeType
	}
	if builder.bodyFlag {
		req.Body = builder.body
	}
	return req
}

type QueryUserStatsViewReqBody struct {
	Locale    *string `json:"locale,omitempty"`
	StatsType *string `json:"stats_type,omitempty"`
}

type QueryUserStatsViewReq struct {
	EmployeeType *string                    `query:"employee_type"`
	Body         *QueryUserStatsViewReqBody `body:""`
}

type QueryUserStatsViewRespData struct {
	View *UserStatsView `json:"view,omitempty"`
}

type QueryUserStatsViewResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *QueryUserStatsViewRespData `json:"data"`
}

func (resp *QueryUserStatsViewResp) Success() bool {
	return resp.Code == 0
}

type UpdateUserStatsViewReqBodyBuilder struct {
	view     *UserStatsView
	viewFlag bool
}

// 生成body的New构造器
func NewUpdateUserStatsViewReqBodyBuilder() *UpdateUserStatsViewReqBodyBuilder {
	builder := &UpdateUserStatsViewReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *UpdateUserStatsViewReqBodyBuilder) View(view *UserStatsView) *UpdateUserStatsViewReqBodyBuilder {
	builder.view = view
	builder.viewFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *UpdateUserStatsViewReqBodyBuilder) Build() *UpdateUserStatsViewReqBody {
	req := &UpdateUserStatsViewReqBody{}
	if builder.viewFlag {
		req.View = builder.view

	}
	return req
}

/**上传文件path开始**/
type UpdateUserStatsViewPathReqBodyBuilder struct {
	view     *UserStatsView
	viewFlag bool
}

func NewUpdateUserStatsViewPathReqBodyBuilder() *UpdateUserStatsViewPathReqBodyBuilder {
	builder := &UpdateUserStatsViewPathReqBodyBuilder{}
	return builder
}
func (builder *UpdateUserStatsViewPathReqBodyBuilder) View(view *UserStatsView) *UpdateUserStatsViewPathReqBodyBuilder {
	builder.view = view
	builder.viewFlag = true
	return builder
}

func (builder *UpdateUserStatsViewPathReqBodyBuilder) Build() (*UpdateUserStatsViewReqBody, error) {
	req := &UpdateUserStatsViewReqBody{}
	if builder.viewFlag {
		req.View = builder.view
	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type UpdateUserStatsViewReqBuilder struct {
	userStatsViewId     string
	userStatsViewIdFlag bool
	employeeType        string
	employeeTypeFlag    bool
	body                *UpdateUserStatsViewReqBody
	bodyFlag            bool
}

// 生成请求的New构造器
func NewUpdateUserStatsViewReqBuilder() *UpdateUserStatsViewReqBuilder {
	builder := &UpdateUserStatsViewReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *UpdateUserStatsViewReqBuilder) UserStatsViewId(userStatsViewId string) *UpdateUserStatsViewReqBuilder {
	builder.userStatsViewId = userStatsViewId
	builder.userStatsViewIdFlag = true
	return builder
}
func (builder *UpdateUserStatsViewReqBuilder) EmployeeType(employeeType string) *UpdateUserStatsViewReqBuilder {
	builder.employeeType = employeeType
	builder.employeeTypeFlag = true
	return builder
}
func (builder *UpdateUserStatsViewReqBuilder) Body(body *UpdateUserStatsViewReqBody) *UpdateUserStatsViewReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *UpdateUserStatsViewReqBuilder) Build() *UpdateUserStatsViewReq {
	req := &UpdateUserStatsViewReq{}
	if builder.userStatsViewIdFlag {
		req.UserStatsViewId = builder.userStatsViewId
	}
	if builder.employeeTypeFlag {
		req.EmployeeType = &builder.employeeType
	}
	if builder.bodyFlag {
		req.Body = builder.body
	}
	return req
}

type UpdateUserStatsViewReqBody struct {
	View *UserStatsView `json:"view,omitempty"`
}

type UpdateUserStatsViewReq struct {
	UserStatsViewId string                      `path:"user_stats_view_id"`
	EmployeeType    *string                     `query:"employee_type"`
	Body            *UpdateUserStatsViewReqBody `body:""`
}

type UpdateUserStatsViewRespData struct {
	View *UserStatsView `json:"view,omitempty"`
}

type UpdateUserStatsViewResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *UpdateUserStatsViewRespData `json:"data"`
}

func (resp *UpdateUserStatsViewResp) Success() bool {
	return resp.Code == 0
}

type QueryUserTaskReqBodyBuilder struct {
	userIds           []string
	userIdsFlag       bool
	checkDateFrom     int
	checkDateFromFlag bool
	checkDateTo       int
	checkDateToFlag   bool
}

// 生成body的New构造器
func NewQueryUserTaskReqBodyBuilder() *QueryUserTaskReqBodyBuilder {
	builder := &QueryUserTaskReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *QueryUserTaskReqBodyBuilder) UserIds(userIds []string) *QueryUserTaskReqBodyBuilder {
	builder.userIds = userIds
	builder.userIdsFlag = true
	return builder
}
func (builder *QueryUserTaskReqBodyBuilder) CheckDateFrom(checkDateFrom int) *QueryUserTaskReqBodyBuilder {
	builder.checkDateFrom = checkDateFrom
	builder.checkDateFromFlag = true
	return builder
}
func (builder *QueryUserTaskReqBodyBuilder) CheckDateTo(checkDateTo int) *QueryUserTaskReqBodyBuilder {
	builder.checkDateTo = checkDateTo
	builder.checkDateToFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *QueryUserTaskReqBodyBuilder) Build() *QueryUserTaskReqBody {
	req := &QueryUserTaskReqBody{}
	if builder.userIdsFlag {
		req.UserIds = builder.userIds

	}
	if builder.checkDateFromFlag {
		req.CheckDateFrom = &builder.checkDateFrom

	}
	if builder.checkDateToFlag {
		req.CheckDateTo = &builder.checkDateTo

	}
	return req
}

/**上传文件path开始**/
type QueryUserTaskPathReqBodyBuilder struct {
	userIds           []string
	userIdsFlag       bool
	checkDateFrom     int
	checkDateFromFlag bool
	checkDateTo       int
	checkDateToFlag   bool
}

func NewQueryUserTaskPathReqBodyBuilder() *QueryUserTaskPathReqBodyBuilder {
	builder := &QueryUserTaskPathReqBodyBuilder{}
	return builder
}
func (builder *QueryUserTaskPathReqBodyBuilder) UserIds(userIds []string) *QueryUserTaskPathReqBodyBuilder {
	builder.userIds = userIds
	builder.userIdsFlag = true
	return builder
}
func (builder *QueryUserTaskPathReqBodyBuilder) CheckDateFrom(checkDateFrom int) *QueryUserTaskPathReqBodyBuilder {
	builder.checkDateFrom = checkDateFrom
	builder.checkDateFromFlag = true
	return builder
}
func (builder *QueryUserTaskPathReqBodyBuilder) CheckDateTo(checkDateTo int) *QueryUserTaskPathReqBodyBuilder {
	builder.checkDateTo = checkDateTo
	builder.checkDateToFlag = true
	return builder
}

func (builder *QueryUserTaskPathReqBodyBuilder) Build() (*QueryUserTaskReqBody, error) {
	req := &QueryUserTaskReqBody{}
	if builder.userIdsFlag {
		req.UserIds = builder.userIds
	}
	if builder.checkDateFromFlag {
		req.CheckDateFrom = &builder.checkDateFrom

	}
	if builder.checkDateToFlag {
		req.CheckDateTo = &builder.checkDateTo

	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type QueryUserTaskReqBuilder struct {
	employeeType              string
	employeeTypeFlag          bool
	ignoreInvalidUsers        bool
	ignoreInvalidUsersFlag    bool
	includeTerminatedUser     bool
	includeTerminatedUserFlag bool
	body                      *QueryUserTaskReqBody
	bodyFlag                  bool
}

// 生成请求的New构造器
func NewQueryUserTaskReqBuilder() *QueryUserTaskReqBuilder {
	builder := &QueryUserTaskReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *QueryUserTaskReqBuilder) EmployeeType(employeeType string) *QueryUserTaskReqBuilder {
	builder.employeeType = employeeType
	builder.employeeTypeFlag = true
	return builder
}
func (builder *QueryUserTaskReqBuilder) IgnoreInvalidUsers(ignoreInvalidUsers bool) *QueryUserTaskReqBuilder {
	builder.ignoreInvalidUsers = ignoreInvalidUsers
	builder.ignoreInvalidUsersFlag = true
	return builder
}
func (builder *QueryUserTaskReqBuilder) IncludeTerminatedUser(includeTerminatedUser bool) *QueryUserTaskReqBuilder {
	builder.includeTerminatedUser = includeTerminatedUser
	builder.includeTerminatedUserFlag = true
	return builder
}
func (builder *QueryUserTaskReqBuilder) Body(body *QueryUserTaskReqBody) *QueryUserTaskReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *QueryUserTaskReqBuilder) Build() *QueryUserTaskReq {
	req := &QueryUserTaskReq{}
	if builder.employeeTypeFlag {
		req.EmployeeType = &builder.employeeType
	}
	if builder.ignoreInvalidUsersFlag {
		req.IgnoreInvalidUsers = &builder.ignoreInvalidUsers
	}
	if builder.includeTerminatedUserFlag {
		req.IncludeTerminatedUser = &builder.includeTerminatedUser
	}
	if builder.bodyFlag {
		req.Body = builder.body
	}
	return req
}

type QueryUserTaskReqBody struct {
	UserIds       []string `json:"user_ids,omitempty"`
	CheckDateFrom *int     `json:"check_date_from,omitempty"`
	CheckDateTo   *int     `json:"check_date_to,omitempty"`
}

type QueryUserTaskReq struct {
	EmployeeType          *string               `query:"employee_type"`
	IgnoreInvalidUsers    *bool                 `query:"ignore_invalid_users"`
	IncludeTerminatedUser *bool                 `query:"include_terminated_user"`
	Body                  *QueryUserTaskReqBody `body:""`
}

type QueryUserTaskRespData struct {
	UserTaskResults     []*UserTask `json:"user_task_results,omitempty"`
	InvalidUserIds      []string    `json:"invalid_user_ids,omitempty"`
	UnauthorizedUserIds []string    `json:"unauthorized_user_ids,omitempty"`
}

type QueryUserTaskResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *QueryUserTaskRespData `json:"data"`
}

func (resp *QueryUserTaskResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type CreateUserTaskRemedyReqBuilder struct {
	employeeType       string
	employeeTypeFlag   bool
	userTaskRemedy     *UserTaskRemedy
	userTaskRemedyFlag bool
}

// 生成请求的New构造器
func NewCreateUserTaskRemedyReqBuilder() *CreateUserTaskRemedyReqBuilder {
	builder := &CreateUserTaskRemedyReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *CreateUserTaskRemedyReqBuilder) EmployeeType(employeeType string) *CreateUserTaskRemedyReqBuilder {
	builder.employeeType = employeeType
	builder.employeeTypeFlag = true
	return builder
}
func (builder *CreateUserTaskRemedyReqBuilder) UserTaskRemedy(userTaskRemedy *UserTaskRemedy) *CreateUserTaskRemedyReqBuilder {
	builder.userTaskRemedy = userTaskRemedy
	builder.userTaskRemedyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *CreateUserTaskRemedyReqBuilder) Build() *CreateUserTaskRemedyReq {
	req := &CreateUserTaskRemedyReq{}
	if builder.employeeTypeFlag {
		req.EmployeeType = &builder.employeeType
	}
	if builder.userTaskRemedyFlag {
		req.UserTaskRemedy = builder.userTaskRemedy
	}
	return req
}

type CreateUserTaskRemedyReq struct {
	EmployeeType   *string         `query:"employee_type"`
	UserTaskRemedy *UserTaskRemedy `body:""`
}

type CreateUserTaskRemedyRespData struct {
	UserRemedy *UserTaskRemedy `json:"user_remedy,omitempty"`
}

type CreateUserTaskRemedyResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *CreateUserTaskRemedyRespData `json:"data"`
}

func (resp *CreateUserTaskRemedyResp) Success() bool {
	return resp.Code == 0
}

type QueryUserTaskRemedyReqBodyBuilder struct {
	userIds           []string
	userIdsFlag       bool
	checkTimeFrom     string
	checkTimeFromFlag bool
	checkTimeTo       string
	checkTimeToFlag   bool
}

// 生成body的New构造器
func NewQueryUserTaskRemedyReqBodyBuilder() *QueryUserTaskRemedyReqBodyBuilder {
	builder := &QueryUserTaskRemedyReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *QueryUserTaskRemedyReqBodyBuilder) UserIds(userIds []string) *QueryUserTaskRemedyReqBodyBuilder {
	builder.userIds = userIds
	builder.userIdsFlag = true
	return builder
}
func (builder *QueryUserTaskRemedyReqBodyBuilder) CheckTimeFrom(checkTimeFrom string) *QueryUserTaskRemedyReqBodyBuilder {
	builder.checkTimeFrom = checkTimeFrom
	builder.checkTimeFromFlag = true
	return builder
}
func (builder *QueryUserTaskRemedyReqBodyBuilder) CheckTimeTo(checkTimeTo string) *QueryUserTaskRemedyReqBodyBuilder {
	builder.checkTimeTo = checkTimeTo
	builder.checkTimeToFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *QueryUserTaskRemedyReqBodyBuilder) Build() *QueryUserTaskRemedyReqBody {
	req := &QueryUserTaskRemedyReqBody{}
	if builder.userIdsFlag {
		req.UserIds = builder.userIds

	}
	if builder.checkTimeFromFlag {
		req.CheckTimeFrom = &builder.checkTimeFrom

	}
	if builder.checkTimeToFlag {
		req.CheckTimeTo = &builder.checkTimeTo

	}
	return req
}

/**上传文件path开始**/
type QueryUserTaskRemedyPathReqBodyBuilder struct {
	userIds           []string
	userIdsFlag       bool
	checkTimeFrom     string
	checkTimeFromFlag bool
	checkTimeTo       string
	checkTimeToFlag   bool
}

func NewQueryUserTaskRemedyPathReqBodyBuilder() *QueryUserTaskRemedyPathReqBodyBuilder {
	builder := &QueryUserTaskRemedyPathReqBodyBuilder{}
	return builder
}
func (builder *QueryUserTaskRemedyPathReqBodyBuilder) UserIds(userIds []string) *QueryUserTaskRemedyPathReqBodyBuilder {
	builder.userIds = userIds
	builder.userIdsFlag = true
	return builder
}
func (builder *QueryUserTaskRemedyPathReqBodyBuilder) CheckTimeFrom(checkTimeFrom string) *QueryUserTaskRemedyPathReqBodyBuilder {
	builder.checkTimeFrom = checkTimeFrom
	builder.checkTimeFromFlag = true
	return builder
}
func (builder *QueryUserTaskRemedyPathReqBodyBuilder) CheckTimeTo(checkTimeTo string) *QueryUserTaskRemedyPathReqBodyBuilder {
	builder.checkTimeTo = checkTimeTo
	builder.checkTimeToFlag = true
	return builder
}

func (builder *QueryUserTaskRemedyPathReqBodyBuilder) Build() (*QueryUserTaskRemedyReqBody, error) {
	req := &QueryUserTaskRemedyReqBody{}
	if builder.userIdsFlag {
		req.UserIds = builder.userIds
	}
	if builder.checkTimeFromFlag {
		req.CheckTimeFrom = &builder.checkTimeFrom

	}
	if builder.checkTimeToFlag {
		req.CheckTimeTo = &builder.checkTimeTo

	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type QueryUserTaskRemedyReqBuilder struct {
	employeeType     string
	employeeTypeFlag bool
	body             *QueryUserTaskRemedyReqBody
	bodyFlag         bool
}

// 生成请求的New构造器
func NewQueryUserTaskRemedyReqBuilder() *QueryUserTaskRemedyReqBuilder {
	builder := &QueryUserTaskRemedyReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *QueryUserTaskRemedyReqBuilder) EmployeeType(employeeType string) *QueryUserTaskRemedyReqBuilder {
	builder.employeeType = employeeType
	builder.employeeTypeFlag = true
	return builder
}
func (builder *QueryUserTaskRemedyReqBuilder) Body(body *QueryUserTaskRemedyReqBody) *QueryUserTaskRemedyReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *QueryUserTaskRemedyReqBuilder) Build() *QueryUserTaskRemedyReq {
	req := &QueryUserTaskRemedyReq{}
	if builder.employeeTypeFlag {
		req.EmployeeType = &builder.employeeType
	}
	if builder.bodyFlag {
		req.Body = builder.body
	}
	return req
}

type QueryUserTaskRemedyReqBody struct {
	UserIds       []string `json:"user_ids,omitempty"`
	CheckTimeFrom *string  `json:"check_time_from,omitempty"`
	CheckTimeTo   *string  `json:"check_time_to,omitempty"`
}

type QueryUserTaskRemedyReq struct {
	EmployeeType *string                     `query:"employee_type"`
	Body         *QueryUserTaskRemedyReqBody `body:""`
}

type QueryUserTaskRemedyRespData struct {
	UserRemedys []*UserTaskRemedy `json:"user_remedys,omitempty"`
}

type QueryUserTaskRemedyResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *QueryUserTaskRemedyRespData `json:"data"`
}

func (resp *QueryUserTaskRemedyResp) Success() bool {
	return resp.Code == 0
}

type QueryUserAllowedRemedysUserTaskRemedyReqBodyBuilder struct {
	userId         string
	userIdFlag     bool
	remedyDate     int
	remedyDateFlag bool
}

// 生成body的New构造器
func NewQueryUserAllowedRemedysUserTaskRemedyReqBodyBuilder() *QueryUserAllowedRemedysUserTaskRemedyReqBodyBuilder {
	builder := &QueryUserAllowedRemedysUserTaskRemedyReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *QueryUserAllowedRemedysUserTaskRemedyReqBodyBuilder) UserId(userId string) *QueryUserAllowedRemedysUserTaskRemedyReqBodyBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}
func (builder *QueryUserAllowedRemedysUserTaskRemedyReqBodyBuilder) RemedyDate(remedyDate int) *QueryUserAllowedRemedysUserTaskRemedyReqBodyBuilder {
	builder.remedyDate = remedyDate
	builder.remedyDateFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *QueryUserAllowedRemedysUserTaskRemedyReqBodyBuilder) Build() *QueryUserAllowedRemedysUserTaskRemedyReqBody {
	req := &QueryUserAllowedRemedysUserTaskRemedyReqBody{}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.remedyDateFlag {
		req.RemedyDate = &builder.remedyDate

	}
	return req
}

/**上传文件path开始**/
type QueryUserAllowedRemedysUserTaskRemedyPathReqBodyBuilder struct {
	userId         string
	userIdFlag     bool
	remedyDate     int
	remedyDateFlag bool
}

func NewQueryUserAllowedRemedysUserTaskRemedyPathReqBodyBuilder() *QueryUserAllowedRemedysUserTaskRemedyPathReqBodyBuilder {
	builder := &QueryUserAllowedRemedysUserTaskRemedyPathReqBodyBuilder{}
	return builder
}
func (builder *QueryUserAllowedRemedysUserTaskRemedyPathReqBodyBuilder) UserId(userId string) *QueryUserAllowedRemedysUserTaskRemedyPathReqBodyBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}
func (builder *QueryUserAllowedRemedysUserTaskRemedyPathReqBodyBuilder) RemedyDate(remedyDate int) *QueryUserAllowedRemedysUserTaskRemedyPathReqBodyBuilder {
	builder.remedyDate = remedyDate
	builder.remedyDateFlag = true
	return builder
}

func (builder *QueryUserAllowedRemedysUserTaskRemedyPathReqBodyBuilder) Build() (*QueryUserAllowedRemedysUserTaskRemedyReqBody, error) {
	req := &QueryUserAllowedRemedysUserTaskRemedyReqBody{}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.remedyDateFlag {
		req.RemedyDate = &builder.remedyDate

	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type QueryUserAllowedRemedysUserTaskRemedyReqBuilder struct {
	employeeType     string
	employeeTypeFlag bool
	body             *QueryUserAllowedRemedysUserTaskRemedyReqBody
	bodyFlag         bool
}

// 生成请求的New构造器
func NewQueryUserAllowedRemedysUserTaskRemedyReqBuilder() *QueryUserAllowedRemedysUserTaskRemedyReqBuilder {
	builder := &QueryUserAllowedRemedysUserTaskRemedyReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *QueryUserAllowedRemedysUserTaskRemedyReqBuilder) EmployeeType(employeeType string) *QueryUserAllowedRemedysUserTaskRemedyReqBuilder {
	builder.employeeType = employeeType
	builder.employeeTypeFlag = true
	return builder
}
func (builder *QueryUserAllowedRemedysUserTaskRemedyReqBuilder) Body(body *QueryUserAllowedRemedysUserTaskRemedyReqBody) *QueryUserAllowedRemedysUserTaskRemedyReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *QueryUserAllowedRemedysUserTaskRemedyReqBuilder) Build() *QueryUserAllowedRemedysUserTaskRemedyReq {
	req := &QueryUserAllowedRemedysUserTaskRemedyReq{}
	if builder.employeeTypeFlag {
		req.EmployeeType = &builder.employeeType
	}
	if builder.bodyFlag {
		req.Body = builder.body
	}
	return req
}

type QueryUserAllowedRemedysUserTaskRemedyReqBody struct {
	UserId     *string `json:"user_id,omitempty"`
	RemedyDate *int    `json:"remedy_date,omitempty"`
}

type QueryUserAllowedRemedysUserTaskRemedyReq struct {
	EmployeeType *string                                       `query:"employee_type"`
	Body         *QueryUserAllowedRemedysUserTaskRemedyReqBody `body:""`
}

type QueryUserAllowedRemedysUserTaskRemedyRespData struct {
	UserAllowedRemedys []*UserAllowedRemedy `json:"user_allowed_remedys,omitempty"`
}

type QueryUserAllowedRemedysUserTaskRemedyResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *QueryUserAllowedRemedysUserTaskRemedyRespData `json:"data"`
}

func (resp *QueryUserAllowedRemedysUserTaskRemedyResp) Success() bool {
	return resp.Code == 0
}

/**生成消息事件结构体 **/

type UserFlowCreatedEventData struct {
	EmployeeId   *string  `json:"employee_id,omitempty"`
	EmployeeNo   *string  `json:"employee_no,omitempty"`
	LocationName *string  `json:"location_name,omitempty"`
	CheckTime    *string  `json:"check_time,omitempty"`
	Comment      *string  `json:"comment,omitempty"`
	RecordId     *string  `json:"record_id,omitempty"`
	Longitude    *float64 `json:"longitude,omitempty"`
	Latitude     *float64 `json:"latitude,omitempty"`
	Ssid         *string  `json:"ssid,omitempty"`
	Bssid        *string  `json:"bssid,omitempty"`
	IsField      *bool    `json:"is_field,omitempty"`
	IsWifi       *bool    `json:"is_wifi,omitempty"`
	Type         *int     `json:"type,omitempty"`
	PhotoUrls    []string `json:"photo_urls,omitempty"`
}

type UserFlowCreatedEvent struct {
	*event.EventV2Base
	Event *UserFlowCreatedEventData `json:"event"`
}

type UserTaskUpdatedEventData struct {
	TaskId        *string         `json:"task_id,omitempty"`
	EmployeeId    *string         `json:"employee_id,omitempty"`
	GroupId       *string         `json:"group_id,omitempty"`
	ShiftId       *string         `json:"shift_id,omitempty"`
	Date          *int            `json:"date,omitempty"`
	TimeZone      *string         `json:"time_zone,omitempty"`
	StatusChanges []*StatusChange `json:"status_changes,omitempty"`
	EmployeeNo    *string         `json:"employee_no,omitempty"`
}

type UserTaskUpdatedEvent struct {
	*event.EventV2Base
	Event *UserTaskUpdatedEventData `json:"event"`
}

/* 生成请求的builder构造器*/
/*1.1 生成body的builder结构体*/
/**如果是分页查询，则添加迭代器定义**/
type ListGroupIterator struct {
	nextPageToken *string
	items         []*GroupMeta
	index         int
	limit         int
	ctx           context.Context
	req           *ListGroupReq
	listFunc      func(ctx context.Context, req *ListGroupReq, options ...core.RequestOptionFunc) (*ListGroupResp, error)
	options       []core.RequestOptionFunc
	curlNum       int
}

func (iterator *ListGroupIterator) Next() (bool, *GroupMeta, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum > iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.PageToken = iterator.nextPageToken
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.GroupList) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.GroupList
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListGroupIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

/**如果是分页查询，则添加迭代器定义**/
type ListShiftIterator struct {
	nextPageToken *string
	items         []*Shift
	index         int
	limit         int
	ctx           context.Context
	req           *ListShiftReq
	listFunc      func(ctx context.Context, req *ListShiftReq, options ...core.RequestOptionFunc) (*ListShiftResp, error)
	options       []core.RequestOptionFunc
	curlNum       int
}

func (iterator *ListShiftIterator) Next() (bool, *Shift, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum > iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.PageToken = iterator.nextPageToken
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.ShiftList) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.ShiftList
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListShiftIterator) NextPageToken() *string {
	return iterator.nextPageToken
}
