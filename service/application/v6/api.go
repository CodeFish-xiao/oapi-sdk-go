// Package application code generated by oapi sdk gen
package larkapplication

import (
	"context"
	"net/http"

	"github.com/larksuite/oapi-sdk-go/core"
)

// 构建业务域服务实例
func NewService(httpClient *http.Client, config *core.Config) *ApplicationService {
	a := &ApplicationService{httpClient: httpClient, config: config}
	a.Application = &application{service: a}
	a.ApplicationAppUsage = &applicationAppUsage{service: a}
	a.ApplicationAppVersion = &applicationAppVersion{service: a}
	a.ApplicationFeedback = &applicationFeedback{service: a}
	a.ApplicationVisibility = &applicationVisibility{service: a}
	return a
}

// 业务域服务定义
type ApplicationService struct {
	httpClient            *http.Client
	config                *core.Config
	Application           *application
	ApplicationAppUsage   *applicationAppUsage
	ApplicationAppVersion *applicationAppVersion
	ApplicationFeedback   *applicationFeedback
	ApplicationVisibility *applicationVisibility
}

// 资源服务定义
type application struct {
	service *ApplicationService
}
type applicationAppUsage struct {
	service *ApplicationService
}
type applicationAppVersion struct {
	service *ApplicationService
}
type applicationFeedback struct {
	service *ApplicationService
}
type applicationVisibility struct {
	service *ApplicationService
}

// 资源服务方法定义
func (a *application) Get(ctx context.Context, req *GetApplicationReq, options ...core.RequestOptionFunc) (*GetApplicationResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, a.service.config, http.MethodGet,
		"/open-apis/application/v6/applications/:app_id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &GetApplicationResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *application) Patch(ctx context.Context, req *PatchApplicationReq, options ...core.RequestOptionFunc) (*PatchApplicationResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, a.service.config, http.MethodPatch,
		"/open-apis/application/v6/applications/:app_id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &PatchApplicationResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *application) Underauditlist(ctx context.Context, req *UnderauditlistApplicationReq, options ...core.RequestOptionFunc) (*UnderauditlistApplicationResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, a.service.config, http.MethodGet,
		"/open-apis/application/v6/applications/underauditlist", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &UnderauditlistApplicationResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *application) UnderauditlistApplication(ctx context.Context, req *UnderauditlistApplicationReq, options ...core.RequestOptionFunc) (*UnderauditlistApplicationIterator, error) {
	return &UnderauditlistApplicationIterator{
		ctx:      ctx,
		req:      req,
		listFunc: a.Underauditlist,
		options:  options,
		limit:    req.Limit}, nil
}
func (a *applicationAppUsage) Overview(ctx context.Context, req *OverviewApplicationAppUsageReq, options ...core.RequestOptionFunc) (*OverviewApplicationAppUsageResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, a.service.config, http.MethodPost,
		"/open-apis/application/v6/applications/:app_id/app_usage/overview", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &OverviewApplicationAppUsageResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *applicationAppVersion) Get(ctx context.Context, req *GetApplicationAppVersionReq, options ...core.RequestOptionFunc) (*GetApplicationAppVersionResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, a.service.config, http.MethodGet,
		"/open-apis/application/v6/applications/:app_id/app_versions/:version_id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &GetApplicationAppVersionResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *applicationAppVersion) Patch(ctx context.Context, req *PatchApplicationAppVersionReq, options ...core.RequestOptionFunc) (*PatchApplicationAppVersionResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, a.service.config, http.MethodPatch,
		"/open-apis/application/v6/applications/:app_id/app_versions/:version_id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &PatchApplicationAppVersionResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *applicationFeedback) List(ctx context.Context, req *ListApplicationFeedbackReq, options ...core.RequestOptionFunc) (*ListApplicationFeedbackResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, a.service.config, http.MethodGet,
		"/open-apis/application/v6/applications/:app_id/feedbacks", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &ListApplicationFeedbackResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *applicationFeedback) Patch(ctx context.Context, req *PatchApplicationFeedbackReq, options ...core.RequestOptionFunc) (*PatchApplicationFeedbackResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, a.service.config, http.MethodPatch,
		"/open-apis/application/v6/applications/:app_id/feedbacks/:feedback_id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &PatchApplicationFeedbackResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
