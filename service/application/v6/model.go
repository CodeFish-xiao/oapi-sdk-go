// Package application code generated by oapi sdk gen
package application

import (
	"context"
	"errors"
	"fmt"

	"github.com/feishu/oapi-sdk-go/event"

	"github.com/feishu/oapi-sdk-go/core"
)

/**生成枚举值 **/

const (
	I18nKeyZhCn string = "zh_cn"
	I18nKeyEnUs string = "en_us"
	I18nKeyJaJp string = "ja_jp"
)

const (
	UserIdTypeUserId  string = "user_id"
	UserIdTypeUnionId string = "union_id"
	UserIdTypeOpenId  string = "open_id"
)

const (
	CycleTypeDay   string = "1"
	CycleTypeWeek  string = "2"
	CycleTypeMonth string = "3"
)

const (
	AbilityApp string = "app"
	AbilityMp  string = "mp"
	AbilityH5  string = "h5"
	AbilityBot string = "bot"
)

const (
	DepartmentIdTypeDepartmentId     string = "department_id"
	DepartmentIdTypeOpenDepartmentId string = "open_department_id"
)

const (
	AppVersionStatusUnknown    string = "0"
	AppVersionStatusAudited    string = "1"
	AppVersionStatusReject     string = "2"
	AppVersionStatusUnderAudit string = "3"
	AppVersionStatusUnaudit    string = "4"
)

const (
	OpenFeedbackTypeFault  string = "1"
	OpenFeedbackTypeAdvice string = "2"
)

const (
	OpenMarkStatusUnmarked   string = "0"
	OpenMarkStatusMarked     string = "1"
	OpenMarkStatusProcessing string = "2"
	OpenMarkStatusClosed     string = "3"
)

/**生成数据类型 **/

type AppAbility struct {
	Gadget           *Gadget            `json:"gadget,omitempty"`
	WebApp           *WebApp            `json:"web_app,omitempty"`
	Bot              *Bot               `json:"bot,omitempty"`
	WorkplaceWidgets []*WorkplaceWidget `json:"workplace_widgets,omitempty"`
	Navigate         *Navigate          `json:"navigate,omitempty"`
	CloudDoc         *CloudDoc          `json:"cloud_doc,omitempty"`
	DocsBlocks       []*DocsBlock       `json:"docs_blocks,omitempty"`
	MessageAction    *MessageAction     `json:"message_action,omitempty"`
	PlusMenu         *PlusMenu          `json:"plus_menu,omitempty"`
}

type AppAdminUser struct {
	AdminType []string `json:"admin_type,omitempty"`
	UserId    *string  `json:"user_id,omitempty"`
}

type AppBadge struct {
	UserId  *int64          `json:"user_id,omitempty,string"`
	Version *int64          `json:"version,omitempty,string"`
	Extra   *string         `json:"extra,omitempty"`
	Pc      *ClientBadgeNum `json:"pc,omitempty"`
	Mobile  *ClientBadgeNum `json:"mobile,omitempty"`
}

type AppCommonCategory struct {
	I18nKey  *string `json:"i18n_key,omitempty"`
	Category *string `json:"category,omitempty"`
}

type AppCustomCategory struct {
	I18nKey     *string  `json:"i18n_key,omitempty"`
	Description *string  `json:"description,omitempty"`
	AppIds      []string `json:"app_ids,omitempty"`
}

type AppCustomCategoryI18nInfo struct {
	I18nKey *string `json:"i18n_key,omitempty"`
	Name    *string `json:"name,omitempty"`
}

type AppI18nInfo struct {
	I18nKey     *string `json:"i18n_key,omitempty"`
	Name        *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	HelpUse     *string `json:"help_use,omitempty"`
}

type AppMessageTrendItem struct {
	ChatType    *string           `json:"chat_type,omitempty"`
	EventType   *string           `json:"event_type,omitempty"`
	MessageType *string           `json:"message_type,omitempty"`
	Trend       []*UsageTrendItem `json:"trend,omitempty"`
}

type AppScope struct {
	Scope       *string `json:"scope,omitempty"`
	Description *string `json:"description,omitempty"`
	Level       *int    `json:"level,omitempty"`
}

type AppScopeI18nInfo struct {
	I18nKey     *string `json:"i18n_key,omitempty"`
	Description *string `json:"description,omitempty"`
}

type AppScopes struct {
	HighLevelScopes []string `json:"high_level_scopes,omitempty"`
	LowLevelScopes  []string `json:"low_level_scopes,omitempty"`
}

type AppUsageTrendItems struct {
	Id    *string           `json:"id,omitempty"`
	Trend []*UsageTrendItem `json:"trend,omitempty"`
}

type AppVersionId struct {
	Version   *string `json:"version,omitempty"`
	VersionId *string `json:"version_id,omitempty"`
}

type AppVersionRemark struct {
	Remark       *string        `json:"remark,omitempty"`
	UpdateRemark *string        `json:"update_remark,omitempty"`
	Visibility   *AppVisibility `json:"visibility,omitempty"`
}

type AppVersionRemarkEvent struct {
	Remark       *string             `json:"remark,omitempty"`
	UpdateRemark *string             `json:"update_remark,omitempty"`
	Visibility   *AppVisibilityEvent `json:"visibility,omitempty"`
}

type AppVisibility struct {
	IsAll         *bool           `json:"is_all,omitempty"`
	VisibleList   *AppVisibleList `json:"visible_list,omitempty"`
	InvisibleList *AppVisibleList `json:"invisible_list,omitempty"`
}

type AppVisibilityEvent struct {
	IsAll         *bool                `json:"is_all,omitempty"`
	VisibleList   *AppVisibleListEvent `json:"visible_list,omitempty"`
	InvisibleList *AppVisibleListEvent `json:"invisible_list,omitempty"`
}

type AppVisibilityItem struct {
	UserId       *string `json:"user_id,omitempty"`
	DepartmentId *string `json:"department_id,omitempty"`
	GroupId      *string `json:"group_id,omitempty"`
}

type AppVisibleList struct {
	OpenIds       []int64 `json:"open_ids,omitempty"`
	DepartmentIds []int64 `json:"department_ids,omitempty"`
}

type AppVisibleListEvent struct {
	OpenIds       []*UserId `json:"open_ids,omitempty"`
	DepartmentIds []string  `json:"department_ids,omitempty"`
}

type Application struct {
	AppId            *string        `json:"app_id,omitempty"`
	CreatorId        *int64         `json:"creator_id,omitempty,string"`
	Status           *int           `json:"status,omitempty"`
	SceneType        *int           `json:"scene_type,omitempty"`
	RedirectUrls     []string       `json:"redirect_urls,omitempty"`
	OnlineVersionId  *int64         `json:"online_version_id,omitempty,string"`
	UnauditVersionId *int64         `json:"unaudit_version_id,omitempty,string"`
	AppName          *string        `json:"app_name,omitempty"`
	AvatarUrl        *string        `json:"avatar_url,omitempty"`
	Description      *string        `json:"description,omitempty"`
	Scopes           []*AppScope    `json:"scopes,omitempty"`
	BackHomeUrl      *string        `json:"back_home_url,omitempty"`
	I18n             []*AppI18nInfo `json:"i18n,omitempty"`
	PrimaryLanguage  *string        `json:"primary_language,omitempty"`
	CommonCategories []string       `json:"common_categories,omitempty"`
}

type ApplicationAppUsage struct {
	MetricName  *string `json:"metric_name,omitempty"`
	MetricValue *int    `json:"metric_value,omitempty"`
}

type ApplicationAppVersion struct {
	AppId            *string           `json:"app_id,omitempty"`
	Version          *string           `json:"version,omitempty"`
	VersionId        *int64            `json:"version_id,omitempty,string"`
	AppName          *string           `json:"app_name,omitempty"`
	AvatarUrl        *string           `json:"avatar_url,omitempty"`
	Description      *string           `json:"description,omitempty"`
	Scopes           []*AppScope       `json:"scopes,omitempty"`
	BackHomeUrl      *string           `json:"back_home_url,omitempty"`
	I18n             []*AppI18nInfo    `json:"i18n,omitempty"`
	CommonCategories []string          `json:"common_categories,omitempty"`
	Events           []string          `json:"events,omitempty"`
	Status           *int              `json:"status,omitempty"`
	CreateTime       *int64            `json:"create_time,omitempty,string"`
	PublishTime      *int64            `json:"publish_time,omitempty,string"`
	Ability          *AppAbility       `json:"ability,omitempty"`
	Remark           *AppVersionRemark `json:"remark,omitempty"`
}

type ApplicationAppVersionEvent struct {
	AppId            *string                `json:"app_id,omitempty"`
	Version          *string                `json:"version,omitempty"`
	VersionId        *string                `json:"version_id,omitempty"`
	AppName          *string                `json:"app_name,omitempty"`
	AvatarUrl        *string                `json:"avatar_url,omitempty"`
	Description      *string                `json:"description,omitempty"`
	Scopes           []*AppScope            `json:"scopes,omitempty"`
	BackHomeUrl      *string                `json:"back_home_url,omitempty"`
	I18n             []*AppI18nInfo         `json:"i18n,omitempty"`
	CommonCategories []string               `json:"common_categories,omitempty"`
	Events           []string               `json:"events,omitempty"`
	Status           *int                   `json:"status,omitempty"`
	CreateTime       *int64                 `json:"create_time,omitempty,string"`
	PublishTime      *int64                 `json:"publish_time,omitempty,string"`
	Ability          *AppAbility            `json:"ability,omitempty"`
	Remark           *AppVersionRemarkEvent `json:"remark,omitempty"`
}

type ApplicationDepartmentAppUsage struct {
	DepartmentId *string                `json:"department_id,omitempty"`
	App          []*ApplicationAppUsage `json:"app,omitempty"`
	Gadget       []*ApplicationAppUsage `json:"gadget,omitempty"`
	Webapp       []*ApplicationAppUsage `json:"webapp,omitempty"`
	Bot          []*ApplicationAppUsage `json:"bot,omitempty"`
}

type ApplicationFeedback struct {
	FeedbackId   *int64   `json:"feedback_id,omitempty,string"`
	AppId        *string  `json:"app_id,omitempty"`
	FeedbackTime *string  `json:"feedback_time,omitempty"`
	TenantName   *string  `json:"tenant_name,omitempty"`
	FeedbackType *int     `json:"feedback_type,omitempty"`
	Status       *int     `json:"status,omitempty"`
	FaultType    []int    `json:"fault_type,omitempty"`
	FaultTime    *string  `json:"fault_time,omitempty"`
	Source       *int     `json:"source,omitempty"`
	Contact      *string  `json:"contact,omitempty"`
	UpdateTime   *string  `json:"update_time,omitempty"`
	Description  *string  `json:"description,omitempty"`
	UserId       *string  `json:"user_id,omitempty"`
	OperatorId   *string  `json:"operator_id,omitempty"`
	Images       []string `json:"images,omitempty"`
}

type ApplicationVisibility struct {
	IsAll         *bool           `json:"is_all,omitempty"`
	VisibleList   *AppVisibleList `json:"visible_list,omitempty"`
	InvisibleList *AppVisibleList `json:"invisible_list,omitempty"`
}

type Block struct {
	BlockTypeId   *string          `json:"block_type_id,omitempty"`
	VersionId     *string          `json:"version_id,omitempty"`
	I18n          []*BlockI18nInfo `json:"i18n,omitempty"`
	MobileIconUrl *string          `json:"mobile_icon_url,omitempty"`
	PcIconUrl     *string          `json:"pc_icon_url,omitempty"`
}

type BlockI18nInfo struct {
	I18nKey *string `json:"i18n_key,omitempty"`
	Name    *string `json:"name,omitempty"`
}

type Bot struct {
	CardRequestUrl *string `json:"card_request_url,omitempty"`
}

type ClientBadgeNum struct {
	WebApp *int `json:"web_app,omitempty"`
	Gadget *int `json:"gadget,omitempty"`
}

type CloudDoc struct {
	SpaceUrl *string             `json:"space_url,omitempty"`
	I18n     []*CloudDocI18nInfo `json:"i18n,omitempty"`
	IconUrl  *string             `json:"icon_url,omitempty"`
	Mode     *int                `json:"mode,omitempty"`
}

type CloudDocI18nInfo struct {
	I18nKey          *string `json:"i18n_key,omitempty"`
	Name             *string `json:"name,omitempty"`
	ReadDescription  *string `json:"read_description,omitempty"`
	WriteDescription *string `json:"write_description,omitempty"`
}

type DocsBlock struct {
	BlockTypeId   *string          `json:"block_type_id,omitempty"`
	I18n          []*BlockI18nInfo `json:"i18n,omitempty"`
	MobileIconUrl *string          `json:"mobile_icon_url,omitempty"`
	PcIconUrl     *string          `json:"pc_icon_url,omitempty"`
}

type Gadget struct {
	EnablePcMode         *int     `json:"enable_pc_mode,omitempty"`
	SchemaUrls           []string `json:"schema_urls,omitempty"`
	PcUseMobilePkg       *bool    `json:"pc_use_mobile_pkg,omitempty"`
	PcVersion            *string  `json:"pc_version,omitempty"`
	MobileVersion        *string  `json:"mobile_version,omitempty"`
	MobileMinLarkVersion *string  `json:"mobile_min_lark_version,omitempty"`
	PcMinLarkVersion     *string  `json:"pc_min_lark_version,omitempty"`
}

type MessageAction struct {
	PcAppLink     *string                  `json:"pc_app_link,omitempty"`
	MobileAppLink *string                  `json:"mobile_app_link,omitempty"`
	I18n          []*MessageActionI18nInfo `json:"i18n,omitempty"`
}

type MessageActionI18nInfo struct {
	I18nKey *string `json:"i18n_key,omitempty"`
	Name    *string `json:"name,omitempty"`
}

type MessageOverviewItem struct {
	PageView      *int64  `json:"page_view,omitempty,string"`
	UniqueVisitor *int64  `json:"unique_visitor,omitempty,string"`
	ChatType      *string `json:"chat_type,omitempty"`
	MessageType   *string `json:"message_type,omitempty"`
	EventType     *string `json:"event_type,omitempty"`
}

type Miniprogram struct {
	EnablePcMode         *int     `json:"enable_pc_mode,omitempty"`
	SchemaUrls           []string `json:"schema_urls,omitempty"`
	PcUseMobilePkg       *bool    `json:"pc_use_mobile_pkg,omitempty"`
	PcVersionId          *string  `json:"pc_version_id,omitempty"`
	MobileVersionId      *string  `json:"mobile_version_id,omitempty"`
	MobileMinLarkVersion *string  `json:"mobile_min_lark_version,omitempty"`
	PcMinLarkVersion     *string  `json:"pc_min_lark_version,omitempty"`
}

type MsgAction struct {
	PcAppLink     *string              `json:"pc_app_link,omitempty"`
	MobileAppLink *string              `json:"mobile_app_link,omitempty"`
	I18n          []*MsgActionI18nInfo `json:"i18n,omitempty"`
}

type MsgActionI18nInfo struct {
	I18nKey *string `json:"i18n_key,omitempty"`
	Name    *string `json:"name,omitempty"`
}

type Navigate struct {
	Pc     *NavigateMeta `json:"pc,omitempty"`
	Mobile *NavigateMeta `json:"mobile,omitempty"`
}

type NavigateMeta struct {
	Version       *string `json:"version,omitempty"`
	ImageUrl      *string `json:"image_url,omitempty"`
	HoverImageUrl *string `json:"hover_image_url,omitempty"`
}

type PlusMenu struct {
	PcAppLink     *string `json:"pc_app_link,omitempty"`
	MobileAppLink *string `json:"mobile_app_link,omitempty"`
}

type Scope struct {
	ScopeName   *string `json:"scope_name,omitempty"`
	GrantStatus *int    `json:"grant_status,omitempty"`
}

type UsageOverviewItem struct {
	PageView      *int64  `json:"page_view,omitempty,string"`
	UniqueVisitor *int64  `json:"unique_visitor,omitempty,string"`
	DepartmentId  *string `json:"department_id,omitempty"`
}

type UsageTrendItem struct {
	Timestamp     *int64 `json:"timestamp,omitempty,string"`
	PageView      *int64 `json:"page_view,omitempty,string"`
	UniqueVisitor *int64 `json:"unique_visitor,omitempty,string"`
}

type UsageUser struct {
	UserId *string `json:"user_id,omitempty"`
}

type User struct {
	UserId *UserId `json:"user_id,omitempty"`
}

type UserId struct {
	UserId  *string `json:"user_id,omitempty"`
	OpenId  *string `json:"open_id,omitempty"`
	UnionId *string `json:"union_id,omitempty"`
}

type WebApp struct {
	PcUrl     *string `json:"pc_url,omitempty"`
	MobileUrl *string `json:"mobile_url,omitempty"`
}

type Widget struct {
}

type WorkplaceWidget struct {
	MinLarkVersion *string `json:"min_lark_version,omitempty"`
}

/**生成请求和响应结果类型，以及请求对象的Builder构造器 **/

/*1.4 生成请求的builder结构体*/
type GetApplicationReqBuilder struct {
	appId          string
	appIdFlag      bool
	lang           string
	langFlag       bool
	userIdType     string
	userIdTypeFlag bool
}

// 生成请求的New构造器
func NewGetApplicationReqBuilder() *GetApplicationReqBuilder {
	builder := &GetApplicationReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *GetApplicationReqBuilder) AppId(appId string) *GetApplicationReqBuilder {
	builder.appId = appId
	builder.appIdFlag = true
	return builder
}
func (builder *GetApplicationReqBuilder) Lang(lang string) *GetApplicationReqBuilder {
	builder.lang = lang
	builder.langFlag = true
	return builder
}
func (builder *GetApplicationReqBuilder) UserIdType(userIdType string) *GetApplicationReqBuilder {
	builder.userIdType = userIdType
	builder.userIdTypeFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *GetApplicationReqBuilder) Build() *GetApplicationReq {
	req := &GetApplicationReq{}
	if builder.appIdFlag {
		req.AppId = builder.appId
	}
	if builder.langFlag {
		req.Lang = &builder.lang
	}
	if builder.userIdTypeFlag {
		req.UserIdType = &builder.userIdType
	}
	return req
}

type GetApplicationReq struct {
	AppId      string  `path:"app_id"`
	Lang       *string `query:"lang"`
	UserIdType *string `query:"user_id_type"`
}

type GetApplicationRespData struct {
	App *Application `json:"app,omitempty"`
}

type GetApplicationResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *GetApplicationRespData `json:"data"`
}

func (resp *GetApplicationResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type PatchApplicationReqBuilder struct {
	appId           string
	appIdFlag       bool
	lang            string
	langFlag        bool
	application     *Application
	applicationFlag bool
}

// 生成请求的New构造器
func NewPatchApplicationReqBuilder() *PatchApplicationReqBuilder {
	builder := &PatchApplicationReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *PatchApplicationReqBuilder) AppId(appId string) *PatchApplicationReqBuilder {
	builder.appId = appId
	builder.appIdFlag = true
	return builder
}
func (builder *PatchApplicationReqBuilder) Lang(lang string) *PatchApplicationReqBuilder {
	builder.lang = lang
	builder.langFlag = true
	return builder
}
func (builder *PatchApplicationReqBuilder) Application(application *Application) *PatchApplicationReqBuilder {
	builder.application = application
	builder.applicationFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *PatchApplicationReqBuilder) Build() *PatchApplicationReq {
	req := &PatchApplicationReq{}
	if builder.appIdFlag {
		req.AppId = builder.appId
	}
	if builder.langFlag {
		req.Lang = &builder.lang
	}
	return req
}

type PatchApplicationReq struct {
	AppId       string       `path:"app_id"`
	Lang        *string      `query:"lang"`
	Application *Application `body:""`
}

type PatchApplicationResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *PatchApplicationResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type UnderauditlistApplicationReqBuilder struct {
	lang           string
	langFlag       bool
	pageToken      string
	pageTokenFlag  bool
	pageSize       int
	pageSizeFlag   bool
	userIdType     string
	userIdTypeFlag bool
	limit          int
}

// 生成请求的New构造器
func NewUnderauditlistApplicationReqBuilder() *UnderauditlistApplicationReqBuilder {
	builder := &UnderauditlistApplicationReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *UnderauditlistApplicationReqBuilder) Limit(limit int) *UnderauditlistApplicationReqBuilder {
	builder.limit = limit
	return builder
}
func (builder *UnderauditlistApplicationReqBuilder) Lang(lang string) *UnderauditlistApplicationReqBuilder {
	builder.lang = lang
	builder.langFlag = true
	return builder
}
func (builder *UnderauditlistApplicationReqBuilder) PageToken(pageToken string) *UnderauditlistApplicationReqBuilder {
	builder.pageToken = pageToken
	builder.pageTokenFlag = true
	return builder
}
func (builder *UnderauditlistApplicationReqBuilder) PageSize(pageSize int) *UnderauditlistApplicationReqBuilder {
	builder.pageSize = pageSize
	builder.pageSizeFlag = true
	return builder
}
func (builder *UnderauditlistApplicationReqBuilder) UserIdType(userIdType string) *UnderauditlistApplicationReqBuilder {
	builder.userIdType = userIdType
	builder.userIdTypeFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *UnderauditlistApplicationReqBuilder) Build() *UnderauditlistApplicationReq {
	req := &UnderauditlistApplicationReq{}
	req.Limit = builder.limit
	if builder.langFlag {
		req.Lang = &builder.lang
	}
	if builder.pageTokenFlag {
		req.PageToken = &builder.pageToken
	}
	if builder.pageSizeFlag {
		req.PageSize = &builder.pageSize
	}
	if builder.userIdTypeFlag {
		req.UserIdType = &builder.userIdType
	}
	return req
}

type UnderauditlistApplicationReq struct {
	Lang       *string `query:"lang"`
	PageToken  *string `query:"page_token"`
	PageSize   *int    `query:"page_size"`
	UserIdType *string `query:"user_id_type"`
	Limit      int
}

type UnderauditlistApplicationRespData struct {
	Items     []*Application `json:"items,omitempty"`
	HasMore   *bool          `json:"has_more,omitempty"`
	PageToken *string        `json:"page_token,omitempty"`
}

type UnderauditlistApplicationResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *UnderauditlistApplicationRespData `json:"data"`
}

func (resp *UnderauditlistApplicationResp) Success() bool {
	return resp.Code == 0
}

type OverviewApplicationAppUsageReqBodyBuilder struct {
	date             string
	dateFlag         bool
	cycleType        int
	cycleTypeFlag    bool
	departmentId     string
	departmentIdFlag bool
	ability          string
	abilityFlag      bool
}

// 生成body的New构造器
func NewOverviewApplicationAppUsageReqBodyBuilder() *OverviewApplicationAppUsageReqBodyBuilder {
	builder := &OverviewApplicationAppUsageReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *OverviewApplicationAppUsageReqBodyBuilder) Date(date string) *OverviewApplicationAppUsageReqBodyBuilder {
	builder.date = date
	builder.dateFlag = true
	return builder
}
func (builder *OverviewApplicationAppUsageReqBodyBuilder) CycleType(cycleType int) *OverviewApplicationAppUsageReqBodyBuilder {
	builder.cycleType = cycleType
	builder.cycleTypeFlag = true
	return builder
}
func (builder *OverviewApplicationAppUsageReqBodyBuilder) DepartmentId(departmentId string) *OverviewApplicationAppUsageReqBodyBuilder {
	builder.departmentId = departmentId
	builder.departmentIdFlag = true
	return builder
}
func (builder *OverviewApplicationAppUsageReqBodyBuilder) Ability(ability string) *OverviewApplicationAppUsageReqBodyBuilder {
	builder.ability = ability
	builder.abilityFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *OverviewApplicationAppUsageReqBodyBuilder) Build() *OverviewApplicationAppUsageReqBody {
	req := &OverviewApplicationAppUsageReqBody{}
	if builder.dateFlag {
		req.Date = &builder.date

	}
	if builder.cycleTypeFlag {
		req.CycleType = &builder.cycleType

	}
	if builder.departmentIdFlag {
		req.DepartmentId = &builder.departmentId

	}
	if builder.abilityFlag {
		req.Ability = &builder.ability

	}
	return req
}

/**上传文件path开始**/
type OverviewApplicationAppUsagePathReqBodyBuilder struct {
	date             string
	dateFlag         bool
	cycleType        int
	cycleTypeFlag    bool
	departmentId     string
	departmentIdFlag bool
	ability          string
	abilityFlag      bool
}

// 生成body的New构造器
func NewOverviewApplicationAppUsagePathReqBodyBuilder() *OverviewApplicationAppUsagePathReqBodyBuilder {
	builder := &OverviewApplicationAppUsagePathReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *OverviewApplicationAppUsagePathReqBodyBuilder) Date(date string) *OverviewApplicationAppUsagePathReqBodyBuilder {
	builder.date = date
	builder.dateFlag = true
	return builder
}
func (builder *OverviewApplicationAppUsagePathReqBodyBuilder) CycleType(cycleType int) *OverviewApplicationAppUsagePathReqBodyBuilder {
	builder.cycleType = cycleType
	builder.cycleTypeFlag = true
	return builder
}
func (builder *OverviewApplicationAppUsagePathReqBodyBuilder) DepartmentId(departmentId string) *OverviewApplicationAppUsagePathReqBodyBuilder {
	builder.departmentId = departmentId
	builder.departmentIdFlag = true
	return builder
}
func (builder *OverviewApplicationAppUsagePathReqBodyBuilder) Ability(ability string) *OverviewApplicationAppUsagePathReqBodyBuilder {
	builder.ability = ability
	builder.abilityFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *OverviewApplicationAppUsagePathReqBodyBuilder) Build() (*OverviewApplicationAppUsageReqBody, error) {
	req := &OverviewApplicationAppUsageReqBody{}
	if builder.dateFlag {
		req.Date = &builder.date

	}
	if builder.cycleTypeFlag {
		req.CycleType = &builder.cycleType

	}
	if builder.departmentIdFlag {
		req.DepartmentId = &builder.departmentId

	}
	if builder.abilityFlag {
		req.Ability = &builder.ability

	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type OverviewApplicationAppUsageReqBuilder struct {
	appId                string
	appIdFlag            bool
	departmentIdType     string
	departmentIdTypeFlag bool
	body                 *OverviewApplicationAppUsageReqBody
	bodyFlag             bool
}

// 生成请求的New构造器
func NewOverviewApplicationAppUsageReqBuilder() *OverviewApplicationAppUsageReqBuilder {
	builder := &OverviewApplicationAppUsageReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *OverviewApplicationAppUsageReqBuilder) AppId(appId string) *OverviewApplicationAppUsageReqBuilder {
	builder.appId = appId
	builder.appIdFlag = true
	return builder
}
func (builder *OverviewApplicationAppUsageReqBuilder) DepartmentIdType(departmentIdType string) *OverviewApplicationAppUsageReqBuilder {
	builder.departmentIdType = departmentIdType
	builder.departmentIdTypeFlag = true
	return builder
}
func (builder *OverviewApplicationAppUsageReqBuilder) Body(body *OverviewApplicationAppUsageReqBody) *OverviewApplicationAppUsageReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *OverviewApplicationAppUsageReqBuilder) Build() *OverviewApplicationAppUsageReq {
	req := &OverviewApplicationAppUsageReq{}
	if builder.appIdFlag {
		req.AppId = builder.appId
	}
	if builder.departmentIdTypeFlag {
		req.DepartmentIdType = &builder.departmentIdType
	}
	if builder.bodyFlag {
		req.Body = builder.body

	}
	return req
}

type OverviewApplicationAppUsageReqBody struct {
	Date         *string `json:"date,omitempty"`
	CycleType    *int    `json:"cycle_type,omitempty"`
	DepartmentId *string `json:"department_id,omitempty"`
	Ability      *string `json:"ability,omitempty"`
}

type OverviewApplicationAppUsageReq struct {
	AppId            string                              `path:"app_id"`
	DepartmentIdType *string                             `query:"department_id_type"`
	Body             *OverviewApplicationAppUsageReqBody `body:""`
}

type OverviewApplicationAppUsageRespData struct {
	Items []*ApplicationAppUsage `json:"items,omitempty"`
}

type OverviewApplicationAppUsageResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *OverviewApplicationAppUsageRespData `json:"data"`
}

func (resp *OverviewApplicationAppUsageResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type GetApplicationAppVersionReqBuilder struct {
	appId          string
	appIdFlag      bool
	versionId      int64
	versionIdFlag  bool
	lang           string
	langFlag       bool
	userIdType     string
	userIdTypeFlag bool
}

// 生成请求的New构造器
func NewGetApplicationAppVersionReqBuilder() *GetApplicationAppVersionReqBuilder {
	builder := &GetApplicationAppVersionReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *GetApplicationAppVersionReqBuilder) AppId(appId string) *GetApplicationAppVersionReqBuilder {
	builder.appId = appId
	builder.appIdFlag = true
	return builder
}
func (builder *GetApplicationAppVersionReqBuilder) VersionId(versionId int64) *GetApplicationAppVersionReqBuilder {
	builder.versionId = versionId
	builder.versionIdFlag = true
	return builder
}
func (builder *GetApplicationAppVersionReqBuilder) Lang(lang string) *GetApplicationAppVersionReqBuilder {
	builder.lang = lang
	builder.langFlag = true
	return builder
}
func (builder *GetApplicationAppVersionReqBuilder) UserIdType(userIdType string) *GetApplicationAppVersionReqBuilder {
	builder.userIdType = userIdType
	builder.userIdTypeFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *GetApplicationAppVersionReqBuilder) Build() *GetApplicationAppVersionReq {
	req := &GetApplicationAppVersionReq{}
	if builder.appIdFlag {
		req.AppId = builder.appId
	}
	if builder.versionIdFlag {
		req.VersionId = builder.versionId
	}
	if builder.langFlag {
		req.Lang = &builder.lang
	}
	if builder.userIdTypeFlag {
		req.UserIdType = &builder.userIdType
	}
	return req
}

type GetApplicationAppVersionReq struct {
	AppId      string  `path:"app_id"`
	VersionId  int64   `path:"version_id"`
	Lang       *string `query:"lang"`
	UserIdType *string `query:"user_id_type"`
}

type GetApplicationAppVersionRespData struct {
	AppVersion *ApplicationAppVersion `json:"app_version,omitempty"`
}

type GetApplicationAppVersionResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *GetApplicationAppVersionRespData `json:"data"`
}

func (resp *GetApplicationAppVersionResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type PatchApplicationAppVersionReqBuilder struct {
	appId                     string
	appIdFlag                 bool
	versionId                 int64
	versionIdFlag             bool
	userIdType                string
	userIdTypeFlag            bool
	operatorId                int64
	operatorIdFlag            bool
	rejectReason              string
	rejectReasonFlag          bool
	applicationAppVersion     *ApplicationAppVersion
	applicationAppVersionFlag bool
}

// 生成请求的New构造器
func NewPatchApplicationAppVersionReqBuilder() *PatchApplicationAppVersionReqBuilder {
	builder := &PatchApplicationAppVersionReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *PatchApplicationAppVersionReqBuilder) AppId(appId string) *PatchApplicationAppVersionReqBuilder {
	builder.appId = appId
	builder.appIdFlag = true
	return builder
}
func (builder *PatchApplicationAppVersionReqBuilder) VersionId(versionId int64) *PatchApplicationAppVersionReqBuilder {
	builder.versionId = versionId
	builder.versionIdFlag = true
	return builder
}
func (builder *PatchApplicationAppVersionReqBuilder) UserIdType(userIdType string) *PatchApplicationAppVersionReqBuilder {
	builder.userIdType = userIdType
	builder.userIdTypeFlag = true
	return builder
}
func (builder *PatchApplicationAppVersionReqBuilder) OperatorId(operatorId int64) *PatchApplicationAppVersionReqBuilder {
	builder.operatorId = operatorId
	builder.operatorIdFlag = true
	return builder
}
func (builder *PatchApplicationAppVersionReqBuilder) RejectReason(rejectReason string) *PatchApplicationAppVersionReqBuilder {
	builder.rejectReason = rejectReason
	builder.rejectReasonFlag = true
	return builder
}
func (builder *PatchApplicationAppVersionReqBuilder) ApplicationAppVersion(applicationAppVersion *ApplicationAppVersion) *PatchApplicationAppVersionReqBuilder {
	builder.applicationAppVersion = applicationAppVersion
	builder.applicationAppVersionFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *PatchApplicationAppVersionReqBuilder) Build() *PatchApplicationAppVersionReq {
	req := &PatchApplicationAppVersionReq{}
	if builder.appIdFlag {
		req.AppId = builder.appId
	}
	if builder.versionIdFlag {
		req.VersionId = builder.versionId
	}
	if builder.userIdTypeFlag {
		req.UserIdType = &builder.userIdType
	}
	if builder.operatorIdFlag {
		req.OperatorId = &builder.operatorId
	}
	if builder.rejectReasonFlag {
		req.RejectReason = &builder.rejectReason
	}
	return req
}

type PatchApplicationAppVersionReq struct {
	AppId                 string                 `path:"app_id"`
	VersionId             int64                  `path:"version_id"`
	UserIdType            *string                `query:"user_id_type"`
	OperatorId            *int64                 `query:"operator_id"`
	RejectReason          *string                `query:"reject_reason"`
	ApplicationAppVersion *ApplicationAppVersion `body:""`
}

type PatchApplicationAppVersionResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *PatchApplicationAppVersionResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type ListApplicationFeedbackReqBuilder struct {
	appId            string
	appIdFlag        bool
	fromDate         string
	fromDateFlag     bool
	toDate           string
	toDateFlag       bool
	feedbackType     int
	feedbackTypeFlag bool
	status           int
	statusFlag       bool
	userIdType       string
	userIdTypeFlag   bool
	pageToken        int64
	pageTokenFlag    bool
	pageSize         int
	pageSizeFlag     bool
}

// 生成请求的New构造器
func NewListApplicationFeedbackReqBuilder() *ListApplicationFeedbackReqBuilder {
	builder := &ListApplicationFeedbackReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *ListApplicationFeedbackReqBuilder) AppId(appId string) *ListApplicationFeedbackReqBuilder {
	builder.appId = appId
	builder.appIdFlag = true
	return builder
}
func (builder *ListApplicationFeedbackReqBuilder) FromDate(fromDate string) *ListApplicationFeedbackReqBuilder {
	builder.fromDate = fromDate
	builder.fromDateFlag = true
	return builder
}
func (builder *ListApplicationFeedbackReqBuilder) ToDate(toDate string) *ListApplicationFeedbackReqBuilder {
	builder.toDate = toDate
	builder.toDateFlag = true
	return builder
}
func (builder *ListApplicationFeedbackReqBuilder) FeedbackType(feedbackType int) *ListApplicationFeedbackReqBuilder {
	builder.feedbackType = feedbackType
	builder.feedbackTypeFlag = true
	return builder
}
func (builder *ListApplicationFeedbackReqBuilder) Status(status int) *ListApplicationFeedbackReqBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}
func (builder *ListApplicationFeedbackReqBuilder) UserIdType(userIdType string) *ListApplicationFeedbackReqBuilder {
	builder.userIdType = userIdType
	builder.userIdTypeFlag = true
	return builder
}
func (builder *ListApplicationFeedbackReqBuilder) PageToken(pageToken int64) *ListApplicationFeedbackReqBuilder {
	builder.pageToken = pageToken
	builder.pageTokenFlag = true
	return builder
}
func (builder *ListApplicationFeedbackReqBuilder) PageSize(pageSize int) *ListApplicationFeedbackReqBuilder {
	builder.pageSize = pageSize
	builder.pageSizeFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *ListApplicationFeedbackReqBuilder) Build() *ListApplicationFeedbackReq {
	req := &ListApplicationFeedbackReq{}
	if builder.appIdFlag {
		req.AppId = builder.appId
	}
	if builder.fromDateFlag {
		req.FromDate = &builder.fromDate
	}
	if builder.toDateFlag {
		req.ToDate = &builder.toDate
	}
	if builder.feedbackTypeFlag {
		req.FeedbackType = &builder.feedbackType
	}
	if builder.statusFlag {
		req.Status = &builder.status
	}
	if builder.userIdTypeFlag {
		req.UserIdType = &builder.userIdType
	}
	if builder.pageTokenFlag {
		req.PageToken = &builder.pageToken
	}
	if builder.pageSizeFlag {
		req.PageSize = &builder.pageSize
	}
	return req
}

type ListApplicationFeedbackReq struct {
	AppId        string  `path:"app_id"`
	FromDate     *string `query:"from_date"`
	ToDate       *string `query:"to_date"`
	FeedbackType *int    `query:"feedback_type"`
	Status       *int    `query:"status"`
	UserIdType   *string `query:"user_id_type"`
	PageToken    *int64  `query:"page_token"`
	PageSize     *int    `query:"page_size"`
}

type ListApplicationFeedbackRespData struct {
	FeedbackList []*ApplicationFeedback `json:"feedback_list,omitempty"`
	HasMore      *bool                  `json:"has_more,omitempty"`
	PageToken    *string                `json:"page_token,omitempty"`
}

type ListApplicationFeedbackResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *ListApplicationFeedbackRespData `json:"data"`
}

func (resp *ListApplicationFeedbackResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type PatchApplicationFeedbackReqBuilder struct {
	appId          string
	appIdFlag      bool
	feedbackId     int64
	feedbackIdFlag bool
	userIdType     string
	userIdTypeFlag bool
	status         int
	statusFlag     bool
	operatorId     string
	operatorIdFlag bool
}

// 生成请求的New构造器
func NewPatchApplicationFeedbackReqBuilder() *PatchApplicationFeedbackReqBuilder {
	builder := &PatchApplicationFeedbackReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *PatchApplicationFeedbackReqBuilder) AppId(appId string) *PatchApplicationFeedbackReqBuilder {
	builder.appId = appId
	builder.appIdFlag = true
	return builder
}
func (builder *PatchApplicationFeedbackReqBuilder) FeedbackId(feedbackId int64) *PatchApplicationFeedbackReqBuilder {
	builder.feedbackId = feedbackId
	builder.feedbackIdFlag = true
	return builder
}
func (builder *PatchApplicationFeedbackReqBuilder) UserIdType(userIdType string) *PatchApplicationFeedbackReqBuilder {
	builder.userIdType = userIdType
	builder.userIdTypeFlag = true
	return builder
}
func (builder *PatchApplicationFeedbackReqBuilder) Status(status int) *PatchApplicationFeedbackReqBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}
func (builder *PatchApplicationFeedbackReqBuilder) OperatorId(operatorId string) *PatchApplicationFeedbackReqBuilder {
	builder.operatorId = operatorId
	builder.operatorIdFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *PatchApplicationFeedbackReqBuilder) Build() *PatchApplicationFeedbackReq {
	req := &PatchApplicationFeedbackReq{}
	if builder.appIdFlag {
		req.AppId = builder.appId
	}
	if builder.feedbackIdFlag {
		req.FeedbackId = builder.feedbackId
	}
	if builder.userIdTypeFlag {
		req.UserIdType = &builder.userIdType
	}
	if builder.statusFlag {
		req.Status = &builder.status
	}
	if builder.operatorIdFlag {
		req.OperatorId = &builder.operatorId
	}
	return req
}

type PatchApplicationFeedbackReq struct {
	AppId      string  `path:"app_id"`
	FeedbackId int64   `path:"feedback_id"`
	UserIdType *string `query:"user_id_type"`
	Status     *int    `query:"status"`
	OperatorId *string `query:"operator_id"`
}

type PatchApplicationFeedbackResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *PatchApplicationFeedbackResp) Success() bool {
	return resp.Code == 0
}

/**生成消息事件结构体 **/

type ApplicationCreatedEventData struct {
	OperatorId      *UserId `json:"operator_id,omitempty"`
	AppId           *string `json:"app_id,omitempty"`
	Name            *string `json:"name,omitempty"`
	Description     *string `json:"description,omitempty"`
	Avatar          *string `json:"avatar,omitempty"`
	AppSceneType    *int    `json:"app_scene_type,omitempty"`
	PrimaryLanguage *string `json:"primary_language,omitempty"`
}

type ApplicationCreatedEvent struct {
	*event.EventV2Base
	Event *ApplicationCreatedEventData `json:"event"`
}

type ApplicationAppVersionAuditEventData struct {
	OperatorId  *UserId `json:"operator_id,omitempty"`
	VersionId   *string `json:"version_id,omitempty"`
	CreatorId   *UserId `json:"creator_id,omitempty"`
	AppId       *string `json:"app_id,omitempty"`
	Operation   *string `json:"operation,omitempty"`
	Remark      *string `json:"remark,omitempty"`
	AuditSource *string `json:"audit_source,omitempty"`
}

type ApplicationAppVersionAuditEvent struct {
	*event.EventV2Base
	Event *ApplicationAppVersionAuditEventData `json:"event"`
}

type ApplicationAppVersionPublishApplyEventData struct {
	OperatorId        *UserId                     `json:"operator_id,omitempty"`
	OnlineVersion     *ApplicationAppVersionEvent `json:"online_version,omitempty"`
	UnderAuditVersion *ApplicationAppVersionEvent `json:"under_audit_version,omitempty"`
	AppStatus         *int                        `json:"app_status,omitempty"`
}

type ApplicationAppVersionPublishApplyEvent struct {
	*event.EventV2Base
	Event *ApplicationAppVersionPublishApplyEventData `json:"event"`
}

type ApplicationAppVersionPublishRevokeEventData struct {
	OperatorId *UserId `json:"operator_id,omitempty"`
	CreatorId  *UserId `json:"creator_id,omitempty"`
	AppId      *string `json:"app_id,omitempty"`
	VersionId  *string `json:"version_id,omitempty"`
}

type ApplicationAppVersionPublishRevokeEvent struct {
	*event.EventV2Base
	Event *ApplicationAppVersionPublishRevokeEventData `json:"event"`
}

type ApplicationFeedbackCreatedEventData struct {
	UserId       *UserId  `json:"user_id,omitempty"`
	AppId        *string  `json:"app_id,omitempty"`
	FeedbackTime *string  `json:"feedback_time,omitempty"`
	TenantName   *string  `json:"tenant_name,omitempty"`
	FeedbackType *int     `json:"feedback_type,omitempty"`
	FaultType    []int    `json:"fault_type,omitempty"`
	FaultTime    *string  `json:"fault_time,omitempty"`
	Source       *int     `json:"source,omitempty"`
	Contact      *string  `json:"contact,omitempty"`
	Description  *string  `json:"description,omitempty"`
	Images       []string `json:"images,omitempty"`
	FeedbackId   *string  `json:"feedback_id,omitempty"`
}

type ApplicationFeedbackCreatedEvent struct {
	*event.EventV2Base
	Event *ApplicationFeedbackCreatedEventData `json:"event"`
}

type ApplicationFeedbackUpdatedEventData struct {
	FeedbackIds []string `json:"feedback_ids,omitempty"`
	Status      *int     `json:"status,omitempty"`
	AppId       *string  `json:"app_id,omitempty"`
	UpdateTime  *string  `json:"update_time,omitempty"`
	OperatorId  *UserId  `json:"operator_id,omitempty"`
}

type ApplicationFeedbackUpdatedEvent struct {
	*event.EventV2Base
	Event *ApplicationFeedbackUpdatedEventData `json:"event"`
}

type ApplicationVisibilityAddedEventData struct {
	Users  []*User `json:"users,omitempty"`
	Source *int    `json:"source,omitempty"`
}

type ApplicationVisibilityAddedEvent struct {
	*event.EventV2Base
	Event *ApplicationVisibilityAddedEventData `json:"event"`
}

/* 生成请求的builder构造器*/
/*1.1 生成body的builder结构体*/
/**如果是分页查询，则添加迭代器定义**/
type UnderauditlistApplicationIterator struct {
	nextPageToken *string
	items         []*Application
	index         int
	limit         int
	ctx           context.Context
	req           *UnderauditlistApplicationReq
	listFunc      func(ctx context.Context, req *UnderauditlistApplicationReq, options ...core.RequestOptionFunc) (*UnderauditlistApplicationResp, error)
	options       []core.RequestOptionFunc
	curlNum       int
}

func (iterator *UnderauditlistApplicationIterator) Next() (bool, *Application, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum > iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.PageToken = iterator.nextPageToken
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *UnderauditlistApplicationIterator) NextPageToken() *string {
	return iterator.nextPageToken
}
