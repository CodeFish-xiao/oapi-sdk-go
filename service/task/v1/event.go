// Package task code generated by oapi sdk gen
package larktask

import (
	"context"
)

// 消息处理器定义
type TaskUpdateTenantEventHandler struct {
	handler func(context.Context, *TaskUpdateTenantEvent) error
}

func NewTaskUpdateTenantEventHandler(handler func(context.Context, *TaskUpdateTenantEvent) error) *TaskUpdateTenantEventHandler {
	h := &TaskUpdateTenantEventHandler{handler: handler}
	return h
}

// 返回事件的消息体的实例，用于反序列化用
func (h *TaskUpdateTenantEventHandler) Event() interface{} {
	return &TaskUpdateTenantEvent{}
}

// 回调开发者注册的handle
func (h *TaskUpdateTenantEventHandler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*TaskUpdateTenantEvent))
}

// 消息处理器定义
type TaskUpdatedEventHandler struct {
	handler func(context.Context, *TaskUpdatedEvent) error
}

func NewTaskUpdatedEventHandler(handler func(context.Context, *TaskUpdatedEvent) error) *TaskUpdatedEventHandler {
	h := &TaskUpdatedEventHandler{handler: handler}
	return h
}

// 返回事件的消息体的实例，用于反序列化用
func (h *TaskUpdatedEventHandler) Event() interface{} {
	return &TaskUpdatedEvent{}
}

// 回调开发者注册的handle
func (h *TaskUpdatedEventHandler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*TaskUpdatedEvent))
}

// 消息处理器定义
type TaskCommentUpdatedEventHandler struct {
	handler func(context.Context, *TaskCommentUpdatedEvent) error
}

func NewTaskCommentUpdatedEventHandler(handler func(context.Context, *TaskCommentUpdatedEvent) error) *TaskCommentUpdatedEventHandler {
	h := &TaskCommentUpdatedEventHandler{handler: handler}
	return h
}

// 返回事件的消息体的实例，用于反序列化用
func (h *TaskCommentUpdatedEventHandler) Event() interface{} {
	return &TaskCommentUpdatedEvent{}
}

// 回调开发者注册的handle
func (h *TaskCommentUpdatedEventHandler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*TaskCommentUpdatedEvent))
}
