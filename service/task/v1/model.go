/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

// Package task code generated by oapi sdk gen
package larktask

import (
	"fmt"

	"context"
	"errors"

	"github.com/larksuite/oapi-sdk-go/v3/event"

	"github.com/larksuite/oapi-sdk-go/v3/core"
)

// 生成枚举值

const (
	UserIdTypeUserId  = "user_id"
	UserIdTypeUnionId = "union_id"
	UserIdTypeOpenId  = "open_id"
)

const (
	ListDirectionDown = 0
	ListDirectionUp   = 1
)

// 生成数据类型

type Collaborator struct {
	Id *string `json:"id,omitempty"`
}

// builder开始
type CollaboratorBuilder struct {
	id     string
	idFlag bool
}

func NewCollaboratorBuilder() *CollaboratorBuilder {
	builder := &CollaboratorBuilder{}
	return builder
}

func (builder *CollaboratorBuilder) Id(id string) *CollaboratorBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

func (builder *CollaboratorBuilder) Build() *Collaborator {
	req := &Collaborator{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	return req
}

// builder结束

type Comment struct {
	Content  *string `json:"content,omitempty"`
	ParentId *int64  `json:"parent_id,omitempty,string"`
	Id       *int64  `json:"id,omitempty,string"`
}

// builder开始
type CommentBuilder struct {
	content      string
	contentFlag  bool
	parentId     int64
	parentIdFlag bool
	id           int64
	idFlag       bool
}

func NewCommentBuilder() *CommentBuilder {
	builder := &CommentBuilder{}
	return builder
}

func (builder *CommentBuilder) Content(content string) *CommentBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}
func (builder *CommentBuilder) ParentId(parentId int64) *CommentBuilder {
	builder.parentId = parentId
	builder.parentIdFlag = true
	return builder
}
func (builder *CommentBuilder) Id(id int64) *CommentBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

func (builder *CommentBuilder) Build() *Comment {
	req := &Comment{}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.parentIdFlag {
		req.ParentId = &builder.parentId

	}
	if builder.idFlag {
		req.Id = &builder.id

	}
	return req
}

// builder结束

type Due struct {
	Time     *int64  `json:"time,omitempty,string"`
	Timezone *string `json:"timezone,omitempty"`
	IsAllDay *bool   `json:"is_all_day,omitempty"`
}

// builder开始
type DueBuilder struct {
	time         int64
	timeFlag     bool
	timezone     string
	timezoneFlag bool
	isAllDay     bool
	isAllDayFlag bool
}

func NewDueBuilder() *DueBuilder {
	builder := &DueBuilder{}
	return builder
}

func (builder *DueBuilder) Time(time int64) *DueBuilder {
	builder.time = time
	builder.timeFlag = true
	return builder
}
func (builder *DueBuilder) Timezone(timezone string) *DueBuilder {
	builder.timezone = timezone
	builder.timezoneFlag = true
	return builder
}
func (builder *DueBuilder) IsAllDay(isAllDay bool) *DueBuilder {
	builder.isAllDay = isAllDay
	builder.isAllDayFlag = true
	return builder
}

func (builder *DueBuilder) Build() *Due {
	req := &Due{}
	if builder.timeFlag {
		req.Time = &builder.time

	}
	if builder.timezoneFlag {
		req.Timezone = &builder.timezone

	}
	if builder.isAllDayFlag {
		req.IsAllDay = &builder.isAllDay

	}
	return req
}

// builder结束

type Follower struct {
	Id *string `json:"id,omitempty"`
}

// builder开始
type FollowerBuilder struct {
	id     string
	idFlag bool
}

func NewFollowerBuilder() *FollowerBuilder {
	builder := &FollowerBuilder{}
	return builder
}

func (builder *FollowerBuilder) Id(id string) *FollowerBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

func (builder *FollowerBuilder) Build() *Follower {
	req := &Follower{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	return req
}

// builder结束

type Href struct {
	Url   *string `json:"url,omitempty"`
	Title *string `json:"title,omitempty"`
}

// builder开始
type HrefBuilder struct {
	url       string
	urlFlag   bool
	title     string
	titleFlag bool
}

func NewHrefBuilder() *HrefBuilder {
	builder := &HrefBuilder{}
	return builder
}

func (builder *HrefBuilder) Url(url string) *HrefBuilder {
	builder.url = url
	builder.urlFlag = true
	return builder
}
func (builder *HrefBuilder) Title(title string) *HrefBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}

func (builder *HrefBuilder) Build() *Href {
	req := &Href{}
	if builder.urlFlag {
		req.Url = &builder.url

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	return req
}

// builder结束

type Origin struct {
	PlatformI18nName *string `json:"platform_i18n_name,omitempty"`
	Href             *Href   `json:"href,omitempty"`
}

// builder开始
type OriginBuilder struct {
	platformI18nName     string
	platformI18nNameFlag bool
	href                 *Href
	hrefFlag             bool
}

func NewOriginBuilder() *OriginBuilder {
	builder := &OriginBuilder{}
	return builder
}

func (builder *OriginBuilder) PlatformI18nName(platformI18nName string) *OriginBuilder {
	builder.platformI18nName = platformI18nName
	builder.platformI18nNameFlag = true
	return builder
}
func (builder *OriginBuilder) Href(href *Href) *OriginBuilder {
	builder.href = href
	builder.hrefFlag = true
	return builder
}

func (builder *OriginBuilder) Build() *Origin {
	req := &Origin{}
	if builder.platformI18nNameFlag {
		req.PlatformI18nName = &builder.platformI18nName

	}
	if builder.hrefFlag {
		req.Href = builder.href
	}
	return req
}

// builder结束

type Reminder struct {
	Id                 *int64 `json:"id,omitempty,string"`
	RelativeFireMinute *int   `json:"relative_fire_minute,omitempty"`
}

// builder开始
type ReminderBuilder struct {
	id                     int64
	idFlag                 bool
	relativeFireMinute     int
	relativeFireMinuteFlag bool
}

func NewReminderBuilder() *ReminderBuilder {
	builder := &ReminderBuilder{}
	return builder
}

func (builder *ReminderBuilder) Id(id int64) *ReminderBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *ReminderBuilder) RelativeFireMinute(relativeFireMinute int) *ReminderBuilder {
	builder.relativeFireMinute = relativeFireMinute
	builder.relativeFireMinuteFlag = true
	return builder
}

func (builder *ReminderBuilder) Build() *Reminder {
	req := &Reminder{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.relativeFireMinuteFlag {
		req.RelativeFireMinute = &builder.relativeFireMinute

	}
	return req
}

// builder结束

type Task struct {
	Id            *string         `json:"id,omitempty"`
	Summary       *string         `json:"summary,omitempty"`
	Description   *string         `json:"description,omitempty"`
	CompleteTime  *int64          `json:"complete_time,omitempty,string"`
	CreatorId     *string         `json:"creator_id,omitempty"`
	Extra         *string         `json:"extra,omitempty"`
	CreateTime    *int64          `json:"create_time,omitempty,string"`
	UpdateTime    *int64          `json:"update_time,omitempty,string"`
	Due           *Due            `json:"due,omitempty"`
	Origin        *Origin         `json:"origin,omitempty"`
	CanEdit       *bool           `json:"can_edit,omitempty"`
	Custom        *string         `json:"custom,omitempty"`
	Source        *int            `json:"source,omitempty"`
	Followers     []*Follower     `json:"followers,omitempty"`
	Collaborators []*Collaborator `json:"collaborators,omitempty"`
}

// builder开始
type TaskBuilder struct {
	id                string
	idFlag            bool
	summary           string
	summaryFlag       bool
	description       string
	descriptionFlag   bool
	completeTime      int64
	completeTimeFlag  bool
	creatorId         string
	creatorIdFlag     bool
	extra             string
	extraFlag         bool
	createTime        int64
	createTimeFlag    bool
	updateTime        int64
	updateTimeFlag    bool
	due               *Due
	dueFlag           bool
	origin            *Origin
	originFlag        bool
	canEdit           bool
	canEditFlag       bool
	custom            string
	customFlag        bool
	source            int
	sourceFlag        bool
	followers         []*Follower
	followersFlag     bool
	collaborators     []*Collaborator
	collaboratorsFlag bool
}

func NewTaskBuilder() *TaskBuilder {
	builder := &TaskBuilder{}
	return builder
}

func (builder *TaskBuilder) Id(id string) *TaskBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *TaskBuilder) Summary(summary string) *TaskBuilder {
	builder.summary = summary
	builder.summaryFlag = true
	return builder
}
func (builder *TaskBuilder) Description(description string) *TaskBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}
func (builder *TaskBuilder) CompleteTime(completeTime int64) *TaskBuilder {
	builder.completeTime = completeTime
	builder.completeTimeFlag = true
	return builder
}
func (builder *TaskBuilder) CreatorId(creatorId string) *TaskBuilder {
	builder.creatorId = creatorId
	builder.creatorIdFlag = true
	return builder
}
func (builder *TaskBuilder) Extra(extra string) *TaskBuilder {
	builder.extra = extra
	builder.extraFlag = true
	return builder
}
func (builder *TaskBuilder) CreateTime(createTime int64) *TaskBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}
func (builder *TaskBuilder) UpdateTime(updateTime int64) *TaskBuilder {
	builder.updateTime = updateTime
	builder.updateTimeFlag = true
	return builder
}
func (builder *TaskBuilder) Due(due *Due) *TaskBuilder {
	builder.due = due
	builder.dueFlag = true
	return builder
}
func (builder *TaskBuilder) Origin(origin *Origin) *TaskBuilder {
	builder.origin = origin
	builder.originFlag = true
	return builder
}
func (builder *TaskBuilder) CanEdit(canEdit bool) *TaskBuilder {
	builder.canEdit = canEdit
	builder.canEditFlag = true
	return builder
}
func (builder *TaskBuilder) Custom(custom string) *TaskBuilder {
	builder.custom = custom
	builder.customFlag = true
	return builder
}
func (builder *TaskBuilder) Source(source int) *TaskBuilder {
	builder.source = source
	builder.sourceFlag = true
	return builder
}
func (builder *TaskBuilder) Followers(followers []*Follower) *TaskBuilder {
	builder.followers = followers
	builder.followersFlag = true
	return builder
}
func (builder *TaskBuilder) Collaborators(collaborators []*Collaborator) *TaskBuilder {
	builder.collaborators = collaborators
	builder.collaboratorsFlag = true
	return builder
}

func (builder *TaskBuilder) Build() *Task {
	req := &Task{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.summaryFlag {
		req.Summary = &builder.summary

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	if builder.completeTimeFlag {
		req.CompleteTime = &builder.completeTime

	}
	if builder.creatorIdFlag {
		req.CreatorId = &builder.creatorId

	}
	if builder.extraFlag {
		req.Extra = &builder.extra

	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.updateTimeFlag {
		req.UpdateTime = &builder.updateTime

	}
	if builder.dueFlag {
		req.Due = builder.due
	}
	if builder.originFlag {
		req.Origin = builder.origin
	}
	if builder.canEditFlag {
		req.CanEdit = &builder.canEdit

	}
	if builder.customFlag {
		req.Custom = &builder.custom

	}
	if builder.sourceFlag {
		req.Source = &builder.source

	}
	if builder.followersFlag {
		req.Followers = builder.followers
	}
	if builder.collaboratorsFlag {
		req.Collaborators = builder.collaborators
	}
	return req
}

// builder结束

type UserId struct {
	UserId  *string `json:"user_id,omitempty"`
	OpenId  *string `json:"open_id,omitempty"`
	UnionId *string `json:"union_id,omitempty"`
}

// builder开始
type UserIdBuilder struct {
	userId      string
	userIdFlag  bool
	openId      string
	openIdFlag  bool
	unionId     string
	unionIdFlag bool
}

func NewUserIdBuilder() *UserIdBuilder {
	builder := &UserIdBuilder{}
	return builder
}

func (builder *UserIdBuilder) UserId(userId string) *UserIdBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}
func (builder *UserIdBuilder) OpenId(openId string) *UserIdBuilder {
	builder.openId = openId
	builder.openIdFlag = true
	return builder
}
func (builder *UserIdBuilder) UnionId(unionId string) *UserIdBuilder {
	builder.unionId = unionId
	builder.unionIdFlag = true
	return builder
}

func (builder *UserIdBuilder) Build() *UserId {
	req := &UserId{}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.openIdFlag {
		req.OpenId = &builder.openId

	}
	if builder.unionIdFlag {
		req.UnionId = &builder.unionId

	}
	return req
}

// builder结束

type UserIdList struct {
	UserIdList []*UserId `json:"user_id_list,omitempty"`
}

// builder开始
type UserIdListBuilder struct {
	userIdList     []*UserId
	userIdListFlag bool
}

func NewUserIdListBuilder() *UserIdListBuilder {
	builder := &UserIdListBuilder{}
	return builder
}

func (builder *UserIdListBuilder) UserIdList(userIdList []*UserId) *UserIdListBuilder {
	builder.userIdList = userIdList
	builder.userIdListFlag = true
	return builder
}

func (builder *UserIdListBuilder) Build() *UserIdList {
	req := &UserIdList{}
	if builder.userIdListFlag {
		req.UserIdList = builder.userIdList
	}
	return req
}

// builder结束

// 生成请求和响应结果类型，以及请求对象的Builder构造器

// 1.4 生成请求的builder结构体
type CompleteTaskReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewCompleteTaskReqBuilder() *CompleteTaskReqBuilder {
	builder := &CompleteTaskReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *CompleteTaskReqBuilder) TaskId(taskId string) *CompleteTaskReqBuilder {
	builder.apiReq.PathParams.Set("task_id", fmt.Sprint(taskId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *CompleteTaskReqBuilder) Build() *CompleteTaskReq {
	req := &CompleteTaskReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type CompleteTaskReq struct {
	apiReq *larkcore.ApiReq
}

type CompleteTaskResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *CompleteTaskResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type CreateTaskReqBuilder struct {
	apiReq *larkcore.ApiReq
	task   *Task
}

// 生成请求的New构造器
func NewCreateTaskReqBuilder() *CreateTaskReqBuilder {
	builder := &CreateTaskReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *CreateTaskReqBuilder) UserIdType(userIdType string) *CreateTaskReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}
func (builder *CreateTaskReqBuilder) Task(task *Task) *CreateTaskReqBuilder {
	builder.task = task
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *CreateTaskReqBuilder) Build() *CreateTaskReq {
	req := &CreateTaskReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.task
	return req
}

type CreateTaskReq struct {
	apiReq *larkcore.ApiReq
	Task   *Task `body:""`
}

type CreateTaskRespData struct {
	Task *Task `json:"task,omitempty"`
}

type CreateTaskResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateTaskRespData `json:"data"`
}

func (resp *CreateTaskResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type DeleteTaskReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewDeleteTaskReqBuilder() *DeleteTaskReqBuilder {
	builder := &DeleteTaskReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *DeleteTaskReqBuilder) TaskId(taskId string) *DeleteTaskReqBuilder {
	builder.apiReq.PathParams.Set("task_id", fmt.Sprint(taskId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *DeleteTaskReqBuilder) Build() *DeleteTaskReq {
	req := &DeleteTaskReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type DeleteTaskReq struct {
	apiReq *larkcore.ApiReq
}

type DeleteTaskResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *DeleteTaskResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type GetTaskReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewGetTaskReqBuilder() *GetTaskReqBuilder {
	builder := &GetTaskReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *GetTaskReqBuilder) TaskId(taskId string) *GetTaskReqBuilder {
	builder.apiReq.PathParams.Set("task_id", fmt.Sprint(taskId))
	return builder
}
func (builder *GetTaskReqBuilder) UserIdType(userIdType string) *GetTaskReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *GetTaskReqBuilder) Build() *GetTaskReq {
	req := &GetTaskReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type GetTaskReq struct {
	apiReq *larkcore.ApiReq
}

type GetTaskRespData struct {
	Task *Task `json:"task,omitempty"`
}

type GetTaskResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetTaskRespData `json:"data"`
}

func (resp *GetTaskResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type ListTaskReqBuilder struct {
	apiReq *larkcore.ApiReq
	limit  int
}

// 生成请求的New构造器
func NewListTaskReqBuilder() *ListTaskReqBuilder {
	builder := &ListTaskReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *ListTaskReqBuilder) Limit(limit int) *ListTaskReqBuilder {
	builder.limit = limit
	return builder
}
func (builder *ListTaskReqBuilder) PageSize(pageSize int) *ListTaskReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}
func (builder *ListTaskReqBuilder) PageToken(pageToken string) *ListTaskReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}
func (builder *ListTaskReqBuilder) StartCreateTime(startCreateTime int64) *ListTaskReqBuilder {
	builder.apiReq.QueryParams.Set("start_create_time", fmt.Sprint(startCreateTime))
	return builder
}
func (builder *ListTaskReqBuilder) EndCreateTime(endCreateTime int64) *ListTaskReqBuilder {
	builder.apiReq.QueryParams.Set("end_create_time", fmt.Sprint(endCreateTime))
	return builder
}
func (builder *ListTaskReqBuilder) TaskCompleted(taskCompleted bool) *ListTaskReqBuilder {
	builder.apiReq.QueryParams.Set("task_completed", fmt.Sprint(taskCompleted))
	return builder
}
func (builder *ListTaskReqBuilder) UserIdType(userIdType string) *ListTaskReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *ListTaskReqBuilder) Build() *ListTaskReq {
	req := &ListTaskReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListTaskReq struct {
	apiReq *larkcore.ApiReq
	Limit  int
}

type ListTaskRespData struct {
	Items     []*Task `json:"items,omitempty"`
	PageToken *string `json:"page_token,omitempty"`
	HasMore   *bool   `json:"has_more,omitempty"`
}

type ListTaskResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListTaskRespData `json:"data"`
}

func (resp *ListTaskResp) Success() bool {
	return resp.Code == 0
}

type PatchTaskReqBodyBuilder struct {
	task             *Task
	taskFlag         bool
	updateFields     []string
	updateFieldsFlag bool
}

// 生成body的New构造器
func NewPatchTaskReqBodyBuilder() *PatchTaskReqBodyBuilder {
	builder := &PatchTaskReqBodyBuilder{}
	return builder
}

// 1.2 生成body的builder属性方法
func (builder *PatchTaskReqBodyBuilder) Task(task *Task) *PatchTaskReqBodyBuilder {
	builder.task = task
	builder.taskFlag = true
	return builder
}
func (builder *PatchTaskReqBodyBuilder) UpdateFields(updateFields []string) *PatchTaskReqBodyBuilder {
	builder.updateFields = updateFields
	builder.updateFieldsFlag = true
	return builder
}

// 1.3 生成body的build方法
func (builder *PatchTaskReqBodyBuilder) Build() *PatchTaskReqBody {
	req := &PatchTaskReqBody{}
	if builder.taskFlag {
		req.Task = builder.task
	}
	if builder.updateFieldsFlag {
		req.UpdateFields = builder.updateFields
	}
	return req
}

// 上传文件path开始
type PatchTaskPathReqBodyBuilder struct {
	task             *Task
	taskFlag         bool
	updateFields     []string
	updateFieldsFlag bool
}

func NewPatchTaskPathReqBodyBuilder() *PatchTaskPathReqBodyBuilder {
	builder := &PatchTaskPathReqBodyBuilder{}
	return builder
}
func (builder *PatchTaskPathReqBodyBuilder) Task(task *Task) *PatchTaskPathReqBodyBuilder {
	builder.task = task
	builder.taskFlag = true
	return builder
}
func (builder *PatchTaskPathReqBodyBuilder) UpdateFields(updateFields []string) *PatchTaskPathReqBodyBuilder {
	builder.updateFields = updateFields
	builder.updateFieldsFlag = true
	return builder
}

func (builder *PatchTaskPathReqBodyBuilder) Build() (*PatchTaskReqBody, error) {
	req := &PatchTaskReqBody{}
	if builder.taskFlag {
		req.Task = builder.task
	}
	if builder.updateFieldsFlag {
		req.UpdateFields = builder.updateFields
	}
	return req, nil
}

// 上传文件path结束

// 1.4 生成请求的builder结构体
type PatchTaskReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *PatchTaskReqBody
}

// 生成请求的New构造器
func NewPatchTaskReqBuilder() *PatchTaskReqBuilder {
	builder := &PatchTaskReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *PatchTaskReqBuilder) TaskId(taskId string) *PatchTaskReqBuilder {
	builder.apiReq.PathParams.Set("task_id", fmt.Sprint(taskId))
	return builder
}
func (builder *PatchTaskReqBuilder) UserIdType(userIdType string) *PatchTaskReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}
func (builder *PatchTaskReqBuilder) Body(body *PatchTaskReqBody) *PatchTaskReqBuilder {
	builder.body = body
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *PatchTaskReqBuilder) Build() *PatchTaskReq {
	req := &PatchTaskReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.body
	return req
}

type PatchTaskReqBody struct {
	Task         *Task    `json:"task,omitempty"`
	UpdateFields []string `json:"update_fields,omitempty"`
}

type PatchTaskReq struct {
	apiReq *larkcore.ApiReq
	Body   *PatchTaskReqBody `body:""`
}

type PatchTaskRespData struct {
	Task *Task `json:"task,omitempty"`
}

type PatchTaskResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *PatchTaskRespData `json:"data"`
}

func (resp *PatchTaskResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type UncompleteTaskReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewUncompleteTaskReqBuilder() *UncompleteTaskReqBuilder {
	builder := &UncompleteTaskReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *UncompleteTaskReqBuilder) TaskId(taskId string) *UncompleteTaskReqBuilder {
	builder.apiReq.PathParams.Set("task_id", fmt.Sprint(taskId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *UncompleteTaskReqBuilder) Build() *UncompleteTaskReq {
	req := &UncompleteTaskReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type UncompleteTaskReq struct {
	apiReq *larkcore.ApiReq
}

type UncompleteTaskResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *UncompleteTaskResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type CreateTaskCollaboratorReqBuilder struct {
	apiReq       *larkcore.ApiReq
	collaborator *Collaborator
}

// 生成请求的New构造器
func NewCreateTaskCollaboratorReqBuilder() *CreateTaskCollaboratorReqBuilder {
	builder := &CreateTaskCollaboratorReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *CreateTaskCollaboratorReqBuilder) TaskId(taskId string) *CreateTaskCollaboratorReqBuilder {
	builder.apiReq.PathParams.Set("task_id", fmt.Sprint(taskId))
	return builder
}
func (builder *CreateTaskCollaboratorReqBuilder) UserIdType(userIdType string) *CreateTaskCollaboratorReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}
func (builder *CreateTaskCollaboratorReqBuilder) Collaborator(collaborator *Collaborator) *CreateTaskCollaboratorReqBuilder {
	builder.collaborator = collaborator
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *CreateTaskCollaboratorReqBuilder) Build() *CreateTaskCollaboratorReq {
	req := &CreateTaskCollaboratorReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.collaborator
	return req
}

type CreateTaskCollaboratorReq struct {
	apiReq       *larkcore.ApiReq
	Collaborator *Collaborator `body:""`
}

type CreateTaskCollaboratorRespData struct {
	Collaborator *Collaborator `json:"collaborator,omitempty"`
}

type CreateTaskCollaboratorResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateTaskCollaboratorRespData `json:"data"`
}

func (resp *CreateTaskCollaboratorResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type DeleteTaskCollaboratorReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewDeleteTaskCollaboratorReqBuilder() *DeleteTaskCollaboratorReqBuilder {
	builder := &DeleteTaskCollaboratorReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *DeleteTaskCollaboratorReqBuilder) TaskId(taskId string) *DeleteTaskCollaboratorReqBuilder {
	builder.apiReq.PathParams.Set("task_id", fmt.Sprint(taskId))
	return builder
}
func (builder *DeleteTaskCollaboratorReqBuilder) CollaboratorId(collaboratorId string) *DeleteTaskCollaboratorReqBuilder {
	builder.apiReq.PathParams.Set("collaborator_id", fmt.Sprint(collaboratorId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *DeleteTaskCollaboratorReqBuilder) Build() *DeleteTaskCollaboratorReq {
	req := &DeleteTaskCollaboratorReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type DeleteTaskCollaboratorReq struct {
	apiReq *larkcore.ApiReq
}

type DeleteTaskCollaboratorResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *DeleteTaskCollaboratorResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type ListTaskCollaboratorReqBuilder struct {
	apiReq *larkcore.ApiReq
	limit  int
}

// 生成请求的New构造器
func NewListTaskCollaboratorReqBuilder() *ListTaskCollaboratorReqBuilder {
	builder := &ListTaskCollaboratorReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *ListTaskCollaboratorReqBuilder) Limit(limit int) *ListTaskCollaboratorReqBuilder {
	builder.limit = limit
	return builder
}
func (builder *ListTaskCollaboratorReqBuilder) TaskId(taskId string) *ListTaskCollaboratorReqBuilder {
	builder.apiReq.PathParams.Set("task_id", fmt.Sprint(taskId))
	return builder
}
func (builder *ListTaskCollaboratorReqBuilder) PageSize(pageSize int) *ListTaskCollaboratorReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}
func (builder *ListTaskCollaboratorReqBuilder) PageToken(pageToken string) *ListTaskCollaboratorReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}
func (builder *ListTaskCollaboratorReqBuilder) UserIdType(userIdType string) *ListTaskCollaboratorReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *ListTaskCollaboratorReqBuilder) Build() *ListTaskCollaboratorReq {
	req := &ListTaskCollaboratorReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListTaskCollaboratorReq struct {
	apiReq *larkcore.ApiReq
	Limit  int
}

type ListTaskCollaboratorRespData struct {
	Items     []*Collaborator `json:"items,omitempty"`
	PageToken *string         `json:"page_token,omitempty"`
	HasMore   *bool           `json:"has_more,omitempty"`
}

type ListTaskCollaboratorResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListTaskCollaboratorRespData `json:"data"`
}

func (resp *ListTaskCollaboratorResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type CreateTaskCommentReqBuilder struct {
	apiReq  *larkcore.ApiReq
	comment *Comment
}

// 生成请求的New构造器
func NewCreateTaskCommentReqBuilder() *CreateTaskCommentReqBuilder {
	builder := &CreateTaskCommentReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *CreateTaskCommentReqBuilder) TaskId(taskId string) *CreateTaskCommentReqBuilder {
	builder.apiReq.PathParams.Set("task_id", fmt.Sprint(taskId))
	return builder
}
func (builder *CreateTaskCommentReqBuilder) Comment(comment *Comment) *CreateTaskCommentReqBuilder {
	builder.comment = comment
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *CreateTaskCommentReqBuilder) Build() *CreateTaskCommentReq {
	req := &CreateTaskCommentReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.comment
	return req
}

type CreateTaskCommentReq struct {
	apiReq  *larkcore.ApiReq
	Comment *Comment `body:""`
}

type CreateTaskCommentRespData struct {
	Comment *Comment `json:"comment,omitempty"`
}

type CreateTaskCommentResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateTaskCommentRespData `json:"data"`
}

func (resp *CreateTaskCommentResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type DeleteTaskCommentReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewDeleteTaskCommentReqBuilder() *DeleteTaskCommentReqBuilder {
	builder := &DeleteTaskCommentReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *DeleteTaskCommentReqBuilder) TaskId(taskId string) *DeleteTaskCommentReqBuilder {
	builder.apiReq.PathParams.Set("task_id", fmt.Sprint(taskId))
	return builder
}
func (builder *DeleteTaskCommentReqBuilder) CommentId(commentId int64) *DeleteTaskCommentReqBuilder {
	builder.apiReq.PathParams.Set("comment_id", fmt.Sprint(commentId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *DeleteTaskCommentReqBuilder) Build() *DeleteTaskCommentReq {
	req := &DeleteTaskCommentReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type DeleteTaskCommentReq struct {
	apiReq *larkcore.ApiReq
}

type DeleteTaskCommentResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *DeleteTaskCommentResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type GetTaskCommentReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewGetTaskCommentReqBuilder() *GetTaskCommentReqBuilder {
	builder := &GetTaskCommentReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *GetTaskCommentReqBuilder) TaskId(taskId string) *GetTaskCommentReqBuilder {
	builder.apiReq.PathParams.Set("task_id", fmt.Sprint(taskId))
	return builder
}
func (builder *GetTaskCommentReqBuilder) CommentId(commentId int64) *GetTaskCommentReqBuilder {
	builder.apiReq.PathParams.Set("comment_id", fmt.Sprint(commentId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *GetTaskCommentReqBuilder) Build() *GetTaskCommentReq {
	req := &GetTaskCommentReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type GetTaskCommentReq struct {
	apiReq *larkcore.ApiReq
}

type GetTaskCommentRespData struct {
	Comment *Comment `json:"comment,omitempty"`
}

type GetTaskCommentResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetTaskCommentRespData `json:"data"`
}

func (resp *GetTaskCommentResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type ListTaskCommentReqBuilder struct {
	apiReq *larkcore.ApiReq
	limit  int
}

// 生成请求的New构造器
func NewListTaskCommentReqBuilder() *ListTaskCommentReqBuilder {
	builder := &ListTaskCommentReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *ListTaskCommentReqBuilder) Limit(limit int) *ListTaskCommentReqBuilder {
	builder.limit = limit
	return builder
}
func (builder *ListTaskCommentReqBuilder) TaskId(taskId string) *ListTaskCommentReqBuilder {
	builder.apiReq.PathParams.Set("task_id", fmt.Sprint(taskId))
	return builder
}
func (builder *ListTaskCommentReqBuilder) PageSize(pageSize int) *ListTaskCommentReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}
func (builder *ListTaskCommentReqBuilder) PageToken(pageToken string) *ListTaskCommentReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}
func (builder *ListTaskCommentReqBuilder) ListDirection(listDirection int) *ListTaskCommentReqBuilder {
	builder.apiReq.QueryParams.Set("list_direction", fmt.Sprint(listDirection))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *ListTaskCommentReqBuilder) Build() *ListTaskCommentReq {
	req := &ListTaskCommentReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListTaskCommentReq struct {
	apiReq *larkcore.ApiReq
	Limit  int
}

type ListTaskCommentRespData struct {
	Items     []*Comment `json:"items,omitempty"`
	PageToken *string    `json:"page_token,omitempty"`
	HasMore   *bool      `json:"has_more,omitempty"`
}

type ListTaskCommentResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListTaskCommentRespData `json:"data"`
}

func (resp *ListTaskCommentResp) Success() bool {
	return resp.Code == 0
}

type UpdateTaskCommentReqBodyBuilder struct {
	content     string
	contentFlag bool
}

// 生成body的New构造器
func NewUpdateTaskCommentReqBodyBuilder() *UpdateTaskCommentReqBodyBuilder {
	builder := &UpdateTaskCommentReqBodyBuilder{}
	return builder
}

// 1.2 生成body的builder属性方法
func (builder *UpdateTaskCommentReqBodyBuilder) Content(content string) *UpdateTaskCommentReqBodyBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}

// 1.3 生成body的build方法
func (builder *UpdateTaskCommentReqBodyBuilder) Build() *UpdateTaskCommentReqBody {
	req := &UpdateTaskCommentReqBody{}
	if builder.contentFlag {
		req.Content = &builder.content
	}
	return req
}

// 上传文件path开始
type UpdateTaskCommentPathReqBodyBuilder struct {
	content     string
	contentFlag bool
}

func NewUpdateTaskCommentPathReqBodyBuilder() *UpdateTaskCommentPathReqBodyBuilder {
	builder := &UpdateTaskCommentPathReqBodyBuilder{}
	return builder
}
func (builder *UpdateTaskCommentPathReqBodyBuilder) Content(content string) *UpdateTaskCommentPathReqBodyBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}

func (builder *UpdateTaskCommentPathReqBodyBuilder) Build() (*UpdateTaskCommentReqBody, error) {
	req := &UpdateTaskCommentReqBody{}
	if builder.contentFlag {
		req.Content = &builder.content
	}
	return req, nil
}

// 上传文件path结束

// 1.4 生成请求的builder结构体
type UpdateTaskCommentReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *UpdateTaskCommentReqBody
}

// 生成请求的New构造器
func NewUpdateTaskCommentReqBuilder() *UpdateTaskCommentReqBuilder {
	builder := &UpdateTaskCommentReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *UpdateTaskCommentReqBuilder) TaskId(taskId string) *UpdateTaskCommentReqBuilder {
	builder.apiReq.PathParams.Set("task_id", fmt.Sprint(taskId))
	return builder
}
func (builder *UpdateTaskCommentReqBuilder) CommentId(commentId int64) *UpdateTaskCommentReqBuilder {
	builder.apiReq.PathParams.Set("comment_id", fmt.Sprint(commentId))
	return builder
}
func (builder *UpdateTaskCommentReqBuilder) Body(body *UpdateTaskCommentReqBody) *UpdateTaskCommentReqBuilder {
	builder.body = body
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *UpdateTaskCommentReqBuilder) Build() *UpdateTaskCommentReq {
	req := &UpdateTaskCommentReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.body
	return req
}

type UpdateTaskCommentReqBody struct {
	Content *string `json:"content,omitempty"`
}

type UpdateTaskCommentReq struct {
	apiReq *larkcore.ApiReq
	Body   *UpdateTaskCommentReqBody `body:""`
}

type UpdateTaskCommentRespData struct {
	Comment *Comment `json:"comment,omitempty"`
}

type UpdateTaskCommentResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *UpdateTaskCommentRespData `json:"data"`
}

func (resp *UpdateTaskCommentResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type CreateTaskFollowerReqBuilder struct {
	apiReq   *larkcore.ApiReq
	follower *Follower
}

// 生成请求的New构造器
func NewCreateTaskFollowerReqBuilder() *CreateTaskFollowerReqBuilder {
	builder := &CreateTaskFollowerReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *CreateTaskFollowerReqBuilder) TaskId(taskId string) *CreateTaskFollowerReqBuilder {
	builder.apiReq.PathParams.Set("task_id", fmt.Sprint(taskId))
	return builder
}
func (builder *CreateTaskFollowerReqBuilder) UserIdType(userIdType string) *CreateTaskFollowerReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}
func (builder *CreateTaskFollowerReqBuilder) Follower(follower *Follower) *CreateTaskFollowerReqBuilder {
	builder.follower = follower
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *CreateTaskFollowerReqBuilder) Build() *CreateTaskFollowerReq {
	req := &CreateTaskFollowerReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.follower
	return req
}

type CreateTaskFollowerReq struct {
	apiReq   *larkcore.ApiReq
	Follower *Follower `body:""`
}

type CreateTaskFollowerRespData struct {
	Follower *Follower `json:"follower,omitempty"`
}

type CreateTaskFollowerResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateTaskFollowerRespData `json:"data"`
}

func (resp *CreateTaskFollowerResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type DeleteTaskFollowerReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewDeleteTaskFollowerReqBuilder() *DeleteTaskFollowerReqBuilder {
	builder := &DeleteTaskFollowerReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *DeleteTaskFollowerReqBuilder) TaskId(taskId string) *DeleteTaskFollowerReqBuilder {
	builder.apiReq.PathParams.Set("task_id", fmt.Sprint(taskId))
	return builder
}
func (builder *DeleteTaskFollowerReqBuilder) FollowerId(followerId string) *DeleteTaskFollowerReqBuilder {
	builder.apiReq.PathParams.Set("follower_id", fmt.Sprint(followerId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *DeleteTaskFollowerReqBuilder) Build() *DeleteTaskFollowerReq {
	req := &DeleteTaskFollowerReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type DeleteTaskFollowerReq struct {
	apiReq *larkcore.ApiReq
}

type DeleteTaskFollowerResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *DeleteTaskFollowerResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type ListTaskFollowerReqBuilder struct {
	apiReq *larkcore.ApiReq
	limit  int
}

// 生成请求的New构造器
func NewListTaskFollowerReqBuilder() *ListTaskFollowerReqBuilder {
	builder := &ListTaskFollowerReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *ListTaskFollowerReqBuilder) Limit(limit int) *ListTaskFollowerReqBuilder {
	builder.limit = limit
	return builder
}
func (builder *ListTaskFollowerReqBuilder) TaskId(taskId string) *ListTaskFollowerReqBuilder {
	builder.apiReq.PathParams.Set("task_id", fmt.Sprint(taskId))
	return builder
}
func (builder *ListTaskFollowerReqBuilder) PageSize(pageSize int) *ListTaskFollowerReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}
func (builder *ListTaskFollowerReqBuilder) PageToken(pageToken string) *ListTaskFollowerReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}
func (builder *ListTaskFollowerReqBuilder) UserIdType(userIdType string) *ListTaskFollowerReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *ListTaskFollowerReqBuilder) Build() *ListTaskFollowerReq {
	req := &ListTaskFollowerReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListTaskFollowerReq struct {
	apiReq *larkcore.ApiReq
	Limit  int
}

type ListTaskFollowerRespData struct {
	Items     []*Follower `json:"items,omitempty"`
	PageToken *string     `json:"page_token,omitempty"`
	HasMore   *bool       `json:"has_more,omitempty"`
}

type ListTaskFollowerResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListTaskFollowerRespData `json:"data"`
}

func (resp *ListTaskFollowerResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type CreateTaskReminderReqBuilder struct {
	apiReq   *larkcore.ApiReq
	reminder *Reminder
}

// 生成请求的New构造器
func NewCreateTaskReminderReqBuilder() *CreateTaskReminderReqBuilder {
	builder := &CreateTaskReminderReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *CreateTaskReminderReqBuilder) TaskId(taskId string) *CreateTaskReminderReqBuilder {
	builder.apiReq.PathParams.Set("task_id", fmt.Sprint(taskId))
	return builder
}
func (builder *CreateTaskReminderReqBuilder) Reminder(reminder *Reminder) *CreateTaskReminderReqBuilder {
	builder.reminder = reminder
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *CreateTaskReminderReqBuilder) Build() *CreateTaskReminderReq {
	req := &CreateTaskReminderReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.reminder
	return req
}

type CreateTaskReminderReq struct {
	apiReq   *larkcore.ApiReq
	Reminder *Reminder `body:""`
}

type CreateTaskReminderRespData struct {
	Reminder *Reminder `json:"reminder,omitempty"`
}

type CreateTaskReminderResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateTaskReminderRespData `json:"data"`
}

func (resp *CreateTaskReminderResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type DeleteTaskReminderReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewDeleteTaskReminderReqBuilder() *DeleteTaskReminderReqBuilder {
	builder := &DeleteTaskReminderReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *DeleteTaskReminderReqBuilder) TaskId(taskId string) *DeleteTaskReminderReqBuilder {
	builder.apiReq.PathParams.Set("task_id", fmt.Sprint(taskId))
	return builder
}
func (builder *DeleteTaskReminderReqBuilder) ReminderId(reminderId string) *DeleteTaskReminderReqBuilder {
	builder.apiReq.PathParams.Set("reminder_id", fmt.Sprint(reminderId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *DeleteTaskReminderReqBuilder) Build() *DeleteTaskReminderReq {
	req := &DeleteTaskReminderReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type DeleteTaskReminderReq struct {
	apiReq *larkcore.ApiReq
}

type DeleteTaskReminderResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *DeleteTaskReminderResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type ListTaskReminderReqBuilder struct {
	apiReq *larkcore.ApiReq
	limit  int
}

// 生成请求的New构造器
func NewListTaskReminderReqBuilder() *ListTaskReminderReqBuilder {
	builder := &ListTaskReminderReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *ListTaskReminderReqBuilder) Limit(limit int) *ListTaskReminderReqBuilder {
	builder.limit = limit
	return builder
}
func (builder *ListTaskReminderReqBuilder) TaskId(taskId string) *ListTaskReminderReqBuilder {
	builder.apiReq.PathParams.Set("task_id", fmt.Sprint(taskId))
	return builder
}
func (builder *ListTaskReminderReqBuilder) PageSize(pageSize int) *ListTaskReminderReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}
func (builder *ListTaskReminderReqBuilder) PageToken(pageToken string) *ListTaskReminderReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *ListTaskReminderReqBuilder) Build() *ListTaskReminderReq {
	req := &ListTaskReminderReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListTaskReminderReq struct {
	apiReq *larkcore.ApiReq
	Limit  int
}

type ListTaskReminderRespData struct {
	Items     []*Reminder `json:"items,omitempty"`
	PageToken *string     `json:"page_token,omitempty"`
	HasMore   *bool       `json:"has_more,omitempty"`
}

type ListTaskReminderResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListTaskReminderRespData `json:"data"`
}

func (resp *ListTaskReminderResp) Success() bool {
	return resp.Code == 0
}

// 生成消息事件结构体

type P2TaskUpdateTenantV1Data struct {
	UserIdList *UserIdList `json:"user_id_list,omitempty"`
	TaskId     *string     `json:"task_id,omitempty"`
	ObjectType *string     `json:"object_type,omitempty"`
	EventType  *string     `json:"event_type,omitempty"`
}

type P2TaskUpdateTenantV1 struct {
	*larkevent.EventV2Base
	*larkevent.EventReq
	Event *P2TaskUpdateTenantV1Data `json:"event"`
}

func (m *P2TaskUpdateTenantV1) RawReq(req *larkevent.EventReq) {
	m.EventReq = req
}

type P2TaskUpdatedV1Data struct {
	TaskId  *string `json:"task_id,omitempty"`
	ObjType *int    `json:"obj_type,omitempty"`
}

type P2TaskUpdatedV1 struct {
	*larkevent.EventV2Base
	*larkevent.EventReq
	Event *P2TaskUpdatedV1Data `json:"event"`
}

func (m *P2TaskUpdatedV1) RawReq(req *larkevent.EventReq) {
	m.EventReq = req
}

type P2TaskCommentUpdatedV1Data struct {
	TaskId    *string `json:"task_id,omitempty"`
	CommentId *string `json:"comment_id,omitempty"`
	ParentId  *string `json:"parent_id,omitempty"`
	ObjType   *int    `json:"obj_type,omitempty"`
}

type P2TaskCommentUpdatedV1 struct {
	*larkevent.EventV2Base
	*larkevent.EventReq
	Event *P2TaskCommentUpdatedV1Data `json:"event"`
}

func (m *P2TaskCommentUpdatedV1) RawReq(req *larkevent.EventReq) {
	m.EventReq = req
}

// 生成请求的builder构造器
// 1.1 生成body的builder结构体
type ListTaskIterator struct {
	nextPageToken *string
	items         []*Task
	index         int
	limit         int
	ctx           context.Context
	req           *ListTaskReq
	listFunc      func(ctx context.Context, req *ListTaskReq, options ...larkcore.RequestOptionFunc) (*ListTaskResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *ListTaskIterator) Next() (bool, *Task, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListTaskIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

type ListTaskCollaboratorIterator struct {
	nextPageToken *string
	items         []*Collaborator
	index         int
	limit         int
	ctx           context.Context
	req           *ListTaskCollaboratorReq
	listFunc      func(ctx context.Context, req *ListTaskCollaboratorReq, options ...larkcore.RequestOptionFunc) (*ListTaskCollaboratorResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *ListTaskCollaboratorIterator) Next() (bool, *Collaborator, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListTaskCollaboratorIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

type ListTaskCommentIterator struct {
	nextPageToken *string
	items         []*Comment
	index         int
	limit         int
	ctx           context.Context
	req           *ListTaskCommentReq
	listFunc      func(ctx context.Context, req *ListTaskCommentReq, options ...larkcore.RequestOptionFunc) (*ListTaskCommentResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *ListTaskCommentIterator) Next() (bool, *Comment, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListTaskCommentIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

type ListTaskFollowerIterator struct {
	nextPageToken *string
	items         []*Follower
	index         int
	limit         int
	ctx           context.Context
	req           *ListTaskFollowerReq
	listFunc      func(ctx context.Context, req *ListTaskFollowerReq, options ...larkcore.RequestOptionFunc) (*ListTaskFollowerResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *ListTaskFollowerIterator) Next() (bool, *Follower, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListTaskFollowerIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

type ListTaskReminderIterator struct {
	nextPageToken *string
	items         []*Reminder
	index         int
	limit         int
	ctx           context.Context
	req           *ListTaskReminderReq
	listFunc      func(ctx context.Context, req *ListTaskReminderReq, options ...larkcore.RequestOptionFunc) (*ListTaskReminderResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *ListTaskReminderIterator) Next() (bool, *Reminder, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListTaskReminderIterator) NextPageToken() *string {
	return iterator.nextPageToken
}
