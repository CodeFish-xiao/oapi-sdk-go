// Package task code generated by oapi sdk gen
package task

import (
	"context"
	"errors"
	"fmt"

	"github.com/feishu/oapi-sdk-go/event"

	"github.com/feishu/oapi-sdk-go/core"
)

/**生成枚举值 **/

const (
	UserIdTypeUserId  string = "user_id"
	UserIdTypeUnionId string = "union_id"
	UserIdTypeOpenId  string = "open_id"
)

const (
	ListDirectionDown string = "0"
	ListDirectionUp   string = "1"
)

/**生成数据类型 **/

type Collaborator struct {
	Id *string `json:"id,omitempty"`
}

type Comment struct {
	Content  *string `json:"content,omitempty"`
	ParentId *int64  `json:"parent_id,omitempty,string"`
	Id       *int64  `json:"id,omitempty,string"`
}

type Due struct {
	Time     *int64  `json:"time,omitempty,string"`
	Timezone *string `json:"timezone,omitempty"`
	IsAllDay *bool   `json:"is_all_day,omitempty"`
}

type Follower struct {
	Id *string `json:"id,omitempty"`
}

type Href struct {
	Url   *string `json:"url,omitempty"`
	Title *string `json:"title,omitempty"`
}

type Origin struct {
	PlatformI18nName *string `json:"platform_i18n_name,omitempty"`
	Href             *Href   `json:"href,omitempty"`
}

type Reminder struct {
	Id                 *int64 `json:"id,omitempty,string"`
	RelativeFireMinute *int   `json:"relative_fire_minute,omitempty"`
}

type Task struct {
	Id            *string         `json:"id,omitempty"`
	Summary       *string         `json:"summary,omitempty"`
	Description   *string         `json:"description,omitempty"`
	CompleteTime  *int64          `json:"complete_time,omitempty,string"`
	CreatorId     *string         `json:"creator_id,omitempty"`
	Extra         *string         `json:"extra,omitempty"`
	CreateTime    *int64          `json:"create_time,omitempty,string"`
	UpdateTime    *int64          `json:"update_time,omitempty,string"`
	Due           *Due            `json:"due,omitempty"`
	Origin        *Origin         `json:"origin,omitempty"`
	CanEdit       *bool           `json:"can_edit,omitempty"`
	Custom        *string         `json:"custom,omitempty"`
	Source        *int            `json:"source,omitempty"`
	Followers     []*Follower     `json:"followers,omitempty"`
	Collaborators []*Collaborator `json:"collaborators,omitempty"`
}

type UserId struct {
	UserId  *string `json:"user_id,omitempty"`
	OpenId  *string `json:"open_id,omitempty"`
	UnionId *string `json:"union_id,omitempty"`
}

type UserIdList struct {
	UserIdList []*UserId `json:"user_id_list,omitempty"`
}

/**生成请求和响应结果类型，以及请求对象的Builder构造器 **/

/*1.4 生成请求的builder结构体*/
type CompleteTaskReqBuilder struct {
	taskId     string
	taskIdFlag bool
}

// 生成请求的New构造器
func NewCompleteTaskReqBuilder() *CompleteTaskReqBuilder {
	builder := &CompleteTaskReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *CompleteTaskReqBuilder) TaskId(taskId string) *CompleteTaskReqBuilder {
	builder.taskId = taskId
	builder.taskIdFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *CompleteTaskReqBuilder) Build() *CompleteTaskReq {
	req := &CompleteTaskReq{}
	if builder.taskIdFlag {
		req.TaskId = builder.taskId
	}
	return req
}

type CompleteTaskReq struct {
	TaskId string `path:"task_id"`
}

type CompleteTaskResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *CompleteTaskResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type CreateTaskReqBuilder struct {
	userIdType     string
	userIdTypeFlag bool
	task           *Task
	taskFlag       bool
}

// 生成请求的New构造器
func NewCreateTaskReqBuilder() *CreateTaskReqBuilder {
	builder := &CreateTaskReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *CreateTaskReqBuilder) UserIdType(userIdType string) *CreateTaskReqBuilder {
	builder.userIdType = userIdType
	builder.userIdTypeFlag = true
	return builder
}
func (builder *CreateTaskReqBuilder) Task(task *Task) *CreateTaskReqBuilder {
	builder.task = task
	builder.taskFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *CreateTaskReqBuilder) Build() *CreateTaskReq {
	req := &CreateTaskReq{}
	if builder.userIdTypeFlag {
		req.UserIdType = &builder.userIdType
	}
	return req
}

type CreateTaskReq struct {
	UserIdType *string `query:"user_id_type"`
	Task       *Task   `body:""`
}

type CreateTaskRespData struct {
	Task *Task `json:"task,omitempty"`
}

type CreateTaskResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *CreateTaskRespData `json:"data"`
}

func (resp *CreateTaskResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type DeleteTaskReqBuilder struct {
	taskId     string
	taskIdFlag bool
}

// 生成请求的New构造器
func NewDeleteTaskReqBuilder() *DeleteTaskReqBuilder {
	builder := &DeleteTaskReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *DeleteTaskReqBuilder) TaskId(taskId string) *DeleteTaskReqBuilder {
	builder.taskId = taskId
	builder.taskIdFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *DeleteTaskReqBuilder) Build() *DeleteTaskReq {
	req := &DeleteTaskReq{}
	if builder.taskIdFlag {
		req.TaskId = builder.taskId
	}
	return req
}

type DeleteTaskReq struct {
	TaskId string `path:"task_id"`
}

type DeleteTaskResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *DeleteTaskResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type GetTaskReqBuilder struct {
	taskId         string
	taskIdFlag     bool
	userIdType     string
	userIdTypeFlag bool
}

// 生成请求的New构造器
func NewGetTaskReqBuilder() *GetTaskReqBuilder {
	builder := &GetTaskReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *GetTaskReqBuilder) TaskId(taskId string) *GetTaskReqBuilder {
	builder.taskId = taskId
	builder.taskIdFlag = true
	return builder
}
func (builder *GetTaskReqBuilder) UserIdType(userIdType string) *GetTaskReqBuilder {
	builder.userIdType = userIdType
	builder.userIdTypeFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *GetTaskReqBuilder) Build() *GetTaskReq {
	req := &GetTaskReq{}
	if builder.taskIdFlag {
		req.TaskId = builder.taskId
	}
	if builder.userIdTypeFlag {
		req.UserIdType = &builder.userIdType
	}
	return req
}

type GetTaskReq struct {
	TaskId     string  `path:"task_id"`
	UserIdType *string `query:"user_id_type"`
}

type GetTaskRespData struct {
	Task *Task `json:"task,omitempty"`
}

type GetTaskResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *GetTaskRespData `json:"data"`
}

func (resp *GetTaskResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type ListTaskReqBuilder struct {
	pageSize            int
	pageSizeFlag        bool
	pageToken           string
	pageTokenFlag       bool
	startCreateTime     int64
	startCreateTimeFlag bool
	endCreateTime       int64
	endCreateTimeFlag   bool
	taskCompleted       bool
	taskCompletedFlag   bool
	userIdType          string
	userIdTypeFlag      bool
	limit               int
}

// 生成请求的New构造器
func NewListTaskReqBuilder() *ListTaskReqBuilder {
	builder := &ListTaskReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *ListTaskReqBuilder) Limit(limit int) *ListTaskReqBuilder {
	builder.limit = limit
	return builder
}
func (builder *ListTaskReqBuilder) PageSize(pageSize int) *ListTaskReqBuilder {
	builder.pageSize = pageSize
	builder.pageSizeFlag = true
	return builder
}
func (builder *ListTaskReqBuilder) PageToken(pageToken string) *ListTaskReqBuilder {
	builder.pageToken = pageToken
	builder.pageTokenFlag = true
	return builder
}
func (builder *ListTaskReqBuilder) StartCreateTime(startCreateTime int64) *ListTaskReqBuilder {
	builder.startCreateTime = startCreateTime
	builder.startCreateTimeFlag = true
	return builder
}
func (builder *ListTaskReqBuilder) EndCreateTime(endCreateTime int64) *ListTaskReqBuilder {
	builder.endCreateTime = endCreateTime
	builder.endCreateTimeFlag = true
	return builder
}
func (builder *ListTaskReqBuilder) TaskCompleted(taskCompleted bool) *ListTaskReqBuilder {
	builder.taskCompleted = taskCompleted
	builder.taskCompletedFlag = true
	return builder
}
func (builder *ListTaskReqBuilder) UserIdType(userIdType string) *ListTaskReqBuilder {
	builder.userIdType = userIdType
	builder.userIdTypeFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *ListTaskReqBuilder) Build() *ListTaskReq {
	req := &ListTaskReq{}
	req.Limit = builder.limit
	if builder.pageSizeFlag {
		req.PageSize = &builder.pageSize
	}
	if builder.pageTokenFlag {
		req.PageToken = &builder.pageToken
	}
	if builder.startCreateTimeFlag {
		req.StartCreateTime = &builder.startCreateTime
	}
	if builder.endCreateTimeFlag {
		req.EndCreateTime = &builder.endCreateTime
	}
	if builder.taskCompletedFlag {
		req.TaskCompleted = &builder.taskCompleted
	}
	if builder.userIdTypeFlag {
		req.UserIdType = &builder.userIdType
	}
	return req
}

type ListTaskReq struct {
	PageSize        *int    `query:"page_size"`
	PageToken       *string `query:"page_token"`
	StartCreateTime *int64  `query:"start_create_time"`
	EndCreateTime   *int64  `query:"end_create_time"`
	TaskCompleted   *bool   `query:"task_completed"`
	UserIdType      *string `query:"user_id_type"`
	Limit           int
}

type ListTaskRespData struct {
	Items     []*Task `json:"items,omitempty"`
	PageToken *string `json:"page_token,omitempty"`
	HasMore   *bool   `json:"has_more,omitempty"`
}

type ListTaskResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *ListTaskRespData `json:"data"`
}

func (resp *ListTaskResp) Success() bool {
	return resp.Code == 0
}

type PatchTaskReqBodyBuilder struct {
	task             *Task
	taskFlag         bool
	updateFields     []string
	updateFieldsFlag bool
}

// 生成body的New构造器
func NewPatchTaskReqBodyBuilder() *PatchTaskReqBodyBuilder {
	builder := &PatchTaskReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *PatchTaskReqBodyBuilder) Task(task *Task) *PatchTaskReqBodyBuilder {
	builder.task = task
	builder.taskFlag = true
	return builder
}
func (builder *PatchTaskReqBodyBuilder) UpdateFields(updateFields []string) *PatchTaskReqBodyBuilder {
	builder.updateFields = updateFields
	builder.updateFieldsFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *PatchTaskReqBodyBuilder) Build() *PatchTaskReqBody {
	req := &PatchTaskReqBody{}
	if builder.taskFlag {
		req.Task = builder.task

	}
	if builder.updateFieldsFlag {
		req.UpdateFields = builder.updateFields

	}
	return req
}

/**上传文件path开始**/
type PatchTaskPathReqBodyBuilder struct {
	task             *Task
	taskFlag         bool
	updateFields     []string
	updateFieldsFlag bool
}

// 生成body的New构造器
func NewPatchTaskPathReqBodyBuilder() *PatchTaskPathReqBodyBuilder {
	builder := &PatchTaskPathReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *PatchTaskPathReqBodyBuilder) Task(task *Task) *PatchTaskPathReqBodyBuilder {
	builder.task = task
	builder.taskFlag = true
	return builder
}
func (builder *PatchTaskPathReqBodyBuilder) UpdateFields(updateFields []string) *PatchTaskPathReqBodyBuilder {
	builder.updateFields = updateFields
	builder.updateFieldsFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *PatchTaskPathReqBodyBuilder) Build() (*PatchTaskReqBody, error) {
	req := &PatchTaskReqBody{}
	if builder.taskFlag {
		req.Task = builder.task
	}
	if builder.updateFieldsFlag {
		req.UpdateFields = builder.updateFields
	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type PatchTaskReqBuilder struct {
	taskId         string
	taskIdFlag     bool
	userIdType     string
	userIdTypeFlag bool
	body           *PatchTaskReqBody
	bodyFlag       bool
}

// 生成请求的New构造器
func NewPatchTaskReqBuilder() *PatchTaskReqBuilder {
	builder := &PatchTaskReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *PatchTaskReqBuilder) TaskId(taskId string) *PatchTaskReqBuilder {
	builder.taskId = taskId
	builder.taskIdFlag = true
	return builder
}
func (builder *PatchTaskReqBuilder) UserIdType(userIdType string) *PatchTaskReqBuilder {
	builder.userIdType = userIdType
	builder.userIdTypeFlag = true
	return builder
}
func (builder *PatchTaskReqBuilder) Body(body *PatchTaskReqBody) *PatchTaskReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *PatchTaskReqBuilder) Build() *PatchTaskReq {
	req := &PatchTaskReq{}
	if builder.taskIdFlag {
		req.TaskId = builder.taskId
	}
	if builder.userIdTypeFlag {
		req.UserIdType = &builder.userIdType
	}
	if builder.bodyFlag {
		req.Body = builder.body

	}
	return req
}

type PatchTaskReqBody struct {
	Task         *Task    `json:"task,omitempty"`
	UpdateFields []string `json:"update_fields,omitempty"`
}

type PatchTaskReq struct {
	TaskId     string            `path:"task_id"`
	UserIdType *string           `query:"user_id_type"`
	Body       *PatchTaskReqBody `body:""`
}

type PatchTaskRespData struct {
	Task *Task `json:"task,omitempty"`
}

type PatchTaskResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *PatchTaskRespData `json:"data"`
}

func (resp *PatchTaskResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type UncompleteTaskReqBuilder struct {
	taskId     string
	taskIdFlag bool
}

// 生成请求的New构造器
func NewUncompleteTaskReqBuilder() *UncompleteTaskReqBuilder {
	builder := &UncompleteTaskReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *UncompleteTaskReqBuilder) TaskId(taskId string) *UncompleteTaskReqBuilder {
	builder.taskId = taskId
	builder.taskIdFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *UncompleteTaskReqBuilder) Build() *UncompleteTaskReq {
	req := &UncompleteTaskReq{}
	if builder.taskIdFlag {
		req.TaskId = builder.taskId
	}
	return req
}

type UncompleteTaskReq struct {
	TaskId string `path:"task_id"`
}

type UncompleteTaskResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *UncompleteTaskResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type CreateTaskCollaboratorReqBuilder struct {
	taskId           string
	taskIdFlag       bool
	userIdType       string
	userIdTypeFlag   bool
	collaborator     *Collaborator
	collaboratorFlag bool
}

// 生成请求的New构造器
func NewCreateTaskCollaboratorReqBuilder() *CreateTaskCollaboratorReqBuilder {
	builder := &CreateTaskCollaboratorReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *CreateTaskCollaboratorReqBuilder) TaskId(taskId string) *CreateTaskCollaboratorReqBuilder {
	builder.taskId = taskId
	builder.taskIdFlag = true
	return builder
}
func (builder *CreateTaskCollaboratorReqBuilder) UserIdType(userIdType string) *CreateTaskCollaboratorReqBuilder {
	builder.userIdType = userIdType
	builder.userIdTypeFlag = true
	return builder
}
func (builder *CreateTaskCollaboratorReqBuilder) Collaborator(collaborator *Collaborator) *CreateTaskCollaboratorReqBuilder {
	builder.collaborator = collaborator
	builder.collaboratorFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *CreateTaskCollaboratorReqBuilder) Build() *CreateTaskCollaboratorReq {
	req := &CreateTaskCollaboratorReq{}
	if builder.taskIdFlag {
		req.TaskId = builder.taskId
	}
	if builder.userIdTypeFlag {
		req.UserIdType = &builder.userIdType
	}
	return req
}

type CreateTaskCollaboratorReq struct {
	TaskId       string        `path:"task_id"`
	UserIdType   *string       `query:"user_id_type"`
	Collaborator *Collaborator `body:""`
}

type CreateTaskCollaboratorRespData struct {
	Collaborator *Collaborator `json:"collaborator,omitempty"`
}

type CreateTaskCollaboratorResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *CreateTaskCollaboratorRespData `json:"data"`
}

func (resp *CreateTaskCollaboratorResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type DeleteTaskCollaboratorReqBuilder struct {
	taskId             string
	taskIdFlag         bool
	collaboratorId     string
	collaboratorIdFlag bool
}

// 生成请求的New构造器
func NewDeleteTaskCollaboratorReqBuilder() *DeleteTaskCollaboratorReqBuilder {
	builder := &DeleteTaskCollaboratorReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *DeleteTaskCollaboratorReqBuilder) TaskId(taskId string) *DeleteTaskCollaboratorReqBuilder {
	builder.taskId = taskId
	builder.taskIdFlag = true
	return builder
}
func (builder *DeleteTaskCollaboratorReqBuilder) CollaboratorId(collaboratorId string) *DeleteTaskCollaboratorReqBuilder {
	builder.collaboratorId = collaboratorId
	builder.collaboratorIdFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *DeleteTaskCollaboratorReqBuilder) Build() *DeleteTaskCollaboratorReq {
	req := &DeleteTaskCollaboratorReq{}
	if builder.taskIdFlag {
		req.TaskId = builder.taskId
	}
	if builder.collaboratorIdFlag {
		req.CollaboratorId = builder.collaboratorId
	}
	return req
}

type DeleteTaskCollaboratorReq struct {
	TaskId         string `path:"task_id"`
	CollaboratorId string `path:"collaborator_id"`
}

type DeleteTaskCollaboratorResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *DeleteTaskCollaboratorResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type ListTaskCollaboratorReqBuilder struct {
	taskId         string
	taskIdFlag     bool
	pageSize       int
	pageSizeFlag   bool
	pageToken      string
	pageTokenFlag  bool
	userIdType     string
	userIdTypeFlag bool
	limit          int
}

// 生成请求的New构造器
func NewListTaskCollaboratorReqBuilder() *ListTaskCollaboratorReqBuilder {
	builder := &ListTaskCollaboratorReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *ListTaskCollaboratorReqBuilder) Limit(limit int) *ListTaskCollaboratorReqBuilder {
	builder.limit = limit
	return builder
}
func (builder *ListTaskCollaboratorReqBuilder) TaskId(taskId string) *ListTaskCollaboratorReqBuilder {
	builder.taskId = taskId
	builder.taskIdFlag = true
	return builder
}
func (builder *ListTaskCollaboratorReqBuilder) PageSize(pageSize int) *ListTaskCollaboratorReqBuilder {
	builder.pageSize = pageSize
	builder.pageSizeFlag = true
	return builder
}
func (builder *ListTaskCollaboratorReqBuilder) PageToken(pageToken string) *ListTaskCollaboratorReqBuilder {
	builder.pageToken = pageToken
	builder.pageTokenFlag = true
	return builder
}
func (builder *ListTaskCollaboratorReqBuilder) UserIdType(userIdType string) *ListTaskCollaboratorReqBuilder {
	builder.userIdType = userIdType
	builder.userIdTypeFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *ListTaskCollaboratorReqBuilder) Build() *ListTaskCollaboratorReq {
	req := &ListTaskCollaboratorReq{}
	req.Limit = builder.limit
	if builder.taskIdFlag {
		req.TaskId = builder.taskId
	}
	if builder.pageSizeFlag {
		req.PageSize = &builder.pageSize
	}
	if builder.pageTokenFlag {
		req.PageToken = &builder.pageToken
	}
	if builder.userIdTypeFlag {
		req.UserIdType = &builder.userIdType
	}
	return req
}

type ListTaskCollaboratorReq struct {
	TaskId     string  `path:"task_id"`
	PageSize   *int    `query:"page_size"`
	PageToken  *string `query:"page_token"`
	UserIdType *string `query:"user_id_type"`
	Limit      int
}

type ListTaskCollaboratorRespData struct {
	Items     []*Collaborator `json:"items,omitempty"`
	PageToken *string         `json:"page_token,omitempty"`
	HasMore   *bool           `json:"has_more,omitempty"`
}

type ListTaskCollaboratorResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *ListTaskCollaboratorRespData `json:"data"`
}

func (resp *ListTaskCollaboratorResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type CreateTaskCommentReqBuilder struct {
	taskId      string
	taskIdFlag  bool
	comment     *Comment
	commentFlag bool
}

// 生成请求的New构造器
func NewCreateTaskCommentReqBuilder() *CreateTaskCommentReqBuilder {
	builder := &CreateTaskCommentReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *CreateTaskCommentReqBuilder) TaskId(taskId string) *CreateTaskCommentReqBuilder {
	builder.taskId = taskId
	builder.taskIdFlag = true
	return builder
}
func (builder *CreateTaskCommentReqBuilder) Comment(comment *Comment) *CreateTaskCommentReqBuilder {
	builder.comment = comment
	builder.commentFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *CreateTaskCommentReqBuilder) Build() *CreateTaskCommentReq {
	req := &CreateTaskCommentReq{}
	if builder.taskIdFlag {
		req.TaskId = builder.taskId
	}
	return req
}

type CreateTaskCommentReq struct {
	TaskId  string   `path:"task_id"`
	Comment *Comment `body:""`
}

type CreateTaskCommentRespData struct {
	Comment *Comment `json:"comment,omitempty"`
}

type CreateTaskCommentResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *CreateTaskCommentRespData `json:"data"`
}

func (resp *CreateTaskCommentResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type DeleteTaskCommentReqBuilder struct {
	taskId        string
	taskIdFlag    bool
	commentId     int64
	commentIdFlag bool
}

// 生成请求的New构造器
func NewDeleteTaskCommentReqBuilder() *DeleteTaskCommentReqBuilder {
	builder := &DeleteTaskCommentReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *DeleteTaskCommentReqBuilder) TaskId(taskId string) *DeleteTaskCommentReqBuilder {
	builder.taskId = taskId
	builder.taskIdFlag = true
	return builder
}
func (builder *DeleteTaskCommentReqBuilder) CommentId(commentId int64) *DeleteTaskCommentReqBuilder {
	builder.commentId = commentId
	builder.commentIdFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *DeleteTaskCommentReqBuilder) Build() *DeleteTaskCommentReq {
	req := &DeleteTaskCommentReq{}
	if builder.taskIdFlag {
		req.TaskId = builder.taskId
	}
	if builder.commentIdFlag {
		req.CommentId = builder.commentId
	}
	return req
}

type DeleteTaskCommentReq struct {
	TaskId    string `path:"task_id"`
	CommentId int64  `path:"comment_id"`
}

type DeleteTaskCommentResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *DeleteTaskCommentResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type GetTaskCommentReqBuilder struct {
	taskId        string
	taskIdFlag    bool
	commentId     int64
	commentIdFlag bool
}

// 生成请求的New构造器
func NewGetTaskCommentReqBuilder() *GetTaskCommentReqBuilder {
	builder := &GetTaskCommentReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *GetTaskCommentReqBuilder) TaskId(taskId string) *GetTaskCommentReqBuilder {
	builder.taskId = taskId
	builder.taskIdFlag = true
	return builder
}
func (builder *GetTaskCommentReqBuilder) CommentId(commentId int64) *GetTaskCommentReqBuilder {
	builder.commentId = commentId
	builder.commentIdFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *GetTaskCommentReqBuilder) Build() *GetTaskCommentReq {
	req := &GetTaskCommentReq{}
	if builder.taskIdFlag {
		req.TaskId = builder.taskId
	}
	if builder.commentIdFlag {
		req.CommentId = builder.commentId
	}
	return req
}

type GetTaskCommentReq struct {
	TaskId    string `path:"task_id"`
	CommentId int64  `path:"comment_id"`
}

type GetTaskCommentRespData struct {
	Comment *Comment `json:"comment,omitempty"`
}

type GetTaskCommentResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *GetTaskCommentRespData `json:"data"`
}

func (resp *GetTaskCommentResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type ListTaskCommentReqBuilder struct {
	taskId            string
	taskIdFlag        bool
	pageSize          int
	pageSizeFlag      bool
	pageToken         string
	pageTokenFlag     bool
	listDirection     int
	listDirectionFlag bool
	limit             int
}

// 生成请求的New构造器
func NewListTaskCommentReqBuilder() *ListTaskCommentReqBuilder {
	builder := &ListTaskCommentReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *ListTaskCommentReqBuilder) Limit(limit int) *ListTaskCommentReqBuilder {
	builder.limit = limit
	return builder
}
func (builder *ListTaskCommentReqBuilder) TaskId(taskId string) *ListTaskCommentReqBuilder {
	builder.taskId = taskId
	builder.taskIdFlag = true
	return builder
}
func (builder *ListTaskCommentReqBuilder) PageSize(pageSize int) *ListTaskCommentReqBuilder {
	builder.pageSize = pageSize
	builder.pageSizeFlag = true
	return builder
}
func (builder *ListTaskCommentReqBuilder) PageToken(pageToken string) *ListTaskCommentReqBuilder {
	builder.pageToken = pageToken
	builder.pageTokenFlag = true
	return builder
}
func (builder *ListTaskCommentReqBuilder) ListDirection(listDirection int) *ListTaskCommentReqBuilder {
	builder.listDirection = listDirection
	builder.listDirectionFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *ListTaskCommentReqBuilder) Build() *ListTaskCommentReq {
	req := &ListTaskCommentReq{}
	req.Limit = builder.limit
	if builder.taskIdFlag {
		req.TaskId = builder.taskId
	}
	if builder.pageSizeFlag {
		req.PageSize = &builder.pageSize
	}
	if builder.pageTokenFlag {
		req.PageToken = &builder.pageToken
	}
	if builder.listDirectionFlag {
		req.ListDirection = &builder.listDirection
	}
	return req
}

type ListTaskCommentReq struct {
	TaskId        string  `path:"task_id"`
	PageSize      *int    `query:"page_size"`
	PageToken     *string `query:"page_token"`
	ListDirection *int    `query:"list_direction"`
	Limit         int
}

type ListTaskCommentRespData struct {
	Items     []*Comment `json:"items,omitempty"`
	PageToken *string    `json:"page_token,omitempty"`
	HasMore   *bool      `json:"has_more,omitempty"`
}

type ListTaskCommentResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *ListTaskCommentRespData `json:"data"`
}

func (resp *ListTaskCommentResp) Success() bool {
	return resp.Code == 0
}

type UpdateTaskCommentReqBodyBuilder struct {
	content     string
	contentFlag bool
}

// 生成body的New构造器
func NewUpdateTaskCommentReqBodyBuilder() *UpdateTaskCommentReqBodyBuilder {
	builder := &UpdateTaskCommentReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *UpdateTaskCommentReqBodyBuilder) Content(content string) *UpdateTaskCommentReqBodyBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *UpdateTaskCommentReqBodyBuilder) Build() *UpdateTaskCommentReqBody {
	req := &UpdateTaskCommentReqBody{}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	return req
}

/**上传文件path开始**/
type UpdateTaskCommentPathReqBodyBuilder struct {
	content     string
	contentFlag bool
}

// 生成body的New构造器
func NewUpdateTaskCommentPathReqBodyBuilder() *UpdateTaskCommentPathReqBodyBuilder {
	builder := &UpdateTaskCommentPathReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *UpdateTaskCommentPathReqBodyBuilder) Content(content string) *UpdateTaskCommentPathReqBodyBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *UpdateTaskCommentPathReqBodyBuilder) Build() (*UpdateTaskCommentReqBody, error) {
	req := &UpdateTaskCommentReqBody{}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type UpdateTaskCommentReqBuilder struct {
	taskId        string
	taskIdFlag    bool
	commentId     int64
	commentIdFlag bool
	body          *UpdateTaskCommentReqBody
	bodyFlag      bool
}

// 生成请求的New构造器
func NewUpdateTaskCommentReqBuilder() *UpdateTaskCommentReqBuilder {
	builder := &UpdateTaskCommentReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *UpdateTaskCommentReqBuilder) TaskId(taskId string) *UpdateTaskCommentReqBuilder {
	builder.taskId = taskId
	builder.taskIdFlag = true
	return builder
}
func (builder *UpdateTaskCommentReqBuilder) CommentId(commentId int64) *UpdateTaskCommentReqBuilder {
	builder.commentId = commentId
	builder.commentIdFlag = true
	return builder
}
func (builder *UpdateTaskCommentReqBuilder) Body(body *UpdateTaskCommentReqBody) *UpdateTaskCommentReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *UpdateTaskCommentReqBuilder) Build() *UpdateTaskCommentReq {
	req := &UpdateTaskCommentReq{}
	if builder.taskIdFlag {
		req.TaskId = builder.taskId
	}
	if builder.commentIdFlag {
		req.CommentId = builder.commentId
	}
	if builder.bodyFlag {
		req.Body = builder.body

	}
	return req
}

type UpdateTaskCommentReqBody struct {
	Content *string `json:"content,omitempty"`
}

type UpdateTaskCommentReq struct {
	TaskId    string                    `path:"task_id"`
	CommentId int64                     `path:"comment_id"`
	Body      *UpdateTaskCommentReqBody `body:""`
}

type UpdateTaskCommentRespData struct {
	Comment *Comment `json:"comment,omitempty"`
}

type UpdateTaskCommentResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *UpdateTaskCommentRespData `json:"data"`
}

func (resp *UpdateTaskCommentResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type CreateTaskFollowerReqBuilder struct {
	taskId         string
	taskIdFlag     bool
	userIdType     string
	userIdTypeFlag bool
	follower       *Follower
	followerFlag   bool
}

// 生成请求的New构造器
func NewCreateTaskFollowerReqBuilder() *CreateTaskFollowerReqBuilder {
	builder := &CreateTaskFollowerReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *CreateTaskFollowerReqBuilder) TaskId(taskId string) *CreateTaskFollowerReqBuilder {
	builder.taskId = taskId
	builder.taskIdFlag = true
	return builder
}
func (builder *CreateTaskFollowerReqBuilder) UserIdType(userIdType string) *CreateTaskFollowerReqBuilder {
	builder.userIdType = userIdType
	builder.userIdTypeFlag = true
	return builder
}
func (builder *CreateTaskFollowerReqBuilder) Follower(follower *Follower) *CreateTaskFollowerReqBuilder {
	builder.follower = follower
	builder.followerFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *CreateTaskFollowerReqBuilder) Build() *CreateTaskFollowerReq {
	req := &CreateTaskFollowerReq{}
	if builder.taskIdFlag {
		req.TaskId = builder.taskId
	}
	if builder.userIdTypeFlag {
		req.UserIdType = &builder.userIdType
	}
	return req
}

type CreateTaskFollowerReq struct {
	TaskId     string    `path:"task_id"`
	UserIdType *string   `query:"user_id_type"`
	Follower   *Follower `body:""`
}

type CreateTaskFollowerRespData struct {
	Follower *Follower `json:"follower,omitempty"`
}

type CreateTaskFollowerResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *CreateTaskFollowerRespData `json:"data"`
}

func (resp *CreateTaskFollowerResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type DeleteTaskFollowerReqBuilder struct {
	taskId         string
	taskIdFlag     bool
	followerId     string
	followerIdFlag bool
}

// 生成请求的New构造器
func NewDeleteTaskFollowerReqBuilder() *DeleteTaskFollowerReqBuilder {
	builder := &DeleteTaskFollowerReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *DeleteTaskFollowerReqBuilder) TaskId(taskId string) *DeleteTaskFollowerReqBuilder {
	builder.taskId = taskId
	builder.taskIdFlag = true
	return builder
}
func (builder *DeleteTaskFollowerReqBuilder) FollowerId(followerId string) *DeleteTaskFollowerReqBuilder {
	builder.followerId = followerId
	builder.followerIdFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *DeleteTaskFollowerReqBuilder) Build() *DeleteTaskFollowerReq {
	req := &DeleteTaskFollowerReq{}
	if builder.taskIdFlag {
		req.TaskId = builder.taskId
	}
	if builder.followerIdFlag {
		req.FollowerId = builder.followerId
	}
	return req
}

type DeleteTaskFollowerReq struct {
	TaskId     string `path:"task_id"`
	FollowerId string `path:"follower_id"`
}

type DeleteTaskFollowerResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *DeleteTaskFollowerResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type ListTaskFollowerReqBuilder struct {
	taskId         string
	taskIdFlag     bool
	pageSize       int
	pageSizeFlag   bool
	pageToken      string
	pageTokenFlag  bool
	userIdType     string
	userIdTypeFlag bool
	limit          int
}

// 生成请求的New构造器
func NewListTaskFollowerReqBuilder() *ListTaskFollowerReqBuilder {
	builder := &ListTaskFollowerReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *ListTaskFollowerReqBuilder) Limit(limit int) *ListTaskFollowerReqBuilder {
	builder.limit = limit
	return builder
}
func (builder *ListTaskFollowerReqBuilder) TaskId(taskId string) *ListTaskFollowerReqBuilder {
	builder.taskId = taskId
	builder.taskIdFlag = true
	return builder
}
func (builder *ListTaskFollowerReqBuilder) PageSize(pageSize int) *ListTaskFollowerReqBuilder {
	builder.pageSize = pageSize
	builder.pageSizeFlag = true
	return builder
}
func (builder *ListTaskFollowerReqBuilder) PageToken(pageToken string) *ListTaskFollowerReqBuilder {
	builder.pageToken = pageToken
	builder.pageTokenFlag = true
	return builder
}
func (builder *ListTaskFollowerReqBuilder) UserIdType(userIdType string) *ListTaskFollowerReqBuilder {
	builder.userIdType = userIdType
	builder.userIdTypeFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *ListTaskFollowerReqBuilder) Build() *ListTaskFollowerReq {
	req := &ListTaskFollowerReq{}
	req.Limit = builder.limit
	if builder.taskIdFlag {
		req.TaskId = builder.taskId
	}
	if builder.pageSizeFlag {
		req.PageSize = &builder.pageSize
	}
	if builder.pageTokenFlag {
		req.PageToken = &builder.pageToken
	}
	if builder.userIdTypeFlag {
		req.UserIdType = &builder.userIdType
	}
	return req
}

type ListTaskFollowerReq struct {
	TaskId     string  `path:"task_id"`
	PageSize   *int    `query:"page_size"`
	PageToken  *string `query:"page_token"`
	UserIdType *string `query:"user_id_type"`
	Limit      int
}

type ListTaskFollowerRespData struct {
	Items     []*Follower `json:"items,omitempty"`
	PageToken *string     `json:"page_token,omitempty"`
	HasMore   *bool       `json:"has_more,omitempty"`
}

type ListTaskFollowerResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *ListTaskFollowerRespData `json:"data"`
}

func (resp *ListTaskFollowerResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type CreateTaskReminderReqBuilder struct {
	taskId       string
	taskIdFlag   bool
	reminder     *Reminder
	reminderFlag bool
}

// 生成请求的New构造器
func NewCreateTaskReminderReqBuilder() *CreateTaskReminderReqBuilder {
	builder := &CreateTaskReminderReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *CreateTaskReminderReqBuilder) TaskId(taskId string) *CreateTaskReminderReqBuilder {
	builder.taskId = taskId
	builder.taskIdFlag = true
	return builder
}
func (builder *CreateTaskReminderReqBuilder) Reminder(reminder *Reminder) *CreateTaskReminderReqBuilder {
	builder.reminder = reminder
	builder.reminderFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *CreateTaskReminderReqBuilder) Build() *CreateTaskReminderReq {
	req := &CreateTaskReminderReq{}
	if builder.taskIdFlag {
		req.TaskId = builder.taskId
	}
	return req
}

type CreateTaskReminderReq struct {
	TaskId   string    `path:"task_id"`
	Reminder *Reminder `body:""`
}

type CreateTaskReminderRespData struct {
	Reminder *Reminder `json:"reminder,omitempty"`
}

type CreateTaskReminderResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *CreateTaskReminderRespData `json:"data"`
}

func (resp *CreateTaskReminderResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type DeleteTaskReminderReqBuilder struct {
	taskId         string
	taskIdFlag     bool
	reminderId     string
	reminderIdFlag bool
}

// 生成请求的New构造器
func NewDeleteTaskReminderReqBuilder() *DeleteTaskReminderReqBuilder {
	builder := &DeleteTaskReminderReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *DeleteTaskReminderReqBuilder) TaskId(taskId string) *DeleteTaskReminderReqBuilder {
	builder.taskId = taskId
	builder.taskIdFlag = true
	return builder
}
func (builder *DeleteTaskReminderReqBuilder) ReminderId(reminderId string) *DeleteTaskReminderReqBuilder {
	builder.reminderId = reminderId
	builder.reminderIdFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *DeleteTaskReminderReqBuilder) Build() *DeleteTaskReminderReq {
	req := &DeleteTaskReminderReq{}
	if builder.taskIdFlag {
		req.TaskId = builder.taskId
	}
	if builder.reminderIdFlag {
		req.ReminderId = builder.reminderId
	}
	return req
}

type DeleteTaskReminderReq struct {
	TaskId     string `path:"task_id"`
	ReminderId string `path:"reminder_id"`
}

type DeleteTaskReminderResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *DeleteTaskReminderResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type ListTaskReminderReqBuilder struct {
	taskId        string
	taskIdFlag    bool
	pageSize      int
	pageSizeFlag  bool
	pageToken     string
	pageTokenFlag bool
	limit         int
}

// 生成请求的New构造器
func NewListTaskReminderReqBuilder() *ListTaskReminderReqBuilder {
	builder := &ListTaskReminderReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *ListTaskReminderReqBuilder) Limit(limit int) *ListTaskReminderReqBuilder {
	builder.limit = limit
	return builder
}
func (builder *ListTaskReminderReqBuilder) TaskId(taskId string) *ListTaskReminderReqBuilder {
	builder.taskId = taskId
	builder.taskIdFlag = true
	return builder
}
func (builder *ListTaskReminderReqBuilder) PageSize(pageSize int) *ListTaskReminderReqBuilder {
	builder.pageSize = pageSize
	builder.pageSizeFlag = true
	return builder
}
func (builder *ListTaskReminderReqBuilder) PageToken(pageToken string) *ListTaskReminderReqBuilder {
	builder.pageToken = pageToken
	builder.pageTokenFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *ListTaskReminderReqBuilder) Build() *ListTaskReminderReq {
	req := &ListTaskReminderReq{}
	req.Limit = builder.limit
	if builder.taskIdFlag {
		req.TaskId = builder.taskId
	}
	if builder.pageSizeFlag {
		req.PageSize = &builder.pageSize
	}
	if builder.pageTokenFlag {
		req.PageToken = &builder.pageToken
	}
	return req
}

type ListTaskReminderReq struct {
	TaskId    string  `path:"task_id"`
	PageSize  *int    `query:"page_size"`
	PageToken *string `query:"page_token"`
	Limit     int
}

type ListTaskReminderRespData struct {
	Items     []*Reminder `json:"items,omitempty"`
	PageToken *string     `json:"page_token,omitempty"`
	HasMore   *bool       `json:"has_more,omitempty"`
}

type ListTaskReminderResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *ListTaskReminderRespData `json:"data"`
}

func (resp *ListTaskReminderResp) Success() bool {
	return resp.Code == 0
}

/**生成消息事件结构体 **/

type TaskUpdateTenantEventData struct {
	UserIdList *UserIdList `json:"user_id_list,omitempty"`
	TaskId     *string     `json:"task_id,omitempty"`
	ObjectType *string     `json:"object_type,omitempty"`
	EventType  *string     `json:"event_type,omitempty"`
}

type TaskUpdateTenantEvent struct {
	*event.EventV2Base
	Event *TaskUpdateTenantEventData `json:"event"`
}

type TaskUpdatedEventData struct {
	TaskId  *string `json:"task_id,omitempty"`
	ObjType *int    `json:"obj_type,omitempty"`
}

type TaskUpdatedEvent struct {
	*event.EventV2Base
	Event *TaskUpdatedEventData `json:"event"`
}

type TaskCommentUpdatedEventData struct {
	TaskId    *string `json:"task_id,omitempty"`
	CommentId *string `json:"comment_id,omitempty"`
	ParentId  *string `json:"parent_id,omitempty"`
	ObjType   *int    `json:"obj_type,omitempty"`
}

type TaskCommentUpdatedEvent struct {
	*event.EventV2Base
	Event *TaskCommentUpdatedEventData `json:"event"`
}

/* 生成请求的builder构造器*/
/*1.1 生成body的builder结构体*/
/**如果是分页查询，则添加迭代器定义**/
type ListTaskIterator struct {
	nextPageToken *string
	items         []*Task
	index         int
	limit         int
	ctx           context.Context
	req           *ListTaskReq
	listFunc      func(ctx context.Context, req *ListTaskReq, options ...core.RequestOptionFunc) (*ListTaskResp, error)
	options       []core.RequestOptionFunc
	curlNum       int
}

func (iterator *ListTaskIterator) Next() (bool, *Task, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum > iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.PageToken = iterator.nextPageToken
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListTaskIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

/**如果是分页查询，则添加迭代器定义**/
type ListTaskCollaboratorIterator struct {
	nextPageToken *string
	items         []*Collaborator
	index         int
	limit         int
	ctx           context.Context
	req           *ListTaskCollaboratorReq
	listFunc      func(ctx context.Context, req *ListTaskCollaboratorReq, options ...core.RequestOptionFunc) (*ListTaskCollaboratorResp, error)
	options       []core.RequestOptionFunc
	curlNum       int
}

func (iterator *ListTaskCollaboratorIterator) Next() (bool, *Collaborator, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum > iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.PageToken = iterator.nextPageToken
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListTaskCollaboratorIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

/**如果是分页查询，则添加迭代器定义**/
type ListTaskCommentIterator struct {
	nextPageToken *string
	items         []*Comment
	index         int
	limit         int
	ctx           context.Context
	req           *ListTaskCommentReq
	listFunc      func(ctx context.Context, req *ListTaskCommentReq, options ...core.RequestOptionFunc) (*ListTaskCommentResp, error)
	options       []core.RequestOptionFunc
	curlNum       int
}

func (iterator *ListTaskCommentIterator) Next() (bool, *Comment, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum > iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.PageToken = iterator.nextPageToken
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListTaskCommentIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

/**如果是分页查询，则添加迭代器定义**/
type ListTaskFollowerIterator struct {
	nextPageToken *string
	items         []*Follower
	index         int
	limit         int
	ctx           context.Context
	req           *ListTaskFollowerReq
	listFunc      func(ctx context.Context, req *ListTaskFollowerReq, options ...core.RequestOptionFunc) (*ListTaskFollowerResp, error)
	options       []core.RequestOptionFunc
	curlNum       int
}

func (iterator *ListTaskFollowerIterator) Next() (bool, *Follower, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum > iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.PageToken = iterator.nextPageToken
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListTaskFollowerIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

/**如果是分页查询，则添加迭代器定义**/
type ListTaskReminderIterator struct {
	nextPageToken *string
	items         []*Reminder
	index         int
	limit         int
	ctx           context.Context
	req           *ListTaskReminderReq
	listFunc      func(ctx context.Context, req *ListTaskReminderReq, options ...core.RequestOptionFunc) (*ListTaskReminderResp, error)
	options       []core.RequestOptionFunc
	curlNum       int
}

func (iterator *ListTaskReminderIterator) Next() (bool, *Reminder, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum > iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.PageToken = iterator.nextPageToken
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListTaskReminderIterator) NextPageToken() *string {
	return iterator.nextPageToken
}
