// Package contact code generated by oapi sdk gen
package contact

import (
	"context"
	"net/http"

	"github.com/larksuite/oapi-sdk-go/core"
)

// 构建业务域服务实例
func NewService(httpClient *http.Client, config *core.Config) *ContactService {
	c := &ContactService{httpClient: httpClient, config: config}
	c.CustomAttr = &customAttr{service: c}
	c.CustomAttrEvent = &customAttrEvent{service: c}
	c.Department = &department{service: c}
	c.EmployeeTypeEnum = &employeeTypeEnum{service: c}
	c.Group = &group{service: c}
	c.GroupMember = &groupMember{service: c}
	c.Scope = &scope{service: c}
	c.Unit = &unit{service: c}
	c.User = &user{service: c}
	return c
}

// 业务域服务定义
type ContactService struct {
	httpClient       *http.Client
	config           *core.Config
	CustomAttr       *customAttr
	CustomAttrEvent  *customAttrEvent
	Department       *department
	EmployeeTypeEnum *employeeTypeEnum
	Group            *group
	GroupMember      *groupMember
	Scope            *scope
	Unit             *unit
	User             *user
}

// 资源服务定义
type customAttr struct {
	service *ContactService
}
type customAttrEvent struct {
	service *ContactService
}
type department struct {
	service *ContactService
}
type employeeTypeEnum struct {
	service *ContactService
}
type group struct {
	service *ContactService
}
type groupMember struct {
	service *ContactService
}
type scope struct {
	service *ContactService
}
type unit struct {
	service *ContactService
}
type user struct {
	service *ContactService
}

// 资源服务方法定义
func (c *customAttr) List(ctx context.Context, req *ListCustomAttrReq, options ...core.RequestOptionFunc) (*ListCustomAttrResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, c.service.config, http.MethodGet,
		"/open-apis/contact/v3/custom_attrs", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &ListCustomAttrResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (c *customAttr) ListCustomAttr(ctx context.Context, req *ListCustomAttrReq, options ...core.RequestOptionFunc) (*ListCustomAttrIterator, error) {
	return &ListCustomAttrIterator{
		ctx:      ctx,
		req:      req,
		listFunc: c.List,
		options:  options,
		limit:    req.Limit}, nil
}
func (d *department) Children(ctx context.Context, req *ChildrenDepartmentReq, options ...core.RequestOptionFunc) (*ChildrenDepartmentResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, d.service.config, http.MethodGet,
		"/open-apis/contact/v3/departments/:department_id/children", []core.AccessTokenType{core.AccessTokenTypeTenant, core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &ChildrenDepartmentResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (d *department) ChildrenDepartment(ctx context.Context, req *ChildrenDepartmentReq, options ...core.RequestOptionFunc) (*ChildrenDepartmentIterator, error) {
	return &ChildrenDepartmentIterator{
		ctx:      ctx,
		req:      req,
		listFunc: d.Children,
		options:  options,
		limit:    req.Limit}, nil
}
func (d *department) Create(ctx context.Context, req *CreateDepartmentReq, options ...core.RequestOptionFunc) (*CreateDepartmentResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, d.service.config, http.MethodPost,
		"/open-apis/contact/v3/departments", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &CreateDepartmentResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (d *department) Delete(ctx context.Context, req *DeleteDepartmentReq, options ...core.RequestOptionFunc) (*DeleteDepartmentResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, d.service.config, http.MethodDelete,
		"/open-apis/contact/v3/departments/:department_id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &DeleteDepartmentResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (d *department) Get(ctx context.Context, req *GetDepartmentReq, options ...core.RequestOptionFunc) (*GetDepartmentResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, d.service.config, http.MethodGet,
		"/open-apis/contact/v3/departments/:department_id", []core.AccessTokenType{core.AccessTokenTypeTenant, core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &GetDepartmentResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (d *department) List(ctx context.Context, req *ListDepartmentReq, options ...core.RequestOptionFunc) (*ListDepartmentResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, d.service.config, http.MethodGet,
		"/open-apis/contact/v3/departments", []core.AccessTokenType{core.AccessTokenTypeTenant, core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &ListDepartmentResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (d *department) ListDepartment(ctx context.Context, req *ListDepartmentReq, options ...core.RequestOptionFunc) (*ListDepartmentIterator, error) {
	return &ListDepartmentIterator{
		ctx:      ctx,
		req:      req,
		listFunc: d.List,
		options:  options,
		limit:    req.Limit}, nil
}
func (d *department) Parent(ctx context.Context, req *ParentDepartmentReq, options ...core.RequestOptionFunc) (*ParentDepartmentResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, d.service.config, http.MethodGet,
		"/open-apis/contact/v3/departments/parent", []core.AccessTokenType{core.AccessTokenTypeTenant, core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &ParentDepartmentResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (d *department) ParentDepartment(ctx context.Context, req *ParentDepartmentReq, options ...core.RequestOptionFunc) (*ParentDepartmentIterator, error) {
	return &ParentDepartmentIterator{
		ctx:      ctx,
		req:      req,
		listFunc: d.Parent,
		options:  options,
		limit:    req.Limit}, nil
}
func (d *department) Patch(ctx context.Context, req *PatchDepartmentReq, options ...core.RequestOptionFunc) (*PatchDepartmentResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, d.service.config, http.MethodPatch,
		"/open-apis/contact/v3/departments/:department_id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &PatchDepartmentResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (d *department) Search(ctx context.Context, req *SearchDepartmentReq, options ...core.RequestOptionFunc) (*SearchDepartmentResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, d.service.config, http.MethodPost,
		"/open-apis/contact/v3/departments/search", []core.AccessTokenType{core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &SearchDepartmentResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (d *department) SearchDepartment(ctx context.Context, req *SearchDepartmentReq, options ...core.RequestOptionFunc) (*SearchDepartmentIterator, error) {
	return &SearchDepartmentIterator{
		ctx:      ctx,
		req:      req,
		listFunc: d.Search,
		options:  options,
		limit:    req.Limit}, nil
}
func (d *department) UnbindDepartmentChat(ctx context.Context, req *UnbindDepartmentChatDepartmentReq, options ...core.RequestOptionFunc) (*UnbindDepartmentChatDepartmentResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, d.service.config, http.MethodPost,
		"/open-apis/contact/v3/departments/unbind_department_chat", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &UnbindDepartmentChatDepartmentResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (d *department) Update(ctx context.Context, req *UpdateDepartmentReq, options ...core.RequestOptionFunc) (*UpdateDepartmentResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, d.service.config, http.MethodPut,
		"/open-apis/contact/v3/departments/:department_id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &UpdateDepartmentResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (e *employeeTypeEnum) Create(ctx context.Context, req *CreateEmployeeTypeEnumReq, options ...core.RequestOptionFunc) (*CreateEmployeeTypeEnumResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, e.service.config, http.MethodPost,
		"/open-apis/contact/v3/employee_type_enums", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &CreateEmployeeTypeEnumResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (e *employeeTypeEnum) Delete(ctx context.Context, req *DeleteEmployeeTypeEnumReq, options ...core.RequestOptionFunc) (*DeleteEmployeeTypeEnumResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, e.service.config, http.MethodDelete,
		"/open-apis/contact/v3/employee_type_enums/:enum_id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &DeleteEmployeeTypeEnumResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (e *employeeTypeEnum) List(ctx context.Context, req *ListEmployeeTypeEnumReq, options ...core.RequestOptionFunc) (*ListEmployeeTypeEnumResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, e.service.config, http.MethodGet,
		"/open-apis/contact/v3/employee_type_enums", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &ListEmployeeTypeEnumResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (e *employeeTypeEnum) ListEmployeeTypeEnum(ctx context.Context, req *ListEmployeeTypeEnumReq, options ...core.RequestOptionFunc) (*ListEmployeeTypeEnumIterator, error) {
	return &ListEmployeeTypeEnumIterator{
		ctx:      ctx,
		req:      req,
		listFunc: e.List,
		options:  options,
		limit:    req.Limit}, nil
}
func (e *employeeTypeEnum) Update(ctx context.Context, req *UpdateEmployeeTypeEnumReq, options ...core.RequestOptionFunc) (*UpdateEmployeeTypeEnumResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, e.service.config, http.MethodPut,
		"/open-apis/contact/v3/employee_type_enums/:enum_id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &UpdateEmployeeTypeEnumResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (g *group) Create(ctx context.Context, req *CreateGroupReq, options ...core.RequestOptionFunc) (*CreateGroupResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, g.service.config, http.MethodPost,
		"/open-apis/contact/v3/group", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &CreateGroupResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (g *group) Delete(ctx context.Context, req *DeleteGroupReq, options ...core.RequestOptionFunc) (*DeleteGroupResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, g.service.config, http.MethodDelete,
		"/open-apis/contact/v3/group/:group_id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &DeleteGroupResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (g *group) Get(ctx context.Context, req *GetGroupReq, options ...core.RequestOptionFunc) (*GetGroupResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, g.service.config, http.MethodGet,
		"/open-apis/contact/v3/group/:group_id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &GetGroupResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (g *group) MemberBelong(ctx context.Context, req *MemberBelongGroupReq, options ...core.RequestOptionFunc) (*MemberBelongGroupResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, g.service.config, http.MethodGet,
		"/open-apis/contact/v3/group/member_belong", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &MemberBelongGroupResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (g *group) Patch(ctx context.Context, req *PatchGroupReq, options ...core.RequestOptionFunc) (*PatchGroupResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, g.service.config, http.MethodPatch,
		"/open-apis/contact/v3/group/:group_id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &PatchGroupResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (g *group) Simplelist(ctx context.Context, req *SimplelistGroupReq, options ...core.RequestOptionFunc) (*SimplelistGroupResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, g.service.config, http.MethodGet,
		"/open-apis/contact/v3/group/simplelist", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &SimplelistGroupResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (g *group) SimplelistGroup(ctx context.Context, req *SimplelistGroupReq, options ...core.RequestOptionFunc) (*SimplelistGroupIterator, error) {
	return &SimplelistGroupIterator{
		ctx:      ctx,
		req:      req,
		listFunc: g.Simplelist,
		options:  options,
		limit:    req.Limit}, nil
}
func (g *groupMember) Add(ctx context.Context, req *AddGroupMemberReq, options ...core.RequestOptionFunc) (*AddGroupMemberResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, g.service.config, http.MethodPost,
		"/open-apis/contact/v3/group/:group_id/member/add", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &AddGroupMemberResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (g *groupMember) BatchAdd(ctx context.Context, req *BatchAddGroupMemberReq, options ...core.RequestOptionFunc) (*BatchAddGroupMemberResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, g.service.config, http.MethodPost,
		"/open-apis/contact/v3/group/:group_id/member/batch_add", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &BatchAddGroupMemberResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (g *groupMember) BatchRemove(ctx context.Context, req *BatchRemoveGroupMemberReq, options ...core.RequestOptionFunc) (*BatchRemoveGroupMemberResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, g.service.config, http.MethodPost,
		"/open-apis/contact/v3/group/:group_id/member/batch_remove", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &BatchRemoveGroupMemberResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (g *groupMember) Remove(ctx context.Context, req *RemoveGroupMemberReq, options ...core.RequestOptionFunc) (*RemoveGroupMemberResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, g.service.config, http.MethodPost,
		"/open-apis/contact/v3/group/:group_id/member/remove", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &RemoveGroupMemberResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (g *groupMember) Simplelist(ctx context.Context, req *SimplelistGroupMemberReq, options ...core.RequestOptionFunc) (*SimplelistGroupMemberResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, g.service.config, http.MethodGet,
		"/open-apis/contact/v3/group/:group_id/member/simplelist", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &SimplelistGroupMemberResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (s *scope) List(ctx context.Context, req *ListScopeReq, options ...core.RequestOptionFunc) (*ListScopeResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, s.service.config, http.MethodGet,
		"/open-apis/contact/v3/scopes", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &ListScopeResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (u *unit) BindDepartment(ctx context.Context, req *BindDepartmentUnitReq, options ...core.RequestOptionFunc) (*BindDepartmentUnitResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, u.service.config, http.MethodPost,
		"/open-apis/contact/v3/unit/bind_department", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &BindDepartmentUnitResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (u *unit) Create(ctx context.Context, req *CreateUnitReq, options ...core.RequestOptionFunc) (*CreateUnitResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, u.service.config, http.MethodPost,
		"/open-apis/contact/v3/unit", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &CreateUnitResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (u *unit) Delete(ctx context.Context, req *DeleteUnitReq, options ...core.RequestOptionFunc) (*DeleteUnitResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, u.service.config, http.MethodDelete,
		"/open-apis/contact/v3/unit/:unit_id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &DeleteUnitResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (u *unit) Get(ctx context.Context, req *GetUnitReq, options ...core.RequestOptionFunc) (*GetUnitResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, u.service.config, http.MethodGet,
		"/open-apis/contact/v3/unit/:unit_id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &GetUnitResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (u *unit) List(ctx context.Context, req *ListUnitReq, options ...core.RequestOptionFunc) (*ListUnitResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, u.service.config, http.MethodGet,
		"/open-apis/contact/v3/unit", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &ListUnitResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (u *unit) ListDepartment(ctx context.Context, req *ListDepartmentUnitReq, options ...core.RequestOptionFunc) (*ListDepartmentUnitResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, u.service.config, http.MethodGet,
		"/open-apis/contact/v3/unit/list_department", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &ListDepartmentUnitResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (u *unit) Patch(ctx context.Context, req *PatchUnitReq, options ...core.RequestOptionFunc) (*PatchUnitResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, u.service.config, http.MethodPatch,
		"/open-apis/contact/v3/unit/:unit_id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &PatchUnitResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (u *unit) UnbindDepartment(ctx context.Context, req *UnbindDepartmentUnitReq, options ...core.RequestOptionFunc) (*UnbindDepartmentUnitResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, u.service.config, http.MethodPost,
		"/open-apis/contact/v3/unit/unbind_department", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &UnbindDepartmentUnitResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (u *user) BatchGetId(ctx context.Context, req *BatchGetIdUserReq, options ...core.RequestOptionFunc) (*BatchGetIdUserResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, u.service.config, http.MethodPost,
		"/open-apis/contact/v3/users/batch_get_id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &BatchGetIdUserResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (u *user) Create(ctx context.Context, req *CreateUserReq, options ...core.RequestOptionFunc) (*CreateUserResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, u.service.config, http.MethodPost,
		"/open-apis/contact/v3/users", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &CreateUserResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (u *user) Delete(ctx context.Context, req *DeleteUserReq, options ...core.RequestOptionFunc) (*DeleteUserResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, u.service.config, http.MethodDelete,
		"/open-apis/contact/v3/users/:user_id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &DeleteUserResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (u *user) FindByDepartment(ctx context.Context, req *FindByDepartmentUserReq, options ...core.RequestOptionFunc) (*FindByDepartmentUserResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, u.service.config, http.MethodGet,
		"/open-apis/contact/v3/users/find_by_department", []core.AccessTokenType{core.AccessTokenTypeTenant, core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &FindByDepartmentUserResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (u *user) FindByDepartmentUser(ctx context.Context, req *FindByDepartmentUserReq, options ...core.RequestOptionFunc) (*FindByDepartmentUserIterator, error) {
	return &FindByDepartmentUserIterator{
		ctx:      ctx,
		req:      req,
		listFunc: u.FindByDepartment,
		options:  options,
		limit:    req.Limit}, nil
}
func (u *user) Get(ctx context.Context, req *GetUserReq, options ...core.RequestOptionFunc) (*GetUserResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, u.service.config, http.MethodGet,
		"/open-apis/contact/v3/users/:user_id", []core.AccessTokenType{core.AccessTokenTypeTenant, core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &GetUserResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (u *user) List(ctx context.Context, req *ListUserReq, options ...core.RequestOptionFunc) (*ListUserResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, u.service.config, http.MethodGet,
		"/open-apis/contact/v3/users", []core.AccessTokenType{core.AccessTokenTypeTenant, core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &ListUserResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (u *user) ListUser(ctx context.Context, req *ListUserReq, options ...core.RequestOptionFunc) (*ListUserIterator, error) {
	return &ListUserIterator{
		ctx:      ctx,
		req:      req,
		listFunc: u.List,
		options:  options,
		limit:    req.Limit}, nil
}
func (u *user) Patch(ctx context.Context, req *PatchUserReq, options ...core.RequestOptionFunc) (*PatchUserResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, u.service.config, http.MethodPatch,
		"/open-apis/contact/v3/users/:user_id", []core.AccessTokenType{core.AccessTokenTypeTenant, core.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &PatchUserResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (u *user) Update(ctx context.Context, req *UpdateUserReq, options ...core.RequestOptionFunc) (*UpdateUserResp, error) {
	// 发起请求
	rawResp, err := core.SendRequest(ctx, u.service.config, http.MethodPut,
		"/open-apis/contact/v3/users/:user_id", []core.AccessTokenType{core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	// 反序列响应结果
	resp := &UpdateUserResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
