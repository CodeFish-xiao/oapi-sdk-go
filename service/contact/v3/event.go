// Package contact code generated by oapi sdk gen
package contact

import (
	"context"
)

/**
消息处理器定义
**/
type CustomAttrEventUpdatedEventHandler struct {
	handler func(context.Context, *CustomAttrEventUpdatedEvent) error
}

func NewCustomAttrEventUpdatedEventHandler(handler func(context.Context, *CustomAttrEventUpdatedEvent) error) *CustomAttrEventUpdatedEventHandler {
	h := &CustomAttrEventUpdatedEventHandler{handler: handler}
	return h
}

/**
返回事件的消息体的实例，用于反序列化用
**/
func (h *CustomAttrEventUpdatedEventHandler) Event() interface{} {
	return &CustomAttrEventUpdatedEvent{}
}

/**
回调开发者注册的handle
r**/
func (h *CustomAttrEventUpdatedEventHandler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*CustomAttrEventUpdatedEvent))
}

/**
消息处理器定义
**/
type DepartmentCreatedEventHandler struct {
	handler func(context.Context, *DepartmentCreatedEvent) error
}

func NewDepartmentCreatedEventHandler(handler func(context.Context, *DepartmentCreatedEvent) error) *DepartmentCreatedEventHandler {
	h := &DepartmentCreatedEventHandler{handler: handler}
	return h
}

/**
返回事件的消息体的实例，用于反序列化用
**/
func (h *DepartmentCreatedEventHandler) Event() interface{} {
	return &DepartmentCreatedEvent{}
}

/**
回调开发者注册的handle
r**/
func (h *DepartmentCreatedEventHandler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*DepartmentCreatedEvent))
}

/**
消息处理器定义
**/
type DepartmentDeletedEventHandler struct {
	handler func(context.Context, *DepartmentDeletedEvent) error
}

func NewDepartmentDeletedEventHandler(handler func(context.Context, *DepartmentDeletedEvent) error) *DepartmentDeletedEventHandler {
	h := &DepartmentDeletedEventHandler{handler: handler}
	return h
}

/**
返回事件的消息体的实例，用于反序列化用
**/
func (h *DepartmentDeletedEventHandler) Event() interface{} {
	return &DepartmentDeletedEvent{}
}

/**
回调开发者注册的handle
r**/
func (h *DepartmentDeletedEventHandler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*DepartmentDeletedEvent))
}

/**
消息处理器定义
**/
type DepartmentUpdatedEventHandler struct {
	handler func(context.Context, *DepartmentUpdatedEvent) error
}

func NewDepartmentUpdatedEventHandler(handler func(context.Context, *DepartmentUpdatedEvent) error) *DepartmentUpdatedEventHandler {
	h := &DepartmentUpdatedEventHandler{handler: handler}
	return h
}

/**
返回事件的消息体的实例，用于反序列化用
**/
func (h *DepartmentUpdatedEventHandler) Event() interface{} {
	return &DepartmentUpdatedEvent{}
}

/**
回调开发者注册的handle
r**/
func (h *DepartmentUpdatedEventHandler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*DepartmentUpdatedEvent))
}

/**
消息处理器定义
**/
type EmployeeTypeEnumActivedEventHandler struct {
	handler func(context.Context, *EmployeeTypeEnumActivedEvent) error
}

func NewEmployeeTypeEnumActivedEventHandler(handler func(context.Context, *EmployeeTypeEnumActivedEvent) error) *EmployeeTypeEnumActivedEventHandler {
	h := &EmployeeTypeEnumActivedEventHandler{handler: handler}
	return h
}

/**
返回事件的消息体的实例，用于反序列化用
**/
func (h *EmployeeTypeEnumActivedEventHandler) Event() interface{} {
	return &EmployeeTypeEnumActivedEvent{}
}

/**
回调开发者注册的handle
r**/
func (h *EmployeeTypeEnumActivedEventHandler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*EmployeeTypeEnumActivedEvent))
}

/**
消息处理器定义
**/
type EmployeeTypeEnumCreatedEventHandler struct {
	handler func(context.Context, *EmployeeTypeEnumCreatedEvent) error
}

func NewEmployeeTypeEnumCreatedEventHandler(handler func(context.Context, *EmployeeTypeEnumCreatedEvent) error) *EmployeeTypeEnumCreatedEventHandler {
	h := &EmployeeTypeEnumCreatedEventHandler{handler: handler}
	return h
}

/**
返回事件的消息体的实例，用于反序列化用
**/
func (h *EmployeeTypeEnumCreatedEventHandler) Event() interface{} {
	return &EmployeeTypeEnumCreatedEvent{}
}

/**
回调开发者注册的handle
r**/
func (h *EmployeeTypeEnumCreatedEventHandler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*EmployeeTypeEnumCreatedEvent))
}

/**
消息处理器定义
**/
type EmployeeTypeEnumDeactivatedEventHandler struct {
	handler func(context.Context, *EmployeeTypeEnumDeactivatedEvent) error
}

func NewEmployeeTypeEnumDeactivatedEventHandler(handler func(context.Context, *EmployeeTypeEnumDeactivatedEvent) error) *EmployeeTypeEnumDeactivatedEventHandler {
	h := &EmployeeTypeEnumDeactivatedEventHandler{handler: handler}
	return h
}

/**
返回事件的消息体的实例，用于反序列化用
**/
func (h *EmployeeTypeEnumDeactivatedEventHandler) Event() interface{} {
	return &EmployeeTypeEnumDeactivatedEvent{}
}

/**
回调开发者注册的handle
r**/
func (h *EmployeeTypeEnumDeactivatedEventHandler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*EmployeeTypeEnumDeactivatedEvent))
}

/**
消息处理器定义
**/
type EmployeeTypeEnumDeletedEventHandler struct {
	handler func(context.Context, *EmployeeTypeEnumDeletedEvent) error
}

func NewEmployeeTypeEnumDeletedEventHandler(handler func(context.Context, *EmployeeTypeEnumDeletedEvent) error) *EmployeeTypeEnumDeletedEventHandler {
	h := &EmployeeTypeEnumDeletedEventHandler{handler: handler}
	return h
}

/**
返回事件的消息体的实例，用于反序列化用
**/
func (h *EmployeeTypeEnumDeletedEventHandler) Event() interface{} {
	return &EmployeeTypeEnumDeletedEvent{}
}

/**
回调开发者注册的handle
r**/
func (h *EmployeeTypeEnumDeletedEventHandler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*EmployeeTypeEnumDeletedEvent))
}

/**
消息处理器定义
**/
type EmployeeTypeEnumUpdatedEventHandler struct {
	handler func(context.Context, *EmployeeTypeEnumUpdatedEvent) error
}

func NewEmployeeTypeEnumUpdatedEventHandler(handler func(context.Context, *EmployeeTypeEnumUpdatedEvent) error) *EmployeeTypeEnumUpdatedEventHandler {
	h := &EmployeeTypeEnumUpdatedEventHandler{handler: handler}
	return h
}

/**
返回事件的消息体的实例，用于反序列化用
**/
func (h *EmployeeTypeEnumUpdatedEventHandler) Event() interface{} {
	return &EmployeeTypeEnumUpdatedEvent{}
}

/**
回调开发者注册的handle
r**/
func (h *EmployeeTypeEnumUpdatedEventHandler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*EmployeeTypeEnumUpdatedEvent))
}

/**
消息处理器定义
**/
type ScopeUpdatedEventHandler struct {
	handler func(context.Context, *ScopeUpdatedEvent) error
}

func NewScopeUpdatedEventHandler(handler func(context.Context, *ScopeUpdatedEvent) error) *ScopeUpdatedEventHandler {
	h := &ScopeUpdatedEventHandler{handler: handler}
	return h
}

/**
返回事件的消息体的实例，用于反序列化用
**/
func (h *ScopeUpdatedEventHandler) Event() interface{} {
	return &ScopeUpdatedEvent{}
}

/**
回调开发者注册的handle
r**/
func (h *ScopeUpdatedEventHandler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*ScopeUpdatedEvent))
}

/**
消息处理器定义
**/
type UserCreatedEventHandler struct {
	handler func(context.Context, *UserCreatedEvent) error
}

func NewUserCreatedEventHandler(handler func(context.Context, *UserCreatedEvent) error) *UserCreatedEventHandler {
	h := &UserCreatedEventHandler{handler: handler}
	return h
}

/**
返回事件的消息体的实例，用于反序列化用
**/
func (h *UserCreatedEventHandler) Event() interface{} {
	return &UserCreatedEvent{}
}

/**
回调开发者注册的handle
r**/
func (h *UserCreatedEventHandler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*UserCreatedEvent))
}

/**
消息处理器定义
**/
type UserDeletedEventHandler struct {
	handler func(context.Context, *UserDeletedEvent) error
}

func NewUserDeletedEventHandler(handler func(context.Context, *UserDeletedEvent) error) *UserDeletedEventHandler {
	h := &UserDeletedEventHandler{handler: handler}
	return h
}

/**
返回事件的消息体的实例，用于反序列化用
**/
func (h *UserDeletedEventHandler) Event() interface{} {
	return &UserDeletedEvent{}
}

/**
回调开发者注册的handle
r**/
func (h *UserDeletedEventHandler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*UserDeletedEvent))
}

/**
消息处理器定义
**/
type UserUpdatedEventHandler struct {
	handler func(context.Context, *UserUpdatedEvent) error
}

func NewUserUpdatedEventHandler(handler func(context.Context, *UserUpdatedEvent) error) *UserUpdatedEventHandler {
	h := &UserUpdatedEventHandler{handler: handler}
	return h
}

/**
返回事件的消息体的实例，用于反序列化用
**/
func (h *UserUpdatedEventHandler) Event() interface{} {
	return &UserUpdatedEvent{}
}

/**
回调开发者注册的handle
r**/
func (h *UserUpdatedEventHandler) Handle(ctx context.Context, event interface{}) error {
	return h.handler(ctx, event.(*UserUpdatedEvent))
}
