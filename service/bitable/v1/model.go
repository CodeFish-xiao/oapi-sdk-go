// Package bitable code generated by oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package larkbitable

import (
	"fmt"

	"context"
	"errors"

	"github.com/larksuite/oapi-sdk-go/v3/core"
)

// 生成枚举值

const (
	MemberIdTypeOpenID           = "open_id"
	MemberIdTypeUnionID          = "union_id"
	MemberIdTypeUserID           = "user_id"
	MemberIdTypeChatID           = "chat_id"
	MemberIdTypeDepartmentID     = "department_id"
	MemberIdTypeOpenDepartmentID = "open_department_id"
)

const (
	UserIdTypeUserId  = "user_id"
	UserIdTypeUnionId = "union_id"
	UserIdTypeOpenId  = "open_id"
)

const (
	TypeText         = 1
	TypeNumber       = 2
	TypeSingleSelect = 3
	TypeMultiSelect  = 4
	TypeDateTime     = 5
	TypeCheckbox     = 7
	TypeUser         = 11
	TypeUrl          = 15
	TypeAttachment   = 17
	TypeLink         = 18
	TypeFormula      = 20
	TypeDuplexLink   = 21
	TypeCreatedTime  = 1001
	TypeModifiedTime = 1002
	TypeCreatedUser  = 1003
	TypeModifiedUser = 1004
)

const (
	ViewTypeGrid    = "grid"
	ViewTypeKanban  = "kanban"
	ViewTypeGallery = "gallery"
	ViewTypeGantt   = "gantt"
	ViewTypeForm    = "form"
)

// 生成数据类型

type App struct {
	AppToken    *string `json:"app_token,omitempty"`
	Name        *string `json:"name,omitempty"`
	Revision    *int    `json:"revision,omitempty"`
	FolderToken *string `json:"folder_token,omitempty"`
	Url         *string `json:"url,omitempty"`
}

// builder开始
type AppBuilder struct {
	appToken        string
	appTokenFlag    bool
	name            string
	nameFlag        bool
	revision        int
	revisionFlag    bool
	folderToken     string
	folderTokenFlag bool
	url             string
	urlFlag         bool
}

func NewAppBuilder() *AppBuilder {
	builder := &AppBuilder{}
	return builder
}

func (builder *AppBuilder) AppToken(appToken string) *AppBuilder {
	builder.appToken = appToken
	builder.appTokenFlag = true
	return builder
}
func (builder *AppBuilder) Name(name string) *AppBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *AppBuilder) Revision(revision int) *AppBuilder {
	builder.revision = revision
	builder.revisionFlag = true
	return builder
}
func (builder *AppBuilder) FolderToken(folderToken string) *AppBuilder {
	builder.folderToken = folderToken
	builder.folderTokenFlag = true
	return builder
}
func (builder *AppBuilder) Url(url string) *AppBuilder {
	builder.url = url
	builder.urlFlag = true
	return builder
}

func (builder *AppBuilder) Build() *App {
	req := &App{}
	if builder.appTokenFlag {
		req.AppToken = &builder.appToken

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.revisionFlag {
		req.Revision = &builder.revision

	}
	if builder.folderTokenFlag {
		req.FolderToken = &builder.folderToken

	}
	if builder.urlFlag {
		req.Url = &builder.url

	}
	return req
}

// builder结束

type AppRole struct {
	RoleName   *string             `json:"role_name,omitempty"`
	RoleId     *string             `json:"role_id,omitempty"`
	TableRoles []*AppRoleTableRole `json:"table_roles,omitempty"`
}

// builder开始
type AppRoleBuilder struct {
	roleName       string
	roleNameFlag   bool
	roleId         string
	roleIdFlag     bool
	tableRoles     []*AppRoleTableRole
	tableRolesFlag bool
}

func NewAppRoleBuilder() *AppRoleBuilder {
	builder := &AppRoleBuilder{}
	return builder
}

func (builder *AppRoleBuilder) RoleName(roleName string) *AppRoleBuilder {
	builder.roleName = roleName
	builder.roleNameFlag = true
	return builder
}
func (builder *AppRoleBuilder) RoleId(roleId string) *AppRoleBuilder {
	builder.roleId = roleId
	builder.roleIdFlag = true
	return builder
}
func (builder *AppRoleBuilder) TableRoles(tableRoles []*AppRoleTableRole) *AppRoleBuilder {
	builder.tableRoles = tableRoles
	builder.tableRolesFlag = true
	return builder
}

func (builder *AppRoleBuilder) Build() *AppRole {
	req := &AppRole{}
	if builder.roleNameFlag {
		req.RoleName = &builder.roleName

	}
	if builder.roleIdFlag {
		req.RoleId = &builder.roleId

	}
	if builder.tableRolesFlag {
		req.TableRoles = builder.tableRoles
	}
	return req
}

// builder结束

type AppRoleMember struct {
	MemberId         *string `json:"member_id,omitempty"`
	OpenId           *string `json:"open_id,omitempty"`
	UnionId          *string `json:"union_id,omitempty"`
	UserId           *string `json:"user_id,omitempty"`
	ChatId           *string `json:"chat_id,omitempty"`
	DepartmentId     *string `json:"department_id,omitempty"`
	OpenDepartmentId *string `json:"open_department_id,omitempty"`
	MemberName       *string `json:"member_name,omitempty"`
	MemberEnName     *string `json:"member_en_name,omitempty"`
	MemberType       *string `json:"member_type,omitempty"`
}

// builder开始
type AppRoleMemberBuilder struct {
	memberId             string
	memberIdFlag         bool
	openId               string
	openIdFlag           bool
	unionId              string
	unionIdFlag          bool
	userId               string
	userIdFlag           bool
	chatId               string
	chatIdFlag           bool
	departmentId         string
	departmentIdFlag     bool
	openDepartmentId     string
	openDepartmentIdFlag bool
	memberName           string
	memberNameFlag       bool
	memberEnName         string
	memberEnNameFlag     bool
	memberType           string
	memberTypeFlag       bool
}

func NewAppRoleMemberBuilder() *AppRoleMemberBuilder {
	builder := &AppRoleMemberBuilder{}
	return builder
}

func (builder *AppRoleMemberBuilder) MemberId(memberId string) *AppRoleMemberBuilder {
	builder.memberId = memberId
	builder.memberIdFlag = true
	return builder
}
func (builder *AppRoleMemberBuilder) OpenId(openId string) *AppRoleMemberBuilder {
	builder.openId = openId
	builder.openIdFlag = true
	return builder
}
func (builder *AppRoleMemberBuilder) UnionId(unionId string) *AppRoleMemberBuilder {
	builder.unionId = unionId
	builder.unionIdFlag = true
	return builder
}
func (builder *AppRoleMemberBuilder) UserId(userId string) *AppRoleMemberBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}
func (builder *AppRoleMemberBuilder) ChatId(chatId string) *AppRoleMemberBuilder {
	builder.chatId = chatId
	builder.chatIdFlag = true
	return builder
}
func (builder *AppRoleMemberBuilder) DepartmentId(departmentId string) *AppRoleMemberBuilder {
	builder.departmentId = departmentId
	builder.departmentIdFlag = true
	return builder
}
func (builder *AppRoleMemberBuilder) OpenDepartmentId(openDepartmentId string) *AppRoleMemberBuilder {
	builder.openDepartmentId = openDepartmentId
	builder.openDepartmentIdFlag = true
	return builder
}
func (builder *AppRoleMemberBuilder) MemberName(memberName string) *AppRoleMemberBuilder {
	builder.memberName = memberName
	builder.memberNameFlag = true
	return builder
}
func (builder *AppRoleMemberBuilder) MemberEnName(memberEnName string) *AppRoleMemberBuilder {
	builder.memberEnName = memberEnName
	builder.memberEnNameFlag = true
	return builder
}
func (builder *AppRoleMemberBuilder) MemberType(memberType string) *AppRoleMemberBuilder {
	builder.memberType = memberType
	builder.memberTypeFlag = true
	return builder
}

func (builder *AppRoleMemberBuilder) Build() *AppRoleMember {
	req := &AppRoleMember{}
	if builder.memberIdFlag {
		req.MemberId = &builder.memberId

	}
	if builder.openIdFlag {
		req.OpenId = &builder.openId

	}
	if builder.unionIdFlag {
		req.UnionId = &builder.unionId

	}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.chatIdFlag {
		req.ChatId = &builder.chatId

	}
	if builder.departmentIdFlag {
		req.DepartmentId = &builder.departmentId

	}
	if builder.openDepartmentIdFlag {
		req.OpenDepartmentId = &builder.openDepartmentId

	}
	if builder.memberNameFlag {
		req.MemberName = &builder.memberName

	}
	if builder.memberEnNameFlag {
		req.MemberEnName = &builder.memberEnName

	}
	if builder.memberTypeFlag {
		req.MemberType = &builder.memberType

	}
	return req
}

// builder结束

type AppRoleMemberId struct {
	Type *string `json:"type,omitempty"`
	Id   *string `json:"id,omitempty"`
}

// builder开始
type AppRoleMemberIdBuilder struct {
	type_    string
	typeFlag bool
	id       string
	idFlag   bool
}

func NewAppRoleMemberIdBuilder() *AppRoleMemberIdBuilder {
	builder := &AppRoleMemberIdBuilder{}
	return builder
}

func (builder *AppRoleMemberIdBuilder) Type(type_ string) *AppRoleMemberIdBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}
func (builder *AppRoleMemberIdBuilder) Id(id string) *AppRoleMemberIdBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

func (builder *AppRoleMemberIdBuilder) Build() *AppRoleMemberId {
	req := &AppRoleMemberId{}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	if builder.idFlag {
		req.Id = &builder.id

	}
	return req
}

// builder结束

type AppRoleTableRole struct {
	TableName *string                    `json:"table_name,omitempty"`
	TablePerm *int                       `json:"table_perm,omitempty"`
	RecRule   *AppRoleTableRoleRecRule   `json:"rec_rule,omitempty"`
	FieldPerm *AppRoleTableRoleFieldPerm `json:"field_perm,omitempty"`
}

// builder开始
type AppRoleTableRoleBuilder struct {
	tableName     string
	tableNameFlag bool
	tablePerm     int
	tablePermFlag bool
	recRule       *AppRoleTableRoleRecRule
	recRuleFlag   bool
	fieldPerm     *AppRoleTableRoleFieldPerm
	fieldPermFlag bool
}

func NewAppRoleTableRoleBuilder() *AppRoleTableRoleBuilder {
	builder := &AppRoleTableRoleBuilder{}
	return builder
}

func (builder *AppRoleTableRoleBuilder) TableName(tableName string) *AppRoleTableRoleBuilder {
	builder.tableName = tableName
	builder.tableNameFlag = true
	return builder
}
func (builder *AppRoleTableRoleBuilder) TablePerm(tablePerm int) *AppRoleTableRoleBuilder {
	builder.tablePerm = tablePerm
	builder.tablePermFlag = true
	return builder
}
func (builder *AppRoleTableRoleBuilder) RecRule(recRule *AppRoleTableRoleRecRule) *AppRoleTableRoleBuilder {
	builder.recRule = recRule
	builder.recRuleFlag = true
	return builder
}
func (builder *AppRoleTableRoleBuilder) FieldPerm(fieldPerm *AppRoleTableRoleFieldPerm) *AppRoleTableRoleBuilder {
	builder.fieldPerm = fieldPerm
	builder.fieldPermFlag = true
	return builder
}

func (builder *AppRoleTableRoleBuilder) Build() *AppRoleTableRole {
	req := &AppRoleTableRole{}
	if builder.tableNameFlag {
		req.TableName = &builder.tableName

	}
	if builder.tablePermFlag {
		req.TablePerm = &builder.tablePerm

	}
	if builder.recRuleFlag {
		req.RecRule = builder.recRule
	}
	if builder.fieldPermFlag {
		req.FieldPerm = builder.fieldPerm
	}
	return req
}

// builder结束

type AppRoleTableRoleFieldPerm struct {
}

// builder开始
// builder结束

type AppRoleTableRoleRecRule struct {
	Conditions  []*AppRoleTableRoleRecRuleCondition `json:"conditions,omitempty"`
	Conjunction *string                             `json:"conjunction,omitempty"`
	OtherPerm   *int                                `json:"other_perm,omitempty"`
}

// builder开始
type AppRoleTableRoleRecRuleBuilder struct {
	conditions      []*AppRoleTableRoleRecRuleCondition
	conditionsFlag  bool
	conjunction     string
	conjunctionFlag bool
	otherPerm       int
	otherPermFlag   bool
}

func NewAppRoleTableRoleRecRuleBuilder() *AppRoleTableRoleRecRuleBuilder {
	builder := &AppRoleTableRoleRecRuleBuilder{}
	return builder
}

func (builder *AppRoleTableRoleRecRuleBuilder) Conditions(conditions []*AppRoleTableRoleRecRuleCondition) *AppRoleTableRoleRecRuleBuilder {
	builder.conditions = conditions
	builder.conditionsFlag = true
	return builder
}
func (builder *AppRoleTableRoleRecRuleBuilder) Conjunction(conjunction string) *AppRoleTableRoleRecRuleBuilder {
	builder.conjunction = conjunction
	builder.conjunctionFlag = true
	return builder
}
func (builder *AppRoleTableRoleRecRuleBuilder) OtherPerm(otherPerm int) *AppRoleTableRoleRecRuleBuilder {
	builder.otherPerm = otherPerm
	builder.otherPermFlag = true
	return builder
}

func (builder *AppRoleTableRoleRecRuleBuilder) Build() *AppRoleTableRoleRecRule {
	req := &AppRoleTableRoleRecRule{}
	if builder.conditionsFlag {
		req.Conditions = builder.conditions
	}
	if builder.conjunctionFlag {
		req.Conjunction = &builder.conjunction

	}
	if builder.otherPermFlag {
		req.OtherPerm = &builder.otherPerm

	}
	return req
}

// builder结束

type AppRoleTableRoleRecRuleCondition struct {
	FieldName *string  `json:"field_name,omitempty"`
	Operator  *string  `json:"operator,omitempty"`
	Value     []string `json:"value,omitempty"`
	FieldType *int     `json:"field_type,omitempty"`
}

// builder开始
type AppRoleTableRoleRecRuleConditionBuilder struct {
	fieldName     string
	fieldNameFlag bool
	operator      string
	operatorFlag  bool
	value         []string
	valueFlag     bool
	fieldType     int
	fieldTypeFlag bool
}

func NewAppRoleTableRoleRecRuleConditionBuilder() *AppRoleTableRoleRecRuleConditionBuilder {
	builder := &AppRoleTableRoleRecRuleConditionBuilder{}
	return builder
}

func (builder *AppRoleTableRoleRecRuleConditionBuilder) FieldName(fieldName string) *AppRoleTableRoleRecRuleConditionBuilder {
	builder.fieldName = fieldName
	builder.fieldNameFlag = true
	return builder
}
func (builder *AppRoleTableRoleRecRuleConditionBuilder) Operator(operator string) *AppRoleTableRoleRecRuleConditionBuilder {
	builder.operator = operator
	builder.operatorFlag = true
	return builder
}
func (builder *AppRoleTableRoleRecRuleConditionBuilder) Value(value []string) *AppRoleTableRoleRecRuleConditionBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}
func (builder *AppRoleTableRoleRecRuleConditionBuilder) FieldType(fieldType int) *AppRoleTableRoleRecRuleConditionBuilder {
	builder.fieldType = fieldType
	builder.fieldTypeFlag = true
	return builder
}

func (builder *AppRoleTableRoleRecRuleConditionBuilder) Build() *AppRoleTableRoleRecRuleCondition {
	req := &AppRoleTableRoleRecRuleCondition{}
	if builder.fieldNameFlag {
		req.FieldName = &builder.fieldName

	}
	if builder.operatorFlag {
		req.Operator = &builder.operator

	}
	if builder.valueFlag {
		req.Value = builder.value
	}
	if builder.fieldTypeFlag {
		req.FieldType = &builder.fieldType

	}
	return req
}

// builder结束

type AppTable struct {
	TableId  *string `json:"table_id,omitempty"`
	Revision *int    `json:"revision,omitempty"`
	Name     *string `json:"name,omitempty"`
}

// builder开始
type AppTableBuilder struct {
	tableId      string
	tableIdFlag  bool
	revision     int
	revisionFlag bool
	name         string
	nameFlag     bool
}

func NewAppTableBuilder() *AppTableBuilder {
	builder := &AppTableBuilder{}
	return builder
}

func (builder *AppTableBuilder) TableId(tableId string) *AppTableBuilder {
	builder.tableId = tableId
	builder.tableIdFlag = true
	return builder
}
func (builder *AppTableBuilder) Revision(revision int) *AppTableBuilder {
	builder.revision = revision
	builder.revisionFlag = true
	return builder
}
func (builder *AppTableBuilder) Name(name string) *AppTableBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *AppTableBuilder) Build() *AppTable {
	req := &AppTable{}
	if builder.tableIdFlag {
		req.TableId = &builder.tableId

	}
	if builder.revisionFlag {
		req.Revision = &builder.revision

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	return req
}

// builder结束

type AppTableField struct {
	FieldId   *string                `json:"field_id,omitempty"`
	FieldName *string                `json:"field_name,omitempty"`
	Type      *int                   `json:"type,omitempty"`
	Property  *AppTableFieldProperty `json:"property,omitempty"`
}

// builder开始
type AppTableFieldBuilder struct {
	fieldId       string
	fieldIdFlag   bool
	fieldName     string
	fieldNameFlag bool
	type_         int
	typeFlag      bool
	property      *AppTableFieldProperty
	propertyFlag  bool
}

func NewAppTableFieldBuilder() *AppTableFieldBuilder {
	builder := &AppTableFieldBuilder{}
	return builder
}

func (builder *AppTableFieldBuilder) FieldId(fieldId string) *AppTableFieldBuilder {
	builder.fieldId = fieldId
	builder.fieldIdFlag = true
	return builder
}
func (builder *AppTableFieldBuilder) FieldName(fieldName string) *AppTableFieldBuilder {
	builder.fieldName = fieldName
	builder.fieldNameFlag = true
	return builder
}
func (builder *AppTableFieldBuilder) Type(type_ int) *AppTableFieldBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}
func (builder *AppTableFieldBuilder) Property(property *AppTableFieldProperty) *AppTableFieldBuilder {
	builder.property = property
	builder.propertyFlag = true
	return builder
}

func (builder *AppTableFieldBuilder) Build() *AppTableField {
	req := &AppTableField{}
	if builder.fieldIdFlag {
		req.FieldId = &builder.fieldId

	}
	if builder.fieldNameFlag {
		req.FieldName = &builder.fieldName

	}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	if builder.propertyFlag {
		req.Property = builder.property
	}
	return req
}

// builder结束

type AppTableFieldProperty struct {
	Options       []*AppTableFieldPropertyOption `json:"options,omitempty"`
	Formatter     *string                        `json:"formatter,omitempty"`
	DateFormatter *string                        `json:"date_formatter,omitempty"`
	AutoFill      *bool                          `json:"auto_fill,omitempty"`
	Multiple      *bool                          `json:"multiple,omitempty"`
	TableId       *string                        `json:"table_id,omitempty"`
	TableName     *string                        `json:"table_name,omitempty"`
	BackFieldName *string                        `json:"back_field_name,omitempty"`
}

// builder开始
type AppTableFieldPropertyBuilder struct {
	options           []*AppTableFieldPropertyOption
	optionsFlag       bool
	formatter         string
	formatterFlag     bool
	dateFormatter     string
	dateFormatterFlag bool
	autoFill          bool
	autoFillFlag      bool
	multiple          bool
	multipleFlag      bool
	tableId           string
	tableIdFlag       bool
	tableName         string
	tableNameFlag     bool
	backFieldName     string
	backFieldNameFlag bool
}

func NewAppTableFieldPropertyBuilder() *AppTableFieldPropertyBuilder {
	builder := &AppTableFieldPropertyBuilder{}
	return builder
}

func (builder *AppTableFieldPropertyBuilder) Options(options []*AppTableFieldPropertyOption) *AppTableFieldPropertyBuilder {
	builder.options = options
	builder.optionsFlag = true
	return builder
}
func (builder *AppTableFieldPropertyBuilder) Formatter(formatter string) *AppTableFieldPropertyBuilder {
	builder.formatter = formatter
	builder.formatterFlag = true
	return builder
}
func (builder *AppTableFieldPropertyBuilder) DateFormatter(dateFormatter string) *AppTableFieldPropertyBuilder {
	builder.dateFormatter = dateFormatter
	builder.dateFormatterFlag = true
	return builder
}
func (builder *AppTableFieldPropertyBuilder) AutoFill(autoFill bool) *AppTableFieldPropertyBuilder {
	builder.autoFill = autoFill
	builder.autoFillFlag = true
	return builder
}
func (builder *AppTableFieldPropertyBuilder) Multiple(multiple bool) *AppTableFieldPropertyBuilder {
	builder.multiple = multiple
	builder.multipleFlag = true
	return builder
}
func (builder *AppTableFieldPropertyBuilder) TableId(tableId string) *AppTableFieldPropertyBuilder {
	builder.tableId = tableId
	builder.tableIdFlag = true
	return builder
}
func (builder *AppTableFieldPropertyBuilder) TableName(tableName string) *AppTableFieldPropertyBuilder {
	builder.tableName = tableName
	builder.tableNameFlag = true
	return builder
}
func (builder *AppTableFieldPropertyBuilder) BackFieldName(backFieldName string) *AppTableFieldPropertyBuilder {
	builder.backFieldName = backFieldName
	builder.backFieldNameFlag = true
	return builder
}

func (builder *AppTableFieldPropertyBuilder) Build() *AppTableFieldProperty {
	req := &AppTableFieldProperty{}
	if builder.optionsFlag {
		req.Options = builder.options
	}
	if builder.formatterFlag {
		req.Formatter = &builder.formatter

	}
	if builder.dateFormatterFlag {
		req.DateFormatter = &builder.dateFormatter

	}
	if builder.autoFillFlag {
		req.AutoFill = &builder.autoFill

	}
	if builder.multipleFlag {
		req.Multiple = &builder.multiple

	}
	if builder.tableIdFlag {
		req.TableId = &builder.tableId

	}
	if builder.tableNameFlag {
		req.TableName = &builder.tableName

	}
	if builder.backFieldNameFlag {
		req.BackFieldName = &builder.backFieldName

	}
	return req
}

// builder结束

type AppTableFieldPropertyOption struct {
	Name  *string `json:"name,omitempty"`
	Id    *string `json:"id,omitempty"`
	Color *int    `json:"color,omitempty"`
}

// builder开始
type AppTableFieldPropertyOptionBuilder struct {
	name      string
	nameFlag  bool
	id        string
	idFlag    bool
	color     int
	colorFlag bool
}

func NewAppTableFieldPropertyOptionBuilder() *AppTableFieldPropertyOptionBuilder {
	builder := &AppTableFieldPropertyOptionBuilder{}
	return builder
}

func (builder *AppTableFieldPropertyOptionBuilder) Name(name string) *AppTableFieldPropertyOptionBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *AppTableFieldPropertyOptionBuilder) Id(id string) *AppTableFieldPropertyOptionBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *AppTableFieldPropertyOptionBuilder) Color(color int) *AppTableFieldPropertyOptionBuilder {
	builder.color = color
	builder.colorFlag = true
	return builder
}

func (builder *AppTableFieldPropertyOptionBuilder) Build() *AppTableFieldPropertyOption {
	req := &AppTableFieldPropertyOption{}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.colorFlag {
		req.Color = &builder.color

	}
	return req
}

// builder结束

type AppTableForm struct {
	Name            *string `json:"name,omitempty"`
	Description     *string `json:"description,omitempty"`
	Shared          *bool   `json:"shared,omitempty"`
	SharedUrl       *string `json:"shared_url,omitempty"`
	SharedLimit     *int    `json:"shared_limit,omitempty"`
	SubmitLimitOnce *bool   `json:"submit_limit_once,omitempty"`
}

// builder开始
type AppTableFormBuilder struct {
	name                string
	nameFlag            bool
	description         string
	descriptionFlag     bool
	shared              bool
	sharedFlag          bool
	sharedUrl           string
	sharedUrlFlag       bool
	sharedLimit         int
	sharedLimitFlag     bool
	submitLimitOnce     bool
	submitLimitOnceFlag bool
}

func NewAppTableFormBuilder() *AppTableFormBuilder {
	builder := &AppTableFormBuilder{}
	return builder
}

func (builder *AppTableFormBuilder) Name(name string) *AppTableFormBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *AppTableFormBuilder) Description(description string) *AppTableFormBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}
func (builder *AppTableFormBuilder) Shared(shared bool) *AppTableFormBuilder {
	builder.shared = shared
	builder.sharedFlag = true
	return builder
}
func (builder *AppTableFormBuilder) SharedUrl(sharedUrl string) *AppTableFormBuilder {
	builder.sharedUrl = sharedUrl
	builder.sharedUrlFlag = true
	return builder
}
func (builder *AppTableFormBuilder) SharedLimit(sharedLimit int) *AppTableFormBuilder {
	builder.sharedLimit = sharedLimit
	builder.sharedLimitFlag = true
	return builder
}
func (builder *AppTableFormBuilder) SubmitLimitOnce(submitLimitOnce bool) *AppTableFormBuilder {
	builder.submitLimitOnce = submitLimitOnce
	builder.submitLimitOnceFlag = true
	return builder
}

func (builder *AppTableFormBuilder) Build() *AppTableForm {
	req := &AppTableForm{}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	if builder.sharedFlag {
		req.Shared = &builder.shared

	}
	if builder.sharedUrlFlag {
		req.SharedUrl = &builder.sharedUrl

	}
	if builder.sharedLimitFlag {
		req.SharedLimit = &builder.sharedLimit

	}
	if builder.submitLimitOnceFlag {
		req.SubmitLimitOnce = &builder.submitLimitOnce

	}
	return req
}

// builder结束

type AppTableFormField struct {
	FieldId     *string `json:"field_id,omitempty"`
	Title       *string `json:"title,omitempty"`
	Description *string `json:"description,omitempty"`
	Required    *bool   `json:"required,omitempty"`
	Visible     *bool   `json:"visible,omitempty"`
}

// builder开始
type AppTableFormFieldBuilder struct {
	fieldId         string
	fieldIdFlag     bool
	title           string
	titleFlag       bool
	description     string
	descriptionFlag bool
	required        bool
	requiredFlag    bool
	visible         bool
	visibleFlag     bool
}

func NewAppTableFormFieldBuilder() *AppTableFormFieldBuilder {
	builder := &AppTableFormFieldBuilder{}
	return builder
}

func (builder *AppTableFormFieldBuilder) FieldId(fieldId string) *AppTableFormFieldBuilder {
	builder.fieldId = fieldId
	builder.fieldIdFlag = true
	return builder
}
func (builder *AppTableFormFieldBuilder) Title(title string) *AppTableFormFieldBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}
func (builder *AppTableFormFieldBuilder) Description(description string) *AppTableFormFieldBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}
func (builder *AppTableFormFieldBuilder) Required(required bool) *AppTableFormFieldBuilder {
	builder.required = required
	builder.requiredFlag = true
	return builder
}
func (builder *AppTableFormFieldBuilder) Visible(visible bool) *AppTableFormFieldBuilder {
	builder.visible = visible
	builder.visibleFlag = true
	return builder
}

func (builder *AppTableFormFieldBuilder) Build() *AppTableFormField {
	req := &AppTableFormField{}
	if builder.fieldIdFlag {
		req.FieldId = &builder.fieldId

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	if builder.requiredFlag {
		req.Required = &builder.required

	}
	if builder.visibleFlag {
		req.Visible = &builder.visible

	}
	return req
}

// builder结束

type AppTableFormPatchedField struct {
	PreFieldId  *string `json:"pre_field_id,omitempty"`
	Title       *string `json:"title,omitempty"`
	Description *string `json:"description,omitempty"`
	Required    *bool   `json:"required,omitempty"`
	Visible     *bool   `json:"visible,omitempty"`
}

// builder开始
type AppTableFormPatchedFieldBuilder struct {
	preFieldId      string
	preFieldIdFlag  bool
	title           string
	titleFlag       bool
	description     string
	descriptionFlag bool
	required        bool
	requiredFlag    bool
	visible         bool
	visibleFlag     bool
}

func NewAppTableFormPatchedFieldBuilder() *AppTableFormPatchedFieldBuilder {
	builder := &AppTableFormPatchedFieldBuilder{}
	return builder
}

func (builder *AppTableFormPatchedFieldBuilder) PreFieldId(preFieldId string) *AppTableFormPatchedFieldBuilder {
	builder.preFieldId = preFieldId
	builder.preFieldIdFlag = true
	return builder
}
func (builder *AppTableFormPatchedFieldBuilder) Title(title string) *AppTableFormPatchedFieldBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}
func (builder *AppTableFormPatchedFieldBuilder) Description(description string) *AppTableFormPatchedFieldBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}
func (builder *AppTableFormPatchedFieldBuilder) Required(required bool) *AppTableFormPatchedFieldBuilder {
	builder.required = required
	builder.requiredFlag = true
	return builder
}
func (builder *AppTableFormPatchedFieldBuilder) Visible(visible bool) *AppTableFormPatchedFieldBuilder {
	builder.visible = visible
	builder.visibleFlag = true
	return builder
}

func (builder *AppTableFormPatchedFieldBuilder) Build() *AppTableFormPatchedField {
	req := &AppTableFormPatchedField{}
	if builder.preFieldIdFlag {
		req.PreFieldId = &builder.preFieldId

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	if builder.requiredFlag {
		req.Required = &builder.required

	}
	if builder.visibleFlag {
		req.Visible = &builder.visible

	}
	return req
}

// builder结束

type AppTableRecord struct {
	RecordId         *string                `json:"record_id,omitempty"`
	CreatedBy        *Person                `json:"created_by,omitempty"`
	CreatedTime      *int                   `json:"created_time,omitempty"`
	LastModifiedBy   *Person                `json:"last_modified_by,omitempty"`
	LastModifiedTime *int                   `json:"last_modified_time,omitempty"`
	Fields           map[string]interface{} `json:"fields,omitempty"`
}

// builder开始
type AppTableRecordBuilder struct {
	recordId             string
	recordIdFlag         bool
	createdBy            *Person
	createdByFlag        bool
	createdTime          int
	createdTimeFlag      bool
	lastModifiedBy       *Person
	lastModifiedByFlag   bool
	lastModifiedTime     int
	lastModifiedTimeFlag bool
	fields               map[string]interface{}
	fieldsFlag           bool
}

func NewAppTableRecordBuilder() *AppTableRecordBuilder {
	builder := &AppTableRecordBuilder{}
	return builder
}

func (builder *AppTableRecordBuilder) RecordId(recordId string) *AppTableRecordBuilder {
	builder.recordId = recordId
	builder.recordIdFlag = true
	return builder
}
func (builder *AppTableRecordBuilder) CreatedBy(createdBy *Person) *AppTableRecordBuilder {
	builder.createdBy = createdBy
	builder.createdByFlag = true
	return builder
}
func (builder *AppTableRecordBuilder) CreatedTime(createdTime int) *AppTableRecordBuilder {
	builder.createdTime = createdTime
	builder.createdTimeFlag = true
	return builder
}
func (builder *AppTableRecordBuilder) LastModifiedBy(lastModifiedBy *Person) *AppTableRecordBuilder {
	builder.lastModifiedBy = lastModifiedBy
	builder.lastModifiedByFlag = true
	return builder
}
func (builder *AppTableRecordBuilder) LastModifiedTime(lastModifiedTime int) *AppTableRecordBuilder {
	builder.lastModifiedTime = lastModifiedTime
	builder.lastModifiedTimeFlag = true
	return builder
}
func (builder *AppTableRecordBuilder) Fields(fields map[string]interface{}) *AppTableRecordBuilder {
	builder.fields = fields
	builder.fieldsFlag = true
	return builder
}

func (builder *AppTableRecordBuilder) Build() *AppTableRecord {
	req := &AppTableRecord{}
	if builder.recordIdFlag {
		req.RecordId = &builder.recordId

	}
	if builder.createdByFlag {
		req.CreatedBy = builder.createdBy
	}
	if builder.createdTimeFlag {
		req.CreatedTime = &builder.createdTime

	}
	if builder.lastModifiedByFlag {
		req.LastModifiedBy = builder.lastModifiedBy
	}
	if builder.lastModifiedTimeFlag {
		req.LastModifiedTime = &builder.lastModifiedTime

	}
	if builder.fieldsFlag {
		req.Fields = builder.fields
	}
	return req
}

// builder结束

type AppTableView struct {
	ViewId   *string `json:"view_id,omitempty"`
	ViewName *string `json:"view_name,omitempty"`
	ViewType *string `json:"view_type,omitempty"`
}

// builder开始
type AppTableViewBuilder struct {
	viewId       string
	viewIdFlag   bool
	viewName     string
	viewNameFlag bool
	viewType     string
	viewTypeFlag bool
}

func NewAppTableViewBuilder() *AppTableViewBuilder {
	builder := &AppTableViewBuilder{}
	return builder
}

func (builder *AppTableViewBuilder) ViewId(viewId string) *AppTableViewBuilder {
	builder.viewId = viewId
	builder.viewIdFlag = true
	return builder
}
func (builder *AppTableViewBuilder) ViewName(viewName string) *AppTableViewBuilder {
	builder.viewName = viewName
	builder.viewNameFlag = true
	return builder
}
func (builder *AppTableViewBuilder) ViewType(viewType string) *AppTableViewBuilder {
	builder.viewType = viewType
	builder.viewTypeFlag = true
	return builder
}

func (builder *AppTableViewBuilder) Build() *AppTableView {
	req := &AppTableView{}
	if builder.viewIdFlag {
		req.ViewId = &builder.viewId

	}
	if builder.viewNameFlag {
		req.ViewName = &builder.viewName

	}
	if builder.viewTypeFlag {
		req.ViewType = &builder.viewType

	}
	return req
}

// builder结束

type Attachment struct {
	FileToken *string `json:"file_token,omitempty"`
	Name      *string `json:"name,omitempty"`
	Type      *string `json:"type,omitempty"`
	Size      *int    `json:"size,omitempty"`
	Url       *string `json:"url,omitempty"`
	TmpUrl    *string `json:"tmp_url,omitempty"`
}

// builder开始
type AttachmentBuilder struct {
	fileToken     string
	fileTokenFlag bool
	name          string
	nameFlag      bool
	type_         string
	typeFlag      bool
	size          int
	sizeFlag      bool
	url           string
	urlFlag       bool
	tmpUrl        string
	tmpUrlFlag    bool
}

func NewAttachmentBuilder() *AttachmentBuilder {
	builder := &AttachmentBuilder{}
	return builder
}

func (builder *AttachmentBuilder) FileToken(fileToken string) *AttachmentBuilder {
	builder.fileToken = fileToken
	builder.fileTokenFlag = true
	return builder
}
func (builder *AttachmentBuilder) Name(name string) *AttachmentBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *AttachmentBuilder) Type(type_ string) *AttachmentBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}
func (builder *AttachmentBuilder) Size(size int) *AttachmentBuilder {
	builder.size = size
	builder.sizeFlag = true
	return builder
}
func (builder *AttachmentBuilder) Url(url string) *AttachmentBuilder {
	builder.url = url
	builder.urlFlag = true
	return builder
}
func (builder *AttachmentBuilder) TmpUrl(tmpUrl string) *AttachmentBuilder {
	builder.tmpUrl = tmpUrl
	builder.tmpUrlFlag = true
	return builder
}

func (builder *AttachmentBuilder) Build() *Attachment {
	req := &Attachment{}
	if builder.fileTokenFlag {
		req.FileToken = &builder.fileToken

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	if builder.sizeFlag {
		req.Size = &builder.size

	}
	if builder.urlFlag {
		req.Url = &builder.url

	}
	if builder.tmpUrlFlag {
		req.TmpUrl = &builder.tmpUrl

	}
	return req
}

// builder结束

type DeleteRecord struct {
	Deleted  *bool   `json:"deleted,omitempty"`
	RecordId *string `json:"record_id,omitempty"`
}

// builder开始
type DeleteRecordBuilder struct {
	deleted      bool
	deletedFlag  bool
	recordId     string
	recordIdFlag bool
}

func NewDeleteRecordBuilder() *DeleteRecordBuilder {
	builder := &DeleteRecordBuilder{}
	return builder
}

func (builder *DeleteRecordBuilder) Deleted(deleted bool) *DeleteRecordBuilder {
	builder.deleted = deleted
	builder.deletedFlag = true
	return builder
}
func (builder *DeleteRecordBuilder) RecordId(recordId string) *DeleteRecordBuilder {
	builder.recordId = recordId
	builder.recordIdFlag = true
	return builder
}

func (builder *DeleteRecordBuilder) Build() *DeleteRecord {
	req := &DeleteRecord{}
	if builder.deletedFlag {
		req.Deleted = &builder.deleted

	}
	if builder.recordIdFlag {
		req.RecordId = &builder.recordId

	}
	return req
}

// builder结束

type DisplayApp struct {
	AppToken   *string `json:"app_token,omitempty"`
	Name       *string `json:"name,omitempty"`
	Revision   *int    `json:"revision,omitempty"`
	IsAdvanced *bool   `json:"is_advanced,omitempty"`
}

// builder开始
type DisplayAppBuilder struct {
	appToken       string
	appTokenFlag   bool
	name           string
	nameFlag       bool
	revision       int
	revisionFlag   bool
	isAdvanced     bool
	isAdvancedFlag bool
}

func NewDisplayAppBuilder() *DisplayAppBuilder {
	builder := &DisplayAppBuilder{}
	return builder
}

func (builder *DisplayAppBuilder) AppToken(appToken string) *DisplayAppBuilder {
	builder.appToken = appToken
	builder.appTokenFlag = true
	return builder
}
func (builder *DisplayAppBuilder) Name(name string) *DisplayAppBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *DisplayAppBuilder) Revision(revision int) *DisplayAppBuilder {
	builder.revision = revision
	builder.revisionFlag = true
	return builder
}
func (builder *DisplayAppBuilder) IsAdvanced(isAdvanced bool) *DisplayAppBuilder {
	builder.isAdvanced = isAdvanced
	builder.isAdvancedFlag = true
	return builder
}

func (builder *DisplayAppBuilder) Build() *DisplayApp {
	req := &DisplayApp{}
	if builder.appTokenFlag {
		req.AppToken = &builder.appToken

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.revisionFlag {
		req.Revision = &builder.revision

	}
	if builder.isAdvancedFlag {
		req.IsAdvanced = &builder.isAdvanced

	}
	return req
}

// builder结束

type DisplayAppV2 struct {
	AppToken   *string `json:"app_token,omitempty"`
	Name       *string `json:"name,omitempty"`
	IsAdvanced *bool   `json:"is_advanced,omitempty"`
}

// builder开始
type DisplayAppV2Builder struct {
	appToken       string
	appTokenFlag   bool
	name           string
	nameFlag       bool
	isAdvanced     bool
	isAdvancedFlag bool
}

func NewDisplayAppV2Builder() *DisplayAppV2Builder {
	builder := &DisplayAppV2Builder{}
	return builder
}

func (builder *DisplayAppV2Builder) AppToken(appToken string) *DisplayAppV2Builder {
	builder.appToken = appToken
	builder.appTokenFlag = true
	return builder
}
func (builder *DisplayAppV2Builder) Name(name string) *DisplayAppV2Builder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *DisplayAppV2Builder) IsAdvanced(isAdvanced bool) *DisplayAppV2Builder {
	builder.isAdvanced = isAdvanced
	builder.isAdvancedFlag = true
	return builder
}

func (builder *DisplayAppV2Builder) Build() *DisplayAppV2 {
	req := &DisplayAppV2{}
	if builder.appTokenFlag {
		req.AppToken = &builder.appToken

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.isAdvancedFlag {
		req.IsAdvanced = &builder.isAdvanced

	}
	return req
}

// builder结束

type Person struct {
	Id     *string `json:"id,omitempty"`
	Name   *string `json:"name,omitempty"`
	EnName *string `json:"en_name,omitempty"`
	Email  *string `json:"email,omitempty"`
}

// builder开始
type PersonBuilder struct {
	id         string
	idFlag     bool
	name       string
	nameFlag   bool
	enName     string
	enNameFlag bool
	email      string
	emailFlag  bool
}

func NewPersonBuilder() *PersonBuilder {
	builder := &PersonBuilder{}
	return builder
}

func (builder *PersonBuilder) Id(id string) *PersonBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}
func (builder *PersonBuilder) Name(name string) *PersonBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *PersonBuilder) EnName(enName string) *PersonBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}
func (builder *PersonBuilder) Email(email string) *PersonBuilder {
	builder.email = email
	builder.emailFlag = true
	return builder
}

func (builder *PersonBuilder) Build() *Person {
	req := &Person{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.emailFlag {
		req.Email = &builder.email

	}
	return req
}

// builder结束

type ReqApp struct {
	Name        *string `json:"name,omitempty"`
	FolderToken *string `json:"folder_token,omitempty"`
}

// builder开始
type ReqAppBuilder struct {
	name            string
	nameFlag        bool
	folderToken     string
	folderTokenFlag bool
}

func NewReqAppBuilder() *ReqAppBuilder {
	builder := &ReqAppBuilder{}
	return builder
}

func (builder *ReqAppBuilder) Name(name string) *ReqAppBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *ReqAppBuilder) FolderToken(folderToken string) *ReqAppBuilder {
	builder.folderToken = folderToken
	builder.folderTokenFlag = true
	return builder
}

func (builder *ReqAppBuilder) Build() *ReqApp {
	req := &ReqApp{}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.folderTokenFlag {
		req.FolderToken = &builder.folderToken

	}
	return req
}

// builder结束

type ReqTable struct {
	Name *string `json:"name,omitempty"`
}

// builder开始
type ReqTableBuilder struct {
	name     string
	nameFlag bool
}

func NewReqTableBuilder() *ReqTableBuilder {
	builder := &ReqTableBuilder{}
	return builder
}

func (builder *ReqTableBuilder) Name(name string) *ReqTableBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *ReqTableBuilder) Build() *ReqTable {
	req := &ReqTable{}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	return req
}

// builder结束

type ReqView struct {
	ViewName *string `json:"view_name,omitempty"`
	ViewType *string `json:"view_type,omitempty"`
}

// builder开始
type ReqViewBuilder struct {
	viewName     string
	viewNameFlag bool
	viewType     string
	viewTypeFlag bool
}

func NewReqViewBuilder() *ReqViewBuilder {
	builder := &ReqViewBuilder{}
	return builder
}

func (builder *ReqViewBuilder) ViewName(viewName string) *ReqViewBuilder {
	builder.viewName = viewName
	builder.viewNameFlag = true
	return builder
}
func (builder *ReqViewBuilder) ViewType(viewType string) *ReqViewBuilder {
	builder.viewType = viewType
	builder.viewTypeFlag = true
	return builder
}

func (builder *ReqViewBuilder) Build() *ReqView {
	req := &ReqView{}
	if builder.viewNameFlag {
		req.ViewName = &builder.viewName

	}
	if builder.viewTypeFlag {
		req.ViewType = &builder.viewType

	}
	return req
}

// builder结束

type Url struct {
	Text *string `json:"text,omitempty"`
	Link *string `json:"link,omitempty"`
}

// builder开始
type UrlBuilder struct {
	text     string
	textFlag bool
	link     string
	linkFlag bool
}

func NewUrlBuilder() *UrlBuilder {
	builder := &UrlBuilder{}
	return builder
}

func (builder *UrlBuilder) Text(text string) *UrlBuilder {
	builder.text = text
	builder.textFlag = true
	return builder
}
func (builder *UrlBuilder) Link(link string) *UrlBuilder {
	builder.link = link
	builder.linkFlag = true
	return builder
}

func (builder *UrlBuilder) Build() *Url {
	req := &Url{}
	if builder.textFlag {
		req.Text = &builder.text

	}
	if builder.linkFlag {
		req.Link = &builder.link

	}
	return req
}

// builder结束

// 生成请求和响应结果类型，以及请求对象的Builder构造器

// 1.4 生成请求的builder结构体
type GetAppReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewGetAppReqBuilder() *GetAppReqBuilder {
	builder := &GetAppReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *GetAppReqBuilder) AppToken(appToken string) *GetAppReqBuilder {
	builder.apiReq.PathParams.Set("app_token", fmt.Sprint(appToken))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *GetAppReqBuilder) Build() *GetAppReq {
	req := &GetAppReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type GetAppReq struct {
	apiReq *larkcore.ApiReq
}

type GetAppRespData struct {
	App *DisplayApp `json:"app,omitempty"`
}

type GetAppResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetAppRespData `json:"data"`
}

func (resp *GetAppResp) Success() bool {
	return resp.Code == 0
}

type UpdateAppReqBodyBuilder struct {
	name           string
	nameFlag       bool
	isAdvanced     bool
	isAdvancedFlag bool
}

// 生成body的New构造器
func NewUpdateAppReqBodyBuilder() *UpdateAppReqBodyBuilder {
	builder := &UpdateAppReqBodyBuilder{}
	return builder
}

// 1.2 生成body的builder属性方法
func (builder *UpdateAppReqBodyBuilder) Name(name string) *UpdateAppReqBodyBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *UpdateAppReqBodyBuilder) IsAdvanced(isAdvanced bool) *UpdateAppReqBodyBuilder {
	builder.isAdvanced = isAdvanced
	builder.isAdvancedFlag = true
	return builder
}

// 1.3 生成body的build方法
func (builder *UpdateAppReqBodyBuilder) Build() *UpdateAppReqBody {
	req := &UpdateAppReqBody{}
	if builder.nameFlag {
		req.Name = &builder.name
	}
	if builder.isAdvancedFlag {
		req.IsAdvanced = &builder.isAdvanced
	}
	return req
}

// 上传文件path开始
type UpdateAppPathReqBodyBuilder struct {
	name           string
	nameFlag       bool
	isAdvanced     bool
	isAdvancedFlag bool
}

func NewUpdateAppPathReqBodyBuilder() *UpdateAppPathReqBodyBuilder {
	builder := &UpdateAppPathReqBodyBuilder{}
	return builder
}
func (builder *UpdateAppPathReqBodyBuilder) Name(name string) *UpdateAppPathReqBodyBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}
func (builder *UpdateAppPathReqBodyBuilder) IsAdvanced(isAdvanced bool) *UpdateAppPathReqBodyBuilder {
	builder.isAdvanced = isAdvanced
	builder.isAdvancedFlag = true
	return builder
}

func (builder *UpdateAppPathReqBodyBuilder) Build() (*UpdateAppReqBody, error) {
	req := &UpdateAppReqBody{}
	if builder.nameFlag {
		req.Name = &builder.name
	}
	if builder.isAdvancedFlag {
		req.IsAdvanced = &builder.isAdvanced
	}
	return req, nil
}

// 上传文件path结束

// 1.4 生成请求的builder结构体
type UpdateAppReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *UpdateAppReqBody
}

// 生成请求的New构造器
func NewUpdateAppReqBuilder() *UpdateAppReqBuilder {
	builder := &UpdateAppReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *UpdateAppReqBuilder) AppToken(appToken string) *UpdateAppReqBuilder {
	builder.apiReq.PathParams.Set("app_token", fmt.Sprint(appToken))
	return builder
}
func (builder *UpdateAppReqBuilder) Body(body *UpdateAppReqBody) *UpdateAppReqBuilder {
	builder.body = body
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *UpdateAppReqBuilder) Build() *UpdateAppReq {
	req := &UpdateAppReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.body
	return req
}

type UpdateAppReqBody struct {
	Name       *string `json:"name,omitempty"`
	IsAdvanced *bool   `json:"is_advanced,omitempty"`
}

type UpdateAppReq struct {
	apiReq *larkcore.ApiReq
	Body   *UpdateAppReqBody `body:""`
}

type UpdateAppRespData struct {
	App *DisplayAppV2 `json:"app,omitempty"`
}

type UpdateAppResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *UpdateAppRespData `json:"data"`
}

func (resp *UpdateAppResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type CreateAppRoleReqBuilder struct {
	apiReq  *larkcore.ApiReq
	appRole *AppRole
}

// 生成请求的New构造器
func NewCreateAppRoleReqBuilder() *CreateAppRoleReqBuilder {
	builder := &CreateAppRoleReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *CreateAppRoleReqBuilder) AppToken(appToken string) *CreateAppRoleReqBuilder {
	builder.apiReq.PathParams.Set("app_token", fmt.Sprint(appToken))
	return builder
}
func (builder *CreateAppRoleReqBuilder) AppRole(appRole *AppRole) *CreateAppRoleReqBuilder {
	builder.appRole = appRole
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *CreateAppRoleReqBuilder) Build() *CreateAppRoleReq {
	req := &CreateAppRoleReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.appRole
	return req
}

type CreateAppRoleReq struct {
	apiReq  *larkcore.ApiReq
	AppRole *AppRole `body:""`
}

type CreateAppRoleRespData struct {
	Role *AppRole `json:"role,omitempty"`
}

type CreateAppRoleResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateAppRoleRespData `json:"data"`
}

func (resp *CreateAppRoleResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type DeleteAppRoleReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewDeleteAppRoleReqBuilder() *DeleteAppRoleReqBuilder {
	builder := &DeleteAppRoleReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *DeleteAppRoleReqBuilder) AppToken(appToken string) *DeleteAppRoleReqBuilder {
	builder.apiReq.PathParams.Set("app_token", fmt.Sprint(appToken))
	return builder
}
func (builder *DeleteAppRoleReqBuilder) RoleId(roleId string) *DeleteAppRoleReqBuilder {
	builder.apiReq.PathParams.Set("role_id", fmt.Sprint(roleId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *DeleteAppRoleReqBuilder) Build() *DeleteAppRoleReq {
	req := &DeleteAppRoleReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type DeleteAppRoleReq struct {
	apiReq *larkcore.ApiReq
}

type DeleteAppRoleResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *DeleteAppRoleResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type ListAppRoleReqBuilder struct {
	apiReq *larkcore.ApiReq
	limit  int
}

// 生成请求的New构造器
func NewListAppRoleReqBuilder() *ListAppRoleReqBuilder {
	builder := &ListAppRoleReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *ListAppRoleReqBuilder) Limit(limit int) *ListAppRoleReqBuilder {
	builder.limit = limit
	return builder
}
func (builder *ListAppRoleReqBuilder) AppToken(appToken string) *ListAppRoleReqBuilder {
	builder.apiReq.PathParams.Set("app_token", fmt.Sprint(appToken))
	return builder
}
func (builder *ListAppRoleReqBuilder) PageSize(pageSize int) *ListAppRoleReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}
func (builder *ListAppRoleReqBuilder) PageToken(pageToken string) *ListAppRoleReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *ListAppRoleReqBuilder) Build() *ListAppRoleReq {
	req := &ListAppRoleReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListAppRoleReq struct {
	apiReq *larkcore.ApiReq
	Limit  int
}

type ListAppRoleRespData struct {
	Items     []*AppRole `json:"items,omitempty"`
	PageToken *string    `json:"page_token,omitempty"`
	HasMore   *bool      `json:"has_more,omitempty"`
	Total     *int       `json:"total,omitempty"`
}

type ListAppRoleResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListAppRoleRespData `json:"data"`
}

func (resp *ListAppRoleResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type UpdateAppRoleReqBuilder struct {
	apiReq  *larkcore.ApiReq
	appRole *AppRole
}

// 生成请求的New构造器
func NewUpdateAppRoleReqBuilder() *UpdateAppRoleReqBuilder {
	builder := &UpdateAppRoleReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *UpdateAppRoleReqBuilder) AppToken(appToken string) *UpdateAppRoleReqBuilder {
	builder.apiReq.PathParams.Set("app_token", fmt.Sprint(appToken))
	return builder
}
func (builder *UpdateAppRoleReqBuilder) RoleId(roleId string) *UpdateAppRoleReqBuilder {
	builder.apiReq.PathParams.Set("role_id", fmt.Sprint(roleId))
	return builder
}
func (builder *UpdateAppRoleReqBuilder) AppRole(appRole *AppRole) *UpdateAppRoleReqBuilder {
	builder.appRole = appRole
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *UpdateAppRoleReqBuilder) Build() *UpdateAppRoleReq {
	req := &UpdateAppRoleReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.appRole
	return req
}

type UpdateAppRoleReq struct {
	apiReq  *larkcore.ApiReq
	AppRole *AppRole `body:""`
}

type UpdateAppRoleRespData struct {
	Role *AppRole `json:"role,omitempty"`
}

type UpdateAppRoleResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *UpdateAppRoleRespData `json:"data"`
}

func (resp *UpdateAppRoleResp) Success() bool {
	return resp.Code == 0
}

type BatchCreateAppRoleMemberReqBodyBuilder struct {
	memberList     []*AppRoleMemberId
	memberListFlag bool
}

// 生成body的New构造器
func NewBatchCreateAppRoleMemberReqBodyBuilder() *BatchCreateAppRoleMemberReqBodyBuilder {
	builder := &BatchCreateAppRoleMemberReqBodyBuilder{}
	return builder
}

// 1.2 生成body的builder属性方法
func (builder *BatchCreateAppRoleMemberReqBodyBuilder) MemberList(memberList []*AppRoleMemberId) *BatchCreateAppRoleMemberReqBodyBuilder {
	builder.memberList = memberList
	builder.memberListFlag = true
	return builder
}

// 1.3 生成body的build方法
func (builder *BatchCreateAppRoleMemberReqBodyBuilder) Build() *BatchCreateAppRoleMemberReqBody {
	req := &BatchCreateAppRoleMemberReqBody{}
	if builder.memberListFlag {
		req.MemberList = builder.memberList
	}
	return req
}

// 上传文件path开始
type BatchCreateAppRoleMemberPathReqBodyBuilder struct {
	memberList     []*AppRoleMemberId
	memberListFlag bool
}

func NewBatchCreateAppRoleMemberPathReqBodyBuilder() *BatchCreateAppRoleMemberPathReqBodyBuilder {
	builder := &BatchCreateAppRoleMemberPathReqBodyBuilder{}
	return builder
}
func (builder *BatchCreateAppRoleMemberPathReqBodyBuilder) MemberList(memberList []*AppRoleMemberId) *BatchCreateAppRoleMemberPathReqBodyBuilder {
	builder.memberList = memberList
	builder.memberListFlag = true
	return builder
}

func (builder *BatchCreateAppRoleMemberPathReqBodyBuilder) Build() (*BatchCreateAppRoleMemberReqBody, error) {
	req := &BatchCreateAppRoleMemberReqBody{}
	if builder.memberListFlag {
		req.MemberList = builder.memberList
	}
	return req, nil
}

// 上传文件path结束

// 1.4 生成请求的builder结构体
type BatchCreateAppRoleMemberReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *BatchCreateAppRoleMemberReqBody
}

// 生成请求的New构造器
func NewBatchCreateAppRoleMemberReqBuilder() *BatchCreateAppRoleMemberReqBuilder {
	builder := &BatchCreateAppRoleMemberReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *BatchCreateAppRoleMemberReqBuilder) AppToken(appToken string) *BatchCreateAppRoleMemberReqBuilder {
	builder.apiReq.PathParams.Set("app_token", fmt.Sprint(appToken))
	return builder
}
func (builder *BatchCreateAppRoleMemberReqBuilder) RoleId(roleId string) *BatchCreateAppRoleMemberReqBuilder {
	builder.apiReq.PathParams.Set("role_id", fmt.Sprint(roleId))
	return builder
}
func (builder *BatchCreateAppRoleMemberReqBuilder) Body(body *BatchCreateAppRoleMemberReqBody) *BatchCreateAppRoleMemberReqBuilder {
	builder.body = body
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *BatchCreateAppRoleMemberReqBuilder) Build() *BatchCreateAppRoleMemberReq {
	req := &BatchCreateAppRoleMemberReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.body
	return req
}

type BatchCreateAppRoleMemberReqBody struct {
	MemberList []*AppRoleMemberId `json:"member_list,omitempty"`
}

type BatchCreateAppRoleMemberReq struct {
	apiReq *larkcore.ApiReq
	Body   *BatchCreateAppRoleMemberReqBody `body:""`
}

type BatchCreateAppRoleMemberResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *BatchCreateAppRoleMemberResp) Success() bool {
	return resp.Code == 0
}

type BatchDeleteAppRoleMemberReqBodyBuilder struct {
	memberList     []*AppRoleMemberId
	memberListFlag bool
}

// 生成body的New构造器
func NewBatchDeleteAppRoleMemberReqBodyBuilder() *BatchDeleteAppRoleMemberReqBodyBuilder {
	builder := &BatchDeleteAppRoleMemberReqBodyBuilder{}
	return builder
}

// 1.2 生成body的builder属性方法
func (builder *BatchDeleteAppRoleMemberReqBodyBuilder) MemberList(memberList []*AppRoleMemberId) *BatchDeleteAppRoleMemberReqBodyBuilder {
	builder.memberList = memberList
	builder.memberListFlag = true
	return builder
}

// 1.3 生成body的build方法
func (builder *BatchDeleteAppRoleMemberReqBodyBuilder) Build() *BatchDeleteAppRoleMemberReqBody {
	req := &BatchDeleteAppRoleMemberReqBody{}
	if builder.memberListFlag {
		req.MemberList = builder.memberList
	}
	return req
}

// 上传文件path开始
type BatchDeleteAppRoleMemberPathReqBodyBuilder struct {
	memberList     []*AppRoleMemberId
	memberListFlag bool
}

func NewBatchDeleteAppRoleMemberPathReqBodyBuilder() *BatchDeleteAppRoleMemberPathReqBodyBuilder {
	builder := &BatchDeleteAppRoleMemberPathReqBodyBuilder{}
	return builder
}
func (builder *BatchDeleteAppRoleMemberPathReqBodyBuilder) MemberList(memberList []*AppRoleMemberId) *BatchDeleteAppRoleMemberPathReqBodyBuilder {
	builder.memberList = memberList
	builder.memberListFlag = true
	return builder
}

func (builder *BatchDeleteAppRoleMemberPathReqBodyBuilder) Build() (*BatchDeleteAppRoleMemberReqBody, error) {
	req := &BatchDeleteAppRoleMemberReqBody{}
	if builder.memberListFlag {
		req.MemberList = builder.memberList
	}
	return req, nil
}

// 上传文件path结束

// 1.4 生成请求的builder结构体
type BatchDeleteAppRoleMemberReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *BatchDeleteAppRoleMemberReqBody
}

// 生成请求的New构造器
func NewBatchDeleteAppRoleMemberReqBuilder() *BatchDeleteAppRoleMemberReqBuilder {
	builder := &BatchDeleteAppRoleMemberReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *BatchDeleteAppRoleMemberReqBuilder) AppToken(appToken string) *BatchDeleteAppRoleMemberReqBuilder {
	builder.apiReq.PathParams.Set("app_token", fmt.Sprint(appToken))
	return builder
}
func (builder *BatchDeleteAppRoleMemberReqBuilder) RoleId(roleId string) *BatchDeleteAppRoleMemberReqBuilder {
	builder.apiReq.PathParams.Set("role_id", fmt.Sprint(roleId))
	return builder
}
func (builder *BatchDeleteAppRoleMemberReqBuilder) Body(body *BatchDeleteAppRoleMemberReqBody) *BatchDeleteAppRoleMemberReqBuilder {
	builder.body = body
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *BatchDeleteAppRoleMemberReqBuilder) Build() *BatchDeleteAppRoleMemberReq {
	req := &BatchDeleteAppRoleMemberReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.body
	return req
}

type BatchDeleteAppRoleMemberReqBody struct {
	MemberList []*AppRoleMemberId `json:"member_list,omitempty"`
}

type BatchDeleteAppRoleMemberReq struct {
	apiReq *larkcore.ApiReq
	Body   *BatchDeleteAppRoleMemberReqBody `body:""`
}

type BatchDeleteAppRoleMemberResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *BatchDeleteAppRoleMemberResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type CreateAppRoleMemberReqBuilder struct {
	apiReq        *larkcore.ApiReq
	appRoleMember *AppRoleMember
}

// 生成请求的New构造器
func NewCreateAppRoleMemberReqBuilder() *CreateAppRoleMemberReqBuilder {
	builder := &CreateAppRoleMemberReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *CreateAppRoleMemberReqBuilder) AppToken(appToken string) *CreateAppRoleMemberReqBuilder {
	builder.apiReq.PathParams.Set("app_token", fmt.Sprint(appToken))
	return builder
}
func (builder *CreateAppRoleMemberReqBuilder) RoleId(roleId string) *CreateAppRoleMemberReqBuilder {
	builder.apiReq.PathParams.Set("role_id", fmt.Sprint(roleId))
	return builder
}
func (builder *CreateAppRoleMemberReqBuilder) MemberIdType(memberIdType string) *CreateAppRoleMemberReqBuilder {
	builder.apiReq.QueryParams.Set("member_id_type", fmt.Sprint(memberIdType))
	return builder
}
func (builder *CreateAppRoleMemberReqBuilder) AppRoleMember(appRoleMember *AppRoleMember) *CreateAppRoleMemberReqBuilder {
	builder.appRoleMember = appRoleMember
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *CreateAppRoleMemberReqBuilder) Build() *CreateAppRoleMemberReq {
	req := &CreateAppRoleMemberReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.appRoleMember
	return req
}

type CreateAppRoleMemberReq struct {
	apiReq        *larkcore.ApiReq
	AppRoleMember *AppRoleMember `body:""`
}

type CreateAppRoleMemberResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *CreateAppRoleMemberResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type DeleteAppRoleMemberReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewDeleteAppRoleMemberReqBuilder() *DeleteAppRoleMemberReqBuilder {
	builder := &DeleteAppRoleMemberReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *DeleteAppRoleMemberReqBuilder) AppToken(appToken string) *DeleteAppRoleMemberReqBuilder {
	builder.apiReq.PathParams.Set("app_token", fmt.Sprint(appToken))
	return builder
}
func (builder *DeleteAppRoleMemberReqBuilder) RoleId(roleId string) *DeleteAppRoleMemberReqBuilder {
	builder.apiReq.PathParams.Set("role_id", fmt.Sprint(roleId))
	return builder
}
func (builder *DeleteAppRoleMemberReqBuilder) MemberId(memberId string) *DeleteAppRoleMemberReqBuilder {
	builder.apiReq.PathParams.Set("member_id", fmt.Sprint(memberId))
	return builder
}
func (builder *DeleteAppRoleMemberReqBuilder) MemberIdType(memberIdType string) *DeleteAppRoleMemberReqBuilder {
	builder.apiReq.QueryParams.Set("member_id_type", fmt.Sprint(memberIdType))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *DeleteAppRoleMemberReqBuilder) Build() *DeleteAppRoleMemberReq {
	req := &DeleteAppRoleMemberReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type DeleteAppRoleMemberReq struct {
	apiReq *larkcore.ApiReq
}

type DeleteAppRoleMemberResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *DeleteAppRoleMemberResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type ListAppRoleMemberReqBuilder struct {
	apiReq *larkcore.ApiReq
	limit  int
}

// 生成请求的New构造器
func NewListAppRoleMemberReqBuilder() *ListAppRoleMemberReqBuilder {
	builder := &ListAppRoleMemberReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *ListAppRoleMemberReqBuilder) Limit(limit int) *ListAppRoleMemberReqBuilder {
	builder.limit = limit
	return builder
}
func (builder *ListAppRoleMemberReqBuilder) AppToken(appToken string) *ListAppRoleMemberReqBuilder {
	builder.apiReq.PathParams.Set("app_token", fmt.Sprint(appToken))
	return builder
}
func (builder *ListAppRoleMemberReqBuilder) RoleId(roleId string) *ListAppRoleMemberReqBuilder {
	builder.apiReq.PathParams.Set("role_id", fmt.Sprint(roleId))
	return builder
}
func (builder *ListAppRoleMemberReqBuilder) PageSize(pageSize int) *ListAppRoleMemberReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}
func (builder *ListAppRoleMemberReqBuilder) PageToken(pageToken string) *ListAppRoleMemberReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *ListAppRoleMemberReqBuilder) Build() *ListAppRoleMemberReq {
	req := &ListAppRoleMemberReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListAppRoleMemberReq struct {
	apiReq *larkcore.ApiReq
	Limit  int
}

type ListAppRoleMemberRespData struct {
	Items     []*AppRoleMember `json:"items,omitempty"`
	HasMore   *bool            `json:"has_more,omitempty"`
	PageToken *string          `json:"page_token,omitempty"`
	Total     *int             `json:"total,omitempty"`
}

type ListAppRoleMemberResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListAppRoleMemberRespData `json:"data"`
}

func (resp *ListAppRoleMemberResp) Success() bool {
	return resp.Code == 0
}

type BatchCreateAppTableReqBodyBuilder struct {
	tables     []*ReqTable
	tablesFlag bool
}

// 生成body的New构造器
func NewBatchCreateAppTableReqBodyBuilder() *BatchCreateAppTableReqBodyBuilder {
	builder := &BatchCreateAppTableReqBodyBuilder{}
	return builder
}

// 1.2 生成body的builder属性方法
func (builder *BatchCreateAppTableReqBodyBuilder) Tables(tables []*ReqTable) *BatchCreateAppTableReqBodyBuilder {
	builder.tables = tables
	builder.tablesFlag = true
	return builder
}

// 1.3 生成body的build方法
func (builder *BatchCreateAppTableReqBodyBuilder) Build() *BatchCreateAppTableReqBody {
	req := &BatchCreateAppTableReqBody{}
	if builder.tablesFlag {
		req.Tables = builder.tables
	}
	return req
}

// 上传文件path开始
type BatchCreateAppTablePathReqBodyBuilder struct {
	tables     []*ReqTable
	tablesFlag bool
}

func NewBatchCreateAppTablePathReqBodyBuilder() *BatchCreateAppTablePathReqBodyBuilder {
	builder := &BatchCreateAppTablePathReqBodyBuilder{}
	return builder
}
func (builder *BatchCreateAppTablePathReqBodyBuilder) Tables(tables []*ReqTable) *BatchCreateAppTablePathReqBodyBuilder {
	builder.tables = tables
	builder.tablesFlag = true
	return builder
}

func (builder *BatchCreateAppTablePathReqBodyBuilder) Build() (*BatchCreateAppTableReqBody, error) {
	req := &BatchCreateAppTableReqBody{}
	if builder.tablesFlag {
		req.Tables = builder.tables
	}
	return req, nil
}

// 上传文件path结束

// 1.4 生成请求的builder结构体
type BatchCreateAppTableReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *BatchCreateAppTableReqBody
}

// 生成请求的New构造器
func NewBatchCreateAppTableReqBuilder() *BatchCreateAppTableReqBuilder {
	builder := &BatchCreateAppTableReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *BatchCreateAppTableReqBuilder) AppToken(appToken string) *BatchCreateAppTableReqBuilder {
	builder.apiReq.PathParams.Set("app_token", fmt.Sprint(appToken))
	return builder
}
func (builder *BatchCreateAppTableReqBuilder) UserIdType(userIdType string) *BatchCreateAppTableReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}
func (builder *BatchCreateAppTableReqBuilder) Body(body *BatchCreateAppTableReqBody) *BatchCreateAppTableReqBuilder {
	builder.body = body
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *BatchCreateAppTableReqBuilder) Build() *BatchCreateAppTableReq {
	req := &BatchCreateAppTableReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.body
	return req
}

type BatchCreateAppTableReqBody struct {
	Tables []*ReqTable `json:"tables,omitempty"`
}

type BatchCreateAppTableReq struct {
	apiReq *larkcore.ApiReq
	Body   *BatchCreateAppTableReqBody `body:""`
}

type BatchCreateAppTableRespData struct {
	TableIds []string `json:"table_ids,omitempty"`
}

type BatchCreateAppTableResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *BatchCreateAppTableRespData `json:"data"`
}

func (resp *BatchCreateAppTableResp) Success() bool {
	return resp.Code == 0
}

type BatchDeleteAppTableReqBodyBuilder struct {
	tableIds     []string
	tableIdsFlag bool
}

// 生成body的New构造器
func NewBatchDeleteAppTableReqBodyBuilder() *BatchDeleteAppTableReqBodyBuilder {
	builder := &BatchDeleteAppTableReqBodyBuilder{}
	return builder
}

// 1.2 生成body的builder属性方法
func (builder *BatchDeleteAppTableReqBodyBuilder) TableIds(tableIds []string) *BatchDeleteAppTableReqBodyBuilder {
	builder.tableIds = tableIds
	builder.tableIdsFlag = true
	return builder
}

// 1.3 生成body的build方法
func (builder *BatchDeleteAppTableReqBodyBuilder) Build() *BatchDeleteAppTableReqBody {
	req := &BatchDeleteAppTableReqBody{}
	if builder.tableIdsFlag {
		req.TableIds = builder.tableIds
	}
	return req
}

// 上传文件path开始
type BatchDeleteAppTablePathReqBodyBuilder struct {
	tableIds     []string
	tableIdsFlag bool
}

func NewBatchDeleteAppTablePathReqBodyBuilder() *BatchDeleteAppTablePathReqBodyBuilder {
	builder := &BatchDeleteAppTablePathReqBodyBuilder{}
	return builder
}
func (builder *BatchDeleteAppTablePathReqBodyBuilder) TableIds(tableIds []string) *BatchDeleteAppTablePathReqBodyBuilder {
	builder.tableIds = tableIds
	builder.tableIdsFlag = true
	return builder
}

func (builder *BatchDeleteAppTablePathReqBodyBuilder) Build() (*BatchDeleteAppTableReqBody, error) {
	req := &BatchDeleteAppTableReqBody{}
	if builder.tableIdsFlag {
		req.TableIds = builder.tableIds
	}
	return req, nil
}

// 上传文件path结束

// 1.4 生成请求的builder结构体
type BatchDeleteAppTableReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *BatchDeleteAppTableReqBody
}

// 生成请求的New构造器
func NewBatchDeleteAppTableReqBuilder() *BatchDeleteAppTableReqBuilder {
	builder := &BatchDeleteAppTableReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *BatchDeleteAppTableReqBuilder) AppToken(appToken string) *BatchDeleteAppTableReqBuilder {
	builder.apiReq.PathParams.Set("app_token", fmt.Sprint(appToken))
	return builder
}
func (builder *BatchDeleteAppTableReqBuilder) Body(body *BatchDeleteAppTableReqBody) *BatchDeleteAppTableReqBuilder {
	builder.body = body
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *BatchDeleteAppTableReqBuilder) Build() *BatchDeleteAppTableReq {
	req := &BatchDeleteAppTableReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.body
	return req
}

type BatchDeleteAppTableReqBody struct {
	TableIds []string `json:"table_ids,omitempty"`
}

type BatchDeleteAppTableReq struct {
	apiReq *larkcore.ApiReq
	Body   *BatchDeleteAppTableReqBody `body:""`
}

type BatchDeleteAppTableResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *BatchDeleteAppTableResp) Success() bool {
	return resp.Code == 0
}

type CreateAppTableReqBodyBuilder struct {
	table     *ReqTable
	tableFlag bool
}

// 生成body的New构造器
func NewCreateAppTableReqBodyBuilder() *CreateAppTableReqBodyBuilder {
	builder := &CreateAppTableReqBodyBuilder{}
	return builder
}

// 1.2 生成body的builder属性方法
func (builder *CreateAppTableReqBodyBuilder) Table(table *ReqTable) *CreateAppTableReqBodyBuilder {
	builder.table = table
	builder.tableFlag = true
	return builder
}

// 1.3 生成body的build方法
func (builder *CreateAppTableReqBodyBuilder) Build() *CreateAppTableReqBody {
	req := &CreateAppTableReqBody{}
	if builder.tableFlag {
		req.Table = builder.table
	}
	return req
}

// 上传文件path开始
type CreateAppTablePathReqBodyBuilder struct {
	table     *ReqTable
	tableFlag bool
}

func NewCreateAppTablePathReqBodyBuilder() *CreateAppTablePathReqBodyBuilder {
	builder := &CreateAppTablePathReqBodyBuilder{}
	return builder
}
func (builder *CreateAppTablePathReqBodyBuilder) Table(table *ReqTable) *CreateAppTablePathReqBodyBuilder {
	builder.table = table
	builder.tableFlag = true
	return builder
}

func (builder *CreateAppTablePathReqBodyBuilder) Build() (*CreateAppTableReqBody, error) {
	req := &CreateAppTableReqBody{}
	if builder.tableFlag {
		req.Table = builder.table
	}
	return req, nil
}

// 上传文件path结束

// 1.4 生成请求的builder结构体
type CreateAppTableReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *CreateAppTableReqBody
}

// 生成请求的New构造器
func NewCreateAppTableReqBuilder() *CreateAppTableReqBuilder {
	builder := &CreateAppTableReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *CreateAppTableReqBuilder) AppToken(appToken string) *CreateAppTableReqBuilder {
	builder.apiReq.PathParams.Set("app_token", fmt.Sprint(appToken))
	return builder
}
func (builder *CreateAppTableReqBuilder) UserIdType(userIdType string) *CreateAppTableReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}
func (builder *CreateAppTableReqBuilder) Body(body *CreateAppTableReqBody) *CreateAppTableReqBuilder {
	builder.body = body
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *CreateAppTableReqBuilder) Build() *CreateAppTableReq {
	req := &CreateAppTableReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.body
	return req
}

type CreateAppTableReqBody struct {
	Table *ReqTable `json:"table,omitempty"`
}

type CreateAppTableReq struct {
	apiReq *larkcore.ApiReq
	Body   *CreateAppTableReqBody `body:""`
}

type CreateAppTableRespData struct {
	TableId *string `json:"table_id,omitempty"`
}

type CreateAppTableResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateAppTableRespData `json:"data"`
}

func (resp *CreateAppTableResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type DeleteAppTableReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewDeleteAppTableReqBuilder() *DeleteAppTableReqBuilder {
	builder := &DeleteAppTableReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *DeleteAppTableReqBuilder) AppToken(appToken string) *DeleteAppTableReqBuilder {
	builder.apiReq.PathParams.Set("app_token", fmt.Sprint(appToken))
	return builder
}
func (builder *DeleteAppTableReqBuilder) TableId(tableId string) *DeleteAppTableReqBuilder {
	builder.apiReq.PathParams.Set("table_id", fmt.Sprint(tableId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *DeleteAppTableReqBuilder) Build() *DeleteAppTableReq {
	req := &DeleteAppTableReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type DeleteAppTableReq struct {
	apiReq *larkcore.ApiReq
}

type DeleteAppTableResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *DeleteAppTableResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type ListAppTableReqBuilder struct {
	apiReq *larkcore.ApiReq
	limit  int
}

// 生成请求的New构造器
func NewListAppTableReqBuilder() *ListAppTableReqBuilder {
	builder := &ListAppTableReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *ListAppTableReqBuilder) Limit(limit int) *ListAppTableReqBuilder {
	builder.limit = limit
	return builder
}
func (builder *ListAppTableReqBuilder) AppToken(appToken string) *ListAppTableReqBuilder {
	builder.apiReq.PathParams.Set("app_token", fmt.Sprint(appToken))
	return builder
}
func (builder *ListAppTableReqBuilder) PageToken(pageToken string) *ListAppTableReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}
func (builder *ListAppTableReqBuilder) PageSize(pageSize int) *ListAppTableReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *ListAppTableReqBuilder) Build() *ListAppTableReq {
	req := &ListAppTableReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListAppTableReq struct {
	apiReq *larkcore.ApiReq
	Limit  int
}

type ListAppTableRespData struct {
	HasMore   *bool       `json:"has_more,omitempty"`
	PageToken *string     `json:"page_token,omitempty"`
	Total     *int        `json:"total,omitempty"`
	Items     []*AppTable `json:"items,omitempty"`
}

type ListAppTableResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListAppTableRespData `json:"data"`
}

func (resp *ListAppTableResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type CreateAppTableFieldReqBuilder struct {
	apiReq        *larkcore.ApiReq
	appTableField *AppTableField
}

// 生成请求的New构造器
func NewCreateAppTableFieldReqBuilder() *CreateAppTableFieldReqBuilder {
	builder := &CreateAppTableFieldReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *CreateAppTableFieldReqBuilder) AppToken(appToken string) *CreateAppTableFieldReqBuilder {
	builder.apiReq.PathParams.Set("app_token", fmt.Sprint(appToken))
	return builder
}
func (builder *CreateAppTableFieldReqBuilder) TableId(tableId string) *CreateAppTableFieldReqBuilder {
	builder.apiReq.PathParams.Set("table_id", fmt.Sprint(tableId))
	return builder
}
func (builder *CreateAppTableFieldReqBuilder) AppTableField(appTableField *AppTableField) *CreateAppTableFieldReqBuilder {
	builder.appTableField = appTableField
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *CreateAppTableFieldReqBuilder) Build() *CreateAppTableFieldReq {
	req := &CreateAppTableFieldReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.appTableField
	return req
}

type CreateAppTableFieldReq struct {
	apiReq        *larkcore.ApiReq
	AppTableField *AppTableField `body:""`
}

type CreateAppTableFieldRespData struct {
	Field *AppTableField `json:"field,omitempty"`
}

type CreateAppTableFieldResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateAppTableFieldRespData `json:"data"`
}

func (resp *CreateAppTableFieldResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type DeleteAppTableFieldReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewDeleteAppTableFieldReqBuilder() *DeleteAppTableFieldReqBuilder {
	builder := &DeleteAppTableFieldReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *DeleteAppTableFieldReqBuilder) AppToken(appToken string) *DeleteAppTableFieldReqBuilder {
	builder.apiReq.PathParams.Set("app_token", fmt.Sprint(appToken))
	return builder
}
func (builder *DeleteAppTableFieldReqBuilder) TableId(tableId string) *DeleteAppTableFieldReqBuilder {
	builder.apiReq.PathParams.Set("table_id", fmt.Sprint(tableId))
	return builder
}
func (builder *DeleteAppTableFieldReqBuilder) FieldId(fieldId string) *DeleteAppTableFieldReqBuilder {
	builder.apiReq.PathParams.Set("field_id", fmt.Sprint(fieldId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *DeleteAppTableFieldReqBuilder) Build() *DeleteAppTableFieldReq {
	req := &DeleteAppTableFieldReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type DeleteAppTableFieldReq struct {
	apiReq *larkcore.ApiReq
}

type DeleteAppTableFieldRespData struct {
	FieldId *string `json:"field_id,omitempty"`
	Deleted *bool   `json:"deleted,omitempty"`
}

type DeleteAppTableFieldResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *DeleteAppTableFieldRespData `json:"data"`
}

func (resp *DeleteAppTableFieldResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type ListAppTableFieldReqBuilder struct {
	apiReq *larkcore.ApiReq
	limit  int
}

// 生成请求的New构造器
func NewListAppTableFieldReqBuilder() *ListAppTableFieldReqBuilder {
	builder := &ListAppTableFieldReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *ListAppTableFieldReqBuilder) Limit(limit int) *ListAppTableFieldReqBuilder {
	builder.limit = limit
	return builder
}
func (builder *ListAppTableFieldReqBuilder) AppToken(appToken string) *ListAppTableFieldReqBuilder {
	builder.apiReq.PathParams.Set("app_token", fmt.Sprint(appToken))
	return builder
}
func (builder *ListAppTableFieldReqBuilder) TableId(tableId string) *ListAppTableFieldReqBuilder {
	builder.apiReq.PathParams.Set("table_id", fmt.Sprint(tableId))
	return builder
}
func (builder *ListAppTableFieldReqBuilder) ViewId(viewId string) *ListAppTableFieldReqBuilder {
	builder.apiReq.QueryParams.Set("view_id", fmt.Sprint(viewId))
	return builder
}
func (builder *ListAppTableFieldReqBuilder) PageToken(pageToken string) *ListAppTableFieldReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}
func (builder *ListAppTableFieldReqBuilder) PageSize(pageSize int) *ListAppTableFieldReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *ListAppTableFieldReqBuilder) Build() *ListAppTableFieldReq {
	req := &ListAppTableFieldReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListAppTableFieldReq struct {
	apiReq *larkcore.ApiReq
	Limit  int
}

type ListAppTableFieldRespData struct {
	HasMore   *bool            `json:"has_more,omitempty"`
	PageToken *string          `json:"page_token,omitempty"`
	Total     *int             `json:"total,omitempty"`
	Items     []*AppTableField `json:"items,omitempty"`
}

type ListAppTableFieldResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListAppTableFieldRespData `json:"data"`
}

func (resp *ListAppTableFieldResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type UpdateAppTableFieldReqBuilder struct {
	apiReq        *larkcore.ApiReq
	appTableField *AppTableField
}

// 生成请求的New构造器
func NewUpdateAppTableFieldReqBuilder() *UpdateAppTableFieldReqBuilder {
	builder := &UpdateAppTableFieldReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *UpdateAppTableFieldReqBuilder) AppToken(appToken string) *UpdateAppTableFieldReqBuilder {
	builder.apiReq.PathParams.Set("app_token", fmt.Sprint(appToken))
	return builder
}
func (builder *UpdateAppTableFieldReqBuilder) TableId(tableId string) *UpdateAppTableFieldReqBuilder {
	builder.apiReq.PathParams.Set("table_id", fmt.Sprint(tableId))
	return builder
}
func (builder *UpdateAppTableFieldReqBuilder) FieldId(fieldId string) *UpdateAppTableFieldReqBuilder {
	builder.apiReq.PathParams.Set("field_id", fmt.Sprint(fieldId))
	return builder
}
func (builder *UpdateAppTableFieldReqBuilder) AppTableField(appTableField *AppTableField) *UpdateAppTableFieldReqBuilder {
	builder.appTableField = appTableField
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *UpdateAppTableFieldReqBuilder) Build() *UpdateAppTableFieldReq {
	req := &UpdateAppTableFieldReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.appTableField
	return req
}

type UpdateAppTableFieldReq struct {
	apiReq        *larkcore.ApiReq
	AppTableField *AppTableField `body:""`
}

type UpdateAppTableFieldRespData struct {
	Field *AppTableField `json:"field,omitempty"`
}

type UpdateAppTableFieldResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *UpdateAppTableFieldRespData `json:"data"`
}

func (resp *UpdateAppTableFieldResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type ListAppTableFormFieldReqBuilder struct {
	apiReq *larkcore.ApiReq
	limit  int
}

// 生成请求的New构造器
func NewListAppTableFormFieldReqBuilder() *ListAppTableFormFieldReqBuilder {
	builder := &ListAppTableFormFieldReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *ListAppTableFormFieldReqBuilder) Limit(limit int) *ListAppTableFormFieldReqBuilder {
	builder.limit = limit
	return builder
}
func (builder *ListAppTableFormFieldReqBuilder) AppToken(appToken string) *ListAppTableFormFieldReqBuilder {
	builder.apiReq.PathParams.Set("app_token", fmt.Sprint(appToken))
	return builder
}
func (builder *ListAppTableFormFieldReqBuilder) TableId(tableId string) *ListAppTableFormFieldReqBuilder {
	builder.apiReq.PathParams.Set("table_id", fmt.Sprint(tableId))
	return builder
}
func (builder *ListAppTableFormFieldReqBuilder) FormId(formId string) *ListAppTableFormFieldReqBuilder {
	builder.apiReq.PathParams.Set("form_id", fmt.Sprint(formId))
	return builder
}
func (builder *ListAppTableFormFieldReqBuilder) PageSize(pageSize int) *ListAppTableFormFieldReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}
func (builder *ListAppTableFormFieldReqBuilder) PageToken(pageToken string) *ListAppTableFormFieldReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *ListAppTableFormFieldReqBuilder) Build() *ListAppTableFormFieldReq {
	req := &ListAppTableFormFieldReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListAppTableFormFieldReq struct {
	apiReq *larkcore.ApiReq
	Limit  int
}

type ListAppTableFormFieldRespData struct {
	Items     []*AppTableFormField `json:"items,omitempty"`
	PageToken *string              `json:"page_token,omitempty"`
	HasMore   *bool                `json:"has_more,omitempty"`
	Total     *int                 `json:"total,omitempty"`
}

type ListAppTableFormFieldResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListAppTableFormFieldRespData `json:"data"`
}

func (resp *ListAppTableFormFieldResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type PatchAppTableFormFieldReqBuilder struct {
	apiReq                   *larkcore.ApiReq
	appTableFormPatchedField *AppTableFormPatchedField
}

// 生成请求的New构造器
func NewPatchAppTableFormFieldReqBuilder() *PatchAppTableFormFieldReqBuilder {
	builder := &PatchAppTableFormFieldReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *PatchAppTableFormFieldReqBuilder) AppToken(appToken string) *PatchAppTableFormFieldReqBuilder {
	builder.apiReq.PathParams.Set("app_token", fmt.Sprint(appToken))
	return builder
}
func (builder *PatchAppTableFormFieldReqBuilder) TableId(tableId string) *PatchAppTableFormFieldReqBuilder {
	builder.apiReq.PathParams.Set("table_id", fmt.Sprint(tableId))
	return builder
}
func (builder *PatchAppTableFormFieldReqBuilder) FormId(formId string) *PatchAppTableFormFieldReqBuilder {
	builder.apiReq.PathParams.Set("form_id", fmt.Sprint(formId))
	return builder
}
func (builder *PatchAppTableFormFieldReqBuilder) FieldId(fieldId string) *PatchAppTableFormFieldReqBuilder {
	builder.apiReq.PathParams.Set("field_id", fmt.Sprint(fieldId))
	return builder
}
func (builder *PatchAppTableFormFieldReqBuilder) AppTableFormPatchedField(appTableFormPatchedField *AppTableFormPatchedField) *PatchAppTableFormFieldReqBuilder {
	builder.appTableFormPatchedField = appTableFormPatchedField
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *PatchAppTableFormFieldReqBuilder) Build() *PatchAppTableFormFieldReq {
	req := &PatchAppTableFormFieldReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.appTableFormPatchedField
	return req
}

type PatchAppTableFormFieldReq struct {
	apiReq                   *larkcore.ApiReq
	AppTableFormPatchedField *AppTableFormPatchedField `body:""`
}

type PatchAppTableFormFieldRespData struct {
	Field *AppTableFormPatchedField `json:"field,omitempty"`
}

type PatchAppTableFormFieldResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *PatchAppTableFormFieldRespData `json:"data"`
}

func (resp *PatchAppTableFormFieldResp) Success() bool {
	return resp.Code == 0
}

type BatchCreateAppTableRecordReqBodyBuilder struct {
	records     []*AppTableRecord
	recordsFlag bool
}

// 生成body的New构造器
func NewBatchCreateAppTableRecordReqBodyBuilder() *BatchCreateAppTableRecordReqBodyBuilder {
	builder := &BatchCreateAppTableRecordReqBodyBuilder{}
	return builder
}

// 1.2 生成body的builder属性方法
func (builder *BatchCreateAppTableRecordReqBodyBuilder) Records(records []*AppTableRecord) *BatchCreateAppTableRecordReqBodyBuilder {
	builder.records = records
	builder.recordsFlag = true
	return builder
}

// 1.3 生成body的build方法
func (builder *BatchCreateAppTableRecordReqBodyBuilder) Build() *BatchCreateAppTableRecordReqBody {
	req := &BatchCreateAppTableRecordReqBody{}
	if builder.recordsFlag {
		req.Records = builder.records
	}
	return req
}

// 上传文件path开始
type BatchCreateAppTableRecordPathReqBodyBuilder struct {
	records     []*AppTableRecord
	recordsFlag bool
}

func NewBatchCreateAppTableRecordPathReqBodyBuilder() *BatchCreateAppTableRecordPathReqBodyBuilder {
	builder := &BatchCreateAppTableRecordPathReqBodyBuilder{}
	return builder
}
func (builder *BatchCreateAppTableRecordPathReqBodyBuilder) Records(records []*AppTableRecord) *BatchCreateAppTableRecordPathReqBodyBuilder {
	builder.records = records
	builder.recordsFlag = true
	return builder
}

func (builder *BatchCreateAppTableRecordPathReqBodyBuilder) Build() (*BatchCreateAppTableRecordReqBody, error) {
	req := &BatchCreateAppTableRecordReqBody{}
	if builder.recordsFlag {
		req.Records = builder.records
	}
	return req, nil
}

// 上传文件path结束

// 1.4 生成请求的builder结构体
type BatchCreateAppTableRecordReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *BatchCreateAppTableRecordReqBody
}

// 生成请求的New构造器
func NewBatchCreateAppTableRecordReqBuilder() *BatchCreateAppTableRecordReqBuilder {
	builder := &BatchCreateAppTableRecordReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *BatchCreateAppTableRecordReqBuilder) AppToken(appToken string) *BatchCreateAppTableRecordReqBuilder {
	builder.apiReq.PathParams.Set("app_token", fmt.Sprint(appToken))
	return builder
}
func (builder *BatchCreateAppTableRecordReqBuilder) TableId(tableId string) *BatchCreateAppTableRecordReqBuilder {
	builder.apiReq.PathParams.Set("table_id", fmt.Sprint(tableId))
	return builder
}
func (builder *BatchCreateAppTableRecordReqBuilder) UserIdType(userIdType string) *BatchCreateAppTableRecordReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}
func (builder *BatchCreateAppTableRecordReqBuilder) Body(body *BatchCreateAppTableRecordReqBody) *BatchCreateAppTableRecordReqBuilder {
	builder.body = body
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *BatchCreateAppTableRecordReqBuilder) Build() *BatchCreateAppTableRecordReq {
	req := &BatchCreateAppTableRecordReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.body
	return req
}

type BatchCreateAppTableRecordReqBody struct {
	Records []*AppTableRecord `json:"records,omitempty"`
}

type BatchCreateAppTableRecordReq struct {
	apiReq *larkcore.ApiReq
	Body   *BatchCreateAppTableRecordReqBody `body:""`
}

type BatchCreateAppTableRecordRespData struct {
	Records []*AppTableRecord `json:"records,omitempty"`
}

type BatchCreateAppTableRecordResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *BatchCreateAppTableRecordRespData `json:"data"`
}

func (resp *BatchCreateAppTableRecordResp) Success() bool {
	return resp.Code == 0
}

type BatchDeleteAppTableRecordReqBodyBuilder struct {
	records     []string
	recordsFlag bool
}

// 生成body的New构造器
func NewBatchDeleteAppTableRecordReqBodyBuilder() *BatchDeleteAppTableRecordReqBodyBuilder {
	builder := &BatchDeleteAppTableRecordReqBodyBuilder{}
	return builder
}

// 1.2 生成body的builder属性方法
func (builder *BatchDeleteAppTableRecordReqBodyBuilder) Records(records []string) *BatchDeleteAppTableRecordReqBodyBuilder {
	builder.records = records
	builder.recordsFlag = true
	return builder
}

// 1.3 生成body的build方法
func (builder *BatchDeleteAppTableRecordReqBodyBuilder) Build() *BatchDeleteAppTableRecordReqBody {
	req := &BatchDeleteAppTableRecordReqBody{}
	if builder.recordsFlag {
		req.Records = builder.records
	}
	return req
}

// 上传文件path开始
type BatchDeleteAppTableRecordPathReqBodyBuilder struct {
	records     []string
	recordsFlag bool
}

func NewBatchDeleteAppTableRecordPathReqBodyBuilder() *BatchDeleteAppTableRecordPathReqBodyBuilder {
	builder := &BatchDeleteAppTableRecordPathReqBodyBuilder{}
	return builder
}
func (builder *BatchDeleteAppTableRecordPathReqBodyBuilder) Records(records []string) *BatchDeleteAppTableRecordPathReqBodyBuilder {
	builder.records = records
	builder.recordsFlag = true
	return builder
}

func (builder *BatchDeleteAppTableRecordPathReqBodyBuilder) Build() (*BatchDeleteAppTableRecordReqBody, error) {
	req := &BatchDeleteAppTableRecordReqBody{}
	if builder.recordsFlag {
		req.Records = builder.records
	}
	return req, nil
}

// 上传文件path结束

// 1.4 生成请求的builder结构体
type BatchDeleteAppTableRecordReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *BatchDeleteAppTableRecordReqBody
}

// 生成请求的New构造器
func NewBatchDeleteAppTableRecordReqBuilder() *BatchDeleteAppTableRecordReqBuilder {
	builder := &BatchDeleteAppTableRecordReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *BatchDeleteAppTableRecordReqBuilder) AppToken(appToken string) *BatchDeleteAppTableRecordReqBuilder {
	builder.apiReq.PathParams.Set("app_token", fmt.Sprint(appToken))
	return builder
}
func (builder *BatchDeleteAppTableRecordReqBuilder) TableId(tableId string) *BatchDeleteAppTableRecordReqBuilder {
	builder.apiReq.PathParams.Set("table_id", fmt.Sprint(tableId))
	return builder
}
func (builder *BatchDeleteAppTableRecordReqBuilder) Body(body *BatchDeleteAppTableRecordReqBody) *BatchDeleteAppTableRecordReqBuilder {
	builder.body = body
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *BatchDeleteAppTableRecordReqBuilder) Build() *BatchDeleteAppTableRecordReq {
	req := &BatchDeleteAppTableRecordReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.body
	return req
}

type BatchDeleteAppTableRecordReqBody struct {
	Records []string `json:"records,omitempty"`
}

type BatchDeleteAppTableRecordReq struct {
	apiReq *larkcore.ApiReq
	Body   *BatchDeleteAppTableRecordReqBody `body:""`
}

type BatchDeleteAppTableRecordRespData struct {
	Records []*DeleteRecord `json:"records,omitempty"`
}

type BatchDeleteAppTableRecordResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *BatchDeleteAppTableRecordRespData `json:"data"`
}

func (resp *BatchDeleteAppTableRecordResp) Success() bool {
	return resp.Code == 0
}

type BatchUpdateAppTableRecordReqBodyBuilder struct {
	records     []*AppTableRecord
	recordsFlag bool
}

// 生成body的New构造器
func NewBatchUpdateAppTableRecordReqBodyBuilder() *BatchUpdateAppTableRecordReqBodyBuilder {
	builder := &BatchUpdateAppTableRecordReqBodyBuilder{}
	return builder
}

// 1.2 生成body的builder属性方法
func (builder *BatchUpdateAppTableRecordReqBodyBuilder) Records(records []*AppTableRecord) *BatchUpdateAppTableRecordReqBodyBuilder {
	builder.records = records
	builder.recordsFlag = true
	return builder
}

// 1.3 生成body的build方法
func (builder *BatchUpdateAppTableRecordReqBodyBuilder) Build() *BatchUpdateAppTableRecordReqBody {
	req := &BatchUpdateAppTableRecordReqBody{}
	if builder.recordsFlag {
		req.Records = builder.records
	}
	return req
}

// 上传文件path开始
type BatchUpdateAppTableRecordPathReqBodyBuilder struct {
	records     []*AppTableRecord
	recordsFlag bool
}

func NewBatchUpdateAppTableRecordPathReqBodyBuilder() *BatchUpdateAppTableRecordPathReqBodyBuilder {
	builder := &BatchUpdateAppTableRecordPathReqBodyBuilder{}
	return builder
}
func (builder *BatchUpdateAppTableRecordPathReqBodyBuilder) Records(records []*AppTableRecord) *BatchUpdateAppTableRecordPathReqBodyBuilder {
	builder.records = records
	builder.recordsFlag = true
	return builder
}

func (builder *BatchUpdateAppTableRecordPathReqBodyBuilder) Build() (*BatchUpdateAppTableRecordReqBody, error) {
	req := &BatchUpdateAppTableRecordReqBody{}
	if builder.recordsFlag {
		req.Records = builder.records
	}
	return req, nil
}

// 上传文件path结束

// 1.4 生成请求的builder结构体
type BatchUpdateAppTableRecordReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *BatchUpdateAppTableRecordReqBody
}

// 生成请求的New构造器
func NewBatchUpdateAppTableRecordReqBuilder() *BatchUpdateAppTableRecordReqBuilder {
	builder := &BatchUpdateAppTableRecordReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *BatchUpdateAppTableRecordReqBuilder) AppToken(appToken string) *BatchUpdateAppTableRecordReqBuilder {
	builder.apiReq.PathParams.Set("app_token", fmt.Sprint(appToken))
	return builder
}
func (builder *BatchUpdateAppTableRecordReqBuilder) TableId(tableId string) *BatchUpdateAppTableRecordReqBuilder {
	builder.apiReq.PathParams.Set("table_id", fmt.Sprint(tableId))
	return builder
}
func (builder *BatchUpdateAppTableRecordReqBuilder) UserIdType(userIdType string) *BatchUpdateAppTableRecordReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}
func (builder *BatchUpdateAppTableRecordReqBuilder) Body(body *BatchUpdateAppTableRecordReqBody) *BatchUpdateAppTableRecordReqBuilder {
	builder.body = body
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *BatchUpdateAppTableRecordReqBuilder) Build() *BatchUpdateAppTableRecordReq {
	req := &BatchUpdateAppTableRecordReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.body
	return req
}

type BatchUpdateAppTableRecordReqBody struct {
	Records []*AppTableRecord `json:"records,omitempty"`
}

type BatchUpdateAppTableRecordReq struct {
	apiReq *larkcore.ApiReq
	Body   *BatchUpdateAppTableRecordReqBody `body:""`
}

type BatchUpdateAppTableRecordRespData struct {
	Records []*AppTableRecord `json:"records,omitempty"`
}

type BatchUpdateAppTableRecordResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *BatchUpdateAppTableRecordRespData `json:"data"`
}

func (resp *BatchUpdateAppTableRecordResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type CreateAppTableRecordReqBuilder struct {
	apiReq         *larkcore.ApiReq
	appTableRecord *AppTableRecord
}

// 生成请求的New构造器
func NewCreateAppTableRecordReqBuilder() *CreateAppTableRecordReqBuilder {
	builder := &CreateAppTableRecordReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *CreateAppTableRecordReqBuilder) AppToken(appToken string) *CreateAppTableRecordReqBuilder {
	builder.apiReq.PathParams.Set("app_token", fmt.Sprint(appToken))
	return builder
}
func (builder *CreateAppTableRecordReqBuilder) TableId(tableId string) *CreateAppTableRecordReqBuilder {
	builder.apiReq.PathParams.Set("table_id", fmt.Sprint(tableId))
	return builder
}
func (builder *CreateAppTableRecordReqBuilder) UserIdType(userIdType string) *CreateAppTableRecordReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}
func (builder *CreateAppTableRecordReqBuilder) AppTableRecord(appTableRecord *AppTableRecord) *CreateAppTableRecordReqBuilder {
	builder.appTableRecord = appTableRecord
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *CreateAppTableRecordReqBuilder) Build() *CreateAppTableRecordReq {
	req := &CreateAppTableRecordReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.appTableRecord
	return req
}

type CreateAppTableRecordReq struct {
	apiReq         *larkcore.ApiReq
	AppTableRecord *AppTableRecord `body:""`
}

type CreateAppTableRecordRespData struct {
	Record *AppTableRecord `json:"record,omitempty"`
}

type CreateAppTableRecordResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateAppTableRecordRespData `json:"data"`
}

func (resp *CreateAppTableRecordResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type DeleteAppTableRecordReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewDeleteAppTableRecordReqBuilder() *DeleteAppTableRecordReqBuilder {
	builder := &DeleteAppTableRecordReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *DeleteAppTableRecordReqBuilder) AppToken(appToken string) *DeleteAppTableRecordReqBuilder {
	builder.apiReq.PathParams.Set("app_token", fmt.Sprint(appToken))
	return builder
}
func (builder *DeleteAppTableRecordReqBuilder) TableId(tableId string) *DeleteAppTableRecordReqBuilder {
	builder.apiReq.PathParams.Set("table_id", fmt.Sprint(tableId))
	return builder
}
func (builder *DeleteAppTableRecordReqBuilder) RecordId(recordId string) *DeleteAppTableRecordReqBuilder {
	builder.apiReq.PathParams.Set("record_id", fmt.Sprint(recordId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *DeleteAppTableRecordReqBuilder) Build() *DeleteAppTableRecordReq {
	req := &DeleteAppTableRecordReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type DeleteAppTableRecordReq struct {
	apiReq *larkcore.ApiReq
}

type DeleteAppTableRecordRespData struct {
	Deleted  *bool   `json:"deleted,omitempty"`
	RecordId *string `json:"record_id,omitempty"`
}

type DeleteAppTableRecordResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *DeleteAppTableRecordRespData `json:"data"`
}

func (resp *DeleteAppTableRecordResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type GetAppTableRecordReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewGetAppTableRecordReqBuilder() *GetAppTableRecordReqBuilder {
	builder := &GetAppTableRecordReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *GetAppTableRecordReqBuilder) AppToken(appToken string) *GetAppTableRecordReqBuilder {
	builder.apiReq.PathParams.Set("app_token", fmt.Sprint(appToken))
	return builder
}
func (builder *GetAppTableRecordReqBuilder) TableId(tableId string) *GetAppTableRecordReqBuilder {
	builder.apiReq.PathParams.Set("table_id", fmt.Sprint(tableId))
	return builder
}
func (builder *GetAppTableRecordReqBuilder) RecordId(recordId string) *GetAppTableRecordReqBuilder {
	builder.apiReq.PathParams.Set("record_id", fmt.Sprint(recordId))
	return builder
}
func (builder *GetAppTableRecordReqBuilder) TextFieldAsArray(textFieldAsArray bool) *GetAppTableRecordReqBuilder {
	builder.apiReq.QueryParams.Set("text_field_as_array", fmt.Sprint(textFieldAsArray))
	return builder
}
func (builder *GetAppTableRecordReqBuilder) UserIdType(userIdType string) *GetAppTableRecordReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}
func (builder *GetAppTableRecordReqBuilder) DisplayFormulaRef(displayFormulaRef bool) *GetAppTableRecordReqBuilder {
	builder.apiReq.QueryParams.Set("display_formula_ref", fmt.Sprint(displayFormulaRef))
	return builder
}
func (builder *GetAppTableRecordReqBuilder) AutomaticFields(automaticFields bool) *GetAppTableRecordReqBuilder {
	builder.apiReq.QueryParams.Set("automatic_fields", fmt.Sprint(automaticFields))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *GetAppTableRecordReqBuilder) Build() *GetAppTableRecordReq {
	req := &GetAppTableRecordReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type GetAppTableRecordReq struct {
	apiReq *larkcore.ApiReq
}

type GetAppTableRecordRespData struct {
	Record *AppTableRecord `json:"record,omitempty"`
}

type GetAppTableRecordResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetAppTableRecordRespData `json:"data"`
}

func (resp *GetAppTableRecordResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type ListAppTableRecordReqBuilder struct {
	apiReq *larkcore.ApiReq
	limit  int
}

// 生成请求的New构造器
func NewListAppTableRecordReqBuilder() *ListAppTableRecordReqBuilder {
	builder := &ListAppTableRecordReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *ListAppTableRecordReqBuilder) Limit(limit int) *ListAppTableRecordReqBuilder {
	builder.limit = limit
	return builder
}
func (builder *ListAppTableRecordReqBuilder) AppToken(appToken string) *ListAppTableRecordReqBuilder {
	builder.apiReq.PathParams.Set("app_token", fmt.Sprint(appToken))
	return builder
}
func (builder *ListAppTableRecordReqBuilder) TableId(tableId string) *ListAppTableRecordReqBuilder {
	builder.apiReq.PathParams.Set("table_id", fmt.Sprint(tableId))
	return builder
}
func (builder *ListAppTableRecordReqBuilder) ViewId(viewId string) *ListAppTableRecordReqBuilder {
	builder.apiReq.QueryParams.Set("view_id", fmt.Sprint(viewId))
	return builder
}
func (builder *ListAppTableRecordReqBuilder) Filter(filter string) *ListAppTableRecordReqBuilder {
	builder.apiReq.QueryParams.Set("filter", fmt.Sprint(filter))
	return builder
}
func (builder *ListAppTableRecordReqBuilder) Sort(sort string) *ListAppTableRecordReqBuilder {
	builder.apiReq.QueryParams.Set("sort", fmt.Sprint(sort))
	return builder
}
func (builder *ListAppTableRecordReqBuilder) FieldNames(fieldNames string) *ListAppTableRecordReqBuilder {
	builder.apiReq.QueryParams.Set("field_names", fmt.Sprint(fieldNames))
	return builder
}
func (builder *ListAppTableRecordReqBuilder) TextFieldAsArray(textFieldAsArray bool) *ListAppTableRecordReqBuilder {
	builder.apiReq.QueryParams.Set("text_field_as_array", fmt.Sprint(textFieldAsArray))
	return builder
}
func (builder *ListAppTableRecordReqBuilder) UserIdType(userIdType string) *ListAppTableRecordReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}
func (builder *ListAppTableRecordReqBuilder) DisplayFormulaRef(displayFormulaRef bool) *ListAppTableRecordReqBuilder {
	builder.apiReq.QueryParams.Set("display_formula_ref", fmt.Sprint(displayFormulaRef))
	return builder
}
func (builder *ListAppTableRecordReqBuilder) AutomaticFields(automaticFields bool) *ListAppTableRecordReqBuilder {
	builder.apiReq.QueryParams.Set("automatic_fields", fmt.Sprint(automaticFields))
	return builder
}
func (builder *ListAppTableRecordReqBuilder) PageToken(pageToken string) *ListAppTableRecordReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}
func (builder *ListAppTableRecordReqBuilder) PageSize(pageSize int) *ListAppTableRecordReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *ListAppTableRecordReqBuilder) Build() *ListAppTableRecordReq {
	req := &ListAppTableRecordReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListAppTableRecordReq struct {
	apiReq *larkcore.ApiReq
	Limit  int
}

type ListAppTableRecordRespData struct {
	HasMore   *bool             `json:"has_more,omitempty"`
	PageToken *string           `json:"page_token,omitempty"`
	Total     *int              `json:"total,omitempty"`
	Items     []*AppTableRecord `json:"items,omitempty"`
}

type ListAppTableRecordResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListAppTableRecordRespData `json:"data"`
}

func (resp *ListAppTableRecordResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type UpdateAppTableRecordReqBuilder struct {
	apiReq         *larkcore.ApiReq
	appTableRecord *AppTableRecord
}

// 生成请求的New构造器
func NewUpdateAppTableRecordReqBuilder() *UpdateAppTableRecordReqBuilder {
	builder := &UpdateAppTableRecordReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *UpdateAppTableRecordReqBuilder) AppToken(appToken string) *UpdateAppTableRecordReqBuilder {
	builder.apiReq.PathParams.Set("app_token", fmt.Sprint(appToken))
	return builder
}
func (builder *UpdateAppTableRecordReqBuilder) TableId(tableId string) *UpdateAppTableRecordReqBuilder {
	builder.apiReq.PathParams.Set("table_id", fmt.Sprint(tableId))
	return builder
}
func (builder *UpdateAppTableRecordReqBuilder) RecordId(recordId string) *UpdateAppTableRecordReqBuilder {
	builder.apiReq.PathParams.Set("record_id", fmt.Sprint(recordId))
	return builder
}
func (builder *UpdateAppTableRecordReqBuilder) UserIdType(userIdType string) *UpdateAppTableRecordReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}
func (builder *UpdateAppTableRecordReqBuilder) AppTableRecord(appTableRecord *AppTableRecord) *UpdateAppTableRecordReqBuilder {
	builder.appTableRecord = appTableRecord
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *UpdateAppTableRecordReqBuilder) Build() *UpdateAppTableRecordReq {
	req := &UpdateAppTableRecordReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.appTableRecord
	return req
}

type UpdateAppTableRecordReq struct {
	apiReq         *larkcore.ApiReq
	AppTableRecord *AppTableRecord `body:""`
}

type UpdateAppTableRecordRespData struct {
	Record *AppTableRecord `json:"record,omitempty"`
}

type UpdateAppTableRecordResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *UpdateAppTableRecordRespData `json:"data"`
}

func (resp *UpdateAppTableRecordResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type CreateAppTableViewReqBuilder struct {
	apiReq  *larkcore.ApiReq
	reqView *ReqView
}

// 生成请求的New构造器
func NewCreateAppTableViewReqBuilder() *CreateAppTableViewReqBuilder {
	builder := &CreateAppTableViewReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *CreateAppTableViewReqBuilder) AppToken(appToken string) *CreateAppTableViewReqBuilder {
	builder.apiReq.PathParams.Set("app_token", fmt.Sprint(appToken))
	return builder
}
func (builder *CreateAppTableViewReqBuilder) TableId(tableId string) *CreateAppTableViewReqBuilder {
	builder.apiReq.PathParams.Set("table_id", fmt.Sprint(tableId))
	return builder
}
func (builder *CreateAppTableViewReqBuilder) ReqView(reqView *ReqView) *CreateAppTableViewReqBuilder {
	builder.reqView = reqView
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *CreateAppTableViewReqBuilder) Build() *CreateAppTableViewReq {
	req := &CreateAppTableViewReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.reqView
	return req
}

type CreateAppTableViewReq struct {
	apiReq  *larkcore.ApiReq
	ReqView *ReqView `body:""`
}

type CreateAppTableViewRespData struct {
	View *AppTableView `json:"view,omitempty"`
}

type CreateAppTableViewResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateAppTableViewRespData `json:"data"`
}

func (resp *CreateAppTableViewResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type DeleteAppTableViewReqBuilder struct {
	apiReq *larkcore.ApiReq
}

// 生成请求的New构造器
func NewDeleteAppTableViewReqBuilder() *DeleteAppTableViewReqBuilder {
	builder := &DeleteAppTableViewReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *DeleteAppTableViewReqBuilder) AppToken(appToken string) *DeleteAppTableViewReqBuilder {
	builder.apiReq.PathParams.Set("app_token", fmt.Sprint(appToken))
	return builder
}
func (builder *DeleteAppTableViewReqBuilder) TableId(tableId string) *DeleteAppTableViewReqBuilder {
	builder.apiReq.PathParams.Set("table_id", fmt.Sprint(tableId))
	return builder
}
func (builder *DeleteAppTableViewReqBuilder) ViewId(viewId string) *DeleteAppTableViewReqBuilder {
	builder.apiReq.PathParams.Set("view_id", fmt.Sprint(viewId))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *DeleteAppTableViewReqBuilder) Build() *DeleteAppTableViewReq {
	req := &DeleteAppTableViewReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type DeleteAppTableViewReq struct {
	apiReq *larkcore.ApiReq
}

type DeleteAppTableViewResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *DeleteAppTableViewResp) Success() bool {
	return resp.Code == 0
}

// 1.4 生成请求的builder结构体
type ListAppTableViewReqBuilder struct {
	apiReq *larkcore.ApiReq
	limit  int
}

// 生成请求的New构造器
func NewListAppTableViewReqBuilder() *ListAppTableViewReqBuilder {
	builder := &ListAppTableViewReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 1.5 生成请求的builder属性方法
func (builder *ListAppTableViewReqBuilder) Limit(limit int) *ListAppTableViewReqBuilder {
	builder.limit = limit
	return builder
}
func (builder *ListAppTableViewReqBuilder) AppToken(appToken string) *ListAppTableViewReqBuilder {
	builder.apiReq.PathParams.Set("app_token", fmt.Sprint(appToken))
	return builder
}
func (builder *ListAppTableViewReqBuilder) TableId(tableId string) *ListAppTableViewReqBuilder {
	builder.apiReq.PathParams.Set("table_id", fmt.Sprint(tableId))
	return builder
}
func (builder *ListAppTableViewReqBuilder) PageSize(pageSize int) *ListAppTableViewReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}
func (builder *ListAppTableViewReqBuilder) PageToken(pageToken string) *ListAppTableViewReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

// 1.5 生成请求的builder的build方法
func (builder *ListAppTableViewReqBuilder) Build() *ListAppTableViewReq {
	req := &ListAppTableViewReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListAppTableViewReq struct {
	apiReq *larkcore.ApiReq
	Limit  int
}

type ListAppTableViewRespData struct {
	Items     []*AppTableView `json:"items,omitempty"`
	PageToken *string         `json:"page_token,omitempty"`
	HasMore   *bool           `json:"has_more,omitempty"`
	Total     *int            `json:"total,omitempty"`
}

type ListAppTableViewResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListAppTableViewRespData `json:"data"`
}

func (resp *ListAppTableViewResp) Success() bool {
	return resp.Code == 0
}

// 生成消息事件结构体

// 生成请求的builder构造器
// 1.1 生成body的builder结构体
type ListAppRoleIterator struct {
	nextPageToken *string
	items         []*AppRole
	index         int
	limit         int
	ctx           context.Context
	req           *ListAppRoleReq
	listFunc      func(ctx context.Context, req *ListAppRoleReq, options ...larkcore.RequestOptionFunc) (*ListAppRoleResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *ListAppRoleIterator) Next() (bool, *AppRole, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListAppRoleIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

type ListAppRoleMemberIterator struct {
	nextPageToken *string
	items         []*AppRoleMember
	index         int
	limit         int
	ctx           context.Context
	req           *ListAppRoleMemberReq
	listFunc      func(ctx context.Context, req *ListAppRoleMemberReq, options ...larkcore.RequestOptionFunc) (*ListAppRoleMemberResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *ListAppRoleMemberIterator) Next() (bool, *AppRoleMember, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListAppRoleMemberIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

type ListAppTableIterator struct {
	nextPageToken *string
	items         []*AppTable
	index         int
	limit         int
	ctx           context.Context
	req           *ListAppTableReq
	listFunc      func(ctx context.Context, req *ListAppTableReq, options ...larkcore.RequestOptionFunc) (*ListAppTableResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *ListAppTableIterator) Next() (bool, *AppTable, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListAppTableIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

type ListAppTableFieldIterator struct {
	nextPageToken *string
	items         []*AppTableField
	index         int
	limit         int
	ctx           context.Context
	req           *ListAppTableFieldReq
	listFunc      func(ctx context.Context, req *ListAppTableFieldReq, options ...larkcore.RequestOptionFunc) (*ListAppTableFieldResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *ListAppTableFieldIterator) Next() (bool, *AppTableField, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListAppTableFieldIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

type ListAppTableFormFieldIterator struct {
	nextPageToken *string
	items         []*AppTableFormField
	index         int
	limit         int
	ctx           context.Context
	req           *ListAppTableFormFieldReq
	listFunc      func(ctx context.Context, req *ListAppTableFormFieldReq, options ...larkcore.RequestOptionFunc) (*ListAppTableFormFieldResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *ListAppTableFormFieldIterator) Next() (bool, *AppTableFormField, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListAppTableFormFieldIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

type ListAppTableRecordIterator struct {
	nextPageToken *string
	items         []*AppTableRecord
	index         int
	limit         int
	ctx           context.Context
	req           *ListAppTableRecordReq
	listFunc      func(ctx context.Context, req *ListAppTableRecordReq, options ...larkcore.RequestOptionFunc) (*ListAppTableRecordResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *ListAppTableRecordIterator) Next() (bool, *AppTableRecord, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListAppTableRecordIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

type ListAppTableViewIterator struct {
	nextPageToken *string
	items         []*AppTableView
	index         int
	limit         int
	ctx           context.Context
	req           *ListAppTableViewReq
	listFunc      func(ctx context.Context, req *ListAppTableViewReq, options ...larkcore.RequestOptionFunc) (*ListAppTableViewResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *ListAppTableViewIterator) Next() (bool, *AppTableView, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListAppTableViewIterator) NextPageToken() *string {
	return iterator.nextPageToken
}
