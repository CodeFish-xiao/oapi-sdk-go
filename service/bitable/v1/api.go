// Package bitable code generated by oapi sdk gen
package bitable

import (
	"net/http"
	"context"
	
	"github.com/feishu/oapi-sdk-go/core"
)

/**
构建业务域服务实例
**/
func NewService(httpClient *http.Client, config *core.Config) *BitableService {
	b := &BitableService{httpClient:httpClient,config:config}
	b.Apps = &apps{service: b}
	b.AppTables = &appTables{service: b}
	b.AppTableFields = &appTableFields{service: b}
	b.AppTableRecords = &appTableRecords{service: b}
	b.AppTableViews = &appTableViews{service: b}
	return b
}

/**
业务域服务定义
**/
type BitableService struct {
	httpClient *http.Client
	config *core.Config
	Apps *apps
	AppTables *appTables
	AppTableFields *appTableFields
	AppTableRecords *appTableRecords
	AppTableViews *appTableViews
}


/**
资源服务定义
**/
type apps struct {
   service *BitableService
}
type appTables struct {
   service *BitableService
}
type appTableFields struct {
   service *BitableService
}
type appTableRecords struct {
   service *BitableService
}
type appTableViews struct {
   service *BitableService
}
/**
资源服务方法定义
**/
func (a *apps) Get(ctx context.Context, req *GetAppReq, options ...core.RequestOptionFunc) (*GetAppResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,a.service.config, http.MethodGet,
		"/open-apis/bitable/v1/apps/:app_token", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &GetAppResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *appTables) List(ctx context.Context, req *ListAppTableReq, options ...core.RequestOptionFunc) (*ListAppTableResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,a.service.config, http.MethodGet,
		"/open-apis/bitable/v1/apps/:app_token/tables", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &ListAppTableResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
/**如果是分页查询，则添加迭代器函数**/
func (a *appTables) ListAppTable(ctx context.Context, req *ListAppTableReq, options ...core.RequestOptionFunc) (*ListAppTableIterator, error) {
   return &ListAppTableIterator{
	  ctx:	  ctx,
	  req:	  req,
	  listFunc: a.List,
	  options:  options}, nil
}
func (a *appTables) BatchCreate(ctx context.Context, req *BatchCreateAppTableReq, options ...core.RequestOptionFunc) (*BatchCreateAppTableResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,a.service.config, http.MethodPost,
		"/open-apis/bitable/v1/apps/:app_token/tables/batch_create", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &BatchCreateAppTableResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *appTables) Create(ctx context.Context, req *CreateAppTableReq, options ...core.RequestOptionFunc) (*CreateAppTableResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,a.service.config, http.MethodPost,
		"/open-apis/bitable/v1/apps/:app_token/tables", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &CreateAppTableResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *appTables) Delete(ctx context.Context, req *DeleteAppTableReq, options ...core.RequestOptionFunc) (*DeleteAppTableResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,a.service.config, http.MethodDelete,
		"/open-apis/bitable/v1/apps/:app_token/tables/:table_id", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &DeleteAppTableResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *appTables) BatchDelete(ctx context.Context, req *BatchDeleteAppTableReq, options ...core.RequestOptionFunc) (*BatchDeleteAppTableResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,a.service.config, http.MethodPost,
		"/open-apis/bitable/v1/apps/:app_token/tables/batch_delete", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &BatchDeleteAppTableResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *appTableFields) List(ctx context.Context, req *ListAppTableFieldReq, options ...core.RequestOptionFunc) (*ListAppTableFieldResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,a.service.config, http.MethodGet,
		"/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &ListAppTableFieldResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
/**如果是分页查询，则添加迭代器函数**/
func (a *appTableFields) ListAppTableField(ctx context.Context, req *ListAppTableFieldReq, options ...core.RequestOptionFunc) (*ListAppTableFieldIterator, error) {
   return &ListAppTableFieldIterator{
	  ctx:	  ctx,
	  req:	  req,
	  listFunc: a.List,
	  options:  options}, nil
}
func (a *appTableFields) Create(ctx context.Context, req *CreateAppTableFieldReq, options ...core.RequestOptionFunc) (*CreateAppTableFieldResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,a.service.config, http.MethodPost,
		"/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &CreateAppTableFieldResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *appTableFields) Delete(ctx context.Context, req *DeleteAppTableFieldReq, options ...core.RequestOptionFunc) (*DeleteAppTableFieldResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,a.service.config, http.MethodDelete,
		"/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields/:field_id", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &DeleteAppTableFieldResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *appTableFields) Update(ctx context.Context, req *UpdateAppTableFieldReq, options ...core.RequestOptionFunc) (*UpdateAppTableFieldResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,a.service.config, http.MethodPut,
		"/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields/:field_id", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &UpdateAppTableFieldResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *appTableRecords) BatchDelete(ctx context.Context, req *BatchDeleteAppTableRecordReq, options ...core.RequestOptionFunc) (*BatchDeleteAppTableRecordResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,a.service.config, http.MethodPost,
		"/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/batch_delete", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &BatchDeleteAppTableRecordResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *appTableRecords) BatchCreate(ctx context.Context, req *BatchCreateAppTableRecordReq, options ...core.RequestOptionFunc) (*BatchCreateAppTableRecordResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,a.service.config, http.MethodPost,
		"/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/batch_create", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &BatchCreateAppTableRecordResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *appTableRecords) Get(ctx context.Context, req *GetAppTableRecordReq, options ...core.RequestOptionFunc) (*GetAppTableRecordResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,a.service.config, http.MethodGet,
		"/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/:record_id", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &GetAppTableRecordResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *appTableRecords) Update(ctx context.Context, req *UpdateAppTableRecordReq, options ...core.RequestOptionFunc) (*UpdateAppTableRecordResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,a.service.config, http.MethodPut,
		"/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/:record_id", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &UpdateAppTableRecordResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *appTableRecords) Delete(ctx context.Context, req *DeleteAppTableRecordReq, options ...core.RequestOptionFunc) (*DeleteAppTableRecordResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,a.service.config, http.MethodDelete,
		"/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/:record_id", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &DeleteAppTableRecordResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *appTableRecords) List(ctx context.Context, req *ListAppTableRecordReq, options ...core.RequestOptionFunc) (*ListAppTableRecordResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,a.service.config, http.MethodGet,
		"/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &ListAppTableRecordResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
/**如果是分页查询，则添加迭代器函数**/
func (a *appTableRecords) ListAppTableRecord(ctx context.Context, req *ListAppTableRecordReq, options ...core.RequestOptionFunc) (*ListAppTableRecordIterator, error) {
   return &ListAppTableRecordIterator{
	  ctx:	  ctx,
	  req:	  req,
	  listFunc: a.List,
	  options:  options}, nil
}
func (a *appTableRecords) BatchUpdate(ctx context.Context, req *BatchUpdateAppTableRecordReq, options ...core.RequestOptionFunc) (*BatchUpdateAppTableRecordResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,a.service.config, http.MethodPost,
		"/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/batch_update", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &BatchUpdateAppTableRecordResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *appTableRecords) Create(ctx context.Context, req *CreateAppTableRecordReq, options ...core.RequestOptionFunc) (*CreateAppTableRecordResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,a.service.config, http.MethodPost,
		"/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &CreateAppTableRecordResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *appTableViews) Create(ctx context.Context, req *CreateAppTableViewReq, options ...core.RequestOptionFunc) (*CreateAppTableViewResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,a.service.config, http.MethodPost,
		"/open-apis/bitable/v1/apps/:app_token/tables/:table_id/views", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &CreateAppTableViewResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *appTableViews) Delete(ctx context.Context, req *DeleteAppTableViewReq, options ...core.RequestOptionFunc) (*DeleteAppTableViewResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,a.service.config, http.MethodDelete,
		"/open-apis/bitable/v1/apps/:app_token/tables/:table_id/views/:view_id", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &DeleteAppTableViewResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *appTableViews) List(ctx context.Context, req *ListAppTableViewReq, options ...core.RequestOptionFunc) (*ListAppTableViewResp, error) {

	// 发起请求
	rawResp, err := core.SendRequest(ctx,a.service.config, http.MethodGet,
		"/open-apis/bitable/v1/apps/:app_token/tables/:table_id/views", []core.AccessTokenType{core.AccessTokenTypeUser, core.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}

	// 反序列响应结果
	resp := &ListAppTableViewResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
/**如果是分页查询，则添加迭代器函数**/
func (a *appTableViews) ListAppTableView(ctx context.Context, req *ListAppTableViewReq, options ...core.RequestOptionFunc) (*ListAppTableViewIterator, error) {
   return &ListAppTableViewIterator{
	  ctx:	  ctx,
	  req:	  req,
	  listFunc: a.List,
	  options:  options}, nil
}