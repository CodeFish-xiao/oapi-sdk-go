// Package ehr code generated by oapi sdk gen
package ehr

import (
	"io"

	"io/ioutil"

	"context"
	"errors"
	"fmt"

	"github.com/larksuite/oapi-sdk-go/core"
)

/**生成枚举值 **/

const (
	ViewBasic string = "basic"
	ViewFull  string = "full"
)

const (
	UserIdTypeUserId  string = "user_id"
	UserIdTypeUnionId string = "union_id"
	UserIdTypeOpenId  string = "open_id"
)

/**生成数据类型 **/

type Attachment struct {
	Id       *string `json:"id,omitempty"`
	MimeType *string `json:"mime_type,omitempty"`
	Name     *string `json:"name,omitempty"`
	Size     *int64  `json:"size,omitempty"`
}

type ContractCompany struct {
	Id   *int64  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

type CustomFields struct {
	Key   *string `json:"key,omitempty"`
	Label *string `json:"label,omitempty"`
	Type  *string `json:"type,omitempty"`
	Value *string `json:"value,omitempty"`
}

type Education struct {
	Level  *int    `json:"level,omitempty"`
	School *string `json:"school,omitempty"`
	Major  *string `json:"major,omitempty"`
	Degree *int    `json:"degree,omitempty"`
	Start  *string `json:"start,omitempty"`
	End    *string `json:"end,omitempty"`
}

type EmergencyContact struct {
	Name         *string `json:"name,omitempty"`
	Relationship *int    `json:"relationship,omitempty"`
	Mobile       *string `json:"mobile,omitempty"`
}

type Employee struct {
	UserId       *string         `json:"user_id,omitempty"`
	SystemFields *SystemFields   `json:"system_fields,omitempty"`
	CustomFields []*CustomFields `json:"custom_fields,omitempty"`
}

type Job struct {
	Id   *int64  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

type JobLevel struct {
	Id   *int64  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

type Manager struct {
	UserId *string `json:"user_id,omitempty"`
	Name   *string `json:"name,omitempty"`
	EnName *string `json:"en_name,omitempty"`
}

type NativeRegion struct {
	IsoCode *string `json:"iso_code,omitempty"`
	Name    *string `json:"name,omitempty"`
}

type SystemFields struct {
	Name                    *string             `json:"name,omitempty"`
	EnName                  *string             `json:"en_name,omitempty"`
	Email                   *string             `json:"email,omitempty"`
	Mobile                  *string             `json:"mobile,omitempty"`
	DepartmentId            *string             `json:"department_id,omitempty"`
	Manager                 *Manager            `json:"manager,omitempty"`
	Job                     *Job                `json:"job,omitempty"`
	JobLevel                *JobLevel           `json:"job_level,omitempty"`
	WorkLocation            *WorkLocation       `json:"work_location,omitempty"`
	Gender                  *int                `json:"gender,omitempty"`
	Birthday                *string             `json:"birthday,omitempty"`
	NativeRegion            *NativeRegion       `json:"native_region,omitempty"`
	Ethnicity               *int                `json:"ethnicity,omitempty"`
	MaritalStatus           *int                `json:"marital_status,omitempty"`
	PoliticalStatus         *int                `json:"political_status,omitempty"`
	EnteredWorkforceDate    *string             `json:"entered_workforce_date,omitempty"`
	IdType                  *int                `json:"id_type,omitempty"`
	IdNumber                *string             `json:"id_number,omitempty"`
	HukouType               *int                `json:"hukou_type,omitempty"`
	HukouLocation           *string             `json:"hukou_location,omitempty"`
	BankAccountNumber       *string             `json:"bank_account_number,omitempty"`
	BankName                *string             `json:"bank_name,omitempty"`
	SocialSecurityAccount   *string             `json:"social_security_account,omitempty"`
	ProvidentFundAccount    *string             `json:"provident_fund_account,omitempty"`
	EmployeeNo              *string             `json:"employee_no,omitempty"`
	EmployeeType            *int                `json:"employee_type,omitempty"`
	Status                  *int                `json:"status,omitempty"`
	HireDate                *string             `json:"hire_date,omitempty"`
	ProbationMonths         *float64            `json:"probation_months,omitempty"`
	ConversionDate          *string             `json:"conversion_date,omitempty"`
	Application             *int                `json:"application,omitempty"`
	ApplicationStatus       *int                `json:"application_status,omitempty"`
	LastDay                 *string             `json:"last_day,omitempty"`
	DepartureType           *int                `json:"departure_type,omitempty"`
	DepartureReason         *int                `json:"departure_reason,omitempty"`
	DepartureNotes          *string             `json:"departure_notes,omitempty"`
	ContractCompany         *ContractCompany    `json:"contract_company,omitempty"`
	ContractType            *int                `json:"contract_type,omitempty"`
	ContractStartDate       *string             `json:"contract_start_date,omitempty"`
	ContractExpirationDate  *string             `json:"contract_expiration_date,omitempty"`
	ContractSignTimes       *int                `json:"contract_sign_times,omitempty"`
	PersonalEmail           *string             `json:"personal_email,omitempty"`
	FamilyAddress           *string             `json:"family_address,omitempty"`
	PrimaryEmergencyContact *EmergencyContact   `json:"primary_emergency_contact,omitempty"`
	EmergencyContact        []*EmergencyContact `json:"emergency_contact,omitempty"`
	HighestLevelOfEdu       *Education          `json:"highest_level_of_edu,omitempty"`
	Education               []*Education        `json:"education,omitempty"`
	FormerWorkExp           *WorkExperience     `json:"former_work_exp,omitempty"`
	WorkExp                 []*WorkExperience   `json:"work_exp,omitempty"`
	IdPhotoPoSide           []*Attachment       `json:"id_photo_po_side,omitempty"`
	IdPhotoEmSide           []*Attachment       `json:"id_photo_em_side,omitempty"`
	IdPhoto                 []*Attachment       `json:"id_photo,omitempty"`
	DiplomaPhoto            []*Attachment       `json:"diploma_photo,omitempty"`
	GraduationCert          []*Attachment       `json:"graduation_cert,omitempty"`
	CertOfMerit             []*Attachment       `json:"cert_of_merit,omitempty"`
	OffboardingFile         []*Attachment       `json:"offboarding_file,omitempty"`
	CancelOnboardingReason  *int                `json:"cancel_onboarding_reason,omitempty"`
	CancelOnboardingNotes   *string             `json:"cancel_onboarding_notes,omitempty"`
	EmployeeFormStatus      *int                `json:"employee_form_status,omitempty"`
	CreateTime              *int64              `json:"create_time,omitempty"`
	UpdateTime              *int64              `json:"update_time,omitempty"`
}

type WorkExperience struct {
	Company     *string `json:"company,omitempty"`
	Department  *string `json:"department,omitempty"`
	Job         *string `json:"job,omitempty"`
	Start       *string `json:"start,omitempty"`
	End         *string `json:"end,omitempty"`
	Description *string `json:"description,omitempty"`
}

type WorkLocation struct {
	Id   *int64  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

/**生成请求和响应结果类型，以及请求对象的Builder构造器 **/

/*1.4 生成请求的builder结构体*/
type GetAttachmentReqBuilder struct {
	token     string
	tokenFlag bool
}

// 生成请求的New构造器
func NewGetAttachmentReqBuilder() *GetAttachmentReqBuilder {
	builder := &GetAttachmentReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *GetAttachmentReqBuilder) Token(token string) *GetAttachmentReqBuilder {
	builder.token = token
	builder.tokenFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *GetAttachmentReqBuilder) Build() *GetAttachmentReq {
	req := &GetAttachmentReq{}
	if builder.tokenFlag {
		req.Token = builder.token
	}
	return req
}

type GetAttachmentReq struct {
	Token string `path:"token"`
}

type GetAttachmentResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	File     io.Reader `json:"-"`
	FileName string    `json:"-"`
}

func (resp *GetAttachmentResp) Success() bool {
	return resp.Code == 0
}

/**下载api,生成WriteFile方法**/
func (resp *GetAttachmentResp) WriteFile(fileName string) error {
	bs, err := ioutil.ReadAll(resp.File)
	if err != nil {
		return err
	}

	err = ioutil.WriteFile(fileName, bs, 0666)
	if err != nil {
		return err
	}
	return nil
}

/*1.4 生成请求的builder结构体*/
type ListEmployeeReqBuilder struct {
	view           string
	viewFlag       bool
	status         []int
	statusFlag     bool
	type_          []int
	typeFlag       bool
	startTime      int64
	startTimeFlag  bool
	endTime        int64
	endTimeFlag    bool
	userIdType     string
	userIdTypeFlag bool
	userIds        []string
	userIdsFlag    bool
	pageToken      string
	pageTokenFlag  bool
	pageSize       int
	pageSizeFlag   bool
	limit          int
}

// 生成请求的New构造器
func NewListEmployeeReqBuilder() *ListEmployeeReqBuilder {
	builder := &ListEmployeeReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *ListEmployeeReqBuilder) Limit(limit int) *ListEmployeeReqBuilder {
	builder.limit = limit
	return builder
}
func (builder *ListEmployeeReqBuilder) View(view string) *ListEmployeeReqBuilder {
	builder.view = view
	builder.viewFlag = true
	return builder
}
func (builder *ListEmployeeReqBuilder) Status(status []int) *ListEmployeeReqBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}
func (builder *ListEmployeeReqBuilder) Type(type_ []int) *ListEmployeeReqBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}
func (builder *ListEmployeeReqBuilder) StartTime(startTime int64) *ListEmployeeReqBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}
func (builder *ListEmployeeReqBuilder) EndTime(endTime int64) *ListEmployeeReqBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}
func (builder *ListEmployeeReqBuilder) UserIdType(userIdType string) *ListEmployeeReqBuilder {
	builder.userIdType = userIdType
	builder.userIdTypeFlag = true
	return builder
}
func (builder *ListEmployeeReqBuilder) UserIds(userIds []string) *ListEmployeeReqBuilder {
	builder.userIds = userIds
	builder.userIdsFlag = true
	return builder
}
func (builder *ListEmployeeReqBuilder) PageToken(pageToken string) *ListEmployeeReqBuilder {
	builder.pageToken = pageToken
	builder.pageTokenFlag = true
	return builder
}
func (builder *ListEmployeeReqBuilder) PageSize(pageSize int) *ListEmployeeReqBuilder {
	builder.pageSize = pageSize
	builder.pageSizeFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *ListEmployeeReqBuilder) Build() *ListEmployeeReq {
	req := &ListEmployeeReq{}
	req.Limit = builder.limit
	if builder.viewFlag {
		req.View = &builder.view
	}
	if builder.statusFlag {
		req.Status = builder.status
	}
	if builder.typeFlag {
		req.Type = builder.type_
	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime
	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime
	}
	if builder.userIdTypeFlag {
		req.UserIdType = &builder.userIdType
	}
	if builder.userIdsFlag {
		req.UserIds = builder.userIds
	}
	if builder.pageTokenFlag {
		req.PageToken = &builder.pageToken
	}
	if builder.pageSizeFlag {
		req.PageSize = &builder.pageSize
	}
	return req
}

type ListEmployeeReq struct {
	View       *string  `query:"view"`
	Status     []int    `query:"status"`
	Type       []int    `query:"type"`
	StartTime  *int64   `query:"start_time"`
	EndTime    *int64   `query:"end_time"`
	UserIdType *string  `query:"user_id_type"`
	UserIds    []string `query:"user_ids"`
	PageToken  *string  `query:"page_token"`
	PageSize   *int     `query:"page_size"`
	Limit      int
}

type ListEmployeeRespData struct {
	Items     []*Employee `json:"items,omitempty"`
	PageToken *string     `json:"page_token,omitempty"`
	HasMore   *bool       `json:"has_more,omitempty"`
}

type ListEmployeeResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *ListEmployeeRespData `json:"data"`
}

func (resp *ListEmployeeResp) Success() bool {
	return resp.Code == 0
}

/**生成消息事件结构体 **/

/* 生成请求的builder构造器*/
/*1.1 生成body的builder结构体*/
/**如果是分页查询，则添加迭代器定义**/
type ListEmployeeIterator struct {
	nextPageToken *string
	items         []*Employee
	index         int
	limit         int
	ctx           context.Context
	req           *ListEmployeeReq
	listFunc      func(ctx context.Context, req *ListEmployeeReq, options ...core.RequestOptionFunc) (*ListEmployeeResp, error)
	options       []core.RequestOptionFunc
	curlNum       int
}

func (iterator *ListEmployeeIterator) Next() (bool, *Employee, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum > iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.PageToken = iterator.nextPageToken
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListEmployeeIterator) NextPageToken() *string {
	return iterator.nextPageToken
}
