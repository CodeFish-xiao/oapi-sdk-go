// Package vc code generated by oapi sdk gen
package vc

import (
	"context"
	"errors"
	"fmt"

	"github.com/larksuite/oapi-sdk-go/event"

	"github.com/larksuite/oapi-sdk-go/core"
)

/**生成枚举值 **/

const (
	UserIdTypeUserId  string = "user_id"
	UserIdTypeUnionId string = "union_id"
	UserIdTypeOpenId  string = "open_id"
)

const (
	TopUserOrderByMeetingCount    string = "1"
	TopUserOrderByMeetingDuration string = "2"
)

const (
	NodeScopeTenant          string = "1"
	NodeScopeCountryDistrict string = "2"
	NodeScopeCity            string = "3"
	NodeScopeBuilding        string = "4"
	NodeScopeFloor           string = "5"
	NodeScopeRoom            string = "6"
)

/**生成数据类型 **/

type Material struct {
	Name           *string `json:"name,omitempty"`
	FileToken      *string `json:"file_token,omitempty"`
	FileSize       *int    `json:"file_size,omitempty"`
	DeviceType     *int    `json:"device_type,omitempty"`
	MaterialType   *int    `json:"material_type,omitempty"`
	ReviewResult   *int    `json:"review_result,omitempty"`
	MaterialSource *int    `json:"material_source,omitempty"`
}

type MaterialDeleteResult struct {
	FileToken *string `json:"file_token,omitempty"`
	Result    *int    `json:"result,omitempty"`
}

type MaterialReviewResult struct {
	FileToken *string `json:"file_token,omitempty"`
	Result    *int    `json:"result,omitempty"`
}

type MaterialUploadResult struct {
	FileToken *string `json:"file_token,omitempty"`
	Result    *int    `json:"result,omitempty"`
}

type Meeting struct {
	Id                          *int64                `json:"id,omitempty,string"`
	Topic                       *string               `json:"topic,omitempty"`
	Url                         *string               `json:"url,omitempty"`
	MeetingNo                   *string               `json:"meeting_no,omitempty"`
	CreateTime                  *int64                `json:"create_time,omitempty,string"`
	StartTime                   *int64                `json:"start_time,omitempty,string"`
	EndTime                     *int64                `json:"end_time,omitempty,string"`
	HostUser                    *MeetingUser          `json:"host_user,omitempty"`
	Status                      *int                  `json:"status,omitempty"`
	ParticipantCount            *int64                `json:"participant_count,omitempty,string"`
	ParticipantCountAccumulated *int64                `json:"participant_count_accumulated,omitempty,string"`
	Participants                []*MeetingParticipant `json:"participants,omitempty"`
	Ability                     *MeetingAbility       `json:"ability,omitempty"`
}

type MeetingRecording struct {
	Id        *int64  `json:"id,omitempty,string"`
	MeetingId *int64  `json:"meeting_id,omitempty,string"`
	Url       *string `json:"url,omitempty"`
	Duration  *int64  `json:"duration,omitempty,string"`
}

type MeetingAbility struct {
	UseVideo        *bool `json:"use_video,omitempty"`
	UseAudio        *bool `json:"use_audio,omitempty"`
	UseShareScreen  *bool `json:"use_share_screen,omitempty"`
	UseFollowScreen *bool `json:"use_follow_screen,omitempty"`
	UseRecording    *bool `json:"use_recording,omitempty"`
	UsePstn         *bool `json:"use_pstn,omitempty"`
}

type MeetingEventMeeting struct {
	Id        *int64            `json:"id,omitempty,string"`
	Topic     *string           `json:"topic,omitempty"`
	MeetingNo *string           `json:"meeting_no,omitempty"`
	StartTime *int64            `json:"start_time,omitempty,string"`
	EndTime   *int64            `json:"end_time,omitempty,string"`
	HostUser  *MeetingEventUser `json:"host_user,omitempty"`
	Owner     *MeetingEventUser `json:"owner,omitempty"`
}

type MeetingEventUser struct {
	Id       *UserId `json:"id,omitempty"`
	UserRole *int    `json:"user_role,omitempty"`
	UserType *int    `json:"user_type,omitempty"`
}

type MeetingInviteStatus struct {
	Id       *string `json:"id,omitempty"`
	UserType *int    `json:"user_type,omitempty"`
	Status   *int    `json:"status,omitempty"`
}

type MeetingParticipant struct {
	Id                *string `json:"id,omitempty"`
	FirstJoinTime     *int64  `json:"first_join_time,omitempty,string"`
	FinalLeaveTime    *int64  `json:"final_leave_time,omitempty,string"`
	InMeetingDuration *int64  `json:"in_meeting_duration,omitempty,string"`
	UserType          *int    `json:"user_type,omitempty"`
	IsHost            *bool   `json:"is_host,omitempty"`
	IsCohost          *bool   `json:"is_cohost,omitempty"`
	IsExternal        *bool   `json:"is_external,omitempty"`
	Status            *int    `json:"status,omitempty"`
}

type MeetingParticipantResult struct {
	Id       *string `json:"id,omitempty"`
	UserType *int    `json:"user_type,omitempty"`
	Result   *int    `json:"result,omitempty"`
}

type MeetingUser struct {
	Id       *string `json:"id,omitempty"`
	UserType *int    `json:"user_type,omitempty"`
}

type PstnSipInfo struct {
	Nickname    *string `json:"nickname,omitempty"`
	MainAddress *string `json:"main_address,omitempty"`
}

type RecordingPermissionObject struct {
	Id         *string `json:"id,omitempty"`
	Type       *int    `json:"type,omitempty"`
	Permission *int    `json:"permission,omitempty"`
}

type Report struct {
	TotalMeetingCount     *int64                `json:"total_meeting_count,omitempty,string"`
	TotalMeetingDuration  *int64                `json:"total_meeting_duration,omitempty,string"`
	TotalParticipantCount *int64                `json:"total_participant_count,omitempty,string"`
	DailyReport           []*ReportMeetingDaily `json:"daily_report,omitempty"`
}

type ReportMeetingDaily struct {
	Date             *int64 `json:"date,omitempty,string"`
	MeetingCount     *int64 `json:"meeting_count,omitempty,string"`
	MeetingDuration  *int64 `json:"meeting_duration,omitempty,string"`
	ParticipantCount *int64 `json:"participant_count,omitempty,string"`
}

type ReportTopUser struct {
	Id              *int64  `json:"id,omitempty,string"`
	Name            *string `json:"name,omitempty"`
	UserType        *int    `json:"user_type,omitempty"`
	MeetingCount    *int64  `json:"meeting_count,omitempty,string"`
	MeetingDuration *int64  `json:"meeting_duration,omitempty,string"`
}

type Reserve struct {
	Id              *int64                 `json:"id,omitempty,string"`
	MeetingNo       *string                `json:"meeting_no,omitempty"`
	Url             *string                `json:"url,omitempty"`
	AppLink         *string                `json:"app_link,omitempty"`
	LiveLink        *string                `json:"live_link,omitempty"`
	EndTime         *int64                 `json:"end_time,omitempty,string"`
	ExpireStatus    *int                   `json:"expire_status,omitempty"`
	ReserveUserId   *string                `json:"reserve_user_id,omitempty"`
	MeetingSettings *ReserveMeetingSetting `json:"meeting_settings,omitempty"`
}

type ReserveActionPermission struct {
	Permission         *int                        `json:"permission,omitempty"`
	PermissionCheckers []*ReservePermissionChecker `json:"permission_checkers,omitempty"`
}

type ReserveCallSetting struct {
	Callee *ReserveCallee `json:"callee,omitempty"`
}

type ReserveCallee struct {
	Id          *string      `json:"id,omitempty"`
	UserType    *int         `json:"user_type,omitempty"`
	PstnSipInfo *PstnSipInfo `json:"pstn_sip_info,omitempty"`
}

type ReserveMeetingSetting struct {
	Topic              *string                    `json:"topic,omitempty"`
	ActionPermissions  []*ReserveActionPermission `json:"action_permissions,omitempty"`
	MeetingInitialType *int                       `json:"meeting_initial_type,omitempty"`
	CallSetting        *ReserveCallSetting        `json:"call_setting,omitempty"`
}

type ReservePermissionChecker struct {
	CheckField *int     `json:"check_field,omitempty"`
	CheckMode  *int     `json:"check_mode,omitempty"`
	CheckList  []string `json:"check_list,omitempty"`
}

type RoomConfig struct {
	RoomBackground        *string             `json:"room_background,omitempty"`
	DisplayBackground     *string             `json:"display_background,omitempty"`
	DigitalSignage        *RoomDigitalSignage `json:"digital_signage,omitempty"`
	RoomBoxDigitalSignage *RoomDigitalSignage `json:"room_box_digital_signage,omitempty"`
}

type RoomDigitalSignage struct {
	Enable       *bool                         `json:"enable,omitempty"`
	Mute         *bool                         `json:"mute,omitempty"`
	StartDisplay *int                          `json:"start_display,omitempty"`
	StopDisplay  *int                          `json:"stop_display,omitempty"`
	Materials    []*RoomDigitalSignageMaterial `json:"materials,omitempty"`
}

type RoomDigitalSignageMaterial struct {
	Id           *string `json:"id,omitempty"`
	Name         *string `json:"name,omitempty"`
	MaterialType *int    `json:"material_type,omitempty"`
	Url          *string `json:"url,omitempty"`
	Duration     *int    `json:"duration,omitempty"`
	Cover        *string `json:"cover,omitempty"`
	Md5          *string `json:"md5,omitempty"`
	Vid          *string `json:"vid,omitempty"`
	Size         *string `json:"size,omitempty"`
}

type UserId struct {
	UserId  *string `json:"user_id,omitempty"`
	OpenId  *string `json:"open_id,omitempty"`
	UnionId *string `json:"union_id,omitempty"`
}

/**生成请求和响应结果类型，以及请求对象的Builder构造器 **/

/*1.4 生成请求的builder结构体*/
type EndMeetingReqBuilder struct {
	meetingId     int64
	meetingIdFlag bool
}

// 生成请求的New构造器
func NewEndMeetingReqBuilder() *EndMeetingReqBuilder {
	builder := &EndMeetingReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *EndMeetingReqBuilder) MeetingId(meetingId int64) *EndMeetingReqBuilder {
	builder.meetingId = meetingId
	builder.meetingIdFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *EndMeetingReqBuilder) Build() *EndMeetingReq {
	req := &EndMeetingReq{}
	if builder.meetingIdFlag {
		req.MeetingId = builder.meetingId
	}
	return req
}

type EndMeetingReq struct {
	MeetingId int64 `path:"meeting_id"`
}

type EndMeetingResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *EndMeetingResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type GetMeetingReqBuilder struct {
	meetingId              int64
	meetingIdFlag          bool
	withParticipants       bool
	withParticipantsFlag   bool
	withMeetingAbility     bool
	withMeetingAbilityFlag bool
	userIdType             string
	userIdTypeFlag         bool
}

// 生成请求的New构造器
func NewGetMeetingReqBuilder() *GetMeetingReqBuilder {
	builder := &GetMeetingReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *GetMeetingReqBuilder) MeetingId(meetingId int64) *GetMeetingReqBuilder {
	builder.meetingId = meetingId
	builder.meetingIdFlag = true
	return builder
}
func (builder *GetMeetingReqBuilder) WithParticipants(withParticipants bool) *GetMeetingReqBuilder {
	builder.withParticipants = withParticipants
	builder.withParticipantsFlag = true
	return builder
}
func (builder *GetMeetingReqBuilder) WithMeetingAbility(withMeetingAbility bool) *GetMeetingReqBuilder {
	builder.withMeetingAbility = withMeetingAbility
	builder.withMeetingAbilityFlag = true
	return builder
}
func (builder *GetMeetingReqBuilder) UserIdType(userIdType string) *GetMeetingReqBuilder {
	builder.userIdType = userIdType
	builder.userIdTypeFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *GetMeetingReqBuilder) Build() *GetMeetingReq {
	req := &GetMeetingReq{}
	if builder.meetingIdFlag {
		req.MeetingId = builder.meetingId
	}
	if builder.withParticipantsFlag {
		req.WithParticipants = &builder.withParticipants
	}
	if builder.withMeetingAbilityFlag {
		req.WithMeetingAbility = &builder.withMeetingAbility
	}
	if builder.userIdTypeFlag {
		req.UserIdType = &builder.userIdType
	}
	return req
}

type GetMeetingReq struct {
	MeetingId          int64   `path:"meeting_id"`
	WithParticipants   *bool   `query:"with_participants"`
	WithMeetingAbility *bool   `query:"with_meeting_ability"`
	UserIdType         *string `query:"user_id_type"`
}

type GetMeetingRespData struct {
	Meeting *Meeting `json:"meeting,omitempty"`
}

type GetMeetingResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *GetMeetingRespData `json:"data"`
}

func (resp *GetMeetingResp) Success() bool {
	return resp.Code == 0
}

type InviteMeetingReqBodyBuilder struct {
	invitees     []*MeetingUser
	inviteesFlag bool
}

// 生成body的New构造器
func NewInviteMeetingReqBodyBuilder() *InviteMeetingReqBodyBuilder {
	builder := &InviteMeetingReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *InviteMeetingReqBodyBuilder) Invitees(invitees []*MeetingUser) *InviteMeetingReqBodyBuilder {
	builder.invitees = invitees
	builder.inviteesFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *InviteMeetingReqBodyBuilder) Build() *InviteMeetingReqBody {
	req := &InviteMeetingReqBody{}
	if builder.inviteesFlag {
		req.Invitees = builder.invitees

	}
	return req
}

/**上传文件path开始**/
type InviteMeetingPathReqBodyBuilder struct {
	invitees     []*MeetingUser
	inviteesFlag bool
}

func NewInviteMeetingPathReqBodyBuilder() *InviteMeetingPathReqBodyBuilder {
	builder := &InviteMeetingPathReqBodyBuilder{}
	return builder
}
func (builder *InviteMeetingPathReqBodyBuilder) Invitees(invitees []*MeetingUser) *InviteMeetingPathReqBodyBuilder {
	builder.invitees = invitees
	builder.inviteesFlag = true
	return builder
}

func (builder *InviteMeetingPathReqBodyBuilder) Build() (*InviteMeetingReqBody, error) {
	req := &InviteMeetingReqBody{}
	if builder.inviteesFlag {
		req.Invitees = builder.invitees
	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type InviteMeetingReqBuilder struct {
	meetingId      int64
	meetingIdFlag  bool
	userIdType     string
	userIdTypeFlag bool
	body           *InviteMeetingReqBody
	bodyFlag       bool
}

// 生成请求的New构造器
func NewInviteMeetingReqBuilder() *InviteMeetingReqBuilder {
	builder := &InviteMeetingReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *InviteMeetingReqBuilder) MeetingId(meetingId int64) *InviteMeetingReqBuilder {
	builder.meetingId = meetingId
	builder.meetingIdFlag = true
	return builder
}
func (builder *InviteMeetingReqBuilder) UserIdType(userIdType string) *InviteMeetingReqBuilder {
	builder.userIdType = userIdType
	builder.userIdTypeFlag = true
	return builder
}
func (builder *InviteMeetingReqBuilder) Body(body *InviteMeetingReqBody) *InviteMeetingReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *InviteMeetingReqBuilder) Build() *InviteMeetingReq {
	req := &InviteMeetingReq{}
	if builder.meetingIdFlag {
		req.MeetingId = builder.meetingId
	}
	if builder.userIdTypeFlag {
		req.UserIdType = &builder.userIdType
	}
	if builder.bodyFlag {
		req.Body = builder.body
	}
	return req
}

type InviteMeetingReqBody struct {
	Invitees []*MeetingUser `json:"invitees,omitempty"`
}

type InviteMeetingReq struct {
	MeetingId  int64                 `path:"meeting_id"`
	UserIdType *string               `query:"user_id_type"`
	Body       *InviteMeetingReqBody `body:""`
}

type InviteMeetingRespData struct {
	InviteResults []*MeetingInviteStatus `json:"invite_results,omitempty"`
}

type InviteMeetingResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *InviteMeetingRespData `json:"data"`
}

func (resp *InviteMeetingResp) Success() bool {
	return resp.Code == 0
}

type KickoutMeetingReqBodyBuilder struct {
	kickoutUsers     []*MeetingUser
	kickoutUsersFlag bool
}

// 生成body的New构造器
func NewKickoutMeetingReqBodyBuilder() *KickoutMeetingReqBodyBuilder {
	builder := &KickoutMeetingReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *KickoutMeetingReqBodyBuilder) KickoutUsers(kickoutUsers []*MeetingUser) *KickoutMeetingReqBodyBuilder {
	builder.kickoutUsers = kickoutUsers
	builder.kickoutUsersFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *KickoutMeetingReqBodyBuilder) Build() *KickoutMeetingReqBody {
	req := &KickoutMeetingReqBody{}
	if builder.kickoutUsersFlag {
		req.KickoutUsers = builder.kickoutUsers

	}
	return req
}

/**上传文件path开始**/
type KickoutMeetingPathReqBodyBuilder struct {
	kickoutUsers     []*MeetingUser
	kickoutUsersFlag bool
}

func NewKickoutMeetingPathReqBodyBuilder() *KickoutMeetingPathReqBodyBuilder {
	builder := &KickoutMeetingPathReqBodyBuilder{}
	return builder
}
func (builder *KickoutMeetingPathReqBodyBuilder) KickoutUsers(kickoutUsers []*MeetingUser) *KickoutMeetingPathReqBodyBuilder {
	builder.kickoutUsers = kickoutUsers
	builder.kickoutUsersFlag = true
	return builder
}

func (builder *KickoutMeetingPathReqBodyBuilder) Build() (*KickoutMeetingReqBody, error) {
	req := &KickoutMeetingReqBody{}
	if builder.kickoutUsersFlag {
		req.KickoutUsers = builder.kickoutUsers
	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type KickoutMeetingReqBuilder struct {
	meetingId      int64
	meetingIdFlag  bool
	userIdType     string
	userIdTypeFlag bool
	body           *KickoutMeetingReqBody
	bodyFlag       bool
}

// 生成请求的New构造器
func NewKickoutMeetingReqBuilder() *KickoutMeetingReqBuilder {
	builder := &KickoutMeetingReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *KickoutMeetingReqBuilder) MeetingId(meetingId int64) *KickoutMeetingReqBuilder {
	builder.meetingId = meetingId
	builder.meetingIdFlag = true
	return builder
}
func (builder *KickoutMeetingReqBuilder) UserIdType(userIdType string) *KickoutMeetingReqBuilder {
	builder.userIdType = userIdType
	builder.userIdTypeFlag = true
	return builder
}
func (builder *KickoutMeetingReqBuilder) Body(body *KickoutMeetingReqBody) *KickoutMeetingReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *KickoutMeetingReqBuilder) Build() *KickoutMeetingReq {
	req := &KickoutMeetingReq{}
	if builder.meetingIdFlag {
		req.MeetingId = builder.meetingId
	}
	if builder.userIdTypeFlag {
		req.UserIdType = &builder.userIdType
	}
	if builder.bodyFlag {
		req.Body = builder.body
	}
	return req
}

type KickoutMeetingReqBody struct {
	KickoutUsers []*MeetingUser `json:"kickout_users,omitempty"`
}

type KickoutMeetingReq struct {
	MeetingId  int64                  `path:"meeting_id"`
	UserIdType *string                `query:"user_id_type"`
	Body       *KickoutMeetingReqBody `body:""`
}

type KickoutMeetingRespData struct {
	KickoutResults []*MeetingParticipantResult `json:"kickout_results,omitempty"`
}

type KickoutMeetingResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *KickoutMeetingRespData `json:"data"`
}

func (resp *KickoutMeetingResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type ListByNoMeetingReqBuilder struct {
	meetingNo     string
	meetingNoFlag bool
	startTime     int64
	startTimeFlag bool
	endTime       int64
	endTimeFlag   bool
	pageToken     string
	pageTokenFlag bool
	pageSize      int
	pageSizeFlag  bool
	limit         int
}

// 生成请求的New构造器
func NewListByNoMeetingReqBuilder() *ListByNoMeetingReqBuilder {
	builder := &ListByNoMeetingReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *ListByNoMeetingReqBuilder) Limit(limit int) *ListByNoMeetingReqBuilder {
	builder.limit = limit
	return builder
}
func (builder *ListByNoMeetingReqBuilder) MeetingNo(meetingNo string) *ListByNoMeetingReqBuilder {
	builder.meetingNo = meetingNo
	builder.meetingNoFlag = true
	return builder
}
func (builder *ListByNoMeetingReqBuilder) StartTime(startTime int64) *ListByNoMeetingReqBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}
func (builder *ListByNoMeetingReqBuilder) EndTime(endTime int64) *ListByNoMeetingReqBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}
func (builder *ListByNoMeetingReqBuilder) PageToken(pageToken string) *ListByNoMeetingReqBuilder {
	builder.pageToken = pageToken
	builder.pageTokenFlag = true
	return builder
}
func (builder *ListByNoMeetingReqBuilder) PageSize(pageSize int) *ListByNoMeetingReqBuilder {
	builder.pageSize = pageSize
	builder.pageSizeFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *ListByNoMeetingReqBuilder) Build() *ListByNoMeetingReq {
	req := &ListByNoMeetingReq{}
	req.Limit = builder.limit
	if builder.meetingNoFlag {
		req.MeetingNo = &builder.meetingNo
	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime
	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime
	}
	if builder.pageTokenFlag {
		req.PageToken = &builder.pageToken
	}
	if builder.pageSizeFlag {
		req.PageSize = &builder.pageSize
	}
	return req
}

type ListByNoMeetingReq struct {
	MeetingNo *string `query:"meeting_no"`
	StartTime *int64  `query:"start_time"`
	EndTime   *int64  `query:"end_time"`
	PageToken *string `query:"page_token"`
	PageSize  *int    `query:"page_size"`
	Limit     int
}

type ListByNoMeetingRespData struct {
	HasMore       *bool      `json:"has_more,omitempty"`
	PageToken     *string    `json:"page_token,omitempty"`
	MeetingBriefs []*Meeting `json:"meeting_briefs,omitempty"`
}

type ListByNoMeetingResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *ListByNoMeetingRespData `json:"data"`
}

func (resp *ListByNoMeetingResp) Success() bool {
	return resp.Code == 0
}

type SetHostMeetingReqBodyBuilder struct {
	hostUser        *MeetingUser
	hostUserFlag    bool
	oldHostUser     *MeetingUser
	oldHostUserFlag bool
}

// 生成body的New构造器
func NewSetHostMeetingReqBodyBuilder() *SetHostMeetingReqBodyBuilder {
	builder := &SetHostMeetingReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *SetHostMeetingReqBodyBuilder) HostUser(hostUser *MeetingUser) *SetHostMeetingReqBodyBuilder {
	builder.hostUser = hostUser
	builder.hostUserFlag = true
	return builder
}
func (builder *SetHostMeetingReqBodyBuilder) OldHostUser(oldHostUser *MeetingUser) *SetHostMeetingReqBodyBuilder {
	builder.oldHostUser = oldHostUser
	builder.oldHostUserFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *SetHostMeetingReqBodyBuilder) Build() *SetHostMeetingReqBody {
	req := &SetHostMeetingReqBody{}
	if builder.hostUserFlag {
		req.HostUser = builder.hostUser

	}
	if builder.oldHostUserFlag {
		req.OldHostUser = builder.oldHostUser

	}
	return req
}

/**上传文件path开始**/
type SetHostMeetingPathReqBodyBuilder struct {
	hostUser        *MeetingUser
	hostUserFlag    bool
	oldHostUser     *MeetingUser
	oldHostUserFlag bool
}

func NewSetHostMeetingPathReqBodyBuilder() *SetHostMeetingPathReqBodyBuilder {
	builder := &SetHostMeetingPathReqBodyBuilder{}
	return builder
}
func (builder *SetHostMeetingPathReqBodyBuilder) HostUser(hostUser *MeetingUser) *SetHostMeetingPathReqBodyBuilder {
	builder.hostUser = hostUser
	builder.hostUserFlag = true
	return builder
}
func (builder *SetHostMeetingPathReqBodyBuilder) OldHostUser(oldHostUser *MeetingUser) *SetHostMeetingPathReqBodyBuilder {
	builder.oldHostUser = oldHostUser
	builder.oldHostUserFlag = true
	return builder
}

func (builder *SetHostMeetingPathReqBodyBuilder) Build() (*SetHostMeetingReqBody, error) {
	req := &SetHostMeetingReqBody{}
	if builder.hostUserFlag {
		req.HostUser = builder.hostUser
	}
	if builder.oldHostUserFlag {
		req.OldHostUser = builder.oldHostUser
	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type SetHostMeetingReqBuilder struct {
	meetingId      int64
	meetingIdFlag  bool
	userIdType     string
	userIdTypeFlag bool
	body           *SetHostMeetingReqBody
	bodyFlag       bool
}

// 生成请求的New构造器
func NewSetHostMeetingReqBuilder() *SetHostMeetingReqBuilder {
	builder := &SetHostMeetingReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *SetHostMeetingReqBuilder) MeetingId(meetingId int64) *SetHostMeetingReqBuilder {
	builder.meetingId = meetingId
	builder.meetingIdFlag = true
	return builder
}
func (builder *SetHostMeetingReqBuilder) UserIdType(userIdType string) *SetHostMeetingReqBuilder {
	builder.userIdType = userIdType
	builder.userIdTypeFlag = true
	return builder
}
func (builder *SetHostMeetingReqBuilder) Body(body *SetHostMeetingReqBody) *SetHostMeetingReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *SetHostMeetingReqBuilder) Build() *SetHostMeetingReq {
	req := &SetHostMeetingReq{}
	if builder.meetingIdFlag {
		req.MeetingId = builder.meetingId
	}
	if builder.userIdTypeFlag {
		req.UserIdType = &builder.userIdType
	}
	if builder.bodyFlag {
		req.Body = builder.body
	}
	return req
}

type SetHostMeetingReqBody struct {
	HostUser    *MeetingUser `json:"host_user,omitempty"`
	OldHostUser *MeetingUser `json:"old_host_user,omitempty"`
}

type SetHostMeetingReq struct {
	MeetingId  int64                  `path:"meeting_id"`
	UserIdType *string                `query:"user_id_type"`
	Body       *SetHostMeetingReqBody `body:""`
}

type SetHostMeetingRespData struct {
	HostUser *MeetingUser `json:"host_user,omitempty"`
}

type SetHostMeetingResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *SetHostMeetingRespData `json:"data"`
}

func (resp *SetHostMeetingResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type GetMeetingRecordingReqBuilder struct {
	meetingId     int64
	meetingIdFlag bool
}

// 生成请求的New构造器
func NewGetMeetingRecordingReqBuilder() *GetMeetingRecordingReqBuilder {
	builder := &GetMeetingRecordingReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *GetMeetingRecordingReqBuilder) MeetingId(meetingId int64) *GetMeetingRecordingReqBuilder {
	builder.meetingId = meetingId
	builder.meetingIdFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *GetMeetingRecordingReqBuilder) Build() *GetMeetingRecordingReq {
	req := &GetMeetingRecordingReq{}
	if builder.meetingIdFlag {
		req.MeetingId = builder.meetingId
	}
	return req
}

type GetMeetingRecordingReq struct {
	MeetingId int64 `path:"meeting_id"`
}

type GetMeetingRecordingRespData struct {
	Recording *MeetingRecording `json:"recording,omitempty"`
}

type GetMeetingRecordingResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *GetMeetingRecordingRespData `json:"data"`
}

func (resp *GetMeetingRecordingResp) Success() bool {
	return resp.Code == 0
}

type SetPermissionMeetingRecordingReqBodyBuilder struct {
	permissionObjects     []*RecordingPermissionObject
	permissionObjectsFlag bool
}

// 生成body的New构造器
func NewSetPermissionMeetingRecordingReqBodyBuilder() *SetPermissionMeetingRecordingReqBodyBuilder {
	builder := &SetPermissionMeetingRecordingReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *SetPermissionMeetingRecordingReqBodyBuilder) PermissionObjects(permissionObjects []*RecordingPermissionObject) *SetPermissionMeetingRecordingReqBodyBuilder {
	builder.permissionObjects = permissionObjects
	builder.permissionObjectsFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *SetPermissionMeetingRecordingReqBodyBuilder) Build() *SetPermissionMeetingRecordingReqBody {
	req := &SetPermissionMeetingRecordingReqBody{}
	if builder.permissionObjectsFlag {
		req.PermissionObjects = builder.permissionObjects

	}
	return req
}

/**上传文件path开始**/
type SetPermissionMeetingRecordingPathReqBodyBuilder struct {
	permissionObjects     []*RecordingPermissionObject
	permissionObjectsFlag bool
}

func NewSetPermissionMeetingRecordingPathReqBodyBuilder() *SetPermissionMeetingRecordingPathReqBodyBuilder {
	builder := &SetPermissionMeetingRecordingPathReqBodyBuilder{}
	return builder
}
func (builder *SetPermissionMeetingRecordingPathReqBodyBuilder) PermissionObjects(permissionObjects []*RecordingPermissionObject) *SetPermissionMeetingRecordingPathReqBodyBuilder {
	builder.permissionObjects = permissionObjects
	builder.permissionObjectsFlag = true
	return builder
}

func (builder *SetPermissionMeetingRecordingPathReqBodyBuilder) Build() (*SetPermissionMeetingRecordingReqBody, error) {
	req := &SetPermissionMeetingRecordingReqBody{}
	if builder.permissionObjectsFlag {
		req.PermissionObjects = builder.permissionObjects
	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type SetPermissionMeetingRecordingReqBuilder struct {
	meetingId      int64
	meetingIdFlag  bool
	userIdType     string
	userIdTypeFlag bool
	body           *SetPermissionMeetingRecordingReqBody
	bodyFlag       bool
}

// 生成请求的New构造器
func NewSetPermissionMeetingRecordingReqBuilder() *SetPermissionMeetingRecordingReqBuilder {
	builder := &SetPermissionMeetingRecordingReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *SetPermissionMeetingRecordingReqBuilder) MeetingId(meetingId int64) *SetPermissionMeetingRecordingReqBuilder {
	builder.meetingId = meetingId
	builder.meetingIdFlag = true
	return builder
}
func (builder *SetPermissionMeetingRecordingReqBuilder) UserIdType(userIdType string) *SetPermissionMeetingRecordingReqBuilder {
	builder.userIdType = userIdType
	builder.userIdTypeFlag = true
	return builder
}
func (builder *SetPermissionMeetingRecordingReqBuilder) Body(body *SetPermissionMeetingRecordingReqBody) *SetPermissionMeetingRecordingReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *SetPermissionMeetingRecordingReqBuilder) Build() *SetPermissionMeetingRecordingReq {
	req := &SetPermissionMeetingRecordingReq{}
	if builder.meetingIdFlag {
		req.MeetingId = builder.meetingId
	}
	if builder.userIdTypeFlag {
		req.UserIdType = &builder.userIdType
	}
	if builder.bodyFlag {
		req.Body = builder.body
	}
	return req
}

type SetPermissionMeetingRecordingReqBody struct {
	PermissionObjects []*RecordingPermissionObject `json:"permission_objects,omitempty"`
}

type SetPermissionMeetingRecordingReq struct {
	MeetingId  int64                                 `path:"meeting_id"`
	UserIdType *string                               `query:"user_id_type"`
	Body       *SetPermissionMeetingRecordingReqBody `body:""`
}

type SetPermissionMeetingRecordingResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *SetPermissionMeetingRecordingResp) Success() bool {
	return resp.Code == 0
}

type StartMeetingRecordingReqBodyBuilder struct {
	timezone     int
	timezoneFlag bool
}

// 生成body的New构造器
func NewStartMeetingRecordingReqBodyBuilder() *StartMeetingRecordingReqBodyBuilder {
	builder := &StartMeetingRecordingReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *StartMeetingRecordingReqBodyBuilder) Timezone(timezone int) *StartMeetingRecordingReqBodyBuilder {
	builder.timezone = timezone
	builder.timezoneFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *StartMeetingRecordingReqBodyBuilder) Build() *StartMeetingRecordingReqBody {
	req := &StartMeetingRecordingReqBody{}
	if builder.timezoneFlag {
		req.Timezone = &builder.timezone

	}
	return req
}

/**上传文件path开始**/
type StartMeetingRecordingPathReqBodyBuilder struct {
	timezone     int
	timezoneFlag bool
}

func NewStartMeetingRecordingPathReqBodyBuilder() *StartMeetingRecordingPathReqBodyBuilder {
	builder := &StartMeetingRecordingPathReqBodyBuilder{}
	return builder
}
func (builder *StartMeetingRecordingPathReqBodyBuilder) Timezone(timezone int) *StartMeetingRecordingPathReqBodyBuilder {
	builder.timezone = timezone
	builder.timezoneFlag = true
	return builder
}

func (builder *StartMeetingRecordingPathReqBodyBuilder) Build() (*StartMeetingRecordingReqBody, error) {
	req := &StartMeetingRecordingReqBody{}
	if builder.timezoneFlag {
		req.Timezone = &builder.timezone

	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type StartMeetingRecordingReqBuilder struct {
	meetingId     int64
	meetingIdFlag bool
	body          *StartMeetingRecordingReqBody
	bodyFlag      bool
}

// 生成请求的New构造器
func NewStartMeetingRecordingReqBuilder() *StartMeetingRecordingReqBuilder {
	builder := &StartMeetingRecordingReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *StartMeetingRecordingReqBuilder) MeetingId(meetingId int64) *StartMeetingRecordingReqBuilder {
	builder.meetingId = meetingId
	builder.meetingIdFlag = true
	return builder
}
func (builder *StartMeetingRecordingReqBuilder) Body(body *StartMeetingRecordingReqBody) *StartMeetingRecordingReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *StartMeetingRecordingReqBuilder) Build() *StartMeetingRecordingReq {
	req := &StartMeetingRecordingReq{}
	if builder.meetingIdFlag {
		req.MeetingId = builder.meetingId
	}
	if builder.bodyFlag {
		req.Body = builder.body
	}
	return req
}

type StartMeetingRecordingReqBody struct {
	Timezone *int `json:"timezone,omitempty"`
}

type StartMeetingRecordingReq struct {
	MeetingId int64                         `path:"meeting_id"`
	Body      *StartMeetingRecordingReqBody `body:""`
}

type StartMeetingRecordingResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *StartMeetingRecordingResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type StopMeetingRecordingReqBuilder struct {
	meetingId     int64
	meetingIdFlag bool
}

// 生成请求的New构造器
func NewStopMeetingRecordingReqBuilder() *StopMeetingRecordingReqBuilder {
	builder := &StopMeetingRecordingReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *StopMeetingRecordingReqBuilder) MeetingId(meetingId int64) *StopMeetingRecordingReqBuilder {
	builder.meetingId = meetingId
	builder.meetingIdFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *StopMeetingRecordingReqBuilder) Build() *StopMeetingRecordingReq {
	req := &StopMeetingRecordingReq{}
	if builder.meetingIdFlag {
		req.MeetingId = builder.meetingId
	}
	return req
}

type StopMeetingRecordingReq struct {
	MeetingId int64 `path:"meeting_id"`
}

type StopMeetingRecordingResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *StopMeetingRecordingResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type GetDailyReportReqBuilder struct {
	startTime     int64
	startTimeFlag bool
	endTime       int64
	endTimeFlag   bool
}

// 生成请求的New构造器
func NewGetDailyReportReqBuilder() *GetDailyReportReqBuilder {
	builder := &GetDailyReportReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *GetDailyReportReqBuilder) StartTime(startTime int64) *GetDailyReportReqBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}
func (builder *GetDailyReportReqBuilder) EndTime(endTime int64) *GetDailyReportReqBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *GetDailyReportReqBuilder) Build() *GetDailyReportReq {
	req := &GetDailyReportReq{}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime
	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime
	}
	return req
}

type GetDailyReportReq struct {
	StartTime *int64 `query:"start_time"`
	EndTime   *int64 `query:"end_time"`
}

type GetDailyReportRespData struct {
	MeetingReport *Report `json:"meeting_report,omitempty"`
}

type GetDailyReportResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *GetDailyReportRespData `json:"data"`
}

func (resp *GetDailyReportResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type GetTopUserReportReqBuilder struct {
	startTime      int64
	startTimeFlag  bool
	endTime        int64
	endTimeFlag    bool
	limit          int
	limitFlag      bool
	orderBy        int
	orderByFlag    bool
	userIdType     string
	userIdTypeFlag bool
}

// 生成请求的New构造器
func NewGetTopUserReportReqBuilder() *GetTopUserReportReqBuilder {
	builder := &GetTopUserReportReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *GetTopUserReportReqBuilder) StartTime(startTime int64) *GetTopUserReportReqBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}
func (builder *GetTopUserReportReqBuilder) EndTime(endTime int64) *GetTopUserReportReqBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}
func (builder *GetTopUserReportReqBuilder) Limit(limit int) *GetTopUserReportReqBuilder {
	builder.limit = limit
	builder.limitFlag = true
	return builder
}
func (builder *GetTopUserReportReqBuilder) OrderBy(orderBy int) *GetTopUserReportReqBuilder {
	builder.orderBy = orderBy
	builder.orderByFlag = true
	return builder
}
func (builder *GetTopUserReportReqBuilder) UserIdType(userIdType string) *GetTopUserReportReqBuilder {
	builder.userIdType = userIdType
	builder.userIdTypeFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *GetTopUserReportReqBuilder) Build() *GetTopUserReportReq {
	req := &GetTopUserReportReq{}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime
	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime
	}
	if builder.limitFlag {
		req.Limit = &builder.limit
	}
	if builder.orderByFlag {
		req.OrderBy = &builder.orderBy
	}
	if builder.userIdTypeFlag {
		req.UserIdType = &builder.userIdType
	}
	return req
}

type GetTopUserReportReq struct {
	StartTime  *int64  `query:"start_time"`
	EndTime    *int64  `query:"end_time"`
	Limit      *int    `query:"limit"`
	OrderBy    *int    `query:"order_by"`
	UserIdType *string `query:"user_id_type"`
}

type GetTopUserReportRespData struct {
	TopUserReport []*ReportTopUser `json:"top_user_report,omitempty"`
}

type GetTopUserReportResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *GetTopUserReportRespData `json:"data"`
}

func (resp *GetTopUserReportResp) Success() bool {
	return resp.Code == 0
}

type ApplyReserveReqBodyBuilder struct {
	endTime             int64
	endTimeFlag         bool
	meetingSettings     *ReserveMeetingSetting
	meetingSettingsFlag bool
}

// 生成body的New构造器
func NewApplyReserveReqBodyBuilder() *ApplyReserveReqBodyBuilder {
	builder := &ApplyReserveReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *ApplyReserveReqBodyBuilder) EndTime(endTime int64) *ApplyReserveReqBodyBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}
func (builder *ApplyReserveReqBodyBuilder) MeetingSettings(meetingSettings *ReserveMeetingSetting) *ApplyReserveReqBodyBuilder {
	builder.meetingSettings = meetingSettings
	builder.meetingSettingsFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *ApplyReserveReqBodyBuilder) Build() *ApplyReserveReqBody {
	req := &ApplyReserveReqBody{}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.meetingSettingsFlag {
		req.MeetingSettings = builder.meetingSettings

	}
	return req
}

/**上传文件path开始**/
type ApplyReservePathReqBodyBuilder struct {
	endTime             int64
	endTimeFlag         bool
	meetingSettings     *ReserveMeetingSetting
	meetingSettingsFlag bool
}

func NewApplyReservePathReqBodyBuilder() *ApplyReservePathReqBodyBuilder {
	builder := &ApplyReservePathReqBodyBuilder{}
	return builder
}
func (builder *ApplyReservePathReqBodyBuilder) EndTime(endTime int64) *ApplyReservePathReqBodyBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}
func (builder *ApplyReservePathReqBodyBuilder) MeetingSettings(meetingSettings *ReserveMeetingSetting) *ApplyReservePathReqBodyBuilder {
	builder.meetingSettings = meetingSettings
	builder.meetingSettingsFlag = true
	return builder
}

func (builder *ApplyReservePathReqBodyBuilder) Build() (*ApplyReserveReqBody, error) {
	req := &ApplyReserveReqBody{}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.meetingSettingsFlag {
		req.MeetingSettings = builder.meetingSettings
	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type ApplyReserveReqBuilder struct {
	userIdType     string
	userIdTypeFlag bool
	body           *ApplyReserveReqBody
	bodyFlag       bool
}

// 生成请求的New构造器
func NewApplyReserveReqBuilder() *ApplyReserveReqBuilder {
	builder := &ApplyReserveReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *ApplyReserveReqBuilder) UserIdType(userIdType string) *ApplyReserveReqBuilder {
	builder.userIdType = userIdType
	builder.userIdTypeFlag = true
	return builder
}
func (builder *ApplyReserveReqBuilder) Body(body *ApplyReserveReqBody) *ApplyReserveReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *ApplyReserveReqBuilder) Build() *ApplyReserveReq {
	req := &ApplyReserveReq{}
	if builder.userIdTypeFlag {
		req.UserIdType = &builder.userIdType
	}
	if builder.bodyFlag {
		req.Body = builder.body
	}
	return req
}

type ApplyReserveReqBody struct {
	EndTime         *int64                 `json:"end_time,omitempty,string"`
	MeetingSettings *ReserveMeetingSetting `json:"meeting_settings,omitempty"`
}

type ApplyReserveReq struct {
	UserIdType *string              `query:"user_id_type"`
	Body       *ApplyReserveReqBody `body:""`
}

type ApplyReserveRespData struct {
	Reserve *Reserve `json:"reserve,omitempty"`
}

type ApplyReserveResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *ApplyReserveRespData `json:"data"`
}

func (resp *ApplyReserveResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type DeleteReserveReqBuilder struct {
	reserveId     int64
	reserveIdFlag bool
}

// 生成请求的New构造器
func NewDeleteReserveReqBuilder() *DeleteReserveReqBuilder {
	builder := &DeleteReserveReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *DeleteReserveReqBuilder) ReserveId(reserveId int64) *DeleteReserveReqBuilder {
	builder.reserveId = reserveId
	builder.reserveIdFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *DeleteReserveReqBuilder) Build() *DeleteReserveReq {
	req := &DeleteReserveReq{}
	if builder.reserveIdFlag {
		req.ReserveId = builder.reserveId
	}
	return req
}

type DeleteReserveReq struct {
	ReserveId int64 `path:"reserve_id"`
}

type DeleteReserveResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *DeleteReserveResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type GetReserveReqBuilder struct {
	reserveId      int64
	reserveIdFlag  bool
	userIdType     string
	userIdTypeFlag bool
}

// 生成请求的New构造器
func NewGetReserveReqBuilder() *GetReserveReqBuilder {
	builder := &GetReserveReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *GetReserveReqBuilder) ReserveId(reserveId int64) *GetReserveReqBuilder {
	builder.reserveId = reserveId
	builder.reserveIdFlag = true
	return builder
}
func (builder *GetReserveReqBuilder) UserIdType(userIdType string) *GetReserveReqBuilder {
	builder.userIdType = userIdType
	builder.userIdTypeFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *GetReserveReqBuilder) Build() *GetReserveReq {
	req := &GetReserveReq{}
	if builder.reserveIdFlag {
		req.ReserveId = builder.reserveId
	}
	if builder.userIdTypeFlag {
		req.UserIdType = &builder.userIdType
	}
	return req
}

type GetReserveReq struct {
	ReserveId  int64   `path:"reserve_id"`
	UserIdType *string `query:"user_id_type"`
}

type GetReserveRespData struct {
	Reserve *Reserve `json:"reserve,omitempty"`
}

type GetReserveResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *GetReserveRespData `json:"data"`
}

func (resp *GetReserveResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type GetActiveMeetingReserveReqBuilder struct {
	reserveId            int64
	reserveIdFlag        bool
	withParticipants     bool
	withParticipantsFlag bool
	userIdType           string
	userIdTypeFlag       bool
}

// 生成请求的New构造器
func NewGetActiveMeetingReserveReqBuilder() *GetActiveMeetingReserveReqBuilder {
	builder := &GetActiveMeetingReserveReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *GetActiveMeetingReserveReqBuilder) ReserveId(reserveId int64) *GetActiveMeetingReserveReqBuilder {
	builder.reserveId = reserveId
	builder.reserveIdFlag = true
	return builder
}
func (builder *GetActiveMeetingReserveReqBuilder) WithParticipants(withParticipants bool) *GetActiveMeetingReserveReqBuilder {
	builder.withParticipants = withParticipants
	builder.withParticipantsFlag = true
	return builder
}
func (builder *GetActiveMeetingReserveReqBuilder) UserIdType(userIdType string) *GetActiveMeetingReserveReqBuilder {
	builder.userIdType = userIdType
	builder.userIdTypeFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *GetActiveMeetingReserveReqBuilder) Build() *GetActiveMeetingReserveReq {
	req := &GetActiveMeetingReserveReq{}
	if builder.reserveIdFlag {
		req.ReserveId = builder.reserveId
	}
	if builder.withParticipantsFlag {
		req.WithParticipants = &builder.withParticipants
	}
	if builder.userIdTypeFlag {
		req.UserIdType = &builder.userIdType
	}
	return req
}

type GetActiveMeetingReserveReq struct {
	ReserveId        int64   `path:"reserve_id"`
	WithParticipants *bool   `query:"with_participants"`
	UserIdType       *string `query:"user_id_type"`
}

type GetActiveMeetingReserveRespData struct {
	Meeting *Meeting `json:"meeting,omitempty"`
}

type GetActiveMeetingReserveResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *GetActiveMeetingReserveRespData `json:"data"`
}

func (resp *GetActiveMeetingReserveResp) Success() bool {
	return resp.Code == 0
}

type UpdateReserveReqBodyBuilder struct {
	endTime             int64
	endTimeFlag         bool
	meetingSettings     *ReserveMeetingSetting
	meetingSettingsFlag bool
}

// 生成body的New构造器
func NewUpdateReserveReqBodyBuilder() *UpdateReserveReqBodyBuilder {
	builder := &UpdateReserveReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *UpdateReserveReqBodyBuilder) EndTime(endTime int64) *UpdateReserveReqBodyBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}
func (builder *UpdateReserveReqBodyBuilder) MeetingSettings(meetingSettings *ReserveMeetingSetting) *UpdateReserveReqBodyBuilder {
	builder.meetingSettings = meetingSettings
	builder.meetingSettingsFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *UpdateReserveReqBodyBuilder) Build() *UpdateReserveReqBody {
	req := &UpdateReserveReqBody{}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.meetingSettingsFlag {
		req.MeetingSettings = builder.meetingSettings

	}
	return req
}

/**上传文件path开始**/
type UpdateReservePathReqBodyBuilder struct {
	endTime             int64
	endTimeFlag         bool
	meetingSettings     *ReserveMeetingSetting
	meetingSettingsFlag bool
}

func NewUpdateReservePathReqBodyBuilder() *UpdateReservePathReqBodyBuilder {
	builder := &UpdateReservePathReqBodyBuilder{}
	return builder
}
func (builder *UpdateReservePathReqBodyBuilder) EndTime(endTime int64) *UpdateReservePathReqBodyBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}
func (builder *UpdateReservePathReqBodyBuilder) MeetingSettings(meetingSettings *ReserveMeetingSetting) *UpdateReservePathReqBodyBuilder {
	builder.meetingSettings = meetingSettings
	builder.meetingSettingsFlag = true
	return builder
}

func (builder *UpdateReservePathReqBodyBuilder) Build() (*UpdateReserveReqBody, error) {
	req := &UpdateReserveReqBody{}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.meetingSettingsFlag {
		req.MeetingSettings = builder.meetingSettings
	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type UpdateReserveReqBuilder struct {
	reserveId      int64
	reserveIdFlag  bool
	userIdType     string
	userIdTypeFlag bool
	body           *UpdateReserveReqBody
	bodyFlag       bool
}

// 生成请求的New构造器
func NewUpdateReserveReqBuilder() *UpdateReserveReqBuilder {
	builder := &UpdateReserveReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *UpdateReserveReqBuilder) ReserveId(reserveId int64) *UpdateReserveReqBuilder {
	builder.reserveId = reserveId
	builder.reserveIdFlag = true
	return builder
}
func (builder *UpdateReserveReqBuilder) UserIdType(userIdType string) *UpdateReserveReqBuilder {
	builder.userIdType = userIdType
	builder.userIdTypeFlag = true
	return builder
}
func (builder *UpdateReserveReqBuilder) Body(body *UpdateReserveReqBody) *UpdateReserveReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *UpdateReserveReqBuilder) Build() *UpdateReserveReq {
	req := &UpdateReserveReq{}
	if builder.reserveIdFlag {
		req.ReserveId = builder.reserveId
	}
	if builder.userIdTypeFlag {
		req.UserIdType = &builder.userIdType
	}
	if builder.bodyFlag {
		req.Body = builder.body
	}
	return req
}

type UpdateReserveReqBody struct {
	EndTime         *int64                 `json:"end_time,omitempty,string"`
	MeetingSettings *ReserveMeetingSetting `json:"meeting_settings,omitempty"`
}

type UpdateReserveReq struct {
	ReserveId  int64                 `path:"reserve_id"`
	UserIdType *string               `query:"user_id_type"`
	Body       *UpdateReserveReqBody `body:""`
}

type UpdateReserveRespData struct {
	Reserve *Reserve `json:"reserve,omitempty"`
}

type UpdateReserveResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *UpdateReserveRespData `json:"data"`
}

func (resp *UpdateReserveResp) Success() bool {
	return resp.Code == 0
}

/*1.4 生成请求的builder结构体*/
type QueryRoomConfigReqBuilder struct {
	scope          int
	scopeFlag      bool
	countryId      string
	countryIdFlag  bool
	districtId     string
	districtIdFlag bool
	buildingId     string
	buildingIdFlag bool
	floorName      string
	floorNameFlag  bool
	roomId         string
	roomIdFlag     bool
}

// 生成请求的New构造器
func NewQueryRoomConfigReqBuilder() *QueryRoomConfigReqBuilder {
	builder := &QueryRoomConfigReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *QueryRoomConfigReqBuilder) Scope(scope int) *QueryRoomConfigReqBuilder {
	builder.scope = scope
	builder.scopeFlag = true
	return builder
}
func (builder *QueryRoomConfigReqBuilder) CountryId(countryId string) *QueryRoomConfigReqBuilder {
	builder.countryId = countryId
	builder.countryIdFlag = true
	return builder
}
func (builder *QueryRoomConfigReqBuilder) DistrictId(districtId string) *QueryRoomConfigReqBuilder {
	builder.districtId = districtId
	builder.districtIdFlag = true
	return builder
}
func (builder *QueryRoomConfigReqBuilder) BuildingId(buildingId string) *QueryRoomConfigReqBuilder {
	builder.buildingId = buildingId
	builder.buildingIdFlag = true
	return builder
}
func (builder *QueryRoomConfigReqBuilder) FloorName(floorName string) *QueryRoomConfigReqBuilder {
	builder.floorName = floorName
	builder.floorNameFlag = true
	return builder
}
func (builder *QueryRoomConfigReqBuilder) RoomId(roomId string) *QueryRoomConfigReqBuilder {
	builder.roomId = roomId
	builder.roomIdFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *QueryRoomConfigReqBuilder) Build() *QueryRoomConfigReq {
	req := &QueryRoomConfigReq{}
	if builder.scopeFlag {
		req.Scope = &builder.scope
	}
	if builder.countryIdFlag {
		req.CountryId = &builder.countryId
	}
	if builder.districtIdFlag {
		req.DistrictId = &builder.districtId
	}
	if builder.buildingIdFlag {
		req.BuildingId = &builder.buildingId
	}
	if builder.floorNameFlag {
		req.FloorName = &builder.floorName
	}
	if builder.roomIdFlag {
		req.RoomId = &builder.roomId
	}
	return req
}

type QueryRoomConfigReq struct {
	Scope      *int    `query:"scope"`
	CountryId  *string `query:"country_id"`
	DistrictId *string `query:"district_id"`
	BuildingId *string `query:"building_id"`
	FloorName  *string `query:"floor_name"`
	RoomId     *string `query:"room_id"`
}

type QueryRoomConfigRespData struct {
	RoomBackground        *string             `json:"room_background,omitempty"`
	DisplayBackground     *string             `json:"display_background,omitempty"`
	DigitalSignage        *RoomDigitalSignage `json:"digital_signage,omitempty"`
	RoomBoxDigitalSignage *RoomDigitalSignage `json:"room_box_digital_signage,omitempty"`
}

type QueryRoomConfigResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
	Data *QueryRoomConfigRespData `json:"data"`
}

func (resp *QueryRoomConfigResp) Success() bool {
	return resp.Code == 0
}

type SetRoomConfigReqBodyBuilder struct {
	scope          int
	scopeFlag      bool
	countryId      string
	countryIdFlag  bool
	districtId     string
	districtIdFlag bool
	buildingId     string
	buildingIdFlag bool
	floorName      string
	floorNameFlag  bool
	roomId         string
	roomIdFlag     bool
	roomConfig     *RoomConfig
	roomConfigFlag bool
}

// 生成body的New构造器
func NewSetRoomConfigReqBodyBuilder() *SetRoomConfigReqBodyBuilder {
	builder := &SetRoomConfigReqBodyBuilder{}
	return builder
}

/*1.2 生成body的builder属性方法*/
func (builder *SetRoomConfigReqBodyBuilder) Scope(scope int) *SetRoomConfigReqBodyBuilder {
	builder.scope = scope
	builder.scopeFlag = true
	return builder
}
func (builder *SetRoomConfigReqBodyBuilder) CountryId(countryId string) *SetRoomConfigReqBodyBuilder {
	builder.countryId = countryId
	builder.countryIdFlag = true
	return builder
}
func (builder *SetRoomConfigReqBodyBuilder) DistrictId(districtId string) *SetRoomConfigReqBodyBuilder {
	builder.districtId = districtId
	builder.districtIdFlag = true
	return builder
}
func (builder *SetRoomConfigReqBodyBuilder) BuildingId(buildingId string) *SetRoomConfigReqBodyBuilder {
	builder.buildingId = buildingId
	builder.buildingIdFlag = true
	return builder
}
func (builder *SetRoomConfigReqBodyBuilder) FloorName(floorName string) *SetRoomConfigReqBodyBuilder {
	builder.floorName = floorName
	builder.floorNameFlag = true
	return builder
}
func (builder *SetRoomConfigReqBodyBuilder) RoomId(roomId string) *SetRoomConfigReqBodyBuilder {
	builder.roomId = roomId
	builder.roomIdFlag = true
	return builder
}
func (builder *SetRoomConfigReqBodyBuilder) RoomConfig(roomConfig *RoomConfig) *SetRoomConfigReqBodyBuilder {
	builder.roomConfig = roomConfig
	builder.roomConfigFlag = true
	return builder
}

/*1.3 生成body的build方法*/
func (builder *SetRoomConfigReqBodyBuilder) Build() *SetRoomConfigReqBody {
	req := &SetRoomConfigReqBody{}
	if builder.scopeFlag {
		req.Scope = &builder.scope

	}
	if builder.countryIdFlag {
		req.CountryId = &builder.countryId

	}
	if builder.districtIdFlag {
		req.DistrictId = &builder.districtId

	}
	if builder.buildingIdFlag {
		req.BuildingId = &builder.buildingId

	}
	if builder.floorNameFlag {
		req.FloorName = &builder.floorName

	}
	if builder.roomIdFlag {
		req.RoomId = &builder.roomId

	}
	if builder.roomConfigFlag {
		req.RoomConfig = builder.roomConfig

	}
	return req
}

/**上传文件path开始**/
type SetRoomConfigPathReqBodyBuilder struct {
	scope          int
	scopeFlag      bool
	countryId      string
	countryIdFlag  bool
	districtId     string
	districtIdFlag bool
	buildingId     string
	buildingIdFlag bool
	floorName      string
	floorNameFlag  bool
	roomId         string
	roomIdFlag     bool
	roomConfig     *RoomConfig
	roomConfigFlag bool
}

func NewSetRoomConfigPathReqBodyBuilder() *SetRoomConfigPathReqBodyBuilder {
	builder := &SetRoomConfigPathReqBodyBuilder{}
	return builder
}
func (builder *SetRoomConfigPathReqBodyBuilder) Scope(scope int) *SetRoomConfigPathReqBodyBuilder {
	builder.scope = scope
	builder.scopeFlag = true
	return builder
}
func (builder *SetRoomConfigPathReqBodyBuilder) CountryId(countryId string) *SetRoomConfigPathReqBodyBuilder {
	builder.countryId = countryId
	builder.countryIdFlag = true
	return builder
}
func (builder *SetRoomConfigPathReqBodyBuilder) DistrictId(districtId string) *SetRoomConfigPathReqBodyBuilder {
	builder.districtId = districtId
	builder.districtIdFlag = true
	return builder
}
func (builder *SetRoomConfigPathReqBodyBuilder) BuildingId(buildingId string) *SetRoomConfigPathReqBodyBuilder {
	builder.buildingId = buildingId
	builder.buildingIdFlag = true
	return builder
}
func (builder *SetRoomConfigPathReqBodyBuilder) FloorName(floorName string) *SetRoomConfigPathReqBodyBuilder {
	builder.floorName = floorName
	builder.floorNameFlag = true
	return builder
}
func (builder *SetRoomConfigPathReqBodyBuilder) RoomId(roomId string) *SetRoomConfigPathReqBodyBuilder {
	builder.roomId = roomId
	builder.roomIdFlag = true
	return builder
}
func (builder *SetRoomConfigPathReqBodyBuilder) RoomConfig(roomConfig *RoomConfig) *SetRoomConfigPathReqBodyBuilder {
	builder.roomConfig = roomConfig
	builder.roomConfigFlag = true
	return builder
}

func (builder *SetRoomConfigPathReqBodyBuilder) Build() (*SetRoomConfigReqBody, error) {
	req := &SetRoomConfigReqBody{}
	if builder.scopeFlag {
		req.Scope = &builder.scope

	}
	if builder.countryIdFlag {
		req.CountryId = &builder.countryId

	}
	if builder.districtIdFlag {
		req.DistrictId = &builder.districtId

	}
	if builder.buildingIdFlag {
		req.BuildingId = &builder.buildingId

	}
	if builder.floorNameFlag {
		req.FloorName = &builder.floorName

	}
	if builder.roomIdFlag {
		req.RoomId = &builder.roomId

	}
	if builder.roomConfigFlag {
		req.RoomConfig = builder.roomConfig
	}
	return req, nil
}

/**上传文件path结束**/

/*1.4 生成请求的builder结构体*/
type SetRoomConfigReqBuilder struct {
	body     *SetRoomConfigReqBody
	bodyFlag bool
}

// 生成请求的New构造器
func NewSetRoomConfigReqBuilder() *SetRoomConfigReqBuilder {
	builder := &SetRoomConfigReqBuilder{}
	return builder
}

/*1.5 生成请求的builder属性方法*/
func (builder *SetRoomConfigReqBuilder) Body(body *SetRoomConfigReqBody) *SetRoomConfigReqBuilder {
	builder.body = body
	builder.bodyFlag = true
	return builder
}

/*1.5 生成请求的builder的build方法*/
func (builder *SetRoomConfigReqBuilder) Build() *SetRoomConfigReq {
	req := &SetRoomConfigReq{}
	if builder.bodyFlag {
		req.Body = builder.body
	}
	return req
}

type SetRoomConfigReqBody struct {
	Scope      *int        `json:"scope,omitempty"`
	CountryId  *string     `json:"country_id,omitempty"`
	DistrictId *string     `json:"district_id,omitempty"`
	BuildingId *string     `json:"building_id,omitempty"`
	FloorName  *string     `json:"floor_name,omitempty"`
	RoomId     *string     `json:"room_id,omitempty"`
	RoomConfig *RoomConfig `json:"room_config,omitempty"`
}

type SetRoomConfigReq struct {
	Body *SetRoomConfigReqBody `body:""`
}

type SetRoomConfigResp struct {
	*core.RawResponse `json:"-"`
	core.CodeError
}

func (resp *SetRoomConfigResp) Success() bool {
	return resp.Code == 0
}

/**生成消息事件结构体 **/

type MeetingJoinMeetingEventData struct {
	Meeting  *MeetingEventMeeting `json:"meeting,omitempty"`
	Operator *MeetingEventUser    `json:"operator,omitempty"`
}

type MeetingJoinMeetingEvent struct {
	*event.EventV2Base
	Event *MeetingJoinMeetingEventData `json:"event"`
}

type MeetingLeaveMeetingEventData struct {
	Meeting     *MeetingEventMeeting `json:"meeting,omitempty"`
	Operator    *MeetingEventUser    `json:"operator,omitempty"`
	LeaveReason *int                 `json:"leave_reason,omitempty"`
}

type MeetingLeaveMeetingEvent struct {
	*event.EventV2Base
	Event *MeetingLeaveMeetingEventData `json:"event"`
}

type MeetingMeetingEndedEventData struct {
	Meeting  *MeetingEventMeeting `json:"meeting,omitempty"`
	Operator *MeetingEventUser    `json:"operator,omitempty"`
}

type MeetingMeetingEndedEvent struct {
	*event.EventV2Base
	Event *MeetingMeetingEndedEventData `json:"event"`
}

type MeetingMeetingStartedEventData struct {
	Meeting  *MeetingEventMeeting `json:"meeting,omitempty"`
	Operator *MeetingEventUser    `json:"operator,omitempty"`
}

type MeetingMeetingStartedEvent struct {
	*event.EventV2Base
	Event *MeetingMeetingStartedEventData `json:"event"`
}

type MeetingRecordingEndedEventData struct {
	Meeting  *MeetingEventMeeting `json:"meeting,omitempty"`
	Operator *MeetingEventUser    `json:"operator,omitempty"`
}

type MeetingRecordingEndedEvent struct {
	*event.EventV2Base
	Event *MeetingRecordingEndedEventData `json:"event"`
}

type MeetingRecordingReadyEventData struct {
	Meeting  *MeetingEventMeeting `json:"meeting,omitempty"`
	Url      *string              `json:"url,omitempty"`
	Duration *int64               `json:"duration,omitempty,string"`
}

type MeetingRecordingReadyEvent struct {
	*event.EventV2Base
	Event *MeetingRecordingReadyEventData `json:"event"`
}

type MeetingRecordingStartedEventData struct {
	Meeting  *MeetingEventMeeting `json:"meeting,omitempty"`
	Operator *MeetingEventUser    `json:"operator,omitempty"`
}

type MeetingRecordingStartedEvent struct {
	*event.EventV2Base
	Event *MeetingRecordingStartedEventData `json:"event"`
}

type MeetingShareEndedEventData struct {
	Meeting  *MeetingEventMeeting `json:"meeting,omitempty"`
	Operator *MeetingEventUser    `json:"operator,omitempty"`
}

type MeetingShareEndedEvent struct {
	*event.EventV2Base
	Event *MeetingShareEndedEventData `json:"event"`
}

type MeetingShareStartedEventData struct {
	Meeting  *MeetingEventMeeting `json:"meeting,omitempty"`
	Operator *MeetingEventUser    `json:"operator,omitempty"`
}

type MeetingShareStartedEvent struct {
	*event.EventV2Base
	Event *MeetingShareStartedEventData `json:"event"`
}

/* 生成请求的builder构造器*/
/*1.1 生成body的builder结构体*/
/**如果是分页查询，则添加迭代器定义**/
type ListByNoMeetingIterator struct {
	nextPageToken *string
	items         []*Meeting
	index         int
	limit         int
	ctx           context.Context
	req           *ListByNoMeetingReq
	listFunc      func(ctx context.Context, req *ListByNoMeetingReq, options ...core.RequestOptionFunc) (*ListByNoMeetingResp, error)
	options       []core.RequestOptionFunc
	curlNum       int
}

func (iterator *ListByNoMeetingIterator) Next() (bool, *Meeting, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum > iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.PageToken = iterator.nextPageToken
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.MeetingBriefs) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.MeetingBriefs
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListByNoMeetingIterator) NextPageToken() *string {
	return iterator.nextPageToken
}
